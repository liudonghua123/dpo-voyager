/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./ui/explorer/MainView.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../libs/ff-browser/source/ManipTarget.ts":
/*!***************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-browser/source/ManipTarget.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
////////////////////////////////////////////////////////////////////////////////
const _DRAG_DISTANCE = 2;
class ManipTarget {
    constructor() {
        this.next = null;
        this.activePositions = [];
        this.activeType = "";
        this.centerX = 0;
        this.centerY = 0;
        this.startX = 0;
        this.startY = 0;
        this.isDragging = false;
        this.onPointerDown = this.onPointerDown.bind(this);
        this.onPointerMove = this.onPointerMove.bind(this);
        this.onPointerUpOrCancel = this.onPointerUpOrCancel.bind(this);
        this.onDoubleClick = this.onDoubleClick.bind(this);
        this.onContextMenu = this.onContextMenu.bind(this);
        this.onWheel = this.onWheel.bind(this);
    }
    onPointerDown(event) {
        // only events of a single pointer type can be handled at a time
        if (this.activeType && event.pointerType !== this.activeType) {
            return;
        }
        if (this.activePositions.length === 0) {
            this.startX = event.clientX;
            this.startY = event.clientY;
            this.isDragging = false;
        }
        this.activeType = event.pointerType;
        this.activePositions.push({
            id: event.pointerId,
            clientX: event.clientX,
            clientY: event.clientY
        });
        event.currentTarget.setPointerCapture(event.pointerId);
        const manipEvent = this.createManipPointerEvent(event, "pointer-down");
        if (this.sendPointerEvent(manipEvent)) {
            event.stopPropagation();
        }
        event.preventDefault();
    }
    onPointerMove(event) {
        const activePositions = this.activePositions;
        for (let i = 0, n = activePositions.length; i < n; ++i) {
            const position = activePositions[i];
            if (event.pointerId === position.id) {
                position.clientX = event.clientX;
                position.clientY = event.clientY;
            }
        }
        if (activePositions.length > 0 && !this.isDragging) {
            const delta = Math.abs(event.clientX - this.startX) + Math.abs(event.clientY - this.startY);
            if (delta > _DRAG_DISTANCE) {
                this.isDragging = true;
            }
        }
        const eventType = activePositions.length ? "pointer-move" : "pointer-hover";
        const manipEvent = this.createManipPointerEvent(event, eventType);
        if (this.sendPointerEvent(manipEvent)) {
            event.stopPropagation();
        }
        event.preventDefault();
    }
    onPointerUpOrCancel(event) {
        const activePositions = this.activePositions;
        let found = false;
        for (let i = 0, n = activePositions.length; i < n; ++i) {
            if (event.pointerId === activePositions[i].id) {
                activePositions.splice(i, 1);
                found = true;
                break;
            }
        }
        if (!found) {
            //console.warn("orphan pointer up/cancel event #id", event.pointerId);
            return;
        }
        const manipEvent = this.createManipPointerEvent(event, "pointer-up");
        if (activePositions.length === 0) {
            this.activeType = "";
        }
        if (this.sendPointerEvent(manipEvent)) {
            event.stopPropagation();
        }
        event.preventDefault();
    }
    onDoubleClick(event) {
        const consumed = this.sendTriggerEvent(this.createManipTriggerEvent(event, "double-click"));
        if (consumed) {
            event.preventDefault();
        }
    }
    onContextMenu(event) {
        this.sendTriggerEvent(this.createManipTriggerEvent(event, "context-menu"));
        // prevent default context menu regardless of whether event was consumed or not
        event.preventDefault();
    }
    onWheel(event) {
        const consumed = this.sendTriggerEvent(this.createManipTriggerEvent(event, "wheel"));
        if (consumed) {
            event.preventDefault();
        }
    }
    createManipPointerEvent(event, type) {
        // calculate center and movement
        let centerX = 0;
        let centerY = 0;
        let localX = 0;
        let localY = 0;
        let movementX = 0;
        let movementY = 0;
        const positions = this.activePositions;
        const count = positions.length;
        if (count > 0) {
            for (let i = 0; i < count; ++i) {
                centerX += positions[i].clientX;
                centerY += positions[i].clientY;
            }
            centerX /= count;
            centerY /= count;
            if (type === "pointer-move" || type === "pointer-hover") {
                movementX = centerX - this.centerX;
                movementY = centerY - this.centerY;
            }
            this.centerX = centerX;
            this.centerY = centerY;
        }
        else {
            centerX = this.centerX;
            centerY = this.centerY;
        }
        const element = event.currentTarget;
        if (element instanceof Element) {
            const rect = element.getBoundingClientRect();
            localX = event.clientX - rect.left;
            localY = event.clientY - rect.top;
        }
        return {
            originalEvent: event,
            type: type,
            source: event.pointerType,
            isPrimary: event.isPrimary,
            isDragging: this.isDragging,
            activePositions: positions,
            pointerCount: count,
            centerX,
            centerY,
            localX,
            localY,
            movementX,
            movementY,
            shiftKey: event.shiftKey,
            ctrlKey: event.ctrlKey,
            altKey: event.altKey,
            metaKey: event.metaKey
        };
    }
    createManipTriggerEvent(event, type) {
        let wheel = 0;
        if (type === "wheel") {
            wheel = event.deltaY;
        }
        let localX = 0;
        let localY = 0;
        const element = event.currentTarget;
        if (element instanceof Element) {
            const rect = element.getBoundingClientRect();
            localX = event.clientX - rect.left;
            localY = event.clientY - rect.top;
        }
        return {
            originalEvent: event,
            type,
            wheel,
            centerX: event.clientX,
            centerY: event.clientY,
            localX,
            localY,
            shiftKey: event.shiftKey,
            ctrlKey: event.ctrlKey,
            altKey: event.altKey,
            metaKey: event.metaKey
        };
    }
    sendPointerEvent(event) {
        return this.next && this.next.onPointer(event);
    }
    sendTriggerEvent(event) {
        return this.next && this.next.onTrigger(event);
    }
}
exports.default = ManipTarget;


/***/ }),

/***/ "../../libs/ff-browser/source/download.ts":
/*!************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-browser/source/download.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const _triggerDownload = function (dataURL, fileName) {
    const link = document.createElement("a");
    link.download = fileName;
    link.href = dataURL;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
};
exports.default = {
    /**
     * Prompts the user to download the provided text content as a file.
     * @param text text string to include.
     * @param fileName name of the downloadable file.
     */
    text: function (text, fileName) {
        const dataURL = window.URL.createObjectURL(new Blob([text], { type: "text/plain" }));
        _triggerDownload(dataURL, fileName);
    },
    /**
     * Prompts the user to download the provided JSON content as a file.
     * @param json JSON data to include.
     * @param fileName name of the downloadable file.
     */
    json: function (json, fileName) {
        if (typeof json === "object") {
            json = JSON.stringify(json);
        }
        const dataURL = window.URL.createObjectURL(new Blob([json], { type: "text/json" }));
        _triggerDownload(dataURL, fileName);
    },
    /**
     * Prompts the user to download the content from the given URL.
     * @param url URL of the content to be downloaded.
     * @param fileName name of the downloadable file.
     */
    url: function (url, fileName) {
        _triggerDownload(url, fileName);
    }
};


/***/ }),

/***/ "../../libs/ff-browser/source/fetch.ts":
/*!*********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-browser/source/fetch.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    json: function (url, method, data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (data && typeof data !== "string") {
                data = JSON.stringify(data);
            }
            const params = {
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                },
                method: method,
                credentials: "same-origin",
                body: data
            };
            return fetch(url, params).then(result => {
                if (!result.ok) {
                    const message = `fetch.json (${method} at '${url}'), error: ${result.status} - ${result.statusText}`;
                    console.warn(message);
                    throw new Error(message);
                }
                return result.json();
            }).catch(error => {
                console.warn(`fetch.json (${method} at '${url}'), error: ${error.message}`);
                throw error;
            });
        });
    },
    text: function (url, method, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = {
                headers: {
                    "Accept": "text/plain",
                    "Content-Type": "text/plain",
                },
                method: method,
                credentials: "include",
                body: data
            };
            return fetch(url, params).then(result => {
                if (!result.ok) {
                    throw new Error(`status: ${result.status}`);
                }
                return result.text();
            }).catch(error => {
                console.warn(`fetch.text (${method} at '${url}'), error: ${error.message}`);
                throw error;
            });
        });
    },
    file: function (url, method, file, detectType = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = {
                method,
                credentials: "include",
                body: file
            };
            if (!detectType) {
                params.headers = {
                    "Content-Type": "application/octet-stream"
                };
            }
            return fetch(url, params).then(result => {
                if (!result.ok) {
                    throw new Error(`status: ${result.status}`);
                }
                return result;
            }).catch(error => {
                console.warn(`fetch.file (${method} at '${url}'), error: ${error.message}`);
                throw error;
            });
        });
    },
    buffer: function (url, method, buffer) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = {
                headers: {
                    "Accept": "application/octet-stream",
                    "Content-Type": "application/octet-stream"
                },
                method,
                credentials: "include",
                body: buffer
            };
            return fetch(url, params).then(result => {
                if (!result.ok) {
                    throw new Error(`status: ${result.status}`);
                }
                return result.arrayBuffer();
            }).catch(error => {
                console.warn(`fetch.buffer (${method} at '${url}'), error: ${error.message}`);
                throw error;
            });
        });
    }
};


/***/ }),

/***/ "../../libs/ff-browser/source/parseUrlParameter.ts":
/*!*********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-browser/source/parseUrlParameter.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the value of the variable in the URL query string with the given name.
 * Source: https://stackoverflow.com/questions/901115
 * @param {string} name Name of the variable to look for.
 * @param {string} url URL to search. If omitted, the browser's current location is used.
 * @returns {any} undefined if not found, "" if empty, string value of variable otherwise
 */
function default_1(name, url) {
    if (!url) {
        url = window.location.href;
    }
    name = name.replace(/[\[\]]/g, '\\$&');
    const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');
    const results = regex.exec(url);
    if (!results) {
        return undefined;
    }
    if (!results[2]) {
        return "";
    }
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}
exports.default = default_1;


/***/ }),

/***/ "../../libs/ff-core/source/Color.ts":
/*!******************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/Color.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Vector3_1 = __webpack_require__(/*! ./Vector3 */ "../../libs/ff-core/source/Vector3.ts");
exports.Vector3 = Vector3_1.default;
const Vector4_1 = __webpack_require__(/*! ./Vector4 */ "../../libs/ff-core/source/Vector4.ts");
exports.Vector4 = Vector4_1.default;
/**
 * RGB color with alpha channel. The class is compatible with Vector4,
 * the field names for the colors are x (red), y (green), z (blue), and w (alpha).
 *
 * Source for RGB/HSL/HSV conversions: https://gist.github.com/mjackson/5311256
 */
class Color {
    constructor(red = 0, green = 0, blue = 0, alpha = 1) {
        if (red instanceof Color) {
            this.x = red.x;
            this.y = red.y;
            this.z = red.z;
            this.w = red.w;
        }
        else if (Array.isArray(red)) {
            this.x = red[0] || 0;
            this.y = red[1] || 0;
            this.z = red[2] || 0;
            this.w = red[3] !== undefined ? red[3] : 1;
        }
        else if (typeof red === "string") {
            this.setString(red);
        }
        else {
            this.x = red;
            this.y = green;
            this.z = blue;
            this.w = alpha;
        }
    }
    static fromString(color) {
        return (new Color()).setString(color);
    }
    static fromArray(color) {
        return new Color(color);
    }
    get r() { return this.x; }
    get g() { return this.y; }
    get b() { return this.z; }
    get a() { return this.w; }
    set r(value) { this.x = value; }
    set g(value) { this.y = value; }
    set b(value) { this.z = value; }
    set a(value) { this.w = value; }
    get red() { return this.x; }
    get green() { return this.y; }
    get blue() { return this.z; }
    get alpha() { return this.w; }
    set red(value) { this.x = value; }
    set green(value) { this.y = value; }
    set blue(value) { this.z = value; }
    set alpha(value) { this.w = value; }
    get redByte() { return Math.floor(this.x * 255); }
    get greenByte() { return Math.floor(this.y * 255); }
    get blueByte() { return Math.floor(this.z * 255); }
    get alphaByte() { return Math.floor(this.w * 255); }
    set redByte(value) { this.x = value / 255.0; }
    set greenByte(value) { this.y = value / 255.0; }
    set blueByte(value) { this.z = value / 255.0; }
    set alphaByte(value) { this.w = value / 255.0; }
    inverseMultiply(factor) {
        this.x = this.x * (1 - factor) + factor;
        this.y = this.y * (1 - factor) + factor;
        this.z = this.z * (1 - factor) + factor;
        return this;
    }
    multiply(factor) {
        this.x *= factor;
        this.y *= factor;
        this.z *= factor;
        return this;
    }
    copy(color) {
        this.x = color.x;
        this.y = color.y;
        this.z = color.z;
        this.w = color.w;
    }
    clone() {
        return new Color(this.x, this.y, this.z, this.w);
    }
    set(red, green, blue, alpha) {
        this.x = red;
        this.y = green;
        this.z = blue;
        this.w = alpha === undefined ? 1 : alpha;
        return this;
    }
    setBytes(red, green, blue, alpha) {
        this.x = red / 255;
        this.y = green / 255;
        this.z = blue / 255;
        this.w = alpha === undefined ? 1 : alpha / 255;
        return this;
    }
    setUInt24RGB(x) {
        this.x = (x >> 16) & 0xff;
        this.y = (x >> 8) & 0xff;
        this.z = x & 0xff;
        this.w = 1;
        return this;
    }
    setUInt32RGBA(x) {
        this.x = (x >> 24) & 0xff;
        this.y = (x >> 16) & 0xff;
        this.z = (x >> 8) & 0xff;
        this.w = x & 0xff;
        this.w = 1;
        return this;
    }
    setRed(red) {
        this.x = red;
        return this;
    }
    setGreen(green) {
        this.y = green;
        return this;
    }
    setBlue(blue) {
        this.z = blue;
        return this;
    }
    setAlpha(alpha) {
        this.w = alpha;
        return this;
    }
    setRedByte(red) {
        this.x = red / 255;
        return this;
    }
    setGreenByte(green) {
        this.y = green / 255;
        return this;
    }
    setBlueByte(blue) {
        this.z = blue / 255;
        return this;
    }
    setAlphaByte(alpha) {
        this.w = alpha / 255;
        return this;
    }
    setHSV(hue, saturation = 1, value = 1, alpha) {
        if (typeof hue === "object") {
            saturation = hue.y;
            value = hue.z;
            alpha = hue["w"] !== undefined ? hue["w"] : alpha;
            hue = hue.x;
        }
        const i = Math.floor(hue / 60);
        const f = hue / 60 - i;
        const p = value * (1 - saturation);
        const q = value * (1 - f * saturation);
        const t = value * (1 - (1 - f) * saturation);
        let r, g, b;
        switch (i % 6) {
            case 0:
                r = value;
                g = t;
                b = p;
                break;
            case 1:
                r = q;
                g = value;
                b = p;
                break;
            case 2:
                r = p;
                g = value;
                b = t;
                break;
            case 3:
                r = p;
                g = q;
                b = value;
                break;
            case 4:
                r = t;
                g = p;
                b = value;
                break;
            case 5:
                r = value;
                g = p;
                b = q;
                break;
        }
        this.x = r;
        this.y = g;
        this.z = b;
        if (alpha !== undefined) {
            this.w = alpha;
        }
        return this;
    }
    setHSL(hue, saturation = 1, luminance = 1, alpha) {
        if (typeof hue === "object") {
            saturation = hue.y;
            luminance = hue.z;
            alpha = hue["w"] !== undefined ? hue["w"] : alpha;
            hue = hue.x;
        }
        if (saturation === 0) {
            this.x = this.y = this.z = luminance;
        }
        else {
            hue /= 360;
            function hue2rgb(p, q, t) {
                if (t < 0)
                    t += 1;
                if (t > 1)
                    t -= 1;
                if (t < 1 / 6)
                    return p + (q - p) * 6 * t;
                if (t < 1 / 2)
                    return q;
                if (t < 2 / 3)
                    return p + (q - p) * (2 / 3 - t) * 6;
                return p;
            }
            var q = luminance < 0.5 ? luminance * (1 + saturation) : luminance + saturation - luminance * saturation;
            var p = 2 * luminance - q;
            this.x = hue2rgb(p, q, hue + 1 / 3);
            this.y = hue2rgb(p, q, hue);
            this.z = hue2rgb(p, q, hue - 1 / 3);
        }
        if (alpha !== undefined) {
            this.w = alpha;
        }
        return this;
    }
    fromArray(arr) {
        this.x = arr[0] || 0;
        this.y = arr[1] || 0;
        this.z = arr[2] || 0;
        this.w = arr[3] !== undefined ? arr[3] : 1;
    }
    setString(color, alpha = 1, throws = true) {
        color = color.trim().toLowerCase();
        color = Color.presets[color] || color;
        let result = color.match(/^#?([0-9a-f]{3})$/i);
        if (result) {
            const text = result[1];
            const factor = 1 / 15;
            this.x = Number.parseInt(text.charAt(0), 16) * factor;
            this.y = Number.parseInt(text.charAt(1), 16) * factor;
            this.z = Number.parseInt(text.charAt(2), 16) * factor;
            this.w = alpha;
            return this;
        }
        result = color.match(/^#?([0-9a-f]{6})$/i);
        if (result) {
            const text = result[1];
            const factor = 1 / 255;
            this.x = Number.parseInt(text.substr(0, 2), 16) * factor;
            this.y = Number.parseInt(text.substr(2, 2), 16) * factor;
            this.z = Number.parseInt(text.substr(4, 2), 16) * factor;
            this.w = alpha;
            return this;
        }
        if (color.indexOf("rgb") === 0) {
            let result = color.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);
            if (result) {
                const factor = 1 / 255;
                this.x = Number.parseInt(result[1]) * factor;
                this.y = Number.parseInt(result[2]) * factor;
                this.z = Number.parseInt(result[3]) * factor;
                this.w = alpha;
                return this;
            }
            result = color.match(/^rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+.*\d*)\s*\)$/i);
            if (result) {
                const factor = 1 / 255;
                this.x = Number.parseInt(result[1]) * factor;
                this.y = Number.parseInt(result[2]) * factor;
                this.z = Number.parseInt(result[3]) * factor;
                this.w = Number.parseFloat(result[4]);
                return this;
            }
        }
        if (color.indexOf("hsl") === 0) {
            let result = color.match(/(\d+(\.\d+)?)/g);
            if (result) {
                this.setHSL(Number.parseFloat(result[0]), Number.parseFloat(result[1]) * 0.01, Number.parseFloat(result[2]) * 0.01, result[3] !== undefined ? Number.parseFloat(result[3]) : alpha);
            }
            return this;
        }
        if (throws) {
            throw new RangeError("failed to parse color from string: " + color);
        }
        return this;
    }
    toUInt24RGB() {
        return Math.floor(this.x * 255) << 16
            + Math.floor(this.y * 255) << 8
            + Math.floor(this.z * 255);
    }
    toUInt32RGBA() {
        return Math.floor(this.x * 255) << 24
            + Math.floor(this.y * 255) << 16
            + Math.floor(this.z * 255) << 8
            + Math.floor(this.w * 255);
    }
    toVector3(rgb) {
        if (rgb) {
            rgb.x = this.r;
            rgb.y = this.g;
            rgb.z = this.b;
            return rgb;
        }
        return new Vector3_1.default(this.r, this.g, this.b);
    }
    toVector4(rgba) {
        if (rgba) {
            rgba.x = this.r;
            rgba.y = this.g;
            rgba.z = this.b;
            rgba.w = this.a;
            return rgba;
        }
        return new Vector4_1.default(this.r, this.g, this.b, this.a);
    }
    toHSV(hsv) {
        let r = this.x, g = this.y, b = this.z;
        let min = Math.min(r, g, b);
        let max = Math.max(r, g, b);
        let d = max - min;
        let h = 0;
        let s = max === 0 ? 0 : d / max;
        let v = max;
        if (d !== 0) {
            h = (r === max ? (g - b) / d + (g < b ? 6 : 0) : (g === max ? (b - r) / d + 2 : (r - g) / d + 4)) * 60;
        }
        if (hsv) {
            hsv.x = h;
            hsv.y = s;
            hsv.z = v;
            return hsv;
        }
        return new Vector3_1.default(h, s, v);
    }
    toHSL(hsl) {
        let r = this.x, g = this.y, b = this.z;
        let min = Math.min(r, g, b);
        let max = Math.max(r, g, b);
        let d = max - min;
        let h = 0, s = 0, l = (max + min) * 0.5;
        if (d !== 0) {
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            h = (r === max ? (g - b) / d + (g < b ? 6 : 0) : g === max ? 2 + (b - r) / d : 4 + (r - g) / d) * 60;
        }
        if (hsl) {
            hsl.x = h;
            hsl.y = s;
            hsl.z = l;
            return hsl;
        }
        return new Vector3_1.default(h, s, l);
    }
    toRGBArray(arr) {
        if (arr) {
            arr[0] = this.r;
            arr[1] = this.g;
            arr[2] = this.b;
            return arr;
        }
        return [this.r, this.g, this.b];
    }
    toRGBAArray(arr) {
        if (arr) {
            arr[0] = this.r;
            arr[1] = this.g;
            arr[2] = this.b;
            arr[3] = this.a;
            return arr;
        }
        return [this.r, this.g, this.b, this.a];
    }
    toString(includeAlpha = true) {
        if (includeAlpha && this.w < 1) {
            return `rgba(${this.redByte}, ${this.greenByte}, ${this.blueByte}, ${this.w})`;
        }
        else {
            const value = (1 << 24) + (this.redByte << 16) + (this.greenByte << 8) + this.blueByte;
            return `#${value.toString(16).slice(1)}`;
        }
    }
}
exports.default = Color;
Color.presets = {
    "aliceblue": "#f0f8ff",
    "antiquewhite": "#faebd7",
    "aqua": "#00ffff",
    "aquamarine": "#7fffd4",
    "azure": "#f0ffff",
    "beige": "#f5f5dc",
    "bisque": "#ffe4c4",
    "black": "#000000",
    "blanchedalmond": "#ffebcd",
    "blue": "#0000ff",
    "blueviolet": "#8a2be2",
    "brown": "#a52a2a",
    "burlywood": "#deb887",
    "cadetblue": "#5f9ea0",
    "chartreuse": "#7fff00",
    "chocolate": "#d2691e",
    "coral": "#ff7f50",
    "cornflowerblue": "#6495ed",
    "cornsilk": "#fff8dc",
    "crimson": "#dc143c",
    "cyan": "#00ffff",
    "darkblue": "#00008b",
    "darkcyan": "#008b8b",
    "darkgoldenrod": "#b8860b",
    "darkgray": "#a9a9a9",
    "darkgrey": "#a9a9a9",
    "darkgreen": "#006400",
    "darkkhaki": "#bdb76b",
    "darkmagenta": "#8b008b",
    "darkolivegreen": "#556b2f",
    "darkorange": "#ff8c00",
    "darkorchid": "#9932cc",
    "darkred": "#8b0000",
    "darksalmon": "#e9967a",
    "darkseagreen": "#8fbc8f",
    "darkslateblue": "#483d8b",
    "darkslategray": "#2f4f4f",
    "darkslategrey": "#2f4f4f",
    "darkturquoise": "#00ced1",
    "darkviolet": "#9400d3",
    "deeppink": "#ff1493",
    "deepskyblue": "#00bfff",
    "dimgray": "#696969",
    "dimgrey": "#696969",
    "dodgerblue": "#1e90ff",
    "firebrick": "#b22222",
    "floralwhite": "#fffaf0",
    "forestgreen": "#228b22",
    "fuchsia": "#ff00ff",
    "gainsboro": "#dcdcdc",
    "ghostwhite": "#f8f8ff",
    "gold": "#ffd700",
    "goldenrod": "#daa520",
    "gray": "#808080",
    "grey": "#808080",
    "green": "#008000",
    "greenyellow": "#adff2f",
    "honeydew": "#f0fff0",
    "hotpink": "#ff69b4",
    "indianred": "#cd5c5c",
    "indigo": "#4b0082",
    "ivory": "#fffff0",
    "khaki": "#f0e68c",
    "lavender": "#e6e6fa",
    "lavenderblush": "#fff0f5",
    "lawngreen": "#7cfc00",
    "lemonchiffon": "#fffacd",
    "lightblue": "#add8e6",
    "lightcoral": "#f08080",
    "lightcyan": "#e0ffff",
    "lightgoldenrodyellow": "#fafad2",
    "lightgray": "#d3d3d3",
    "lightgrey": "#d3d3d3",
    "lightgreen": "#90ee90",
    "lightpink": "#ffb6c1",
    "lightsalmon": "#ffa07a",
    "lightseagreen": "#20b2aa",
    "lightskyblue": "#87cefa",
    "lightslategray": "#778899",
    "lightslategrey": "#778899",
    "lightsteelblue": "#b0c4de",
    "lightyellow": "#ffffe0",
    "lime": "#00ff00",
    "limegreen": "#32cd32",
    "linen": "#faf0e6",
    "magenta": "#ff00ff",
    "maroon": "#800000",
    "mediumaquamarine": "#66cdaa",
    "mediumblue": "#0000cd",
    "mediumorchid": "#ba55d3",
    "mediumpurple": "#9370db",
    "mediumseagreen": "#3cb371",
    "mediumslateblue": "#7b68ee",
    "mediumspringgreen": "#00fa9a",
    "mediumturquoise": "#48d1cc",
    "mediumvioletred": "#c71585",
    "midnightblue": "#191970",
    "mintcream": "#f5fffa",
    "mistyrose": "#ffe4e1",
    "moccasin": "#ffe4b5",
    "navajowhite": "#ffdead",
    "navy": "#000080",
    "oldlace": "#fdf5e6",
    "olive": "#808000",
    "olivedrab": "#6b8e23",
    "orange": "#ffa500",
    "orangered": "#ff4500",
    "orchid": "#da70d6",
    "palegoldenrod": "#eee8aa",
    "palegreen": "#98fb98",
    "paleturquoise": "#afeeee",
    "palevioletred": "#db7093",
    "papayawhip": "#ffefd5",
    "peachpuff": "#ffdab9",
    "peru": "#cd853f",
    "pink": "#ffc0cb",
    "plum": "#dda0dd",
    "powderblue": "#b0e0e6",
    "purple": "#800080",
    "rebeccapurple": "#663399",
    "red": "#ff0000",
    "rosybrown": "#bc8f8f",
    "royalblue": "#4169e1",
    "saddlebrown": "#8b4513",
    "salmon": "#fa8072",
    "sandybrown": "#f4a460",
    "seagreen": "#2e8b57",
    "seashell": "#fff5ee",
    "sienna": "#a0522d",
    "silver": "#c0c0c0",
    "skyblue": "#87ceeb",
    "slateblue": "#6a5acd",
    "slategray": "#708090",
    "slategrey": "#708090",
    "snow": "#fffafa",
    "springgreen": "#00ff7f",
    "steelblue": "#4682b4",
    "tan": "#d2b48c",
    "teal": "#008080",
    "thistle": "#d8bfd8",
    "tomato": "#ff6347",
    "turquoise": "#40e0d0",
    "violet": "#ee82ee",
    "wheat": "#f5deb3",
    "white": "#ffffff",
    "whitesmoke": "#f5f5f5",
    "yellow": "#ffff00",
    "yellowgreen": "#9acd32"
};


/***/ }),

/***/ "../../libs/ff-core/source/Command.ts":
/*!********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/Command.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const text_1 = __webpack_require__(/*! ./text */ "../../libs/ff-core/source/text.ts");
class Command {
    constructor(args, props) {
        this._args = args;
        this._props = props;
        this._args = args;
        this._state = null;
    }
    get name() {
        return this._props.name || text_1.normalize(this._props.do.name);
    }
    do() {
        if (this._state) {
            throw new Error("undo should be called before execute can be applied again");
        }
        this._state = this._props.do.apply(this._props.target, this._args);
    }
    undo() {
        if (!this._props.undo) {
            throw new Error("can't undo this command");
        }
        if (!this._state) {
            throw new Error("execute should be called before undo can be applied");
        }
        this._props.undo.call(this._props.target, this._state);
        this._state = null;
    }
    canDo() {
        return this._props.canDo ? this._props.canDo() : true;
    }
    canUndo() {
        return !!this._props.undo;
    }
}
exports.default = Command;


/***/ }),

/***/ "../../libs/ff-core/source/Commander.ts":
/*!**********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/Commander.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Publisher_1 = __webpack_require__(/*! ./Publisher */ "../../libs/ff-core/source/Publisher.ts");
const Command_1 = __webpack_require__(/*! ./Command */ "../../libs/ff-core/source/Command.ts");
class Commander extends Publisher_1.default {
    constructor(capacity) {
        super();
        this.addEvent("update");
        this.stack = [];
        this.pointer = -1;
        this.capacity = capacity !== undefined ? capacity : Commander.defaultCapacity;
    }
    register(propsOrFactory) {
        let factory;
        if (typeof propsOrFactory === "function") {
            factory = propsOrFactory;
        }
        else {
            factory = (args) => new Command_1.default(args, propsOrFactory);
        }
        const action = (...args) => {
            const command = factory(args);
            this.do(command);
        };
        return action;
    }
    setCapacity(capacity) {
        this.capacity = capacity;
        while (this.stack.length > capacity) {
            this.stack.shift();
            this.pointer--;
        }
        if (this.pointer < 0) {
            this.stack = [];
            this.pointer = -1;
        }
    }
    do(command) {
        console.log(`Commander.do - '${command.name}'`);
        command.do();
        if (command.canUndo()) {
            this.stack.splice(this.pointer + 1);
            this.stack.push(command);
            if (this.stack.length > this.capacity) {
                this.stack.shift();
            }
            this.pointer = this.stack.length - 1;
            this.emit("update");
        }
    }
    undo() {
        if (this.pointer >= 0) {
            const command = this.stack[this.pointer];
            command.undo();
            this.pointer--;
            this.emit("update");
        }
    }
    redo() {
        if (this.pointer < this.stack.length - 1) {
            this.pointer++;
            const command = this.stack[this.pointer];
            command.do();
            this.emit("update");
        }
    }
    clear() {
        if (this.stack.length > 0) {
            this.stack = [];
            this.pointer = -1;
            this.emit("update");
        }
    }
    canUndo() {
        return this.pointer >= 0;
    }
    canRedo() {
        return this.pointer < this.stack.length - 1;
    }
    getUndoText() {
        if (this.pointer >= 0) {
            return "Undo " + this.stack[this.pointer].name;
        }
        return "Can't Undo";
    }
    getRedoText() {
        if (this.pointer < this.stack.length - 1) {
            return "Redo " + this.stack[this.pointer + 1].name;
        }
        return "Can't Redo";
    }
}
exports.default = Commander;
Commander.defaultCapacity = 30;


/***/ }),

/***/ "../../libs/ff-core/source/Document.ts":
/*!*********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/Document.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Publisher_1 = __webpack_require__(/*! ./Publisher */ "../../libs/ff-core/source/Publisher.ts");
const uniqueId_1 = __webpack_require__(/*! ./uniqueId */ "../../libs/ff-core/source/uniqueId.ts");
class Document extends Publisher_1.default {
    constructor(json) {
        super();
        this.addEvents("update", "dispose");
        if (json) {
            this.fromJSON(json);
        }
        else {
            this._data = this.init();
        }
    }
    static generateId() {
        return uniqueId_1.default();
    }
    get id() {
        return this._data["id"];
    }
    get data() {
        return this._data;
    }
    set(key, value) {
        this._data[key] = value;
        this.update();
    }
    get(key) {
        return this._data[key];
    }
    update() {
        this.emit({ type: "update", document: this });
    }
    dispose() {
        this.emit({ type: "dispose", document: this });
        this._data = null;
    }
    fromJSON(json) {
        this._data = {};
        this.inflate(json, this._data);
        this.update();
        return this;
    }
    toJSON(json) {
        json = json || {};
        this.deflate(this._data, json);
        return json;
    }
    init() {
        return {};
    }
    inflate(json, data) {
        Object.assign(data, json);
    }
    deflate(data, json) {
        json = json || {};
        Object.assign(json, this._data);
    }
}
exports.default = Document;


/***/ }),

/***/ "../../libs/ff-core/source/ObjectRegistry.ts":
/*!***************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/ObjectRegistry.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Publisher_1 = __webpack_require__(/*! ./Publisher */ "../../libs/ff-core/source/Publisher.ts");
////////////////////////////////////////////////////////////////////////////////
const _EMPTY_ARRAY = [];
/**
 * Registry of object instances, grouped by their classes and base classes.
 */
class ObjectRegistry extends Publisher_1.default {
    constructor(rootType) {
        super({ knownEvents: false });
        const typeName = rootType.typeName;
        if (!typeName) {
            throw new Error("root type must have a 'typeName' member");
        }
        this._rootTypeName = typeName;
        this._objLists = { [this._rootTypeName]: [] };
        this._objTags = {};
        this._objDict = {};
    }
    static getTypeName(scope) {
        return typeof scope === "function" ? scope.typeName : (typeof scope === "object"
            ? scope.constructor.typeName : scope);
    }
    ;
    /**
     * Adds an object to the registry. The object is registered under its actual class
     * and all base classes in its prototype chain. An [[IObjectEvent]] is emitted
     * for each class in the object's prototype chain.
     * @param object
     */
    add(object) {
        const id = object.id;
        if (typeof id === "string") {
            if (this._objDict[id] !== undefined) {
                throw new Error("object already registered");
            }
            // add component to id dictionary
            this._objDict[id] = object;
        }
        let prototype = object;
        let typeName;
        const rootTypeName = this._rootTypeName;
        const event = { type: "", add: true, remove: false, object };
        // add all types in prototype chain
        do {
            prototype = Object.getPrototypeOf(prototype);
            typeName = prototype.constructor.typeName;
            if (typeName) {
                (this._objLists[typeName] || (this._objLists[typeName] = [])).push(object);
                event.type = typeName;
                this.emit(event);
            }
        } while (typeName !== rootTypeName);
    }
    /**
     * Removes an object from the registry.
     * @param object
     */
    remove(object) {
        const id = object.id;
        if (typeof id === "string") {
            if (this._objDict[id] !== object) {
                throw new Error("object not registered");
            }
            // remove component
            delete this._objDict[id];
        }
        let prototype = object;
        let typeName;
        const rootTypeName = this._rootTypeName;
        const event = { type: "", add: false, remove: true, object };
        // remove all types in prototype chain
        do {
            prototype = Object.getPrototypeOf(prototype);
            typeName = prototype.constructor.typeName;
            if (typeName) {
                event.type = typeName;
                this.emit(event);
                const objects = this._objLists[typeName];
                objects.splice(objects.indexOf(object), 1);
            }
        } while (typeName !== rootTypeName);
    }
    /**
     * Registers an object with a given tag.
     * @param tag The tag name. Valid tag names are all non-empty strings except "tag".
     * @param object
     */
    addByTag(tag, object) {
        if (!tag || tag === "tag") {
            throw new Error("illegal tag name");
        }
        const list = this._objTags[tag] || (this._objTags[tag] = []);
        list.push(object);
        const event = { type: "tag", add: true, remove: false, object, tag };
        this.emit(event);
        event.type = tag;
        this.emit(event);
    }
    /**
     * Unregisters an object with a given tag.
     * @param tag The tag name. Valid tag names are all non-empty strings except "tag".
     * @param object
     */
    removeByTag(tag, object) {
        if (!tag || tag === "tag") {
            throw new Error("illegal tag name");
        }
        const list = this._objTags[tag];
        if (list) {
            const index = list.indexOf(object);
            if (index >= 0) {
                const event = { type: "tag", add: false, remove: true, object, tag };
                this.emit(event);
                event.type = tag;
                this.emit(event);
                list.splice(index, 1);
                return true;
            }
        }
        return false;
    }
    /**
     * Removes all objects from the registry.
     */
    clear() {
        const objects = this.cloneArray();
        objects.forEach(object => this.remove(object));
    }
    /**
     * Returns the total number of objects in the registry.
     */
    get length() {
        return this._objLists[this._rootTypeName].length;
    }
    /**
     * Returns the number of objects (of a certain class or class name if given) in the registry.
     * @param scope Optional class or class name whose instances should be counted.
     */
    count(scope) {
        const objects = this._objLists[this.getTypeName(scope)];
        return objects ? objects.length : 0;
    }
    /**
     * Returns true if the registry contains objects (of a given class or class name) or the given instance.
     * @param scope A class, class name, or an instance of a class.
     */
    has(scope) {
        // scope is a constructor function
        if (typeof scope === "function") {
            const objects = this._objLists[scope.typeName];
            return !!objects && objects.length > 0;
        }
        // scope is a string, i.e. a type name
        if (typeof scope === "string") {
            const objects = this._objLists[scope];
            return !!objects && objects.length > 0;
        }
        // scope is an object, search by its type name
        const objects = this._objLists[scope.constructor.typeName];
        return objects && objects.indexOf(scope) >= 0;
    }
    /**
     * Returns true if the registry contains the given object.
     * @param object
     */
    contains(object) {
        const id = object.id;
        if (typeof id === "string") {
            return !!this._objDict[id];
        }
        const objects = this._objLists[object.constructor.typeName];
        return objects && objects.indexOf(object) >= 0;
    }
    /**
     * Returns the first found instance of the given class or class name.
     * @param scope Class or class name of the instance to return.
     * @param nothrow If true, the method returns undefined if no instance was found.
     * By default, an error is thrown uf no instance is registered with the given class/class name.
     */
    get(scope, nothrow = false) {
        const className = this.getTypeName(scope);
        const objects = this._objLists[className];
        const object = objects ? objects[0] : undefined;
        if (!nothrow && !object) {
            throw new Error(`no instances of class '${className}' in object registry`);
        }
        return object;
    }
    /**
     * Returns an array with all instances of the given class or class name.
     * This is a live array, it should not be kept or modified. If you need
     * a storable/editable array, use [[ObjectRegistry.cloneArray]] instead.
     * @param scope Class or class name of the instances to return.
     */
    getArray(scope) {
        return this._objLists[this.getTypeName(scope)] || _EMPTY_ARRAY;
    }
    /**
     * Returns a cloned array with all instances of the given class or class name.
     * @param scope Class or class name of the instances to return.
     */
    cloneArray(scope) {
        return this.getArray(scope).slice();
    }
    /**
     * Returns an object by its id.
     * @param id An object's id.
     */
    getById(id) {
        return this._objDict[id];
    }
    /**
     * Returns a dictionary with all objects in the registry accessible by their ids.
     * The dictionary only contains objects with an 'id' property.
     */
    getDictionary() {
        return this._objDict;
    }
    getByTag(tag) {
        return this._objTags[tag] || _EMPTY_ARRAY;
    }
    /**
     * Adds a listener for an object add/remove event.
     * @param scope Type, type instance, or type name to subscribe to.
     * @param callback Callback function, invoked when the event is emitted.
     * @param context Optional: this context for the callback invocation.
     */
    on(scope, callback, context) {
        super.on(this.getTypeName(scope), callback, context);
    }
    /**
     * Adds a one-time listener for an object add/remove event.
     * @param scope Type, type instance, or type name to subscribe to.
     * @param callback Callback function, invoked when the event is emitted.
     * @param context Optional: this context for the callback invocation.
     */
    once(scope, callback, context) {
        super.once(this.getTypeName(scope), callback, context);
    }
    /**
     * Removes a listener for an object add/remove event.
     * @param scope Type, type instance, or type name to subscribe to.
     * @param callback Callback function, invoked when the event is emitted.
     * @param context Optional: this context for the callback invocation.
     */
    off(scope, callback, context) {
        super.off(this.getTypeName(scope), callback, context);
    }
    /**
     * Returns the type name for the given instance, type or name.
     * @param scope
     */
    getTypeName(scope) {
        return typeof scope === "function" ? scope.typeName : (typeof scope === "object"
            ? scope.constructor.typeName : (scope || this._rootTypeName));
    }
}
exports.default = ObjectRegistry;


/***/ }),

/***/ "../../libs/ff-core/source/OrderedCollection.ts":
/*!******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/OrderedCollection.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Publisher_1 = __webpack_require__(/*! ./Publisher */ "../../libs/ff-core/source/Publisher.ts");
/**
 * Container storing an ordered list of items. Items can be retrieved and manipulated by
 * id or by positional index. Internally, the collection is stored in both an array and
 * a dictionary.
 *
 * To make use of the dictionary functionality, items must provide an 'id' property with
 * a unique identifier.
 *
 * Updates to the collection are published via [[ICollectionUpdateEvent]] events.
 */
class OrderedCollection extends Publisher_1.default {
    constructor(items) {
        super();
        this.addEvent("update");
        this._list = items || [];
        this._dict = {};
        items && items.forEach(item => {
            if (item.id) {
                this._dict[item.id] = item;
            }
        });
    }
    /**
     * Returns the number of items in the collection.
     */
    get length() {
        return this._list.length;
    }
    /**
     * Returns an unordered array with the ids of all collection items.
     */
    get ids() {
        return Object.keys(this._dict);
    }
    /**
     * Returns an ordered array with all collection items.
     */
    get items() {
        return this._list;
    }
    /**
     * Replaces the collection items with the given list.
     * @param items
     */
    set items(items) {
        this._list = items;
        this._dict = {};
        items.forEach(item => {
            if (item.id) {
                this._dict[item.id] = item;
            }
        });
        this.emit({ type: "update", item: null, what: "update" });
    }
    /**
     * Adds an item at the end of the collection.
     * @param item
     */
    append(item) {
        this._list.push(item);
        if (item.id) {
            this._dict[item.id] = item;
        }
        this.emit({ type: "update", item, what: "add" });
    }
    /**
     * Inserts an item in front of another one.
     * @param item
     * @param beforeItem
     */
    insertBefore(item, beforeItem) {
        const index = this._list.indexOf(beforeItem);
        if (index >= 0) {
            this.insertAt(item, index);
        }
    }
    /**
     * Inserts an item at a given position index.
     * @param item
     * @param index
     */
    insertAt(item, index) {
        this._list.splice(index, 0, item);
        if (item.id) {
            this._dict[item.id] = item;
        }
        this.emit({ type: "update", item, what: "add" });
    }
    /**
     * Replaces an item with another one.
     * @param item The new item.
     * @param replaceItem The item to be replaced.
     */
    replaceItem(item, replaceItem) {
        const index = this._list.indexOf(replaceItem);
        if (index >= 0) {
            this.replaceAt(item, index);
        }
    }
    /**
     * Replaces the item at the given index position with another one.
     * @param item
     * @param index
     */
    replaceAt(item, index) {
        const existing = this._list[index];
        if (existing.id) {
            delete this._dict[existing.id];
        }
        this._list[index] = item;
        if (item.id) {
            this._dict[item.id] = item;
        }
        this.emit({ type: "update", item, what: "replace" });
    }
    /**
     * Moves the item relative to its current position.
     * @param item The item to move.
     * @param relativeIndex The number of positions to move, positive = move towards end, negative = move towards start.
     */
    moveItem(item, relativeIndex) {
        const index = this._list.indexOf(item);
        this.moveAt(index, relativeIndex);
    }
    /**
     * Moves the item at the given index position relative to its current position.
     * @param index The index of the item to move.
     * @param relativeIndex The number of positions to move, positive = move towards end, negative = move towards start.
     */
    moveAt(index, relativeIndex) {
        const items = this._list;
        if (index + relativeIndex < 0 || index + relativeIndex >= items.length) {
            return;
        }
        const item = items[index];
        if (relativeIndex > 0) {
            for (let i = 0; i < relativeIndex; ++i) {
                items[index + i] = items[index + i + 1];
            }
            items[index + relativeIndex] = item;
        }
        else if (relativeIndex < 0) {
            for (let i = 0; i > relativeIndex; --i) {
                items[index + i] = items[index + i - 1];
            }
            items[index + relativeIndex] = item;
        }
        else {
            return;
        }
        this.emit({ type: "update", item, what: "move" });
    }
    /**
     * Removes an item by its id.
     * @param id
     * @returns the removed item.
     */
    removeById(id) {
        const item = this._dict[id];
        if (item) {
            this.removeItem(item);
        }
        return item;
    }
    /**
     * Removes the given item from the collection.
     * @param item
     * @returns the position index of the removed item.
     */
    removeItem(item) {
        const index = this._list.indexOf(item);
        this.removeAt(index);
        return index;
    }
    /**
     * Removes the item at the given index position from the collection.
     * @param index
     * @returns the removed item.
     */
    removeAt(index) {
        const items = this._list;
        if (index < 0 || index >= items.length) {
            return;
        }
        const item = items[index];
        items.splice(index, 1);
        if (item.id) {
            delete this._dict[item.id];
        }
        this.emit({ type: "update", item, what: "remove" });
        return item;
    }
    /**
     * Returns the item at the given index position.
     * @param index
     */
    getAt(index) {
        return this._list[index];
    }
    /**
     * Return an item by its id.
     * @param id
     */
    getById(id) {
        return this._dict[id];
    }
    /**
     * Returns the index position of the given item.
     * @param item
     */
    getIndexOf(item) {
        return this._list.indexOf(item);
    }
    /**
     * Replaces the collection items with a shallow copy of the given list.
     * @param list
     */
    copy(list) {
        this.items = list.slice();
    }
    /**
     * Returns a shallow copy of the internal item list.
     */
    clone() {
        return this._list.slice();
    }
}
exports.default = OrderedCollection;
OrderedCollection.prototype[Symbol.iterator] = function () {
    return {
        index: 0,
        list: this._list,
        next: function () {
            if (this.index < this.list.length) {
                return { value: this.list[this.index++], done: false };
            }
            else {
                return { done: true };
            }
        }
    };
};


/***/ }),

/***/ "../../libs/ff-core/source/Publisher.ts":
/*!**********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/Publisher.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const _pd = Symbol("Publisher private data");
const _strict = Symbol("Publisher strict option");
/**
 * Provides subscription services for events.
 */
class Publisher {
    constructor(options) {
        const knownEvents = options ? options.knownEvents : true;
        this[_pd] = { [_strict]: knownEvents };
    }
    on(type, callback, context) {
        if (Array.isArray(type)) {
            type.forEach(type => {
                this.on(type, callback, context);
            });
            return;
        }
        if (!callback) {
            throw new Error("missing callback function");
        }
        let subscribers = this[_pd][type];
        if (!subscribers) {
            if (this[_pd][_strict]) {
                throw new Error(`can't subscribe; unknown event: '${type}'`);
            }
            subscribers = this[_pd][type] = [];
        }
        let subscriber = { callback, context };
        subscribers.push(subscriber);
    }
    /**
     * Subscribes to an event. You may find using the .on() method more handy and more flexible.
     * @param type
     * @param callback
     * @param context
     */
    addEventListener(type, callback, context) {
        this.on(type, callback, context);
    }
    once(type, callback, context) {
        if (Array.isArray(type)) {
            type.forEach(type => {
                this.once(type, callback, context);
            });
            return;
        }
        const redirect = event => {
            this.off(type, redirect, context);
            callback.call(context, event);
        };
        redirect.cb = callback;
        this.on(type, redirect, context);
    }
    off(type, callback, context) {
        if (typeof type === "object") {
            if (Array.isArray(type)) {
                // if first parameter is an array, call function for all elements of the array
                type.forEach((type) => {
                    this.off(type, callback, context);
                });
            }
            else {
                // if first parameter is an object, unsubscribe all subscriptions where the context matches the object.
                const events = this[_pd];
                const types = Object.keys(events);
                for (let i = 0, ni = types.length; i < ni; ++i) {
                    const subscribers = events[type];
                    const remainingSubscribers = [];
                    for (let j = 0, nj = subscribers.length; j < nj; ++j) {
                        const subscriber = subscribers[j];
                        if (type && subscriber.context !== type) {
                            remainingSubscribers.push(subscriber);
                        }
                    }
                    events[type] = remainingSubscribers;
                }
            }
            return;
        }
        const subscribers = this[_pd][type];
        if (!subscribers) {
            throw new Error(`can't unsubscribe; unknown event type: '${type}'`);
        }
        const remainingSubscribers = [];
        for (let i = 0, n = subscribers.length; i < n; ++i) {
            const subscriber = subscribers[i];
            if ((callback && callback !== subscriber.callback && callback !== subscriber.callback.cb)
                || (context && context !== subscriber.context)) {
                remainingSubscribers.push(subscriber);
            }
        }
        this[_pd][type] = remainingSubscribers;
    }
    /**
     * Unsubscribes from an event. You may find using the .off() method more handy and more flexible.
     * @param type Type name of the event.
     * @param callback Callback function, invoked when the event is emitted.
     * @param context Optional: this context for the callback invocation.
     */
    removeEventListener(type, callback, context) {
        this.off(type, callback, context);
    }
    emit(eventOrType, message) {
        let type, payload;
        if (typeof eventOrType === "string") {
            type = eventOrType;
            payload = message;
        }
        else {
            type = eventOrType.type;
            payload = eventOrType;
        }
        if (!type) {
            throw new Error(`empty or invalid event type: '${type}'`);
        }
        const data = this[_pd];
        const subscribers = data[type];
        if (!subscribers) {
            if (data[_strict]) {
                throw new Error(`can't emit; unknown event type: '${type}'`);
            }
            return;
        }
        for (let i = 0, n = subscribers.length; i < n; ++i) {
            const subscriber = subscribers[i];
            if (subscriber.context) {
                subscriber.callback.call(subscriber.context, payload);
            }
            else {
                subscriber.callback(payload);
            }
        }
    }
    /**
     * Registers a new event type.
     * @param name Name of the event type.
     */
    addEvent(name) {
        if (!this[_pd][name]) {
            this[_pd][name] = [];
        }
    }
    /**
     * Registers multiple new event types.
     * @param names Names of the event types.
     */
    addEvents(...names) {
        names.forEach(name => {
            if (!this[_pd][name]) {
                this[_pd][name] = [];
            }
        });
    }
    /**
     * Tests whether an event type has been registered.
     * @param name Name of the event type.
     * @returns true if an event type with the given name has been added.
     */
    hasEvent(name) {
        return !!this[_pd][name];
    }
    /**
     * Lists all registered event types.
     * @returns an array with the names of all added event types.
     */
    listEvents() {
        return Object.getOwnPropertyNames(this[_pd]);
    }
}
exports.default = Publisher;


/***/ }),

/***/ "../../libs/ff-core/source/Subscriber.ts":
/*!***********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/Subscriber.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
////////////////////////////////////////////////////////////////////////////////
/**
 * Subscribes to events on one or multiple publishers.
 * Subscription can be started and stopped for all registered publishers at once.
 * Events are untyped and event arguments are not delivered.
 */
class Subscriber {
    constructor(type, callback, context) {
        this._type = type;
        this._callback = callback;
        this._context = context;
        this._publishers = [];
    }
    on(...publishers) {
        publishers.forEach(publisher => {
            this._publishers.push(publisher);
            publisher.on(this._type, this._callback, this._context);
        });
        return this;
    }
    off() {
        this._publishers.forEach(pub => pub.off(this._type, this._callback, this._context));
        this._publishers.length = 0;
        return this;
    }
}
exports.default = Subscriber;


/***/ }),

/***/ "../../libs/ff-core/source/TypeRegistry.ts":
/*!*************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/TypeRegistry.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Publisher_1 = __webpack_require__(/*! ./Publisher */ "../../libs/ff-core/source/Publisher.ts");
class TypeRegistry extends Publisher_1.default {
    constructor() {
        super();
        this._dict = {};
        this.addEvent("type");
    }
    add(type) {
        if (Array.isArray(type)) {
            type.forEach(type => this.add(type));
            return;
        }
        const typeName = type.typeName;
        if (!typeName) {
            throw new Error("type must have a 'typeName' member");
        }
        if (this._dict[typeName]) {
            throw new Error(`type '${typeName}' already registered`);
        }
        this._dict[typeName] = type;
        this.emit({ type: "type", add: true, remove: false, classType: type });
    }
    remove(type) {
        if (Array.isArray(type)) {
            type.forEach(type => this.remove(type));
            return;
        }
        const typeName = type.typeName;
        if (!typeName) {
            throw new Error("type must have a 'typeName' member");
        }
        if (!this._dict[typeName]) {
            throw new Error(`type '${typeName}' not registered`);
        }
        delete this._dict[typeName];
        this.emit({ type: "type", add: false, remove: true, classType: type });
    }
    getType(typeHint) {
        let typeName = typeHint;
        if (typeof typeHint === "function") {
            typeName = typeHint.typeName;
        }
        else if (typeof typeHint === "object") {
            typeName = typeHint.constructor.typeName;
        }
        return this._dict[typeName];
    }
    createInstance(typeHint, ...args) {
        const type = this.getType(typeHint);
        if (!type) {
            throw new Error(`type '${typeHint}' not registered`);
        }
        return new type(...args);
    }
}
exports.default = TypeRegistry;


/***/ }),

/***/ "../../libs/ff-core/source/UnorderedCollection.ts":
/*!********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/UnorderedCollection.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Publisher_1 = __webpack_require__(/*! ./Publisher */ "../../libs/ff-core/source/Publisher.ts");
/**
 * Container storing an unordered collection of items. Items can be retrieved and manipulated by
 * id. Internally, the collection is stored in a key/value dictionary. Items may provide an
 * 'id' property with a unique identifier.
 *
 * Updates to the collection are published via [[ICollectionUpdateEvent]] events.
 */
class UnorderedCollection extends Publisher_1.default {
    constructor(items) {
        super();
        this.addEvent("update");
        this._dict = {};
        items && items.forEach(item => {
            if (item.id) {
                this._dict[item.id] = item;
            }
        });
    }
    /**
     * Returns the number of items in the collection.
     */
    get length() {
        return this.ids.length;
    }
    /**
     * Returns an unordered array with all collection items.
     */
    get items() {
        return this.ids.map(id => this._dict[id]);
    }
    set items(items) {
        items.forEach(item => {
            if (item.id) {
                this._dict[item.id] = item;
            }
        });
        this.emit({ type: "update", item: null, what: "update" });
    }
    /**
     * Returns an unordered array with the ids of all collection items.
     */
    get ids() {
        return Object.keys(this._dict);
    }
    /**
     * Returns a shallow copy of the internal id/item dictionary.
     */
    get dictionary() {
        return this._dict;
    }
    set dictionary(dict) {
        this._dict = dict;
        this.emit({ type: "update", item: null, what: "update" });
    }
    insert(item, id) {
        id = id || item.id;
        if (!id) {
            throw new Error("can't insert, missing id");
        }
        this._dict[id] = item;
        this.emit({ type: "update", item, what: "insert" });
    }
    remove(itemOrId) {
        const id = typeof itemOrId === "string" ? itemOrId : itemOrId.id;
        const item = this._dict[id];
        if (item === undefined) {
            return;
        }
        delete this._dict[id];
        this.emit({ type: "update", item, what: "remove" });
    }
    get(id) {
        return this._dict[id];
    }
    getOrCreate(id, defaultItem) {
        let item = this._dict[id];
        if (!item) {
            item = this._dict[id] = defaultItem;
            this.emit({ type: "update", item, what: "insert" });
        }
        return item;
    }
    /**
     * Replaces the internal id/item dictionary with a shallow copy of the given id/item dictionary.
     * @param dict
     */
    copy(dict) {
        this.dictionary = Object.assign({}, dict);
    }
    /**
     * Returns a shallow copy of the internal id/item dictionary.
     */
    clone() {
        return Object.assign({}, this._dict);
    }
}
exports.default = UnorderedCollection;


/***/ }),

/***/ "../../libs/ff-core/source/Vector2.ts":
/*!********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/Vector2.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 2-dimensional vector.
 */
class Vector2 {
    /**
     * Constructs a new vector with the given x and y values.
     * Omitted or invalid values are set to zero.
     * @param x
     * @param y
     */
    constructor(x, y) {
        this.x = x || 0;
        this.y = y || 0;
    }
    /**
     * Returns a new vector with all components set to zero.
     */
    static makeZeros() {
        return new Vector2(0, 0);
    }
    /**
     * Returns a new vector with all components set to one.
     */
    static makeOnes() {
        return new Vector2(1, 1);
    }
    /**
     * Returns a new vector of unit length, parallel to the X axis.
     */
    static makeUnitX() {
        return new Vector2(1, 0);
    }
    /**
     * Returns a new vector of unit length, parallel to the Y axis.
     */
    static makeUnitY() {
        return new Vector2(0, 1);
    }
    /**
     * Returns a new vector with components set from the given vector.
     * @param vector
     */
    static makeCopy(vector) {
        return new Vector2(vector.x, vector.y);
    }
    /**
     * Returns a new vector with each component set to the given scalar value.
     * @param scalar
     */
    static makeFromScalar(scalar) {
        return new Vector2(scalar, scalar);
    }
    /**
     * Returns a new vector with components set from the values of the given array.
     * @param array
     */
    static makeFromArray(array) {
        return new Vector2(array[0], array[1]);
    }
    /**
     * Returns a string representation of the given vector.
     * @param vector
     */
    static toString(vector) {
        return `[${vector.x}, ${vector.y}]`;
    }
    /**
     * Copies the components of the given vector to this.
     * @param vector
     */
    copy(vector) {
        this.x = vector.x;
        this.y = vector.y;
        return this;
    }
    /**
     * Sets the components to the given values.
     * @param x
     * @param y
     */
    set(x, y) {
        this.x = x;
        this.y = y;
        return this;
    }
    /**
     * Sets each component to the given scalar value.
     * @param scalar
     */
    setFromScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        return this;
    }
    /**
     * Sets the components to the values of the given array.
     * @param array
     * @param offset Optional start index of the array. Default is 0.
     */
    setFromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        return this;
    }
    /**
     * Sets all components to zero.
     */
    setZeros() {
        this.x = 0;
        this.y = 0;
        return this;
    }
    /**
     * Sets all components to one.
     */
    setOnes() {
        this.x = 1;
        this.y = 1;
        return this;
    }
    /**
     * Makes this a unit vector parallel to the X axis.
     */
    setUnitX() {
        this.x = 1;
        this.y = 0;
        return this;
    }
    /**
     * Makes this a unit vector parallel to the Y axis.
     */
    setUnitY() {
        this.x = 0;
        this.y = 1;
        return this;
    }
    /**
     * Adds the given vector to this.
     * @param other
     */
    add(other) {
        this.x += other.x;
        this.y += other.y;
        return this;
    }
    /**
     * Subtracts the given vector from this.
     * @param other
     */
    sub(other) {
        this.x -= other.x;
        this.y -= other.y;
        return this;
    }
    /**
     * Multiplies each component with the corresponding component of the given vector.
     * @param other
     */
    mul(other) {
        this.x *= other.x;
        this.y *= other.y;
        return this;
    }
    /**
     * Divides each component by the corresponding component of the given vector.
     * @param other
     */
    div(other) {
        this.x /= other.x;
        this.y /= other.y;
        return this;
    }
    /**
     * Adds the given scalar to each component.
     * @param scalar
     */
    addScalar(scalar) {
        this.x += scalar;
        this.y += scalar;
        return this;
    }
    /**
     * Subtracts the given scalar from each component.
     * @param scalar
     */
    subScalar(scalar) {
        this.x -= scalar;
        this.y -= scalar;
        return this;
    }
    /**
     * Multiplies each component with the given scalar.
     * @param scalar
     */
    mulScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        return this;
    }
    /**
     * Divides each component by the given scalar.
     * @param scalar
     */
    divScalar(scalar) {
        this.x /= scalar;
        this.y /= scalar;
        return this;
    }
    /**
     * Translates the vector by the given offsets.
     * @param tx
     * @param ty
     */
    translate(tx, ty) {
        this.x += tx;
        this.y += ty;
        return this;
    }
    /**
     * Rotates the vector by the given angle.
     * @param angle rotation angle in radians.
     */
    rotate(angle) {
        const co = Math.cos(angle);
        const si = Math.sin(angle);
        const x = this.x, y = this.y;
        this.x = co * x - si * y;
        this.y = si * x + co * y;
        return this;
    }
    /**
     * Scales the vector by the given factors.
     * @param sx
     * @param sy
     */
    scale(sx, sy) {
        this.x *= sx;
        this.y *= sy;
        return this;
    }
    /**
     * Inverts each component, e.g. x = 1 / x, ...
     */
    invert() {
        this.x = 1 / this.x;
        this.y = 1 / this.y;
        return this;
    }
    /**
     * Negates each component, e.g. x = -x, ...
     */
    negate() {
        this.x = -this.x;
        this.y = -this.y;
        return this;
    }
    /**
     * Normalizes the vector, making it a unit vector.
     */
    normalize() {
        const f = 1 / Math.sqrt(this.x * this.x + this.y * this.y);
        this.x *= f;
        this.y *= f;
        return this;
    }
    /**
     * Returns the dot product of this and the given vector.
     * @param other
     */
    dot(other) {
        return this.x * other.x + this.y * other.y;
    }
    /**
     * Returns the 2-norm (length) of this.
     */
    length() {
        const x = this.x, y = this.y;
        return Math.sqrt(x * x + y * y);
    }
    /**
     * Returns the squared 2-norm of this, i.e. the dot product of the vector with itself.
     */
    lengthSquared() {
        const x = this.x, y = this.y;
        return x * x + y * y;
    }
    /**
     * Returns the distance between this and other.
      * @param other
     */
    distanceTo(other) {
        const dx = other.x - this.x;
        const dy = other.y - this.y;
        return Math.sqrt(dx * dx + dy * dy);
    }
    /**
     * Returns the angle between this and the positive X axis.
     * @returns angle in radians.
     */
    angle() {
        return Math.atan2(this.y, this.x);
    }
    /**
     * Returns the angle between this and the given vector.
     * @param other
     * @returns angle in radians.
     */
    angleTo(other) {
        const x0 = this.x, y0 = this.y, x1 = other.x, y1 = other.y;
        return Math.acos((x0 * x1 + y0 * y1) / (Math.sqrt(x0 * x0 + y0 * y0) + Math.sqrt(x1 * x1 + y1 * y1)));
    }
    /**
     * Returns the smallest component.
     */
    min() {
        return this.x < this.y ? this.x : this.y;
    }
    /**
     * Returns the largest component.
     */
    max() {
        return this.x > this.y ? this.x : this.y;
    }
    /**
     * Returns true if all components are exactly zero.
     */
    isZero() {
        return this.x === 0 && this.y === 0;
    }
    /**
     * Returns a clone.
     */
    clone() {
        return new Vector2(this.x, this.y);
    }
    /**
     * Returns an array with the components of this.
     * @param array Optional destination array.
     * @param offset Optional start index of the array. Default is 0.
     */
    toArray(array, offset) {
        if (array) {
            if (offset === undefined) {
                offset = 0;
            }
            array[offset] = this.x;
            array[offset + 1] = this.y;
            return array;
        }
        return [
            this.x,
            this.y
        ];
    }
    /**
     * Returns a text representation.
     */
    toString() {
        return Vector2.toString(this);
    }
}
exports.default = Vector2;
Vector2.zeros = new Vector2(0, 0);
Vector2.ones = new Vector2(1, 1);
Vector2.unitX = new Vector2(1, 0);
Vector2.unitY = new Vector2(0, 1);


/***/ }),

/***/ "../../libs/ff-core/source/Vector3.ts":
/*!********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/Vector3.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Vector2_1 = __webpack_require__(/*! ./Vector2 */ "../../libs/ff-core/source/Vector2.ts");
/**
 * 3-dimensional vector.
 */
class Vector3 {
    /**
     * Constructs a new vector with the given x, y, and z values.
     * Omitted or invalid values are set to zero.
     * @param x
     * @param y
     * @param z
     */
    constructor(x, y, z) {
        this.x = x || 0;
        this.y = y || 0;
        this.z = z || 0;
    }
    /**
     * Returns a new vector with all components set to zero.
     */
    static makeZeros() {
        return new Vector3(0, 0, 0);
    }
    /**
     * Returns a new vector with all components set to one.
     */
    static makeOnes() {
        return new Vector3(1, 1, 1);
    }
    /**
     * Returns a new unit-length vector, parallel to the X axis.
     */
    static makeUnitX() {
        return new Vector3(1, 0, 0);
    }
    /**
     * Returns a new unit-length vector, parallel to the Y axis.
     */
    static makeUnitY() {
        return new Vector3(0, 1, 0);
    }
    /**
     * Returns a new unit-length vector, parallel to the Z axis.
     */
    static makeUnitZ() {
        return new Vector3(0, 0, 1);
    }
    /**
     * Returns a new vector with components set from the given vector.
     * @param vector
     */
    static makeCopy(vector) {
        return new Vector3(vector.x, vector.y, vector.z);
    }
    /**
     * Returns a new vector with each component set to the given scalar value.
     * @param scalar
     */
    static makeFromScalar(scalar) {
        return new Vector3(scalar, scalar, scalar);
    }
    /**
     * Returns a new vector with components set from the values of the given array.
     * @param array
     */
    static makeFromArray(array) {
        return new Vector3(array[0], array[1], array[2]);
    }
    /**
     * Returns a string representation of the given vector.
     * @param vector
     */
    static toString(vector) {
        return `[${vector.x}, ${vector.y}, ${vector.z}]`;
    }
    /**
     * Copies the components of the given vector to this.
     * @param vector
     */
    copy(vector) {
        this.x = vector.x;
        this.y = vector.y;
        this.z = vector.z;
        return this;
    }
    /**
     * Sets the components to the given values.
     * @param x
     * @param y
     * @param z
     */
    set(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    /**
     * Sets each component to the given scalar value.
     * @param scalar
     */
    setFromScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        this.z = scalar;
        return this;
    }
    /**
     * Sets the components to the values of the given array.
     * @param array
     * @param offset Optional start index of the array. Default is 0.
     */
    setFromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        this.z = array[offset + 2];
        return this;
    }
    /**
     * Sets all components to zero.
     */
    setZeros() {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        return this;
    }
    /**
     * Sets all components to one.
     */
    setOnes() {
        this.x = 1;
        this.y = 1;
        this.z = 1;
        return this;
    }
    /**
     * Makes this a unit vector parallel to the X axis.
     */
    setUnitX() {
        this.x = 1;
        this.y = 0;
        this.z = 0;
        return this;
    }
    /**
     * Makes this a unit vector parallel to the Y axis.
     */
    setUnitY() {
        this.x = 0;
        this.y = 1;
        this.z = 0;
        return this;
    }
    /**
     * Makes this a unit vector parallel to the Z axis.
     */
    setUnitZ() {
        this.x = 0;
        this.y = 0;
        this.z = 1;
        return this;
    }
    /**
     * Adds the given vector to this.
     * @param other
     */
    add(other) {
        this.x += other.x;
        this.y += other.y;
        this.z += other.z;
        return this;
    }
    /**
     * Subtracts the given vector from this.
     * @param other
     */
    sub(other) {
        this.x -= other.x;
        this.y -= other.y;
        this.z -= other.z;
        return this;
    }
    /**
     * Multiplies each component with the corresponding component of the given vector.
     * @param other
     */
    mul(other) {
        this.x *= other.x;
        this.y *= other.y;
        this.z *= other.z;
        return this;
    }
    /**
     * Divides each component by the corresponding component of the given vector.
     * @param other
     */
    div(other) {
        this.x /= other.x;
        this.y /= other.y;
        this.z /= other.z;
        return this;
    }
    /**
     * Adds the given scalar to each component.
     * @param scalar
     */
    addScalar(scalar) {
        this.x += scalar;
        this.y += scalar;
        this.z += scalar;
        return this;
    }
    /**
     * Subtracts the given scalar from each component.
     * @param scalar
     */
    subScalar(scalar) {
        this.x -= scalar;
        this.y -= scalar;
        this.z -= scalar;
        return this;
    }
    /**
     * Multiplies each component with the given scalar.
     * @param scalar
     */
    mulScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        this.z *= scalar;
        return this;
    }
    /**
     * Divides each component by the given scalar.
     * @param scalar
     */
    divScalar(scalar) {
        this.x /= scalar;
        this.y /= scalar;
        this.z /= scalar;
        return this;
    }
    /**
     * Translates the vector by the given offsets.
     * @param tx
     * @param ty
     * @param tz
     */
    translate(tx, ty, tz) {
        this.x += tx;
        this.y += ty;
        this.z += tz;
        return this;
    }
    /**
     * Rotates the vector by the given angle about the x-axis.
     * @param angle rotation angle in radians.
     */
    rotateX(angle) {
        const co = Math.cos(angle);
        const si = Math.sin(angle);
        const y = this.y, z = this.z;
        this.y = co * y - si * z;
        this.z = si * y + co * z;
        return this;
    }
    /**
     * Rotates the vector by the given angle about the y-axis.
     * @param angle rotation angle in radians.
     */
    rotateY(angle) {
        const co = Math.cos(angle);
        const si = Math.sin(angle);
        const x = this.x, z = this.z;
        this.x = co * x + si * z;
        this.z = -si * x + co * z;
        return this;
    }
    /**
     * Rotates the vector by the given angle about the z-axis.
     * @param angle rotation angle in radians.
     */
    rotateZ(angle) {
        const co = Math.cos(angle);
        const si = Math.sin(angle);
        const x = this.x, y = this.y;
        this.x = co * x - si * y;
        this.y = si * x + co * y;
        return this;
    }
    /**
     * Scales the vector by the given factors.
     * @param sx
     * @param sy
     * @param sz
     */
    scale(sx, sy, sz) {
        this.x *= sx;
        this.y *= sy;
        this.z *= sz;
        return this;
    }
    /**
     * Inverts each component of this, e.g. x = 1 / x, ...
     */
    invert() {
        this.x = 1 / this.x;
        this.y = 1 / this.y;
        this.z = 1 / this.z;
        return this;
    }
    /**
     * Negates each component of this, e.g. x = -x, ...
     */
    negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
    }
    /**
     * Normalizes the vector, making it a unit vector.
     */
    normalize() {
        const f = 1 / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        this.x *= f;
        this.y *= f;
        this.z *= f;
        return this;
    }
    /**
     * Makes this vector homogeneous by dividing all components by the z component.
     */
    homogenize() {
        this.x /= this.z;
        this.y /= this.z;
        this.z = 1;
        return this;
    }
    /**
     * Returns the dot product of this and the given vector.
     * @param other
     */
    dot(other) {
        return this.x * other.x + this.y * other.y + this.z * other.z;
    }
    /**
     * Assigns to this the cross product between this and the given vector.
     * @param other
     */
    cross(other) {
        const x = this.y * other.z - this.z * other.y;
        const y = this.z * other.x - this.x * other.z;
        const z = this.x * other.y - this.y * other.x;
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    /**
     * Returns the 2-norm (length) of this.
     */
    length() {
        const x = this.x, y = this.y, z = this.z;
        return Math.sqrt(x * x + y * y + z * z);
    }
    /**
     * Returns the squared 2-norm of this, i.e. the dot product of the vector with itself.
     */
    lengthSquared() {
        const x = this.x, y = this.y, z = this.z;
        return x * x + y * y + z * z;
    }
    /**
     * Returns the distance between this and other.
     * @param other
     */
    distanceTo(other) {
        const dx = other.x - this.x;
        const dy = other.y - this.y;
        const dz = other.z - this.z;
        return Math.sqrt(dx * dx + dy * dy + dz * dz);
    }
    /**
     * Returns the smallest component.
     */
    min() {
        return this.x < this.y ? (this.x < this.z ? this.x : this.z) : (this.y < this.z ? this.y : this.z);
    }
    /**
     * Returns the largest component.
     */
    max() {
        return this.x > this.y ? (this.x > this.z ? this.x : this.z) : (this.y > this.z ? this.y : this.z);
    }
    /**
     * Returns true if all components are exactly zero.
     */
    isZero() {
        return this.x === 0 && this.y === 0 && this.z === 0;
    }
    /**
     * Returns a clone.
     */
    clone() {
        return new Vector3(this.x, this.y, this.z);
    }
    /**
     * Returns an array with the components of this.
     * @param array Optional destination array.
     * @param offset Optional start index of the array. Default is 0.
     */
    toArray(array, offset) {
        if (array) {
            if (offset === undefined) {
                offset = 0;
            }
            array[offset] = this.x;
            array[offset + 1] = this.y;
            array[offset + 2] = this.z;
            return array;
        }
        return [
            this.x,
            this.y,
            this.z
        ];
    }
    /**
     * Returns a [[Vector2]] with the x and y components of this.
     * @param vector Optional destination vector.
     */
    toVector2(vector) {
        if (vector) {
            vector.x = this.x;
            vector.y = this.y;
            return vector;
        }
        return new Vector2_1.default(this.x, this.y);
    }
    /**
     * Returns a text representation.
     */
    toString() {
        return Vector3.toString(this);
    }
}
exports.default = Vector3;
Vector3.zeros = new Vector3(0, 0, 0);
Vector3.ones = new Vector3(1, 1, 1);
Vector3.unitX = new Vector3(1, 0, 0);
Vector3.unitY = new Vector3(0, 1, 0);
Vector3.unitZ = new Vector3(0, 0, 1);


/***/ }),

/***/ "../../libs/ff-core/source/Vector4.ts":
/*!********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/Vector4.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Vector3_1 = __webpack_require__(/*! ./Vector3 */ "../../libs/ff-core/source/Vector3.ts");
/**
 * 4-dimensional vector.
 */
class Vector4 {
    /**
     * Constructs a new vector with the given x, y, z, and w values.
     * Omitted or invalid values are set to zero.
     * @param x
     * @param y
     * @param z
     * @param w
     */
    constructor(x, y, z, w) {
        this.x = x || 0;
        this.y = y || 0;
        this.z = z || 0;
        this.w = w || 0;
    }
    /**
     * Returns a new vector with all components set to zero: [0, 0, 0, 0].
     */
    static makeZeros() {
        return new Vector4(0, 0, 0, 0);
    }
    /**
     * Returns a new vector with all components set to one: [1, 1, 1, 1].
     */
    static makeOnes() {
        return new Vector4(1, 1, 1, 1);
    }
    /**
     * Returns a new unit-length vector, parallel to the X axis: [1, 0, 0, 0].
     */
    static makeUnitX() {
        return new Vector4(1, 0, 0, 0);
    }
    /**
     * Returns a new unit-length vector, parallel to the Y axis: [0, 1, 0, 0].
     */
    static makeUnitY() {
        return new Vector4(0, 1, 0, 0);
    }
    /**
     * Returns a new unit-length vector, parallel to the Z axis: [0, 0, 1, 0].
     */
    static makeUnitZ() {
        return new Vector4(0, 0, 1, 0);
    }
    /**
     * Returns a new unit-length vector, parallel to the W axis: [0, 0, 0, 1].
     */
    static makeUnitW() {
        return new Vector4(0, 0, 0, 1);
    }
    /**
     * Returns a new vector with components set from the given vector.
     * @param vector
     */
    static makeCopy(vector) {
        return new Vector4(vector.x, vector.y, vector.z, vector.w);
    }
    /**
     * Returns a new vector with each component set to the given scalar value.
     * @param scalar
     */
    static makeFromScalar(scalar) {
        return new Vector4(scalar, scalar, scalar, scalar);
    }
    /**
     * Returns a new vector with components set from the values of the given array.
     * @param array
     */
    static makeFromArray(array) {
        return new Vector4(array[0], array[1], array[2], array[3]);
    }
    /**
     * Returns a new positional vector from the given [[Vector3]].
     * Copies the components of the given vector to x, y, z and sets w to 1.
     * @param position
     */
    static makeFromPosition(position) {
        return new Vector4(position.x, position.y, position.z, 1);
    }
    /**
     * Returns a new directional vector from the given [[Vector3]].
     * Copies the components of the given vector to x, y, z and sets w to 0.
     * @param direction
     */
    static makeFromDirection(direction) {
        return new Vector4(direction.x, direction.y, direction.z, 0);
    }
    /**
     * Returns a string representation of the given vector.
     * @param vector
     */
    static toString(vector) {
        return `[${vector.x}, ${vector.y}, ${vector.z}, ${vector.w}]`;
    }
    /**
     * Copies the components of the given vector to this.
     * @param vector
     */
    copy(vector) {
        this.x = vector.x;
        this.y = vector.y;
        this.z = vector.z;
        this.w = vector.w;
        return this;
    }
    /**
     * Sets the components of this to the given values.
     * @param x
     * @param y
     * @param z
     * @param w Optional, is set to one if omitted.
     */
    set(x, y, z, w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w === undefined ? 1 : w;
        return this;
    }
    /**
     * Sets each component to the given scalar value.
     * @param scalar
     */
    setFromScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        this.z = scalar;
        this.w = scalar;
        return this;
    }
    /**
     * Sets the components to the values of the given array.
     * @param array
     * @param offset Optional start index of the array. Default is 0.
     */
    setFromArray(array, offset = 1) {
        this.x = array[offset];
        this.y = array[offset + 1];
        this.z = array[offset + 2];
        this.w = array[offset + 3];
        return this;
    }
    /**
     * Sets this to a positional vector by copying the values of the given [[Vector3]]
     * and adding one as fourth component.
     * @param position
     */
    setPosition(position) {
        this.x = position.x;
        this.y = position.y;
        this.z = position.z;
        this.w = 1;
        return this;
    }
    /**
     * Sets this to a positional vector by copying the values of the given [[Vector3]]
     * and adding zero as fourth component.
     * @param direction
     */
    setDirection(direction) {
        this.x = direction.x;
        this.y = direction.y;
        this.z = direction.z;
        this.w = 0;
        return this;
    }
    /**
     * Sets all components to zero.
     */
    setZeros() {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 0;
        return this;
    }
    /**
     * Sets all components to one.
     */
    setOnes() {
        this.x = 1;
        this.y = 1;
        this.z = 1;
        this.w = 1;
        return this;
    }
    /**
     * Makes this a unit vector parallel to the X axis.
     */
    setUnitX() {
        this.x = 1;
        this.y = 0;
        this.z = 0;
        this.w = 0;
        return this;
    }
    /**
     * Makes this a unit vector parallel to the Y axis.
     */
    setUnitY() {
        this.x = 0;
        this.y = 1;
        this.z = 0;
        this.w = 0;
        return this;
    }
    /**
     * Makes this a unit vector parallel to the Z axis.
     */
    setUnitZ() {
        this.x = 0;
        this.y = 0;
        this.z = 1;
        this.w = 0;
        return this;
    }
    /**
     * Makes this a unit vector parallel to the W axis.
     */
    setUnitW() {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 1;
        return this;
    }
    /**
     * Adds the given vector to this.
     * @param other
     */
    add(other) {
        this.x += other.x;
        this.y += other.y;
        this.z += other.z;
        this.w += other.w;
        return this;
    }
    /**
     * Subtracts the given vector from this.
     * @param other
     */
    sub(other) {
        this.x -= other.x;
        this.y -= other.y;
        this.z -= other.z;
        this.w -= other.w;
        return this;
    }
    /**
     * Multiplies each component with the corresponding component of the given vector.
     * @param other
     */
    mul(other) {
        this.x *= other.x;
        this.y *= other.y;
        this.z *= other.z;
        this.w *= other.w;
        return this;
    }
    /**
     * Divides each component by the corresponding component of the given vector.
     * @param other
     */
    div(other) {
        this.x /= other.x;
        this.y /= other.y;
        this.z /= other.z;
        this.w /= other.w;
        return this;
    }
    /**
     * Normalizes the vector, making it a unit vector.
     */
    normalize() {
        const f = 1 / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        this.x *= f;
        this.y *= f;
        this.z *= f;
        this.w *= f;
        return this;
    }
    /**
     * Makes this vector homogeneous by dividing all components by the w-component.
     */
    homogenize() {
        this.x /= this.w;
        this.y /= this.w;
        this.z /= this.w;
        this.w = 1;
        return this;
    }
    /**
     * Projects this onto the given vector.
     * @param other
     */
    project(other) {
        //TODO: Verify
        const f = this.dot(other) / this.lengthSquared();
        this.x *= f;
        this.y *= f;
        this.z *= f;
        this.w *= f;
        return this;
    }
    /**
     * Returns the dot product of this and the given vector.
     * @param other
     */
    dot(other) {
        return this.x * other.x + this.y * other.y + this.z * other.z + this.w * other.w;
    }
    /**
     * Returns the 2-norm (length) of this.
     */
    length() {
        const x = this.x, y = this.y, z = this.z, w = this.w;
        return Math.sqrt(x * x + y * y + z * z + w * w);
    }
    /**
     * Returns the squared 2-norm of this, i.e. the dot product of the vector with itself.
     */
    lengthSquared() {
        const x = this.x, y = this.y, z = this.z, w = this.w;
        return x * x + y * y + z * z + w * w;
    }
    /**
     * Returns true if all components are exactly zero.
     * @returns {boolean}
     */
    isZero() {
        return this.x === 0 && this.y === 0 && this.z === 0 && this.w === 0;
    }
    /**
     * Returns a clone of this vector.
     */
    clone() {
        return new Vector4(this.x, this.y, this.z, this.w);
    }
    /**
     * Returns an array with the components of this.
     * @param array Optional destination array.
     * @param offset Optional start index of the array. Default is 0.
     */
    toArray(array, offset) {
        if (array) {
            if (offset === undefined) {
                offset = 0;
            }
            array[offset] = this.x;
            array[offset + 1] = this.y;
            array[offset + 2] = this.z;
            array[offset + 3] = this.w;
            return array;
        }
        return [
            this.x,
            this.y,
            this.z,
            this.w
        ];
    }
    /**
     * Returns a [[Vector3]] with the x, y, and z components of this.
     * @param vector Optional destination vector.
     */
    toVector3(vector) {
        if (vector) {
            vector.x = this.x;
            vector.y = this.y;
            vector.z = this.z;
            return vector;
        }
        return new Vector3_1.default(this.x, this.y, this.z);
    }
    /**
     * Returns a text representation.
     */
    toString() {
        return Vector4.toString(this);
    }
}
exports.default = Vector4;
Vector4.zeros = new Vector4(0, 0, 0, 0);
Vector4.ones = new Vector4(1, 1, 1, 1);
Vector4.unitX = new Vector4(1, 0, 0, 0);
Vector4.unitY = new Vector4(0, 1, 0, 0);
Vector4.unitZ = new Vector4(0, 0, 1, 0);
Vector4.unitW = new Vector4(0, 0, 0, 1);


/***/ }),

/***/ "../../libs/ff-core/source/easing.ts":
/*!*******************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/easing.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const PI = Math.PI;
const HALF_PI = PI * 0.5;
var EEasingCurve;
(function (EEasingCurve) {
    EEasingCurve[EEasingCurve["Linear"] = 0] = "Linear";
    EEasingCurve[EEasingCurve["EaseQuad"] = 1] = "EaseQuad";
    EEasingCurve[EEasingCurve["EaseInQuad"] = 2] = "EaseInQuad";
    EEasingCurve[EEasingCurve["EaseOutQuad"] = 3] = "EaseOutQuad";
    EEasingCurve[EEasingCurve["EaseCubic"] = 4] = "EaseCubic";
    EEasingCurve[EEasingCurve["EaseInCubic"] = 5] = "EaseInCubic";
    EEasingCurve[EEasingCurve["EaseOutCubic"] = 6] = "EaseOutCubic";
    EEasingCurve[EEasingCurve["EaseQuart"] = 7] = "EaseQuart";
    EEasingCurve[EEasingCurve["EaseInQuart"] = 8] = "EaseInQuart";
    EEasingCurve[EEasingCurve["EaseOutQuart"] = 9] = "EaseOutQuart";
    EEasingCurve[EEasingCurve["EaseQuint"] = 10] = "EaseQuint";
    EEasingCurve[EEasingCurve["EaseInQuint"] = 11] = "EaseInQuint";
    EEasingCurve[EEasingCurve["EaseOutQuint"] = 12] = "EaseOutQuint";
    EEasingCurve[EEasingCurve["EaseSine"] = 13] = "EaseSine";
    EEasingCurve[EEasingCurve["EaseInSine"] = 14] = "EaseInSine";
    EEasingCurve[EEasingCurve["EaseOutSine"] = 15] = "EaseOutSine";
})(EEasingCurve = exports.EEasingCurve || (exports.EEasingCurve = {}));
function getEasingFunction(curve) {
    return exports.easingFunctions[EEasingCurve[curve]];
}
exports.getEasingFunction = getEasingFunction;
exports.easingFunctions = {
    Linear: function (t) { return t; },
    EaseQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },
    EaseInQuad: function (t) { return t * t; },
    EaseOutQuad: function (t) { return t * (2 - t); },
    EaseCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },
    EaseInCubic: function (t) { return t * t * t; },
    EaseOutCubic: function (t) { return (--t) * t * t + 1; },
    EaseQuart: function (t) { return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t; },
    EaseInQuart: function (t) { return t * t * t * t; },
    EaseOutQuart: function (t) { return 1 - (--t) * t * t * t; },
    EaseQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; },
    EaseInQuint: function (t) { return t * t * t * t * t; },
    EaseOutQuint: function (t) { return 1 + (--t) * t * t * t * t; },
    EaseSine: function (t) { return -0.5 * (Math.cos(t * PI) - 1); },
    EaseInSine: function (t) { return 1 - Math.cos(t * HALF_PI); },
    EaseOutSine: function (t) { return Math.sin(t * HALF_PI); },
};


/***/ }),

/***/ "../../libs/ff-core/source/isSubclass.ts":
/*!***********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/isSubclass.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
function isSubclass(derived, base) {
    if (!derived || !base) {
        return false;
    }
    let prototype = derived.prototype;
    while (prototype) {
        if (prototype === base.prototype) {
            return true;
        }
        prototype = prototype.prototype;
    }
    return false;
}
exports.default = isSubclass;


/***/ }),

/***/ "../../libs/ff-core/source/math.ts":
/*!*****************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/math.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const math = {
    PI: 3.1415926535897932384626433832795,
    DOUBLE_PI: 6.283185307179586476925286766559,
    HALF_PI: 1.5707963267948966192313216916398,
    QUARTER_PI: 0.78539816339744830961566084581988,
    DEG2RAD: 0.01745329251994329576923690768489,
    RAD2DEG: 57.295779513082320876798154814105,
    limit: (v, min, max) => v < min ? min : (v > max ? max : v),
    limitInt: function (v, min, max) {
        v = Math.trunc(v);
        return v < min ? min : (v > max ? max : v);
    },
    normalize: (v, min, max) => (v - min) / (max - min),
    normalizeLimit: (v, min, max) => {
        v = (v - min) / (max - min);
        return v < 0.0 ? 0.0 : (v > 1.0 ? 1.0 : v);
    },
    denormalize: (t, min, max) => (min + t) * (max - min),
    scale: (v, minIn, maxIn, minOut, maxOut) => minOut + (v - minIn) / (maxIn - minIn) * (maxOut - minOut),
    scaleLimit: (v, minIn, maxIn, minOut, maxOut) => {
        v = v < minIn ? minIn : (v > maxIn ? maxIn : v);
        return minOut + (v - minIn) / (maxIn - minIn) * (maxOut - minOut);
    },
    deg2rad: function (degrees) {
        return degrees * 0.01745329251994329576923690768489;
    },
    rad2deg: function (radians) {
        return radians * 57.295779513082320876798154814105;
    },
    deltaRadians: function (radA, radB) {
        radA %= math.DOUBLE_PI;
        radA = radA < 0 ? radA + math.DOUBLE_PI : radA;
        radB %= math.DOUBLE_PI;
        radB = radB < 0 ? radB + math.DOUBLE_PI : radB;
        if (radB - radA > math.PI) {
            radA += math.DOUBLE_PI;
        }
        return radB - radA;
    },
    deltaDegrees: function (degA, degB) {
        degA %= math.DOUBLE_PI;
        degA = degA < 0 ? degA + math.DOUBLE_PI : degA;
        degB %= math.DOUBLE_PI;
        degB = degB < 0 ? degB + math.DOUBLE_PI : degB;
        if (degB - degA > math.PI) {
            degA += math.DOUBLE_PI;
        }
        return degB - degA;
    },
    curves: {
        linear: t => t,
        easeIn: t => Math.sin(t * math.HALF_PI),
        easeOut: t => Math.cos(t * math.HALF_PI - math.PI) + 1.0,
        ease: t => Math.cos(t * math.PI - math.PI) * 0.5 + 0.5,
        easeInQuad: t => t * t,
        easeOutQuad: t => t * (2 - t),
        easeQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,
        easeInCubic: t => t * t * t,
        easeOutCubic: t => (--t) * t * t + 1,
        easeCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,
        easeInQuart: t => t * t * t * t,
        easeOutQuart: t => 1 - (--t) * t * t * t,
        easeQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t
    }
};
exports.default = math;


/***/ }),

/***/ "../../libs/ff-core/source/text.ts":
/*!*****************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/text.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
function camelize(text) {
    return text.replace(/(?:^\w|[A-Z]|\b\w)/g, (letter, index) => index == 0 ? letter.toLowerCase() : letter.toUpperCase()).replace(/\s+/g, '');
}
exports.camelize = camelize;
function normalize(text) {
    return text.replace(/([A-Z])/g, ' $1')
        .replace(/^./, str => str.toUpperCase());
}
exports.normalize = normalize;


/***/ }),

/***/ "../../libs/ff-core/source/types.ts":
/*!******************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/types.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
////////////////////////////////////////////////////////////////////////////////
// ENUM HELPER FUNCTIONS
exports.enumToArray = function (e) {
    return Object.keys(e).filter(key => isNaN(Number(key)));
};


/***/ }),

/***/ "../../libs/ff-core/source/uniqueId.ts":
/*!*********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-core/source/uniqueId.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
let _chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
/**
 * Creates a base64 encoded globally unique identifier with a default length of 12 characters.
 * The identifier only uses letters and digits and can safely be used for file names.
 * Unique combinations: 62 ^ 12 > 2 ^ 64
 * @param length Number of base64 characters in the identifier.
 * @param dictionary Optional object with ids. Function ensures generated id is not equal to a key of dictionary.
 * @returns Globally unique identifier
 */
function uniqueId(length, dictionary) {
    if (!length || typeof length !== "number") {
        length = 12;
    }
    let id;
    do {
        id = "";
        for (let i = 0; i < length; ++i) {
            id += _chars[Math.random() * 62 | 0];
        }
    } while (dictionary && dictionary[id]);
    return id;
}
exports.default = uniqueId;


/***/ }),

/***/ "../../libs/ff-graph/source/Component.ts":
/*!***********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/Component.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Publisher_1 = __webpack_require__(/*! @ff/core/Publisher */ "../../libs/ff-core/source/Publisher.ts");
const Property_1 = __webpack_require__(/*! ./Property */ "../../libs/ff-graph/source/Property.ts");
exports.types = Property_1.types;
const PropertyGroup_1 = __webpack_require__(/*! ./PropertyGroup */ "../../libs/ff-graph/source/PropertyGroup.ts");
const ComponentTracker_1 = __webpack_require__(/*! ./ComponentTracker */ "../../libs/ff-graph/source/ComponentTracker.ts");
const ComponentReference_1 = __webpack_require__(/*! ./ComponentReference */ "../../libs/ff-graph/source/ComponentReference.ts");
const Node_1 = __webpack_require__(/*! ./Node */ "../../libs/ff-graph/source/Node.ts");
exports.Node = Node_1.default;
////////////////////////////////////////////////////////////////////////////////
/**
 * Base class for components in a node-component system.
 *
 * ### Events
 * - *"change"* - emits [[IComponentChangeEvent]] after the component's state (except changed properties) has changed.
 * - *"update"* - emitted after the component has been updated due to changed properties.
 * - *"dispose"* - emits [[IComponentDisposeEvent]] if the component is about to be disposed.
 *
 * ### See also
 * - [[ComponentTracker]]
 * - [[ComponentLink]]
 * - [[ComponentType]]
 * - [[ComponentOrType]]
 * - [[Node]]
 * - [[Graph]]
 * - [[System]]
 */
class Component extends Publisher_1.default {
    /**
     * Protected constructor. Use [[Node.createComponent]] to create component instances.
     * @param node Node to attach the new component to.
     * @param id Unique id for the component.
     *
     * Note that during execution of the constructor, you have access to the component's
     * node, graph, and system. The component has not yet been advertised to other components though.
     */
    constructor(node, id) {
        super({ knownEvents: false });
        this.ins = new PropertyGroup_1.default(this);
        this.outs = new PropertyGroup_1.default(this);
        this.changed = true;
        this.updated = false;
        this._name = "";
        this._tags = new Set();
        this._trackers = [];
        this.node = node;
        this.id = id;
    }
    static getTypeName(scope) {
        return typeof scope === "function" ? scope.typeName : (typeof scope === "object"
            ? scope.constructor.typeName : (scope || Component.typeName));
    }
    /**
     * Called after the component has been constructed and attached to a node.
     * Override to perform initialization tasks where you need access to other components.
     */
    create() {
        this.node._addComponent(this);
        // if graph is active, activate component
        if (this.graph.isActive && this.activate) {
            this.activate();
        }
    }
    /**
     * Removes the component from its node and deletes it.
     * Override to perform cleanup tasks (remove event listeners, etc.).
     * Must call super implementation if overridden!
     */
    dispose() {
        // deactivate component if graph is active
        if (this.graph.isActive && this.deactivate) {
            this.deactivate();
        }
        // emit dispose event
        this.emit({ type: "dispose", component: this });
        // remove all links and trackers
        this.ins.dispose();
        this.outs.dispose();
        this._trackers.forEach(tracker => tracker.dispose());
        // remove component from node
        if (this.node) {
            this.node._removeComponent(this);
            // TODO: debug only
            this.node = null;
        }
    }
    /**
     * True if the component is a node singleton, i.e. can only be added once per node.
     */
    get isNodeSingleton() {
        return this.constructor.isNodeSingleton;
    }
    /**
     * True if the component is a graph singleton, i.e. can only be added once per graph.
     */
    get isGraphSingleton() {
        return this.constructor.isGraphSingleton;
    }
    /**
     * True if the component is a system singleton, i.e. can only be added once per system.
     */
    get isSystemSingleton() {
        return this.constructor.isSystemSingleton;
    }
    /**
     * Returns the type name of this component.
     * @returns {string}
     */
    get typeName() {
        return this.constructor.typeName;
    }
    get displayTypeName() {
        const typeName = this.typeName;
        return typeName === "Component" ? typeName : typeName.substr(1);
    }
    get text() {
        return this.constructor.text;
    }
    get icon() {
        return this.constructor.icon;
    }
    /**
     * Returns the name of this component.
     */
    get name() {
        return this._name;
    }
    get displayName() {
        return this._name || this.text || this.displayTypeName;
    }
    /**
     * Sets the name of this component.
     * This emits an [[IComponentChangeEvent]].
     * @param value
     */
    set name(value) {
        this._name = value;
        this.emit({ type: "change", component: this, what: "name" });
    }
    /**
     * Returns the set of tags this component is associated with.
     */
    get tags() {
        return this._tags;
    }
    /**
     * Adds a tag to this component. Adding a tag that already exists has no effect.
     * @param tag The tag name. Valid tag names are all non-empty strings except "tag".
     */
    addTag(tag) {
        if (!this._tags.has(tag)) {
            this._tags.add(tag);
            this.node._addComponentTag(tag, this);
        }
    }
    /**
     * Removes a tag from this component. Removing a non-existing tag has no effect.
     * @param tag The tag name. Valid tag names are all non-empty strings except "tag".
     */
    removeTag(tag) {
        if (this._tags.has(tag)) {
            this._tags.delete(tag);
            this.node._removeComponentTag(tag, this);
        }
    }
    /**
     * Returns the graph this component and its node belong to.
     */
    get graph() {
        return this.node.graph;
    }
    /**
     * Returns the system this component and its node belong to.
     */
    get system() {
        return this.node.system;
    }
    /**
     * Returns the set of sibling components of this component.
     * Sibling components are components belonging to the same node.
     */
    get components() {
        return this.node.components;
    }
    /**
     * Returns true if the component's graph is active.
     */
    get isActive() {
        return this.graph.isActive;
    }
    getComponent(componentOrType, nothrow = false) {
        return this.node.components.get(componentOrType, nothrow);
    }
    getComponents(componentOrType) {
        return this.node.components.getArray(componentOrType);
    }
    getComponentsByTag(tag) {
        return this.node.components.getByTag(tag);
    }
    createComponent(componentOrType) {
        return this.node.createComponent(componentOrType);
    }
    getOrCreateComponent(componentOrType) {
        return this.node.components.get(componentOrType, true) || this.node.createComponent(componentOrType);
    }
    hasComponent(componentOrType) {
        return this.node.components.has(componentOrType);
    }
    getGraphComponent(componentOrType, nothrow = false) {
        return this.node.graph.components.get(componentOrType, nothrow);
    }
    getGraphComponents(componentOrType) {
        return this.node.graph.components.getArray(componentOrType);
    }
    getGraphComponentsByTag(tag) {
        return this.node.graph.components.getByTag(tag);
    }
    hasGraphComponent(componentOrType) {
        return this.node.graph.components.has(componentOrType);
    }
    getMainComponent(componentOrType, nothrow = false) {
        return this.node.system.graph.components.get(componentOrType, nothrow);
    }
    getMainComponents(componentOrType) {
        return this.node.system.graph.components.getArray(componentOrType);
    }
    getMainComponentsByTag(tag) {
        return this.node.system.graph.components.getByTag(tag);
    }
    hasMainComponent(componentOrType) {
        return this.node.system.graph.components.has(componentOrType);
    }
    getSystemComponent(componentOrType, nothrow = false) {
        return this.node.system.components.get(componentOrType, nothrow);
    }
    getSystemComponents(componentOrType) {
        return this.node.system.components.getArray(componentOrType);
    }
    getSystemComponentsByTag(tag) {
        return this.node.system.components.getByTag(tag);
    }
    hasSystemComponent(componentOrType) {
        return this.node.system.components.has(componentOrType);
    }
    getComponentById(id) {
        return this.node.system.components.getById(id);
    }
    getNode(nodeOrType, nothrow = false) {
        return this.node.graph.nodes.get(nodeOrType, nothrow);
    }
    getNodes(nodeOrType) {
        return this.node.graph.nodes.getArray(nodeOrType);
    }
    getNodesByTag(tag) {
        return this.node.graph.nodes.getByTag(tag);
    }
    hasNode(nodeOrType) {
        return this.node.graph.nodes.has(nodeOrType);
    }
    getMainNode(nodeOrType, nothrow = false) {
        return this.node.system.graph.nodes.get(nodeOrType, nothrow);
    }
    getMainNodes(nodeOrType) {
        return this.node.system.graph.nodes.getArray(nodeOrType);
    }
    getMainNodesByTag(tag) {
        return this.node.system.graph.nodes.getByTag(tag);
    }
    hasMainNode(nodeOrType) {
        return this.node.system.graph.nodes.has(nodeOrType);
    }
    getSystemNode(nodeOrType, nothrow = false) {
        return this.node.system.nodes.get(nodeOrType, nothrow);
    }
    getSystemNodes(nodeOrType) {
        return this.node.system.nodes.getArray(nodeOrType);
    }
    getSystemNodesByTag(tag) {
        return this.node.system.nodes.getByTag(tag);
    }
    hasSystemNode(nodeOrType) {
        return this.node.system.nodes.has(nodeOrType);
    }
    getNodeById(id) {
        return this.node.system.nodes.getById(id);
    }
    activate() {
    }
    /**
     * Called during each cycle if the component's input properties have changed.
     * Override to update the status of the component based on the input properties.
     * @param context Information about the current update cycle.
     * @returns True if the state of the component has changed.
     */
    update(context) {
        throw new Error("this should never be called");
    }
    /**
     * Called during each cycle, after the component has been updated.
     * Override to let the component perform regular tasks.
     * @param context Information about the current update cycle.
     * @returns True if the state of the component has changed.
     */
    tick(context) {
        throw new Error("this should never be called");
    }
    /**
     * Called after rendering is completed.
     * Override to perform update operations which need to happen
     * only after all rendering is done.
     * @param context Information about the current update cycle.
     * @returns True if the state of the component has changed.
     */
    tock(context) {
        throw new Error("this should never be called");
    }
    deactivate() {
    }
    requestSort() {
        this.graph.requestSort();
    }
    /**
     * Returns true if this component has or inherits from the given type.
     * @param scope
     */
    is(scope) {
        const typeName = Component.getTypeName(scope);
        let prototype = this;
        do {
            prototype = Object.getPrototypeOf(prototype);
            if (prototype.constructor.typeName === typeName) {
                return true;
            }
        } while (prototype.constructor.typeName !== Component.typeName);
        return false;
    }
    /**
     * Removes links from all input and output properties.
     */
    unlinkAllProperties() {
        this.ins.unlinkAllProperties();
        this.outs.unlinkAllProperties();
    }
    /**
     * Sets the changed flags of this component and of all input properties to false;
     */
    resetChanged() {
        this.changed = false;
        const ins = this.ins.properties;
        for (let i = 0, n = ins.length; i < n; ++i) {
            ins[i].changed = false;
        }
        const outs = this.outs.properties;
        for (let i = 0, n = outs.length; i < n; ++i) {
            outs[i].changed = false;
        }
    }
    /**
     * Tracks the given component type. If a component of this type is added
     * to or removed from the node, it will be added or removed from the tracker.
     * @param {ComponentOrType} componentOrType
     * @param {(component: T) => void} didAdd
     * @param {(component: T) => void} willRemove
     */
    trackComponent(componentOrType, didAdd, willRemove) {
        const tracker = new ComponentTracker_1.default(this.node.components, componentOrType, didAdd, willRemove);
        this._trackers.push(tracker);
        return tracker;
    }
    /**
     * Returns a weak reference to a component.
     * The reference is set to null after the linked component is removed.
     * @param componentOrType The type of component this reference accepts, or the component to link.
     */
    referenceComponent(componentOrType) {
        return new ComponentReference_1.default(this.system, componentOrType);
    }
    /**
     * Returns a text representation of the component.
     * @returns {string}
     */
    toString() {
        return `${this.typeName}${this.name ? " (" + this.name + ")" : ""}`;
    }
    dump(indent = "") {
        console.log(indent + `%cComponent '${this.typeName}' (${this.displayName})`, "color: green");
        this.ins.properties.forEach(prop => prop.dump(indent + "  IN  "));
        this.outs.properties.forEach(prop => prop.dump(indent + "  OUT "));
    }
    toJSON() {
        let json = {};
        const jsonIns = this.ins.toJSON();
        if (jsonIns) {
            json.ins = jsonIns;
        }
        const jsonOuts = this.outs.toJSON();
        if (jsonOuts) {
            json.outs = jsonOuts;
        }
        return json;
    }
    fromJSON(json) {
        if (json.ins) {
            this.ins.fromJSON(json.ins);
        }
        if (json.outs) {
            this.outs.fromJSON(json.outs);
        }
    }
    referencesFromJSON(json) {
        const dict = this.system.components.getDictionary();
        if (json.ins) {
            this.ins.linksFromJSON(json.ins, dict);
        }
        if (json.outs) {
            this.outs.linksFromJSON(json.outs, dict);
        }
    }
    addCustomInput(path, schema, index) {
        this.changed = true;
        return this.ins.createCustomProperty(path, schema, index);
    }
    allowCustomInput(schema) {
        return false;
    }
    addCustomOutput(path, schema, index) {
        return this.outs.createCustomProperty(path, schema, index);
    }
    allowCustomOutput(schema) {
        return false;
    }
    /**
    * Adds input properties to the component, specified by the provided property templates.
    * @param templates A plain object with property templates.
    * @param index Optional index at which to insert the new properties.
    */
    addInputs(templates, index) {
        return this.ins.createProperties(templates, index);
    }
    /**
     * Adds output properties to the component, specified by the provided property templates.
     * @param templates A plain object with property templates.
     * @param index Optional index at which to insert the new properties.
     */
    addOutputs(templates, index) {
        return this.outs.createProperties(templates, index);
    }
}
exports.default = Component;
Component.typeName = "Component";
Component.text = "";
Component.icon = "";
Component.isNodeSingleton = true;
Component.isGraphSingleton = false;
Component.isSystemSingleton = false;
Component.prototype.activate = null;
Component.prototype.update = null;
Component.prototype.tick = null;
Component.prototype.tock = null;
Component.prototype.deactivate = null;


/***/ }),

/***/ "../../libs/ff-graph/source/ComponentReference.ts":
/*!********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/ComponentReference.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! ./Component */ "../../libs/ff-graph/source/Component.ts");
////////////////////////////////////////////////////////////////////////////////
/**
 * Maintains a weak reference to a component.
 * The reference is set to null after the linked component is removed.
 */
class ComponentReference {
    constructor(system, scope) {
        this._typeName = scope ? Component_1.default.getTypeName(scope) : null;
        this._id = scope instanceof Component_1.default ? scope.id : undefined;
        this._system = system;
    }
    get component() {
        return this._id ? this._system.components.getById(this._id) || null : null;
    }
    set component(component) {
        if (component && this._typeName && !(component instanceof this._system.registry.getType(this._typeName))) {
            throw new Error(`can't assign component of class '${component.constructor.name || "unknown"}' to link of class '${this._typeName}'`);
        }
        this._id = component ? component.id : undefined;
    }
}
exports.default = ComponentReference;


/***/ }),

/***/ "../../libs/ff-graph/source/ComponentTracker.ts":
/*!******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/ComponentTracker.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! ./Component */ "../../libs/ff-graph/source/Component.ts");
////////////////////////////////////////////////////////////////////////////////
/**
 * Tracks components of a specific type in the same node.
 * Maintains a reference to the component if found and executes
 * callbacks if the component of the tracked type is added or removed.
 */
class ComponentTracker {
    constructor(registry, scope, didAdd, willRemove) {
        this.typeName = Component_1.default.getTypeName(scope);
        this.didAdd = didAdd;
        this.willRemove = willRemove;
        this._registry = registry;
        registry.on(this.typeName, this.onComponent, this);
        this.component = registry.get(scope, true);
        if (this.component && didAdd) {
            didAdd(this.component);
        }
    }
    dispose() {
        this._registry.off(this.typeName, this.onComponent, this);
        this.component = null;
        this.didAdd = null;
        this.willRemove = null;
    }
    onComponent(event) {
        if (event.add) {
            this.component = event.object;
            this.didAdd && this.didAdd(event.object);
        }
        else if (event.remove) {
            this.willRemove && this.willRemove(event.object);
            this.component = null;
        }
    }
}
exports.default = ComponentTracker;


/***/ }),

/***/ "../../libs/ff-graph/source/Graph.ts":
/*!*******************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/Graph.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const uniqueId_1 = __webpack_require__(/*! @ff/core/uniqueId */ "../../libs/ff-core/source/uniqueId.ts");
const Publisher_1 = __webpack_require__(/*! @ff/core/Publisher */ "../../libs/ff-core/source/Publisher.ts");
const LinkableSorter_1 = __webpack_require__(/*! ./LinkableSorter */ "../../libs/ff-graph/source/LinkableSorter.ts");
const Component_1 = __webpack_require__(/*! ./Component */ "../../libs/ff-graph/source/Component.ts");
const Node_1 = __webpack_require__(/*! ./Node */ "../../libs/ff-graph/source/Node.ts");
const ObjectRegistry_1 = __webpack_require__(/*! @ff/core/ObjectRegistry */ "../../libs/ff-core/source/ObjectRegistry.ts");
////////////////////////////////////////////////////////////////////////////////
/**
 * Graph in a graph/node/component system. A graph contains a collection of nodes.
 * Graphs can be nested, i.e. a graph can be a subgraph of another graph, the parent graph.
 *
 * ### See also
 * - [[Component]]
 * - [[Node]]
 * - [[System]]
 */
class Graph extends Publisher_1.default {
    /**
     * Creates a new graph instance.
     * @param system System this graph belongs to.
     * @param parent Optional parent component of this graph.
     */
    constructor(system, parent) {
        super({ knownEvents: false });
        /** Collection of all nodes in this graph. */
        this.nodes = new ObjectRegistry_1.default(Node_1.default);
        /** Collection of all components in this graph. */
        this.components = new ObjectRegistry_1.default(Component_1.default);
        /** List of root hierarchy components in this graph. */
        this.roots = [];
        this._sorter = new LinkableSorter_1.default();
        this._sortRequested = true;
        this._sortedList = null;
        this._tockList = [];
        this._isActive = false;
        this.system = system;
        this.parent = parent;
    }
    get isActive() {
        return this._isActive;
    }
    getComponent(componentOrType, nothrow = false) {
        return this.components.get(componentOrType, nothrow);
    }
    getComponents(componentOrType) {
        return this.components.getArray(componentOrType);
    }
    getComponentsByTag(tag) {
        return this.components.getByTag(tag);
    }
    hasComponent(componentOrType) {
        return this.components.has(componentOrType);
    }
    getMainComponent(componentOrType, nothrow = false) {
        return this.system.graph.components.get(componentOrType, nothrow);
    }
    getMainComponents(componentOrType) {
        return this.system.graph.components.getArray(componentOrType);
    }
    getMainComponentsByTag(tag) {
        return this.system.graph.components.getByTag(tag);
    }
    hasMainComponent(componentOrType) {
        return this.system.graph.components.has(componentOrType);
    }
    getSystemComponent(componentOrType, nothrow = false) {
        return this.system.components.get(componentOrType, nothrow);
    }
    getSystemComponents(componentOrType) {
        return this.system.components.getArray(componentOrType);
    }
    getSystemComponentsByTag(tag) {
        return this.system.components.getByTag(tag);
    }
    hasSystemComponent(componentOrType) {
        return this.system.components.has(componentOrType);
    }
    getComponentById(id) {
        return this.system.components.getById(id);
    }
    getNode(nodeOrType, nothrow = false) {
        return this.nodes.get(nodeOrType, nothrow);
    }
    getNodes(nodeOrType) {
        return this.nodes.getArray(nodeOrType);
    }
    getNodesByTag(tag) {
        return this.nodes.getByTag(tag);
    }
    hasNode(nodeOrType) {
        return this.nodes.has(nodeOrType);
    }
    getMainNode(nodeOrType, nothrow = false) {
        return this.system.graph.nodes.get(nodeOrType, nothrow);
    }
    getMainNodes(nodeOrType) {
        return this.system.graph.nodes.getArray(nodeOrType);
    }
    getMainNodesByTag(tag) {
        return this.system.graph.nodes.getByTag(tag);
    }
    hasMainNode(nodeOrType) {
        return this.system.graph.nodes.has(nodeOrType);
    }
    getSystemNode(nodeOrType, nothrow = false) {
        return this.system.nodes.get(nodeOrType, nothrow);
    }
    getSystemNodes(nodeOrType) {
        return this.system.nodes.getArray(nodeOrType);
    }
    getSystemNodesByTag(tag) {
        return this.system.nodes.getByTag(tag);
    }
    hasSystemNode(nodeOrType) {
        return this.system.nodes.has(nodeOrType);
    }
    getNodeById(id) {
        return this.system.nodes.getById(id);
    }
    /**
     * Calls activate() on all components in the graph.
     * This is done before any calls to update(), tick(), and tock().
     */
    activate() {
        if (this._isActive) {
            return;
        }
        this._isActive = true;
        if (this._sortRequested) {
            this._sortRequested = false;
            this.sort();
        }
        const components = this._sortedList;
        for (let i = 0, n = components.length; i < n; ++i) {
            const component = components[i];
            if (component.activate) {
                component.activate();
            }
        }
    }
    /**
     * Calls deactivate() on all components in the graph.
     * After a call to deactivate, there are no more calls to update(), tick(), tock().
     */
    deactivate() {
        if (!this._isActive) {
            return;
        }
        this._isActive = false;
        const components = this._sortedList;
        for (let i = 0, n = components.length; i < n; ++i) {
            const component = components[i];
            if (component.deactivate) {
                component.deactivate();
            }
        }
    }
    /**
     * Called at the begin of each frame cycle. Calls update() on all components
     * in the graph whose changed flag is set, then calls tick() on all components.
     * Returns true if at least one component changed its state.
     * @param context Context-specific information such as time, etc.
     * @returns true if at least one component was updated.
     */
    tick(context) {
        if (!this._isActive) {
            return;
        }
        if (this._sortRequested) {
            this._sortRequested = false;
            this.sort();
        }
        // call update on components in topological sort order
        const components = this._sortedList;
        let updated = false;
        for (let i = 0, n = components.length; i < n; ++i) {
            const component = components[i];
            component.updated = false;
            if (component.changed) {
                if (component.update && component.update(context)) {
                    component.updated = true;
                }
                if (component.tick && component.tick(context)) {
                    component.updated = true;
                }
                component.resetChanged();
            }
            else if (component.tick && component.tick(context)) {
                component.updated = true;
            }
            if (component.updated) {
                updated = true;
                component.emit("update");
            }
        }
        return updated;
    }
    /**
     * Calls tock() on all components in the graph.
     * The tock() call happens at the end of a frame cycle.
     * @param context Context-specific information such as time, etc.
     * @returns true if at least one component was updated.
     */
    tock(context) {
        if (!this._isActive) {
            return;
        }
        const components = this._tockList;
        let updated = false;
        for (let i = 0, n = components.length; i < n; ++i) {
            updated = components[i].tock(context) || updated;
        }
        return updated;
    }
    /**
     * Removes all content, i.e. all nodes and components from the graph.
     */
    clear() {
        const nodes = this.nodes.cloneArray().reverse();
        for (let i = 0, n = nodes.length; i < n; ++i) {
            nodes[i].dispose();
        }
        if (this.nodes.length > 0) {
            throw new Error("graph not empty");
        }
    }
    /**
     * Requests a topological sort of the list of components based on how they are interlinked.
     * The sort is executed before the next update.
     */
    requestSort() {
        this._sortRequested = true;
    }
    sort() {
        this._sortedList = this._sorter.sort(this.components.getArray());
        const name = this.parent ? this.parent.name || this.parent.typeName : "System";
        if (true) {
            console.log("Graph.sort - %s: sorted %s components", name, this._sortedList.length);
            //this._sortedList.forEach((comp, index) => console.log("#%s - %s (node: %s)", index, comp.displayName, comp.node.displayName));
        }
    }
    /**
     * Creates a new node of the given type. Adds it to the graph.
     * @param nodeOrType Type of the node to create.
     * @param name Optional name for the node.
     * @param id Optional unique identifier for the node (must omit unless serializing).
     */
    createCustomNode(nodeOrType, name, id) {
        const type = this.system.registry.getType(nodeOrType);
        if (!type) {
            throw new Error(`node type '${Node_1.default.getTypeName(nodeOrType)}' not registered`);
        }
        const node = new type(this, id || uniqueId_1.default(12, this.system.nodes.getDictionary()));
        node.create();
        if (name) {
            node.name = name;
        }
        if (!id) {
            // only if we're not serializing
            node.createComponents();
            // TODO: Temporarily disabled
            node.unlock();
            // prohibit adding/removing components
            //node.lock();
        }
        return node;
    }
    /**
     * Creates a new, plain, empty node (of base type [[Node]]). Adds it to the graph.
     * @param name Optional name for the node.
     * @param id Optional unique identifier for the node (must omit unless serializing).
     */
    createNode(name, id) {
        const node = new Node_1.default(this, id || uniqueId_1.default(12, this.system.nodes.getDictionary()));
        node.create();
        if (name) {
            node.name = name;
        }
        // allow adding/removing components
        node.unlock();
        return node;
    }
    findNodeByName(name, nodeOrType) {
        const nodes = this.nodes.getArray(nodeOrType);
        for (let i = 0, n = nodes.length; i < n; ++i) {
            if (nodes[i].name === name) {
                return nodes[i];
            }
        }
        return undefined;
    }
    findRootNodes(nodeOrType) {
        const nodes = this.nodes.getArray(nodeOrType);
        const result = [];
        for (let i = 0, n = nodes.length; i < n; ++i) {
            const hierarchy = nodes[i].components.get("CHierarchy", true);
            if (!hierarchy || !hierarchy.parent) {
                result.push(nodes[i]);
            }
        }
        return result;
    }
    /**
     * Returns a text representation of the graph.
     * @param verbose
     */
    toString(verbose = false) {
        const nodes = this.nodes.getArray();
        const numComponents = this.components.count();
        const text = `Graph - ${nodes.length} nodes, ${numComponents} components.`;
        if (verbose) {
            return text + "\n" + nodes.map(node => node.toString(true)).join("\n");
        }
        return text;
    }
    dump(indent = "") {
        console.log(indent + "%cGraph", "color: red");
        const roots = this.findRootNodes();
        roots.forEach(node => node.dump(indent + "  "));
    }
    /**
     * Serializes the graph, its nodes and components.
     * Returns graph serialization data, which must be cloned or stringified immediately.
     */
    toJSON() {
        const json = {};
        const jsonNodes = [];
        const nodes = this.nodes.getArray();
        for (let i = 0, n = nodes.length; i < n; ++i) {
            const node = nodes[i];
            const jsonNode = this.nodeToJSON(node);
            jsonNode.type = node.typeName;
            jsonNode.id = node.id;
            if (node.name) {
                jsonNode.name = node.name;
            }
            jsonNodes.push(jsonNode);
        }
        if (jsonNodes.length > 0) {
            json.nodes = jsonNodes;
        }
        return json;
    }
    /**
     * Deserializes the graph, its nodes and components.
     * @param json serialized graph data.
     */
    fromJSON(json) {
        if (json.nodes) {
            json.nodes.forEach(jsonNode => {
                const node = this.createCustomNode(jsonNode.type, jsonNode.name, jsonNode.id);
                node.fromJSON(jsonNode);
            });
            // deserialize references between graphs, nodes, and components
            json.nodes.forEach(jsonNode => {
                const node = this.nodes.getById(jsonNode.id);
                node.referencesFromJSON(jsonNode);
            });
        }
    }
    /**
     * Override to control how nodes are serialized.
     * Return serialization data or null if the node should be excluded from serialization.
     * @param node The node to be serialized.
     */
    nodeToJSON(node) {
        return node.toJSON();
    }
    /**
     * Adds a node to the graph and the system. Called by [[Node.attach]], do not call directly.
     * @param node
     * @private
     */
    _addNode(node) {
        this.nodes.add(node);
        this.system._addNode(node);
    }
    /**
     * Removes a node from the graph and the system. Called by [[Node.detach]], do not call directly.
     * @param node
     * @private
     */
    _removeNode(node) {
        this.system._removeNode(node);
        this.nodes.remove(node);
    }
    /**
     * Registers a node with a given tag.
     * @param tag
     * @param node
     * @private
     */
    _addNodeTag(tag, node) {
        this.nodes.addByTag(tag, node);
        this.system._addNodeTag(tag, node);
    }
    /**
     * Unregisters a node from a given tag.
     * @param tag
     * @param node
     * @private
     */
    _removeNodeTag(tag, node) {
        this.system._removeNodeTag(tag, node);
        this.nodes.removeByTag(tag, node);
    }
    /**
     * Adds a component to the graph and the system. Called by [[Component.attach]], do not call directly.
     * @param component
     * @private
     */
    _addComponent(component) {
        if (component.isGraphSingleton && this.components.has(component)) {
            throw new Error(`only one component of type '${component.typeName}' allowed per graph`);
        }
        this.components.add(component);
        this.system._addComponent(component);
        if (component.tock) {
            this._tockList.push(component);
        }
        this._sortRequested = true;
    }
    /**
     * Removes a component from the graph and the system. Called by [[Component.dispose]], do not call directly.
     * @param component
     * @private
     */
    _removeComponent(component) {
        this.system._removeComponent(component);
        this.components.remove(component);
        if (component.tock) {
            this._tockList.splice(this._tockList.indexOf(component), 1);
        }
        this._sortRequested = true;
    }
    /**
     * Registers a component with a given tag.
     * @param tag
     * @param component
     * @private
     */
    _addComponentTag(tag, component) {
        this.components.addByTag(tag, component);
        this.system._addComponentTag(tag, component);
    }
    /**
     * Unregisters a component from a given tag.
     * @param tag
     * @param component
     * @private
     */
    _removeComponentTag(tag, component) {
        this.system._removeComponentTag(tag, component);
        this.components.removeByTag(tag, component);
    }
    _addRoot(component) {
        this.roots.push(component);
        if (this.parent) {
            this.parent.onAddInnerRoot(component);
        }
    }
    _removeRoot(component) {
        if (this.parent) {
            this.parent.onRemoveInnerRoot(component);
        }
        this.roots.splice(this.roots.indexOf(component), 1);
    }
}
exports.default = Graph;


/***/ }),

/***/ "../../libs/ff-graph/source/LinkableSorter.ts":
/*!****************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/LinkableSorter.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
////////////////////////////////////////////////////////////////////////////////
/**
 * Sorts an array of [[ILinkable]] such that if a is linked to b, a comes before b.
 */
class LinkableSorter {
    constructor() {
        this.visited = {};
        this.visiting = {};
        this.sorted = [];
    }
    sort(linkables) {
        for (let i = 0, n = linkables.length; i < n; ++i) {
            this.visit(linkables[i]);
        }
        const sorted = this.sorted;
        this.visited = {};
        this.visiting = {};
        this.sorted = [];
        return sorted;
    }
    visit(linkable) {
        const visited = this.visited;
        const visiting = this.visiting;
        if (visited[linkable.id] || visiting[linkable.id]) {
            return;
        }
        visiting[linkable.id] = true;
        // for each in/out property, follow all outgoing links
        const outProps = linkable.outs.properties.concat(linkable.ins.properties);
        for (let i0 = 0, n0 = outProps.length; i0 < n0; ++i0) {
            const outLinks = outProps[i0].outLinks;
            for (let i1 = 0, n1 = outLinks.length; i1 < n1; ++i1) {
                const ins = outLinks[i1].destination.group;
                // follow outgoing links at input properties
                const inProps = ins.properties;
                for (let i2 = 0, n2 = inProps.length; i2 < n2; ++i2) {
                    const links = inProps[i2].outLinks;
                    for (let i3 = 0, n3 = links.length; i3 < n3; ++i3) {
                        const linkedIns = links[i3].destination.group;
                        this.visit(linkedIns.linkable);
                    }
                }
                this.visit(ins.linkable);
            }
        }
        visiting[linkable.id] = undefined;
        visited[linkable.id] = true;
        this.sorted.unshift(linkable);
    }
}
exports.default = LinkableSorter;


/***/ }),

/***/ "../../libs/ff-graph/source/Node.ts":
/*!******************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/Node.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const uniqueId_1 = __webpack_require__(/*! @ff/core/uniqueId */ "../../libs/ff-core/source/uniqueId.ts");
const Publisher_1 = __webpack_require__(/*! @ff/core/Publisher */ "../../libs/ff-core/source/Publisher.ts");
const ObjectRegistry_1 = __webpack_require__(/*! @ff/core/ObjectRegistry */ "../../libs/ff-core/source/ObjectRegistry.ts");
const Component_1 = __webpack_require__(/*! ./Component */ "../../libs/ff-graph/source/Component.ts");
/**
 * Node in an graph/node/component system.
 *
 * ### Events
 * - *"change"* - emits [[INodeChangeEvent]] after the node's state has changed.
 * - *"dispose"* - emits [[INodeDisposeEvent]] if the node is about to be disposed.
 *
 * ### See also
 * - [[Component]]
 * - [[Graph]]
 * - [[System]]
 */
class Node extends Publisher_1.default {
    /**
     * Protected constructor. Please use [[Graph.createNode]] / [[Graph.createCustomNode]] to create node instances.
     * @param graph
     * @param id Unique id for the node. A unique id is usually created automatically,
     * do not specify except while de-serializing the component.
     *
     * Note that during execution of the constructor, the node is not yet attached to a graph/system.
     * Do not try to get access to other nodes, components, the parent graph, or the system here.
     */
    constructor(graph, id) {
        super({ knownEvents: false });
        this.graph = null;
        /** Collection of all components in this node. */
        this.components = new ObjectRegistry_1.default(Component_1.default);
        this._name = "";
        this._tags = new Set();
        this._isLocked = undefined;
        this.graph = graph;
        this.id = id;
    }
    static getTypeName(scope) {
        return typeof scope === "function" ? scope.typeName : (typeof scope === "object"
            ? scope.constructor.typeName : (scope || Node.typeName));
    }
    /**
     * Returns the class name of this node.
     */
    get typeName() {
        return this.constructor.typeName;
    }
    get displayTypeName() {
        const typeName = this.typeName;
        return typeName === "Node" ? typeName : typeName.substr(1);
    }
    get isLocked() {
        return this._isLocked;
    }
    get text() {
        return this.constructor.text;
    }
    get icon() {
        return this.constructor.icon;
    }
    /**
     * Returns the name of this node.
     */
    get name() {
        return this._name;
    }
    get displayName() {
        return this._name || this.text || this.displayTypeName;
    }
    /**
     * Sets the name of this node.
     * This emits an [[INodeChangeEvent]]
     * @param value
     */
    set name(value) {
        this._name = value;
        this.emit({ type: "change", what: "name", node: this });
    }
    /**
     * Returns the set of tags this node is associated with.
     */
    get tags() {
        return this._tags;
    }
    /**
     * Adds a tag to this node. Adding a tag that already exists has no effect.
     * @param tag The tag name. Valid tag names are all non-empty strings except "tag".
     */
    addTag(tag) {
        if (!this._tags.has(tag)) {
            this._tags.add(tag);
            this.graph._addNodeTag(tag, this);
        }
    }
    /**
     * Removes a tag from this node. Removing a non-existing tag has no effect.
     * @param tag The tag name. Valid tag names are all non-empty strings except "tag".
     */
    removeTag(tag) {
        if (this._tags.has(tag)) {
            this._tags.delete(tag);
            this.graph._removeNodeTag(tag, this);
        }
    }
    /**
     * Returns the system this node and its graph belong to.
     */
    get system() {
        return this.graph.system;
    }
    getComponent(componentOrType, nothrow = false) {
        return this.components.get(componentOrType, nothrow);
    }
    getComponents(componentOrType) {
        return this.components.getArray(componentOrType);
    }
    getComponentsByTag(tag) {
        return this.components.getByTag(tag);
    }
    getOrCreateComponent(componentOrType) {
        return this.components.get(componentOrType, true) || this.createComponent(componentOrType);
    }
    hasComponent(componentOrType) {
        return this.components.has(componentOrType);
    }
    getGraphComponent(componentOrType, nothrow = false) {
        return this.graph.components.get(componentOrType, nothrow);
    }
    getGraphComponents(componentOrType) {
        return this.graph.components.getArray(componentOrType);
    }
    getGraphComponentsByTag(tag) {
        return this.graph.components.getByTag(tag);
    }
    hasGraphComponent(componentOrType) {
        return this.graph.components.has(componentOrType);
    }
    getMainComponent(componentOrType, nothrow = false) {
        return this.graph.system.graph.components.get(componentOrType, nothrow);
    }
    getMainComponents(componentOrType) {
        return this.graph.system.graph.components.getArray(componentOrType);
    }
    getMainComponentsByTag(tag) {
        return this.graph.system.graph.components.getByTag(tag);
    }
    hasMainComponent(componentOrType) {
        return this.graph.system.graph.components.has(componentOrType);
    }
    getSystemComponent(componentOrType, nothrow = false) {
        return this.graph.system.components.get(componentOrType, nothrow);
    }
    getSystemComponents(componentOrType) {
        return this.graph.system.components.getArray(componentOrType);
    }
    getSystemComponentsByTag(tag) {
        return this.graph.system.components.getByTag(tag);
    }
    hasSystemComponent(componentOrType) {
        return this.graph.system.components.has(componentOrType);
    }
    getComponentById(id) {
        return this.graph.system.components.getById(id);
    }
    getNode(nodeOrType, nothrow = false) {
        return this.graph.nodes.get(nodeOrType, nothrow);
    }
    getNodes(nodeOrType) {
        return this.graph.nodes.getArray(nodeOrType);
    }
    getNodesByTag(tag) {
        return this.graph.nodes.getByTag(tag);
    }
    hasNode(nodeOrType) {
        return this.graph.nodes.has(nodeOrType);
    }
    getMainNode(nodeOrType, nothrow = false) {
        return this.graph.system.graph.nodes.get(nodeOrType, nothrow);
    }
    getMainNodes(nodeOrType) {
        return this.graph.system.graph.nodes.getArray(nodeOrType);
    }
    getMainNodesByTag(tag) {
        return this.graph.system.graph.nodes.getByTag(tag);
    }
    hasMainNode(nodeOrType) {
        return this.graph.system.graph.nodes.has(nodeOrType);
    }
    getSystemNode(nodeOrType, nothrow = false) {
        return this.graph.system.nodes.get(nodeOrType, nothrow);
    }
    getSystemNodes(nodeOrType) {
        return this.graph.system.nodes.getArray(nodeOrType);
    }
    getSystemNodesByTag(tag) {
        return this.graph.system.nodes.getByTag(tag);
    }
    hasSystemNode(nodeOrType) {
        return this.graph.system.nodes.has(nodeOrType);
    }
    getNodeById(id) {
        return this.graph.system.nodes.getById(id);
    }
    lock() {
        if (this._isLocked === false) {
            throw new Error("can't lock an unlocked node again");
        }
        this._isLocked = true;
    }
    unlock() {
        this._isLocked = false;
    }
    /**
     * Adds this node to the given graph and the system.
     */
    create() {
        this.graph._addNode(this);
    }
    /**
     * Override in custom node types to create a predefined set of components.
     * Note that this function is not called if a node is restored from serialization data.
     */
    createComponents() {
    }
    /**
     * Removes all components from this node.
     */
    clear() {
        // dispose components
        const componentList = this.components.getArray().slice();
        componentList.forEach(component => component.dispose());
    }
    /**
     * Must be called to delete/destroy the node. This unregisters the node
     * and all its components from the system.
     */
    dispose() {
        // dispose components
        const componentList = this.components.cloneArray().reverse();
        componentList.forEach(component => component.dispose());
        // emit dispose event
        this.emit({ type: "dispose", node: this });
        // remove node from system and graph
        if (this.graph) {
            this.graph._removeNode(this);
            // TODO: debug only
            this.graph = null;
        }
    }
    /**
     * Creates a new component of the given type. Adds it to this node.
     * @param componentOrType Component constructor, type name, or instance.
     * @param name Optional name for the component.
     * @param id Optional unique identifier for the component (must omit unless serializing).
     */
    createComponent(componentOrType, name, id) {
        if (this._isLocked === true) {
            throw new Error("node is locked, can't create component");
        }
        const type = this.system.registry.getType(componentOrType);
        if (!type) {
            throw new Error(`component type '${Component_1.default.getTypeName(componentOrType)}' not registered`);
        }
        const component = new type(this, id || uniqueId_1.default(12, this.system.components.getDictionary()));
        component.create();
        if (name) {
            component.name = name;
        }
        return component;
    }
    /**
     * Tests whether the node is of or descends from the given type.
     * @param scope Node constructor, type name, or instance.
     */
    is(scope) {
        const typeName = Node.getTypeName(scope);
        let prototype = this;
        do {
            prototype = Object.getPrototypeOf(prototype);
            if (prototype.constructor.typeName === typeName) {
                return true;
            }
        } while (prototype.constructor.typeName !== Node.typeName);
        return false;
    }
    /**
     * Returns a text representation of the node.
     * @param verbose
     */
    toString(verbose = false) {
        const components = this.components.getArray();
        const text = `Node '${this.name}' - ${components.length} components`;
        if (verbose) {
            return text + "\n" + components.map(component => "  " + component.toString()).join("\n");
        }
        return text;
    }
    dump(indent = "") {
        console.log(indent + `%cNode '${this.typeName}' (${this.displayName})`, "color: blue");
        this.components.getArray().forEach(comp => comp.dump(indent + "  "));
    }
    /**
     * Serializes the node and its components.
     * Return node serialization data, or null if the node should be excluded from serialization.
     */
    toJSON() {
        const json = {};
        const jsonComponents = [];
        if (this._isLocked) {
            json.locked = true;
        }
        const components = this.components.getArray();
        for (let i = 0, n = components.length; i < n; ++i) {
            const component = components[i];
            const jsonComp = this.componentToJSON(component);
            if (jsonComp) {
                jsonComp.type = component.typeName;
                jsonComp.id = component.id;
                if (component.name) {
                    jsonComp.name = component.name;
                }
                jsonComponents.push(jsonComp);
            }
        }
        if (jsonComponents.length > 0) {
            json.components = jsonComponents;
        }
        return json;
    }
    /**
     * Deserializes the node and its components.
     * @param json serialized node data.
     */
    fromJSON(json) {
        this._isLocked = !!json.locked;
        if (json.components) {
            json.components.forEach(jsonComp => this.componentFromJSON(jsonComp));
        }
    }
    /**
     * Override to control how components are deserialized.
     * @param jsonComp The JSON data for the component to be deserialized.
     */
    componentFromJSON(jsonComp) {
        const component = this.createComponent(jsonComp.type, jsonComp.name, jsonComp.id);
        component.fromJSON(jsonComp);
    }
    /**
     * Deserializes the links of all components.
     * @param json serialized component data.
     */
    referencesFromJSON(json) {
        if (json.components) {
            json.components.forEach(jsonComp => {
                const component = this.components.getById(jsonComp.id);
                component.referencesFromJSON(jsonComp);
            });
        }
    }
    /**
     * Override to control how components are serialized.
     * Return serialization data or null if the component should be excluded from serialization.
     * @param component The component to be serialized.
     */
    componentToJSON(component) {
        return component.toJSON();
    }
    /**
     * Adds a component to the node, the node's graph and the system. Called by [[Component.attach]],
     * do not call directly.
     * @param component
     * @private
     */
    _addComponent(component) {
        if (component.isNodeSingleton && this.components.has(component)) {
            throw new Error(`only one component of type '${component.typeName}' allowed per node`);
        }
        this.components.add(component);
        this.graph._addComponent(component);
    }
    /**
     * Removes a component from the node, the node's graph and the system. Called by [[Component.detach]],
     * do not call directly.
     * @param component
     * @private
     */
    _removeComponent(component) {
        this.graph._removeComponent(component);
        this.components.remove(component);
    }
    _addComponentTag(tag, component) {
        this.components.addByTag(tag, component);
        this.graph._addComponentTag(tag, component);
    }
    _removeComponentTag(tag, component) {
        this.graph._removeComponentTag(tag, component);
        this.components.removeByTag(tag, component);
    }
}
exports.default = Node;
Node.typeName = "Node";
Node.text = "";
Node.icon = "";


/***/ }),

/***/ "../../libs/ff-graph/source/Property.ts":
/*!**********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/Property.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const isSubclass_1 = __webpack_require__(/*! @ff/core/isSubclass */ "../../libs/ff-core/source/isSubclass.ts");
const Publisher_1 = __webpack_require__(/*! @ff/core/Publisher */ "../../libs/ff-core/source/Publisher.ts");
const convert_1 = __webpack_require__(/*! ./convert */ "../../libs/ff-graph/source/convert.ts");
const PropertyLink_1 = __webpack_require__(/*! ./PropertyLink */ "../../libs/ff-graph/source/PropertyLink.ts");
const propertyTypes_1 = __webpack_require__(/*! ./propertyTypes */ "../../libs/ff-graph/source/propertyTypes.ts");
exports.schemas = propertyTypes_1.schemas;
exports.types = propertyTypes_1.types;
/**
 * Linkable property.
 */
class Property extends Publisher_1.default {
    /**
     * Creates a new linkable property.
     * @param path Name and group(s) the property is displayed under.
     * @param schema Property schema definition.
     * @param custom Marks the property as user-defined if set to true.
     */
    constructor(path, schema, custom) {
        super();
        this.addEvents("value", "link", "change", "dispose");
        if (!schema || schema.preset === undefined) {
            throw new Error("missing schema/preset");
        }
        const preset = schema.preset;
        const isArray = Array.isArray(preset);
        this.type = typeof (isArray ? preset[0] : preset);
        this.schema = schema;
        this.custom = custom || false;
        this.elementCount = isArray ? preset.length : 1;
        this.inLinks = [];
        this.outLinks = [];
        this._group = null;
        this._key = "";
        this._path = path;
        this.value = null;
        this.reset();
        this.changed = !schema.event;
    }
    get group() {
        return this._group;
    }
    get key() {
        return this._key;
    }
    get path() {
        return this._path;
    }
    set path(path) {
        this._path = path;
        this.emit({ type: "change", what: "path", property: this });
    }
    get name() {
        return this._path.split(".").pop();
    }
    // /**
    //  * Adds the property to the given group.
    //  * @param group The property group this property should be added to.
    //  * @param key An optional key under which the property is accessible in the property group.
    //  * @param index An optional index position where the property should be inserted in the group.
    //  */
    // attach(group: PropertyGroup, key?: string, index?: number)
    // {
    //     group._addProperty(this, key, index);
    // }
    //
    // /**
    //  * Removes the property from the group it was previously added to.
    //  * Does nothing if the property is not member of a group.
    //  */
    // detach()
    // {
    //     if (this._group) {
    //         this._group._removeProperty(this);
    //     }
    // }
    /**
     * Removes the property from its group, removes all links.
     * Emits a [[IPropertyDisposeEvent]] event.
     */
    dispose() {
        this.unlink();
        if (this._group) {
            this._group.removeProperty(this);
        }
        this.emit({ type: "dispose", property: this });
    }
    setValue(value, silent, noevent) {
        this.value = value;
        if (!silent) {
            this.changed = true;
            if (this.isInput()) {
                this._group.linkable.changed = true;
            }
        }
        // TODO: Demo hack
        if (!noevent) {
            this.emit("value", value);
        }
        const outLinks = this.outLinks;
        for (let i = 0, n = outLinks.length; i < n; ++i) {
            outLinks[i].push();
        }
    }
    setOption(option, silent, noevent) {
        if (!this.schema.options) {
            throw new Error("not an 'option' type");
        }
        const value = this.schema.options.indexOf(option);
        if (value >= 0) {
            this.setValue(value, silent, noevent);
        }
    }
    copyValue(value, silent) {
        if (Array.isArray(value)) {
            value = value.slice();
        }
        this.setValue(value, silent);
    }
    set(silent) {
        if (!silent) {
            this.changed = true;
            if (this.isInput()) {
                this._group.linkable.changed = true;
            }
        }
        this.emit("value", this.value);
        const outLinks = this.outLinks;
        for (let i = 0, n = outLinks.length; i < n; ++i) {
            outLinks[i].push();
        }
    }
    cloneValue() {
        const value = this.value;
        return Array.isArray(value) ? value.slice() : value;
    }
    /**
     * Returns the property value, validated against the property schema.
     * @param result Optional array to write the validated values into.
     */
    getValidatedValue(result) {
        const value = this.value;
        if (this.isArray()) {
            result = result || [];
            for (let i = 0, n = value.length; i < n; ++i) {
                result[i] = this.validateValue(value[i]);
            }
            return result;
        }
        return this.validateValue(value);
    }
    linkTo(destination, sourceIndex, destinationIndex) {
        destination.linkFrom(this, sourceIndex, destinationIndex);
    }
    linkFrom(source, sourceIndex, destinationIndex) {
        if (!this.canLinkFrom(source, sourceIndex, destinationIndex)) {
            throw new Error(`can't link from '${source.path}' to '${this.path}'`);
        }
        const link = new PropertyLink_1.default(source, this, sourceIndex, destinationIndex);
        source.addOutLink(link);
        this.addInLink(link);
    }
    unlinkTo(destination, sourceIndex, destinationIndex) {
        destination.unlinkFrom(this, sourceIndex, destinationIndex);
    }
    unlinkFrom(source, sourceIndex, destinationIndex) {
        const link = this.inLinks.find(link => link.source === source
            && link.sourceIndex === sourceIndex
            && link.destinationIndex === destinationIndex);
        if (!link) {
            return false;
        }
        source.removeOutLink(link);
        this.removeInLink(link);
        return true;
    }
    unlink() {
        const inLinks = this.inLinks.slice();
        inLinks.forEach(link => {
            link.source.removeOutLink(link);
            this.removeInLink(link);
        });
        const outLinks = this.outLinks.slice();
        outLinks.forEach(link => {
            this.removeOutLink(link);
            link.destination.removeInLink(link);
        });
        if (this.inLinks.length !== 0 || this.outLinks.length !== 0) {
            throw new Error("fatal: leftover links");
        }
    }
    addInLink(link) {
        if (link.destination !== this) {
            throw new Error("input link's destination must equal this");
        }
        this.inLinks.push(link);
        this.requestSort();
        this.emit({
            type: "link", add: true, remove: false, link
        });
    }
    addOutLink(link) {
        if (link.source !== this) {
            throw new Error("output link's source must equal this");
        }
        this.outLinks.push(link);
        this.requestSort();
        // push value through added link
        link.push();
    }
    removeInLink(link) {
        const index = this.inLinks.indexOf(link);
        if (index < 0) {
            throw new Error("input link not found");
        }
        this.inLinks.splice(index, 1);
        this.requestSort();
        // if last link is removed and if object, reset to default (usually null) values
        if (this.inLinks.length === 0 && this.type === "object") {
            this.reset();
        }
        this.emit({
            type: "link", add: false, remove: true, link
        });
    }
    removeOutLink(link) {
        const index = this.outLinks.indexOf(link);
        if (index < 0) {
            throw new Error("output link not found");
        }
        this.outLinks.splice(index, 1);
        this.requestSort();
    }
    canLinkTo(destination, sourceIndex, destinationIndex) {
        return destination.canLinkFrom(this, sourceIndex, destinationIndex);
    }
    canLinkFrom(source, sourceIndex, destinationIndex) {
        // can't link to an output property
        if (this.isOutput()) {
            return false;
        }
        const hasSrcIndex = sourceIndex >= 0;
        const hasDstIndex = destinationIndex >= 0;
        if (!source.isArray() && hasSrcIndex) {
            throw new Error("non-array source property; can't link to element");
        }
        if (!this.isArray() && hasDstIndex) {
            throw new Error("non-array destination property; can't link to element");
        }
        const srcIsArray = source.isArray() && !hasSrcIndex;
        const dstIsArray = this.isArray() && !hasDstIndex;
        if (srcIsArray !== dstIsArray) {
            return false;
        }
        if (srcIsArray && source.elementCount !== this.elementCount) {
            return false;
        }
        if (source.type === "object" && this.type === "object") {
            if (!isSubclass_1.default(source.schema.objectType, this.schema.objectType)) {
                return false;
            }
        }
        return convert_1.canConvert(source.type, this.type);
    }
    reset() {
        let value;
        if (this.isMulti()) {
            let multiArray = this.value;
            if (!multiArray) {
                value = multiArray = [];
            }
            else {
                multiArray.length = 1;
            }
            multiArray[0] = this.clonePreset();
        }
        else {
            value = this.clonePreset();
        }
        // set changed flag and push to output links
        this.setValue(value);
    }
    setMultiChannelCount(count) {
        if (!this.isMulti()) {
            throw new Error("can't set multi channel count on non-multi property");
        }
        const multiArray = this.value;
        const currentCount = multiArray.length;
        multiArray.length = count;
        for (let i = currentCount; i < count; ++i) {
            multiArray[i] = this.clonePreset();
        }
        this.changed = true;
    }
    requestSort() {
        if (this._group && this._group.linkable) {
            this._group.linkable.requestSort();
        }
    }
    setOptions(options) {
        if (!this.schema.options) {
            throw new Error(`property type mismatch, can't set options on '${this.path}'`);
        }
        this.schema.options = options.slice();
        this.emit({ type: "change", what: "options", property: this });
    }
    getOptionText() {
        const options = this.schema.options;
        if (this.type === "number" && options) {
            const i = Math.trunc(this.value);
            return options[i < 0 ? 0 : (i >= options.length ? 0 : i)] || "";
        }
    }
    isInput() {
        return this._group && this._group === this._group.linkable.ins;
    }
    isOutput() {
        return this._group && this._group === this._group.linkable.outs;
    }
    isArray() {
        return Array.isArray(this.schema.preset);
    }
    isMulti() {
        return !!this.schema.multi;
    }
    isDefault() {
        const value = this.schema.multi ? this.value[0] : this.value;
        const preset = this.schema.preset;
        const valueLength = Array.isArray(value) ? value.length : -1;
        const presetLength = Array.isArray(preset) ? preset.length : -1;
        if (valueLength !== presetLength) {
            return false;
        }
        if (valueLength >= 0) {
            for (let i = 0; i < valueLength; ++i) {
                if (value[i] !== preset[i]) {
                    return false;
                }
            }
            return true;
        }
        return value === preset;
    }
    hasLinks() {
        return this.inLinks.length > 0 || this.outLinks.length > 0;
    }
    hasInLinks(index) {
        const links = this.inLinks;
        if (!(index >= 0)) {
            return links.length > 0;
        }
        for (let i = 0, n = links.length; i < n; ++i) {
            if (links[i].destinationIndex === index) {
                return true;
            }
        }
        return false;
    }
    hasMainInLinks() {
        const links = this.inLinks;
        for (let i = 0, n = links.length; i < n; ++i) {
            if (!(links[i].destinationIndex >= 0)) {
                return true;
            }
        }
        return false;
    }
    hasOutLinks(index) {
        const links = this.outLinks;
        if (!(index >= 0)) {
            return links.length > 0;
        }
        for (let i = 0, n = links.length; i < n; ++i) {
            if (links[i].sourceIndex === index) {
                return true;
            }
        }
        return false;
    }
    inLinkCount() {
        return this.inLinks.length;
    }
    outLinkCount() {
        return this.outLinks.length;
    }
    toJSON() {
        let json = this.custom ? {
            path: this.path,
            schema: Object.assign({}, this.schema)
        } : null;
        if (!this.isOutput() && !this.hasMainInLinks() && !this.isDefault() && this.type !== "object") {
            json = json || {};
            json.value = this.value;
        }
        if (this.outLinks.length > 0) {
            json = json || {};
            json.links = this.outLinks.map(link => {
                const jsonLink = {
                    id: link.destination._group.linkable.id,
                    key: link.destination.key
                };
                if (link.sourceIndex >= 0) {
                    jsonLink.srcIndex = link.sourceIndex;
                }
                if (link.destinationIndex >= 0) {
                    jsonLink.dstIndex = link.destinationIndex;
                }
                return jsonLink;
            });
        }
        return json;
    }
    fromJSON(json, linkableDict) {
        if (json.value !== undefined) {
            this.value = json.value;
        }
        if (json.links !== undefined) {
            json.links.forEach(link => {
                const target = linkableDict[link.id];
                const property = target.ins[link.key];
                property.linkFrom(this, link.srcIndex, link.dstIndex);
            });
        }
    }
    /**
     * Returns a text representation.
     */
    toString() {
        const schema = this.schema;
        const typeName = schema.event ? "event" : (schema.options ? "enum" : this.type);
        return `${this.path} [${typeName}]`;
    }
    dump(indent = "") {
        console.log(indent + `Property '${this.path}', key: ${this.key}, value: ${this.value}`);
    }
    /**
     * Validates the given value against the property schema.
     * @param value
     */
    validateValue(value) {
        const schema = this.schema;
        if (schema.enum) {
            const i = Math.trunc(value);
            return schema.enum[i] ? i : 0;
        }
        if (schema.options) {
            const i = Math.trunc(value);
            return i < 0 ? 0 : (i >= schema.options.length ? 0 : i);
        }
        if (this.type === "number") {
            value = schema.min ? Math.max(schema.min, value) : value;
            value = schema.max ? Math.min(schema.max, value) : value;
            return value;
        }
        return value;
    }
    clonePreset() {
        const preset = this.schema.preset;
        return Array.isArray(preset) ? preset.slice() : preset;
    }
}
exports.default = Property;


/***/ }),

/***/ "../../libs/ff-graph/source/PropertyGroup.ts":
/*!***************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/PropertyGroup.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Publisher_1 = __webpack_require__(/*! @ff/core/Publisher */ "../../libs/ff-core/source/Publisher.ts");
const Property_1 = __webpack_require__(/*! ./Property */ "../../libs/ff-graph/source/Property.ts");
const uniqueId_1 = __webpack_require__(/*! @ff/core/uniqueId */ "../../libs/ff-core/source/uniqueId.ts");
/**
 * A set of properties. Properties can be linked, such that one property updates another.
 * After adding properties to the set, they are available on the set using their key.
 * To make use of linkable properties, classes must implement the [[ILinkable]] interface.
 *
 * ### Events
 * - *"change"* - emits [[IPropertiesChangeEvent]] after properties have been added, removed, or renamed.
 */
class PropertyGroup extends Publisher_1.default {
    constructor(linkable) {
        super();
        this.addEvent("property");
        this.linkable = linkable;
        this.properties = [];
    }
    get customProperties() {
        return this.properties.filter(property => property.custom);
    }
    dispose() {
        this.unlinkAllProperties();
    }
    isInputGroup() {
        return this === this.linkable.ins;
    }
    isOutputGroup() {
        return this === this.linkable.outs;
    }
    /**
     * Appends properties to the set.
     * @param templates plain object with property templates.
     * @param index Optional index at which to insert the properties.
     */
    createProperties(templates, index) {
        Object.keys(templates).forEach((key, i) => {
            const ii = index === undefined ? undefined : index + i;
            const template = templates[key];
            this.createProperty(template.path, template.schema, key, ii);
        });
        return this;
    }
    createProperty(path, schema, key, index) {
        const property = new Property_1.default(path, schema);
        this.addProperty(property, key, index);
        return property;
    }
    createCustomProperty(path, schema, index) {
        const property = new Property_1.default(path, schema, /* custom */ true);
        this.addCustomProperty(property, index);
        return property;
    }
    addCustomProperty(property, index) {
        const key = uniqueId_1.default(5);
        this.addProperty(property, key, index);
    }
    addProperty(property, key, index) {
        if (property.group) {
            throw new Error("can't add, property already part of a group");
        }
        if (this[key]) {
            throw new Error(`key '${key}' already exists in group`);
        }
        property._group = this;
        property._key = key;
        if (index === undefined) {
            this.properties.push(property);
        }
        else {
            this.properties.splice(index, 0, property);
        }
        this[key] = property;
        this.emit({
            type: "property", add: true, remove: false, property
        });
    }
    /**
     * Removes the given property from the set.
     * @param {Property} property The property to be removed.
     */
    removeProperty(property) {
        if (property.group !== this) {
            throw new Error("can't remove, property not in this group");
        }
        if (property.hasLinks()) {
            throw new Error("can't remove, property has links");
        }
        if (this[property.key] !== property) {
            throw new Error(`property key '${property.key}' not found in group`);
        }
        this.properties.slice(this.properties.indexOf(property), 1);
        delete this[property.key];
        property._group = null;
        property._key = "";
        this.emit({
            type: "property", add: false, remove: true, property
        });
    }
    /**
     * Returns a property by key.
     * @param {string} key The key of the property to be returned.
     * @returns {Property}
     */
    getProperty(key) {
        const property = this[key];
        if (!property) {
            throw new Error(`no property found with key '${key}'`);
        }
        return property;
    }
    getKeys(includeObjects = false) {
        const keys = [];
        this.properties.forEach(property => {
            if (includeObjects || property.type !== "object") {
                keys.push(property.key);
            }
        });
        return keys;
    }
    getValues(includeObjects = false) {
        const values = [];
        this.properties.map(property => {
            if (includeObjects || property.type !== "object") {
                values.push(property.value);
            }
        });
        return values;
    }
    cloneValues(includeObjects = false) {
        const values = [];
        this.properties.map(property => {
            if (includeObjects || property.type !== "object") {
                values.push(property.cloneValue());
            }
        });
        return values;
    }
    setValues(values) {
        Object.keys(values).forEach(key => this.getProperty(key).value = values[key]);
    }
    /**
     * Sets the values of multiple properties. Properties are identified by key.
     * @param values Dictionary of property key/value pairs.
     */
    copyValues(values) {
        Object.keys(values).forEach(key => this.getProperty(key).copyValue(values[key]));
    }
    unlinkAllProperties() {
        this.properties.forEach(property => property.unlink());
    }
    toJSON() {
        let json = null;
        this.properties.forEach(property => {
            const jsonProp = property.toJSON();
            if (jsonProp) {
                json = json || {};
                json[property.key] = jsonProp;
            }
        });
        return json;
    }
    fromJSON(json) {
        Object.keys(json).forEach(key => {
            const jsonProp = json[key];
            if (jsonProp.schema) {
                const property = new Property_1.default(jsonProp.path, jsonProp.schema, /* custom */ true);
                this.addProperty(property, key);
            }
        });
    }
    linksFromJSON(json, linkableDict) {
        Object.keys(json).forEach(key => {
            this[key].fromJSON(json[key], linkableDict);
        });
    }
}
exports.default = PropertyGroup;


/***/ }),

/***/ "../../libs/ff-graph/source/PropertyLink.ts":
/*!**************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/PropertyLink.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const convert_1 = __webpack_require__(/*! ./convert */ "../../libs/ff-graph/source/convert.ts");
class PropertyLink {
    constructor(source, destination, sourceIndex, destinationIndex) {
        if (source.elementCount === 1 && sourceIndex >= 0) {
            throw new Error("non-array source property; can't link to element");
        }
        if (destination.elementCount === 1 && destinationIndex >= 0) {
            throw new Error("non-array destination property; can't link to element");
        }
        this.source = source;
        this.destination = destination;
        this.sourceIndex = sourceIndex;
        this.destinationIndex = destinationIndex;
        const srcIndex = sourceIndex === undefined ? -1 : sourceIndex;
        const dstIndex = destinationIndex === undefined ? -1 : destinationIndex;
        const isArray = source.elementCount > 1 && srcIndex < 0 && dstIndex < 0;
        this.fnConvert = convert_1.getConversionFunction(source.type, destination.type, isArray);
        const fnElementCopy = convert_1.getElementCopyFunction(srcIndex, dstIndex, this.fnConvert);
        this.fnCopy = convert_1.getMultiCopyFunction(source.isMulti(), destination.isMulti(), fnElementCopy);
    }
    push() {
        this.destination.setValue(this.fnCopy(this.source.value, this.destination.value, this.fnConvert));
    }
}
exports.default = PropertyLink;


/***/ }),

/***/ "../../libs/ff-graph/source/System.ts":
/*!********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/System.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Publisher_1 = __webpack_require__(/*! @ff/core/Publisher */ "../../libs/ff-core/source/Publisher.ts");
const ObjectRegistry_1 = __webpack_require__(/*! @ff/core/ObjectRegistry */ "../../libs/ff-core/source/ObjectRegistry.ts");
const TypeRegistry_1 = __webpack_require__(/*! @ff/core/TypeRegistry */ "../../libs/ff-core/source/TypeRegistry.ts");
const Component_1 = __webpack_require__(/*! ./Component */ "../../libs/ff-graph/source/Component.ts");
const Node_1 = __webpack_require__(/*! ./Node */ "../../libs/ff-graph/source/Node.ts");
const Graph_1 = __webpack_require__(/*! ./Graph */ "../../libs/ff-graph/source/Graph.ts");
class System extends Publisher_1.default {
    constructor(registry) {
        super({ knownEvents: false });
        this.nodes = new ObjectRegistry_1.default(Node_1.default);
        this.components = new ObjectRegistry_1.default(Component_1.default);
        this.registry = registry || new TypeRegistry_1.default();
        // create the main graph and activate it by default
        this.graph = new Graph_1.default(this, null);
        this.graph.activate();
    }
    getComponent(componentOrType, nothrow = false) {
        return this.components.get(componentOrType, nothrow);
    }
    getComponents(componentOrType) {
        return this.components.getArray(componentOrType);
    }
    getComponentsByTag(tag) {
        return this.components.getByTag(tag);
    }
    hasComponents(componentOrType) {
        return this.components.has(componentOrType);
    }
    getMainComponent(componentOrType, nothrow = false) {
        return this.graph.components.get(componentOrType, nothrow);
    }
    getMainComponents(componentOrType) {
        return this.graph.components.getArray(componentOrType);
    }
    getMainComponentsByTag(tag) {
        return this.graph.components.getByTag(tag);
    }
    hasMainComponents(componentOrType) {
        return this.graph.components.has(componentOrType);
    }
    getNode(nodeOrType, nothrow = false) {
        return this.nodes.get(nodeOrType, nothrow);
    }
    getNodes(nodeOrType) {
        return this.nodes.getArray(nodeOrType);
    }
    getNodesByTag(tag) {
        return this.nodes.getByTag(tag);
    }
    hasNodes(nodeOrType) {
        return this.nodes.has(nodeOrType);
    }
    getMainNode(nodeOrType, nothrow = false) {
        return this.graph.nodes.get(nodeOrType, nothrow);
    }
    getMainNodes(nodeOrType) {
        return this.graph.nodes.getArray(nodeOrType);
    }
    getMainNodesByTag(tag) {
        return this.graph.nodes.getByTag(tag);
    }
    hasMainNodes(nodeOrType) {
        return this.graph.nodes.has(nodeOrType);
    }
    findNodeByName(name, nodeOrType) {
        const nodes = this.nodes.getArray(nodeOrType);
        for (let i = 0, n = nodes.length; i < n; ++i) {
            if (nodes[i].name === name) {
                return nodes[i];
            }
        }
        return undefined;
    }
    /**
     * Serializes the content of the system, ready to be stringified.
     */
    toJSON() {
        return this.graph.toJSON();
    }
    /**
     * Deserializes the given JSON object.
     * @param json
     */
    fromJSON(json) {
        this.graph.clear();
        this.graph.fromJSON(json);
    }
    toString(verbose = false) {
        const nodes = this.nodes.getArray();
        const numComponents = this.components.count();
        const text = `System - ${nodes.length} nodes, ${numComponents} components.`;
        if (verbose) {
            return text + "\n" + nodes.map(node => node.toString(true)).join("\n");
        }
        return text;
    }
    _addNode(node) {
        this.nodes.add(node);
    }
    _removeNode(node) {
        this.nodes.remove(node);
    }
    _addNodeTag(tag, node) {
        this.nodes.addByTag(tag, node);
    }
    _removeNodeTag(tag, node) {
        this.nodes.removeByTag(tag, node);
    }
    _addComponent(component) {
        if (component.isSystemSingleton && this.components.has(component)) {
            throw new Error(`only one component of type '${component.typeName}' allowed per system`);
        }
        this.components.add(component);
    }
    _removeComponent(component) {
        this.components.remove(component);
    }
    _addComponentTag(tag, component) {
        this.components.addByTag(tag, component);
    }
    _removeComponentTag(tag, component) {
        this.components.removeByTag(tag, component);
    }
}
exports.default = System;


/***/ }),

/***/ "../../libs/ff-graph/source/components/CComponentProvider.ts":
/*!*******************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/components/CComponentProvider.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! ../Component */ "../../libs/ff-graph/source/Component.ts");
const Node_1 = __webpack_require__(/*! ../Node */ "../../libs/ff-graph/source/Node.ts");
const CSelection_1 = __webpack_require__(/*! ./CSelection */ "../../libs/ff-graph/source/components/CSelection.ts");
////////////////////////////////////////////////////////////////////////////////
var EComponentScope;
(function (EComponentScope) {
    // Components in the given scoped node.
    EComponentScope[EComponentScope["Node"] = 0] = "Node";
    // Components in the given scoped graph.
    EComponentScope[EComponentScope["Graph"] = 1] = "Graph";
    // Components in the main graph.
    EComponentScope[EComponentScope["Main"] = 2] = "Main";
    // All components in the system.
    EComponentScope[EComponentScope["System"] = 3] = "System";
})(EComponentScope = exports.EComponentScope || (exports.EComponentScope = {}));
/**
 * Defines a scope of components. Exactly one component can be the active component. The scope
 * of candidate components is definable. The active component can be driven by the current selection.
 *
 * ### Events
 * - *"active-component"* - Emits [[IActiveComponentEvent]] if the active component changes.
 */
class CComponentProvider extends Component_1.default {
    constructor() {
        super(...arguments);
        this._scope = EComponentScope.Node;
        this._scopedNode = null;
        this._scopedGraph = null;
        this._activeComponent = null;
    }
    get componentType() {
        return this.constructor.componentType;
    }
    /** If a component in scope is selected, it becomes the active component. */
    get followComponentSelection() {
        return this.constructor.followComponentSelection;
    }
    /** If a node is selected containing a component in scope, the component becomes the active component. */
    get followNodeSelection() {
        return this.constructor.followNodeSelection;
    }
    /** If the active component is unselected, keep it active anyway. */
    get retainSelection() {
        return this.constructor.retainSelection;
    }
    get scope() {
        return this._scope;
    }
    set scope(scope) {
        this._scope = scope;
        if (this._activeComponent && !this.isComponentInScope(this._activeComponent)) {
            this.activeComponent = null;
        }
    }
    get scopedNode() {
        return this._scopedNode;
    }
    set scopedNode(node) {
        if (node !== this._scopedNode) {
            this._scopedNode = node;
            if (this._activeComponent && !this.isComponentInScope(this._activeComponent)) {
                this.activeComponent = null;
            }
            this.onScopedComponents();
            this.emit({ type: "scoped-components" });
        }
    }
    get scopedGraph() {
        return this._scopedGraph;
    }
    set scopedGraph(graphComponent) {
        if (graphComponent !== this._scopedGraph) {
            this._scopedGraph = graphComponent;
            if (this._activeComponent && !this.isComponentInScope(this._activeComponent)) {
                this.activeComponent = null;
            }
            this.onScopedComponents();
            this.emit({ type: "scoped-components" });
        }
    }
    get scopedComponents() {
        switch (this._scope) {
            case EComponentScope.Node:
                const node = this._scopedNode || this.node;
                return node.getComponents(this.componentType);
            case EComponentScope.Graph:
                const graph = this._scopedGraph ? this._scopedGraph.innerGraph : this.graph;
                return graph.getComponents(this.componentType);
            case EComponentScope.Main:
                return this.getMainComponents(this.componentType);
            case EComponentScope.System:
                return this.getSystemComponents(this.componentType);
        }
    }
    get activeComponent() {
        return this._activeComponent;
    }
    set activeComponent(component) {
        const activeComponent = this.activeComponent;
        if (component !== activeComponent) {
            if (activeComponent) {
                this.deactivateComponent(activeComponent);
            }
            if (component) {
                if (!this.isComponentInScope(component)) {
                    throw new Error("can't activate, component out of scope");
                }
                this.activateComponent(component);
            }
            this._activeComponent = component;
            this.onActiveComponent(activeComponent, component);
            this.emit({ type: "active-component", previous: activeComponent, next: component });
        }
    }
    get selection() {
        return this.getSystemComponent(CSelection_1.default);
    }
    create() {
        super.create();
        this.system.components.on(Component_1.default, this.onComponent, this);
        if (this.followComponentSelection) {
            this.selection.selectedComponents.on(this.componentType, this.onSelectComponent, this);
        }
        if (this.followNodeSelection) {
            this.selection.selectedNodes.on(Node_1.default, this.onSelectNode, this);
        }
    }
    dispose() {
        if (this.activeComponent) {
            this.activeComponent = null;
        }
        this.system.components.off(Component_1.default, this.onComponent, this);
        if (this.followComponentSelection) {
            this.selection.selectedComponents.off(this.componentType, this.onSelectComponent, this);
        }
        if (this.followNodeSelection) {
            this.selection.selectedNodes.off(Node_1.default, this.onSelectNode, this);
        }
        super.dispose();
    }
    activateComponent(component) {
    }
    deactivateComponent(component) {
    }
    onActiveComponent(previous, next) {
    }
    onScopedComponents() {
    }
    onComponent(event) {
        // in case the active component is removed
        if (event.remove && event.object === this.activeComponent) {
            this.activeComponent = null;
        }
        if (this.isComponentInScope(event.object)) {
            this.onScopedComponents();
            this.emit({ type: "scoped-components" });
        }
    }
    onSelectComponent(event) {
        const component = event.object;
        if (this.isComponentInScope(component)) {
            if (event.add) {
                this.activeComponent = component;
            }
            else if (event.remove && !this.retainSelection && component === this.activeComponent) {
                this.activeComponent = null;
            }
        }
    }
    onSelectNode(event) {
        const node = event.object;
        if (this.isNodeInScope(node)) {
            const component = node.getComponent(this.componentType);
            if (component) {
                this.onSelectComponent({
                    type: component.typeName, object: component, add: event.add, remove: event.remove
                });
            }
        }
    }
    isComponentInScope(component) {
        if (!component.is(this.componentType)) {
            return false;
        }
        switch (this._scope) {
            case EComponentScope.Node:
                const node = this._scopedNode || this.node;
                return component.node === node;
            case EComponentScope.Graph:
                const graph = this._scopedGraph ? this._scopedGraph.innerGraph : this.graph;
                return component.graph === graph;
            case EComponentScope.Main:
                return component.graph === this.system.graph;
            case EComponentScope.System:
                return true;
        }
        return false;
    }
    isNodeInScope(node) {
        switch (this._scope) {
            case EComponentScope.Node:
                const scopedNode = this._scopedNode || this.node;
                return node === scopedNode;
            case EComponentScope.Graph:
                const graph = this._scopedGraph ? this._scopedGraph.innerGraph : this.graph;
                return node.graph === graph;
            case EComponentScope.Main:
                return node.graph === this.system.graph;
            case EComponentScope.System:
                return true;
        }
    }
}
exports.default = CComponentProvider;
CComponentProvider.typeName = "CComponentProvider";
CComponentProvider.componentType = Component_1.default;
CComponentProvider.followComponentSelection = true;
CComponentProvider.followNodeSelection = false;
CComponentProvider.retainSelection = true;


/***/ }),

/***/ "../../libs/ff-graph/source/components/CController.ts":
/*!************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/components/CController.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Commander_1 = __webpack_require__(/*! @ff/core/Commander */ "../../libs/ff-core/source/Commander.ts");
exports.Commander = Commander_1.default;
const Component_1 = __webpack_require__(/*! ../Component */ "../../libs/ff-graph/source/Component.ts");
exports.types = Component_1.types;
class CController extends Component_1.default {
    createActions(commander) {
        return {};
    }
}
exports.default = CController;
CController.typeName = "CController";
CController.isSystemSingleton = true;


/***/ }),

/***/ "../../libs/ff-graph/source/components/CGraph.ts":
/*!*******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/components/CGraph.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! ../Component */ "../../libs/ff-graph/source/Component.ts");
exports.types = Component_1.types;
const Graph_1 = __webpack_require__(/*! ../Graph */ "../../libs/ff-graph/source/Graph.ts");
const Node_1 = __webpack_require__(/*! ../Node */ "../../libs/ff-graph/source/Node.ts");
exports.Node = Node_1.default;
class CGraph extends Component_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CGraph.graphIns);
        this._innerGraph = null;
        this._innerRoot = null;
        this._innerGraph = new Graph_1.default(this.system, this);
    }
    get innerGraph() {
        return this._innerGraph;
    }
    get innerNodes() {
        return this._innerGraph.nodes;
    }
    get innerComponents() {
        return this._innerGraph.components;
    }
    get innerRoots() {
        return this._innerGraph.roots;
    }
    getInnerComponent(componentOrClass, nothrow = false) {
        return this._innerGraph.components.get(componentOrClass, nothrow);
    }
    getInnerComponents(componentOrClass) {
        return this._innerGraph.components.getArray(componentOrClass);
    }
    hasInnerComponent(componentOrClass) {
        return this._innerGraph.components.has(componentOrClass);
    }
    getInnerNode(nodeOrClass, nothrow = false) {
        return this._innerGraph.nodes.get(nodeOrClass, nothrow);
    }
    getInnerNodes(nodeOrClass) {
        return this._innerGraph.nodes.getArray(nodeOrClass);
    }
    hasInnerNode(nodeOrClass) {
        return this._innerGraph.nodes.has(nodeOrClass);
    }
    isEmpty() {
        return this._innerGraph.nodes.count() === 0;
    }
    update(context) {
        const ins = this.ins;
        if (ins.active.changed) {
            const isActive = ins.active.value;
            const graph = this._innerGraph;
            if (isActive !== graph.isActive) {
                if (isActive) {
                    this.activateInnerGraph();
                }
                else {
                    this.deactivateInnerGraph();
                }
            }
        }
        // TODO: Evaluate interface ins/outs
        return true;
    }
    tick(context) {
        return this._innerGraph.tick(context);
    }
    tock(context) {
        return this._innerGraph.tock(context);
    }
    dispose() {
        this._innerGraph.clear();
        this._innerGraph = null;
        this._innerRoot = null;
        super.dispose();
    }
    /**
     * Removes all components and nodes from the inner graph.
     */
    clearInnerGraph() {
        this._innerGraph.clear();
    }
    fromJSON(json) {
        super.fromJSON(json);
        this._innerGraph.clear();
        this._innerGraph.fromJSON(json.graph);
    }
    toJSON() {
        const json = super.toJSON();
        json.graph = this._innerGraph.toJSON();
        return json;
    }
    dump(indent = "") {
        super.dump(indent);
        this.innerGraph.dump(indent + "  ");
    }
    onAddInnerRoot(component) {
    }
    onRemoveInnerRoot(component) {
    }
    activateInnerGraph() {
        this._innerGraph.activate();
    }
    deactivateInnerGraph() {
        this._innerGraph.deactivate();
    }
}
exports.default = CGraph;
CGraph.typeName = "CGraph";
CGraph.graphIns = {
    active: Component_1.types.Boolean("Graph.Active", true),
};


/***/ }),

/***/ "../../libs/ff-graph/source/components/CHierarchy.ts":
/*!***********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/components/CHierarchy.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! ../Component */ "../../libs/ff-graph/source/Component.ts");
const Node_1 = __webpack_require__(/*! ../Node */ "../../libs/ff-graph/source/Node.ts");
exports.Node = Node_1.default;
const CGraph_1 = __webpack_require__(/*! ./CGraph */ "../../libs/ff-graph/source/components/CGraph.ts");
const _hasChildComponents = (hierarchy, componentOrType, recursive) => {
    let hasComponent;
    const children = hierarchy.children;
    for (let i = 0, n = children.length; i < n; ++i) {
        hasComponent = children[i].components.has(componentOrType);
        if (hasComponent) {
            return true;
        }
    }
    if (recursive) {
        for (let i = 0, n = children.length; i < n; ++i) {
            hasComponent = _hasChildComponents(children[i], componentOrType, true);
            if (hasComponent) {
                return true;
            }
        }
    }
    return false;
};
const _getChildComponent = (hierarchy, componentOrType, recursive) => {
    let component;
    const children = hierarchy.children;
    for (let i = 0, n = children.length; i < n; ++i) {
        component = children[i].components.get(componentOrType);
        if (component) {
            return component;
        }
    }
    if (recursive) {
        for (let i = 0, n = children.length; i < n; ++i) {
            component = _getChildComponent(children[i], componentOrType, true);
            if (component) {
                return component;
            }
        }
    }
    return null;
};
const _getChildComponents = (hierarchy, componentOrType, recursive) => {
    let components = [];
    const children = hierarchy.children;
    for (let i = 0, n = children.length; i < n; ++i) {
        components = components.concat(children[i].components.getArray(componentOrType));
    }
    if (recursive) {
        for (let i = 0, n = children.length; i < n; ++i) {
            components = components.concat(_getChildComponents(children[i], componentOrType, true));
        }
    }
    return components;
};
/**
 * Allows arranging components in a hierarchical structure.
 *
 * ### Events
 * - *"hierarchy"* - emits [[IHierarchyEvent]] if a hierarchy relation has changed in the component's tree line.
 * - *"child-component"* - emits [[IChildComponentEvent]] if a child component has been added or removed.
 */
class CHierarchy extends Component_1.default {
    constructor() {
        super(...arguments);
        this._parent = null;
        this._children = [];
    }
    /**
     * Returns the parent component of this.
     * @returns {CHierarchy}
     */
    get parent() {
        return this._parent;
    }
    /**
     * Returns an array of child components of this.
     * @returns {Readonly<CHierarchy[]>}
     */
    get children() {
        return this._children || [];
    }
    create() {
        super.create();
        this.graph._addRoot(this);
        this.node.components.on(Component_1.default, this.onComponent, this);
    }
    dispose() {
        this.node.components.off(Component_1.default, this.onComponent, this);
        // dispose of all child nodes
        this._children.slice().forEach(child => child.node.dispose());
        // detach this from its parent
        if (this._parent) {
            this._parent.removeChild(this);
        }
        this.graph._removeRoot(this);
        super.dispose();
    }
    /**
     * Returns a component at the root of the hierarchy.
     * @returns A component of the given type that is a sibling of the root hierarchy component.
     */
    getRootComponent(componentOrType) {
        let root = this;
        while (root._parent) {
            root = root._parent;
        }
        return root ? root.node.components.get(componentOrType) : null;
    }
    /**
     * Returns a component from the parent node of the node of this component.
     * @param componentOrType
     * @param recursive If true, extends search to entire chain of ancestors,
     * including parent graphs.
     */
    getParentComponent(componentOrType, recursive) {
        let parent = this;
        while (true) {
            parent = parent._parent;
            // if at root, continue search at parent graph
            if (!parent) {
                const parentGraphComponent = this.graph.parent;
                parent = parentGraphComponent ? parentGraphComponent.components.get(CHierarchy) : undefined;
            }
            if (!parent) {
                return undefined;
            }
            const component = parent.node.components.get(componentOrType, true);
            if (component) {
                return component;
            }
            if (!recursive) {
                return undefined;
            }
        }
    }
    getParentNode(nodeOrType, recursive) {
        let parent = this;
        while (true) {
            parent = parent._parent;
            // if at root, continue search at parent graph
            if (!parent) {
                const parentGraphComponent = this.graph.parent;
                parent = parentGraphComponent ? parentGraphComponent.components.get(CHierarchy) : undefined;
            }
            if (!parent) {
                return undefined;
            }
            const node = parent.node;
            if (node.is(nodeOrType)) {
                return node;
            }
            if (!recursive) {
                return undefined;
            }
        }
    }
    getSiblingNode(nodeOrType) {
        return this.getSiblingNodes(nodeOrType)[0];
    }
    getSiblingNodes(nodeOrType) {
        const thisParent = this._parent;
        return this.graph.nodes.getArray(nodeOrType).filter(node => {
            const hierarchy = node.components.get(CHierarchy);
            const parent = hierarchy ? hierarchy._parent : null;
            return parent == thisParent;
        });
    }
    hasChildComponents(componentOrType, recursive) {
        return _hasChildComponents(this, componentOrType, recursive);
    }
    /**
     * Returns the child component of the given type.
     * @param componentOrType
     * @param recursive If true, extends search to entire subtree (breadth-first).
     */
    getChildComponent(componentOrType, recursive) {
        return _getChildComponent(this, componentOrType, recursive);
    }
    /**
     * Returns all child components of the given type.
     * @param componentOrType
     * @param recursive If true, extends search to entire subtree (breadth-first).
     */
    getChildComponents(componentOrType, recursive) {
        return _getChildComponents(this, componentOrType, recursive);
    }
    /**
     * Traverses the hierarchy up starting from this component. Executes the given callback function
     * for each visited component.
     * @param includeThis Includes this component in traversal.
     * @param includeSiblings For each hierarchy component, executes callback for all sibling components in the same node.
     * @param acrossGraphs When arriving at the root hierarchy component, continues traversal at the parent graph.
     * @param callback The callback function to execute for each visited component.
     */
    traverseUp(includeThis, includeSiblings, acrossGraphs, callback) {
        if (includeThis) {
            if (includeSiblings) {
                const siblings = this.node.components.getArray();
                for (let i = 0, n = siblings.length; i < n; ++i) {
                    if (callback(siblings[i])) {
                        return;
                    }
                }
            }
            else if (callback(this)) {
                return;
            }
        }
        let parent = this._parent;
        if (!parent && acrossGraphs) {
            const graphComponent = this.node.graph.parent;
            parent = graphComponent ? graphComponent.getComponent(CHierarchy, true) : null;
        }
        if (parent) {
            parent.traverseUp(true, includeSiblings, acrossGraphs, callback);
        }
    }
    /**
     * Traverses the hierarchy down starting from this component. Executes the given callback function
     * for each visited component.
     * @param includeThis Includes this component in traversal.
     * @param includeSiblings For each hierarchy component, executes callback for all sibling components in the same node.
     * @param acrossGraphs Includes subgraphs in traversal.
     * @param callback The callback function to execute for each visited component.
     */
    traverseDown(includeThis, includeSiblings, acrossGraphs, callback) {
        if (includeThis) {
            if (includeSiblings) {
                const siblings = this.node.components.getArray();
                for (let i = 0, n = siblings.length; i < n; ++i) {
                    if (callback(siblings[i])) {
                        return;
                    }
                }
            }
            else if (callback(this)) {
                return;
            }
        }
        if (acrossGraphs) {
            const graphs = this.node.components.getArray(CGraph_1.default);
            for (let i = 0, n = graphs.length; i < n; ++i) {
                const innerRoots = graphs[i].innerRoots;
                for (let j = 0, m = innerRoots.length; j < m; ++j) {
                    innerRoots[j].traverseDown(true, includeSiblings, acrossGraphs, callback);
                }
            }
        }
        const children = this._children;
        for (let i = 0, n = children.length; i < n; ++i) {
            children[i].traverseDown(true, includeSiblings, acrossGraphs, callback);
        }
    }
    /**
     * Emits the given event on this component and on all parent components.
     * Stops propagation as soon as `stopPropagation` is set to true on the event.
     * @param includeSiblings Also emits the event on all sibling components in the same node.
     * @param acrossGraphs When arriving at the root hierarchy component, continues traversal at the parent graph.
     * @param event The event to be emitted.
     */
    propagateUp(includeSiblings, acrossGraphs, event) {
        this.traverseUp(true, includeSiblings, acrossGraphs, component => {
            component.emit(event);
            return event.stopPropagation;
        });
    }
    /**
     * Emits the given event on this component and on all child components.
     * Stops propagation as soon as `stopPropagation` is set to true on the event.
     * @param includeSiblings Also emits the event on all sibling components in the same node.
     * @param acrossGraphs Includes subgraphs in traversal.
     * @param event The event to be emitted.
     */
    propagateDown(includeSiblings, acrossGraphs, event) {
        this.traverseDown(true, includeSiblings, acrossGraphs, component => {
            component.emit(event);
            return event.stopPropagation;
        });
    }
    /**
     * Adds another hierarchy component as a child to this component.
     * Emits a hierarchy event at this component, its node and all their parents.
     * @param {CHierarchy} component
     */
    addChild(component) {
        if (component === this) {
            throw new Error("can't add self as child");
        }
        if (component._parent) {
            throw new Error("can't add child, component has a parent");
        }
        if (component.graph !== this.graph) {
            throw new Error("can't add child, component in different graph");
        }
        component._parent = this;
        this._children.push(component);
        this.graph._removeRoot(component);
        const event = {
            type: "hierarchy", add: true, remove: false, parent: this, child: component
        };
        this.traverseUp(true, false, true, component => component.emit(event));
        this.traverseDown(false, false, true, component => component.emit(event));
        this.system.emit(event);
    }
    /**
     * Removes a child component from this hierarchy component.
     * Emits a hierarchy event at this component, its node and all their parents.
     * @param component
     */
    removeChild(component) {
        if (component._parent !== this) {
            throw new Error("component not a child of this");
        }
        const event = {
            type: "hierarchy", add: false, remove: true, parent: this, child: component
        };
        this.traverseUp(true, false, true, component => component.emit(event));
        this.traverseDown(false, false, true, component => component.emit(event));
        this.system.emit(event);
        const index = this._children.indexOf(component);
        this._children.splice(index, 1);
        component._parent = null;
        this.graph._addRoot(component);
    }
    onComponent(event) {
        if (event.object === this) {
            return;
        }
        const childEvent = {
            type: "child",
            add: event.add,
            remove: event.remove,
            component: event.object
        };
        this.traverseUp(true, false, true, component => component.emit(childEvent));
    }
    toJSON() {
        const json = super.toJSON();
        if (this._children.length > 0) {
            json.children = this._children.map(child => child.id);
        }
        return json;
    }
    referencesFromJSON(json) {
        super.referencesFromJSON(json);
        const dict = this.system.components.getDictionary();
        if (json.children) {
            json.children.forEach(childId => {
                const child = dict[childId];
                this.addChild(child);
            });
        }
    }
    /**
     * Returns a text representation of this object.
     * @returns {string}
     */
    toString() {
        return super.toString() + ` - children: ${this.children.length}`;
    }
    dump(indent = "") {
        super.dump(indent);
        if (this.children.length > 0) {
            console.log(indent + "%cChildren", "color: purple");
            this.children.forEach(child => child.node.dump(indent + "  "));
        }
    }
}
exports.default = CHierarchy;
CHierarchy.typeName = "CHierarchy";


/***/ }),

/***/ "../../libs/ff-graph/source/components/CNodeProvider.ts":
/*!**************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/components/CNodeProvider.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! ../Component */ "../../libs/ff-graph/source/Component.ts");
const Node_1 = __webpack_require__(/*! ../Node */ "../../libs/ff-graph/source/Node.ts");
const CSelection_1 = __webpack_require__(/*! ./CSelection */ "../../libs/ff-graph/source/components/CSelection.ts");
////////////////////////////////////////////////////////////////////////////////
var ENodeScope;
(function (ENodeScope) {
    // Components in the given scoped graph.
    ENodeScope[ENodeScope["Graph"] = 0] = "Graph";
    // Nodes in the main graph.
    ENodeScope[ENodeScope["Main"] = 1] = "Main";
    // All nodes in the system.
    ENodeScope[ENodeScope["System"] = 2] = "System";
})(ENodeScope = exports.ENodeScope || (exports.ENodeScope = {}));
/**
 * Defines a scope of nodes. Exactly one node can be the active node. The scope
 * of candidate nodes is definable. The active node can be driven by the current selection.
 *
 * ### Events
 * - *"active-node"* - Emits [[IActiveNodeEvent]] if the active node changes.
 */
class CNodeProvider extends Component_1.default {
    constructor() {
        super(...arguments);
        this._scope = ENodeScope.Graph;
        this._scopedGraph = null;
        this._activeNode = null;
    }
    get nodeType() {
        return this.constructor.nodeType;
    }
    /** If a node in scope is selected, it becomes the active node. */
    get followNodeSelection() {
        return this.constructor.followNodeSelection;
    }
    /** If a component is selected whose parent node is in scope, the node becomes the active node. */
    get followComponentSelection() {
        return this.constructor.followComponentSelection;
    }
    /** If the active node is unselected, keep it active anyway. */
    get retainSelection() {
        return this.constructor.retainSelection;
    }
    get scope() {
        return this._scope;
    }
    set scope(scope) {
        this._scope = scope;
        if (this._activeNode && !this.isNodeInScope(this._activeNode)) {
            this.activeNode = null;
        }
    }
    get scopedGraph() {
        return this._scopedGraph;
    }
    set scopedGraph(graphComponent) {
        if (graphComponent !== this._scopedGraph) {
            this._scopedGraph = graphComponent;
            if (this._activeNode && !this.isNodeInScope(this._activeNode)) {
                this.activeNode = null;
            }
            this.onScopedNodes();
            this.emit({ type: "scoped-nodes" });
        }
    }
    get scopedNodes() {
        switch (this._scope) {
            case ENodeScope.Graph:
                const graph = this._scopedGraph ? this._scopedGraph.innerGraph : this.graph;
                return graph.getNodes(this.nodeType);
            case ENodeScope.Main:
                return this.getMainNodes(this.nodeType);
            case ENodeScope.System:
                return this.getSystemNodes(this.nodeType);
        }
    }
    get activeNode() {
        return this._activeNode;
    }
    set activeNode(node) {
        const activeNode = this.activeNode;
        if (node !== activeNode) {
            if (activeNode) {
                this.deactivateNode(activeNode);
            }
            if (node) {
                if (!this.isNodeInScope(node)) {
                    throw new Error("can't activate, node out of scope");
                }
                this.activateNode(node);
            }
            this._activeNode = node;
            this.onActiveNode(activeNode, node);
            this.emit({ type: "active-node", previous: activeNode, next: node });
        }
    }
    get selection() {
        return this.getSystemComponent(CSelection_1.default);
    }
    create() {
        super.create();
        this.system.nodes.on(Node_1.default, this.onNode, this);
        if (this.followNodeSelection) {
            this.selection.selectedNodes.on(this.nodeType, this.onSelectNode, this);
        }
        if (this.followComponentSelection) {
            this.selection.selectedComponents.on(Component_1.default, this.onSelectComponent, this);
        }
    }
    dispose() {
        if (this.activeNode) {
            this.activeNode = null;
        }
        this.system.nodes.off(Node_1.default, this.onNode, this);
        if (this.followNodeSelection) {
            this.selection.selectedNodes.off(this.nodeType, this.onSelectNode, this);
        }
        if (this.followComponentSelection) {
            this.selection.selectedComponents.off(Component_1.default, this.onSelectComponent, this);
        }
        super.dispose();
    }
    activateNode(node) {
    }
    deactivateNode(node) {
    }
    onActiveNode(previous, next) {
    }
    onScopedNodes() {
    }
    onNode(event) {
        // in case the active node is removed
        if (event.remove && event.object === this.activeNode) {
            this.activeNode = null;
        }
        if (this.isNodeInScope(event.object)) {
            this.onScopedNodes();
            this.emit({ type: "scoped-nodes" });
        }
    }
    onSelectNode(event) {
        const node = event.object;
        if (this.isNodeInScope(node)) {
            if (event.add) {
                this.activeNode = node;
            }
            else if (event.remove && !this.retainSelection && node === this.activeNode) {
                this.activeNode = null;
            }
        }
    }
    onSelectComponent(event) {
        const node = event.object.node;
        if (node.is(this.nodeType)) {
            this.onSelectNode({
                type: node.typeName, object: node, add: event.add, remove: event.remove
            });
        }
    }
    isNodeInScope(node) {
        if (!node.is(this.nodeType)) {
            return false;
        }
        switch (this._scope) {
            case ENodeScope.Graph:
                const graph = this._scopedGraph ? this._scopedGraph.innerGraph : this.graph;
                return node.graph === graph;
            case ENodeScope.Main:
                return node.graph === this.system.graph;
            case ENodeScope.System:
                return true;
        }
        return false;
    }
}
exports.default = CNodeProvider;
CNodeProvider.typeName = "CNodeProvider";
CNodeProvider.nodeType = Node_1.default;
CNodeProvider.followNodeSelection = true;
CNodeProvider.followComponentSelection = false;
CNodeProvider.retainSelection = true;


/***/ }),

/***/ "../../libs/ff-graph/source/components/CPulse.ts":
/*!*******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/components/CPulse.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! ../Component */ "../../libs/ff-graph/source/Component.ts");
/**
 * Generates a steady stream of events based on `window.requestAnimationFrame`.
 */
class CPulse extends Component_1.default {
    constructor(node, id) {
        super(node, id);
        this.outs = this.addOutputs(CPulse.pulseOuts);
        this._systemUpdated = false;
        this.addEvent("pulse");
        this.onAnimationFrame = this.onAnimationFrame.bind(this);
        this.context = {
            time: new Date(),
            secondsElapsed: 0,
            secondsDelta: 0,
            frameNumber: 0
        };
        this._secondsStarted = Date.now() * 0.001;
        this._secondsStopped = this._secondsStarted;
        this._animHandler = 0;
        this._pulseEvent = { type: "pulse", context: this.context, systemUpdated: false };
    }
    start() {
        if (this._animHandler === 0) {
            if (this._secondsStopped > 0) {
                this._secondsStarted += (Date.now() * 0.001 - this._secondsStopped);
                this._secondsStopped = 0;
            }
            this._animHandler = window.requestAnimationFrame(this.onAnimationFrame);
        }
    }
    stop() {
        if (this._animHandler !== 0) {
            if (this._secondsStopped === 0) {
                this._secondsStopped = Date.now() * 0.001;
            }
            window.cancelAnimationFrame(this._animHandler);
            this._animHandler = 0;
        }
    }
    // reset()
    // {
    //     const context = this.context;
    //     context.time = new Date();
    //     context.secondsElapsed = 0;
    //     context.secondsDelta = 0;
    //     context.frameNumber = 0;
    //
    //     this._secondsStarted = Date.now() * 0.001;
    //     this._secondsStopped = this._secondsStarted;
    // }
    pulse(milliseconds) {
        const context = this.context;
        const outs = this.outs;
        context.time.setTime(milliseconds);
        const elapsed = milliseconds * 0.001 - this._secondsStarted;
        context.secondsDelta = elapsed - context.secondsElapsed;
        context.secondsElapsed = elapsed;
        context.frameNumber++;
        outs.time.setValue(context.secondsElapsed);
        outs.frame.setValue(context.frameNumber);
        // indicate if system was updated either during current tick or previous tock
        this._pulseEvent.systemUpdated = this.system.graph.tick(this.context) || this._systemUpdated;
        this.emit(this._pulseEvent);
        this._systemUpdated = this.system.graph.tock(this.context);
    }
    onAnimationFrame() {
        this.pulse(Date.now());
        this._animHandler = window.requestAnimationFrame(this.onAnimationFrame);
    }
}
exports.default = CPulse;
CPulse.typeName = "CPulse";
CPulse.isSystemSingleton = true;
CPulse.pulseOuts = {
    time: Component_1.types.Number("Pulse.Time"),
    frame: Component_1.types.Integer("Pulse.Frame")
};


/***/ }),

/***/ "../../libs/ff-graph/source/components/CSelection.ts":
/*!***********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/components/CSelection.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ObjectRegistry_1 = __webpack_require__(/*! @ff/core/ObjectRegistry */ "../../libs/ff-core/source/ObjectRegistry.ts");
const propertyTypes_1 = __webpack_require__(/*! ../propertyTypes */ "../../libs/ff-graph/source/propertyTypes.ts");
const Component_1 = __webpack_require__(/*! ../Component */ "../../libs/ff-graph/source/Component.ts");
const Node_1 = __webpack_require__(/*! ../Node */ "../../libs/ff-graph/source/Node.ts");
const CGraph_1 = __webpack_require__(/*! ./CGraph */ "../../libs/ff-graph/source/components/CGraph.ts");
const CController_1 = __webpack_require__(/*! ./CController */ "../../libs/ff-graph/source/components/CController.ts");
/**
 * Manages selection state for nodes and components.
 * Use [[CSelection.exclusiveSelect]] to decide whether node and component selection is mutually exclusive.
 * A selection always encompasses only items in one graph, the *active graph*. When the active graph changes,
 * an [[IActiveGraphEvent]] is fired.
 *
 * ### Events
 * - *"active-graph"* - emits an [[IActiveGraphEvent]] after the active graph has changed.
 * - *<ComponentType>* - [[CSelection.selectedComponents]] emits an [[IComponentEvent]] if a component is selected/unselected.
 * - *<NodeType>* - [[CSelection.selectedNodes]] emits an [[INodeEvent]] if a node is selected/unselected.
 */
class CSelection extends CController_1.default {
    constructor(node, id) {
        super(node, id);
        this.outs = this.addOutputs(CSelection.selOuts);
        this.multiSelect = false;
        this.exclusiveSelect = true;
        this.selectedNodes = new ObjectRegistry_1.default(Node_1.default);
        this.selectedComponents = new ObjectRegistry_1.default(Component_1.default);
        this._activeGraph = null;
        this.addEvents("select-node", "select-component", "active-graph", "update");
        this.selectedNodes.on(Node_1.default, e => this.onSelectNode(e.object, e.add));
        this.selectedComponents.on(Component_1.default, e => this.onSelectComponent(e.object, e.add));
        this._activeGraph = this.system.graph;
    }
    getSelectedNode(nodeOrClass) {
        return this.selectedNodes.get(nodeOrClass, true);
    }
    getSelectedNodes(nodeOrClass) {
        return this.selectedNodes.getArray(nodeOrClass);
    }
    getSelectedComponent(componentOrClass) {
        return this.selectedComponents.get(componentOrClass, true);
    }
    getSelectedComponents(componentOrClass) {
        return this.selectedComponents.getArray(componentOrClass);
    }
    get activeGraph() {
        return this._activeGraph;
    }
    set activeGraph(graph) {
        if (graph !== this.activeGraph) {
            this.clearSelection();
            const previous = this._activeGraph;
            this._activeGraph = graph;
            this.onActiveGraph(graph);
            this.emit({ type: "active-graph", previous, next: graph });
        }
    }
    hasParentGraph() {
        return this._activeGraph && this._activeGraph.parent;
    }
    activateParentGraph() {
        if (this._activeGraph && this._activeGraph.parent.graph) {
            this.activeGraph = this._activeGraph.parent.graph;
        }
    }
    hasChildGraph() {
        return this.selectedComponents.has(CGraph_1.default);
    }
    activateChildGraph() {
        const graphComponent = this.selectedComponents.get(CGraph_1.default, true);
        if (graphComponent) {
            this.activeGraph = graphComponent.innerGraph;
        }
    }
    create() {
        super.create();
        this.system.nodes.on(Node_1.default, this.onSystemNode, this);
        this.system.components.on(Component_1.default, this.onSystemComponent, this);
    }
    dispose() {
        this.system.nodes.off(Node_1.default, this.onSystemNode, this);
        this.system.components.off(Component_1.default, this.onSystemComponent, this);
        super.dispose();
    }
    createActions(commander) {
        return {
            selectNode: commander.register({
                name: "Select Node", do: this.selectNode, target: this
            }),
            selectComponent: commander.register({
                name: "Select Component", do: this.selectComponent, target: this
            }),
            clearSelection: commander.register({
                name: "Clear Selection", do: this.clearSelection, target: this
            })
        };
    }
    nodeContainsSelectedComponent(node) {
        const components = node.components.getArray();
        for (let i = 0, n = components.length; i < n; ++i) {
            if (this.selectedComponents.contains(components[i])) {
                return true;
            }
        }
        return false;
    }
    selectNode(node, toggle = false) {
        this.activeGraph = node.graph;
        const selectedNodes = this.selectedNodes;
        const multiSelect = this.multiSelect && toggle;
        if (node && selectedNodes.contains(node)) {
            if (multiSelect) {
                selectedNodes.remove(node);
            }
        }
        else {
            if (this.exclusiveSelect) {
                this.selectedComponents.clear();
            }
            if (!multiSelect) {
                selectedNodes.clear();
            }
            if (node) {
                selectedNodes.add(node);
            }
        }
        this.updateStats();
    }
    selectComponent(component, toggle = false) {
        this.activeGraph = component.graph;
        const selectedComponents = this.selectedComponents;
        const multiSelect = this.multiSelect && toggle;
        if (component && selectedComponents.contains(component)) {
            if (multiSelect) {
                selectedComponents.remove(component);
            }
        }
        else {
            if (this.exclusiveSelect) {
                this.selectedNodes.clear();
            }
            if (!multiSelect) {
                selectedComponents.clear();
            }
            if (component) {
                selectedComponents.add(component);
            }
        }
        this.updateStats();
    }
    clearSelection() {
        this.selectedNodes.clear();
        this.selectedComponents.clear();
        this.updateStats();
    }
    onSelectNode(node, selected) {
    }
    onSelectComponent(component, selected) {
    }
    onActiveGraph(graph) {
    }
    onSystemNode(event) {
        if (event.remove && this.selectedNodes.contains(event.object)) {
            this.selectedNodes.remove(event.object);
            this.updateStats();
        }
    }
    onSystemComponent(event) {
        if (event.remove && this.selectedComponents.contains(event.object)) {
            this.selectedComponents.remove(event.object);
            this.updateStats();
        }
    }
    updateStats() {
        const outs = this.outs;
        outs.selNodeCount.setValue(this.selectedNodes.length);
        outs.selComponentCount.setValue(this.selectedComponents.length);
    }
}
exports.default = CSelection;
CSelection.typeName = "CSelection";
CSelection.selOuts = {
    selNodeCount: propertyTypes_1.types.Integer("Selection.Nodes"),
    selComponentCount: propertyTypes_1.types.Integer("Selection.Components")
};


/***/ }),

/***/ "../../libs/ff-graph/source/components/CTweenMachine.ts":
/*!**************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/components/CTweenMachine.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const easing_1 = __webpack_require__(/*! @ff/core/easing */ "../../libs/ff-core/source/easing.ts");
exports.EEasingCurve = easing_1.EEasingCurve;
const Component_1 = __webpack_require__(/*! ../Component */ "../../libs/ff-graph/source/Component.ts");
const uniqueId_1 = __webpack_require__(/*! @ff/core/uniqueId */ "../../libs/ff-core/source/uniqueId.ts");
class CTweenMachine extends Component_1.default {
    constructor() {
        super(...arguments);
        this.ins = this.addInputs(CTweenMachine.ins);
        this.outs = this.addOutputs(CTweenMachine.outs);
        this.targets = [];
        this.states = {};
        this._currentValues = null;
        this._targetState = null;
        this._startTime = 0;
        this._easingFunction = null;
    }
    getState(id) {
        return this.states[id];
    }
    setState(state) {
        state.id = state.id || uniqueId_1.default(6);
        this.states[state.id] = state;
        return state.id;
    }
    deleteState(id) {
        delete this.states[id];
    }
    clear() {
        this.targets.forEach(target => target.property.off("dispose", this.onPropertyDispose, this));
        this.targets.length = 0;
        this.states = {};
        this._currentValues = null;
        this._targetState = null;
        this._startTime = 0;
        this._easingFunction = null;
    }
    dispose() {
        this.clear();
        super.dispose();
    }
    tweenTo(stateId, secondsElapsed) {
        const state = this.states[stateId];
        const outs = this.outs;
        if (state) {
            this._targetState = state;
            this._currentValues = this.getCurrentValues();
            this._startTime = secondsElapsed;
            this._easingFunction = easing_1.getEasingFunction(state.curve);
            outs.switched.setValue(false);
            outs.tweening.setValue(true);
            outs.start.set();
            return true;
        }
    }
    update(context) {
        const ins = this.ins;
        const states = this.states;
        const id = ins.id.value;
        const state = states[id];
        if (state) {
            if (ins.tween.changed || ins.recall.changed) {
                ins.curve.setValue(state.curve);
                ins.duration.setValue(state.duration);
                ins.threshold.setValue(state.threshold);
            }
            if (ins.tween.changed) {
                this.tweenTo(id, context.secondsElapsed);
                return true;
            }
            if (ins.recall.changed) {
                this.setValues(state.values);
                return true;
            }
            if (ins.curve.changed || ins.duration.changed || ins.threshold.changed) {
                state.curve = ins.curve.value;
                state.duration = ins.duration.value;
                state.threshold = ins.threshold.value;
            }
            if (ins.store.changed) {
                state.values = this.getCurrentValues();
            }
            if (ins.delete.changed) {
                delete states[id];
            }
        }
        else if (id && ins.store.changed) {
            const state = {
                id: this.ins.id.value,
                curve: this.ins.curve.getValidatedValue(),
                duration: this.ins.duration.value,
                threshold: this.ins.threshold.value,
                values: this.getCurrentValues(),
            };
            states[state.id] = state;
        }
        return true;
    }
    tick(context) {
        const targetState = this._targetState;
        if (!targetState) {
            return false;
        }
        const outs = this.outs;
        const currentValues = this._currentValues;
        const startTime = this._startTime;
        const tweenTime = context.secondsElapsed - startTime;
        const tweenFactor = tweenTime / targetState.duration;
        if (tweenFactor < 1) {
            const easeFactor = this._easingFunction(tweenFactor);
            const shouldSwitch = tweenFactor >= targetState.threshold && !outs.switched.value;
            this.setValues(currentValues, targetState.values, easeFactor, shouldSwitch);
            outs.time.setValue(tweenTime);
            outs.completed.setValue(tweenFactor);
            if (shouldSwitch) {
                outs.switched.setValue(true);
                outs.switch.set();
            }
        }
        else {
            this.setValues(currentValues, targetState.values, 1, !outs.switched.value);
            outs.tweening.setValue(false);
            outs.time.setValue(targetState.duration);
            outs.completed.setValue(1);
            outs.end.set();
            if (!outs.switched.value) {
                outs.switched.setValue(true);
            }
            this._currentValues = null;
            this._targetState = null;
            this._startTime = 0;
            this._easingFunction = null;
        }
        return true;
    }
    addTargetProperty(property) {
        if (property.type === "object" || property.schema.event) {
            throw new Error("can't add object or event properties");
        }
        if (this.getTarget(property)) {
            throw new Error("can't add, target already exists");
        }
        property.on("dispose", this.onPropertyDispose, this);
        const isNumber = property.type === "number" && !property.schema.options;
        const isArray = property.isArray();
        this.targets.push({ property, isNumber, isArray });
        const states = this.states;
        const keys = Object.keys(states);
        for (let i = 0, n = keys.length; i < n; ++i) {
            states[keys[i]].values.push(property.cloneValue());
        }
        if (this._currentValues) {
            this._currentValues.push(property.cloneValue());
        }
    }
    removeTargetProperty(property) {
        const target = this.getTarget(property);
        if (!target) {
            throw new Error("can't remove, target doesn't exist");
        }
        this.removeTarget(target);
    }
    hasTargetProperty(property) {
        return !!this.getTarget(property);
    }
    fromJSON(json) {
        super.fromJSON(json);
        if (json.state) {
            this.stateFromJSON(json.state);
        }
    }
    stateFromJSON(json) {
        if (json.targets) {
            this.targets = json.targets.map(jsonTarget => {
                const property = this.getProperty(jsonTarget.id, jsonTarget.key);
                return {
                    property,
                    isNumber: !!property && property.type === "number" && !property.schema.options,
                    isArray: !!property && property.isArray(),
                };
            });
        }
        if (json.states) {
            json.states.forEach(state => this.states[state.id] = state);
        }
        this._startTime = 0;
    }
    toJSON() {
        const json = super.toJSON();
        const state = this.stateToJSON();
        if (state) {
            json.state = state;
        }
        return json;
    }
    stateToJSON() {
        const json = {};
        const targets = this.targets;
        if (targets.length > 0) {
            json.targets = targets.map(target => ({
                id: target.property.group.linkable.id,
                key: target.property.key
            }));
        }
        const keys = Object.keys(this.states);
        if (keys.length > 0) {
            json.states = keys.map(key => this.states[key]);
        }
        return json;
    }
    getTargetProperties() {
        return this.targets.map(target => target.property);
    }
    onPropertyDispose(event) {
        event.property.off("dispose", this.onPropertyDispose, this);
        const target = this.getTarget(event.property);
        this.removeTarget(target);
    }
    removeTarget(target) {
        const index = this.targets.indexOf(target);
        this.targets.splice(index, 1);
        this.removeChannel(index);
    }
    removeChannel(index) {
        const states = this.states;
        const keys = Object.keys(states);
        for (let i = 0, n = keys.length; i < n; ++i) {
            states[keys[i]].values.splice(index, 1);
        }
        if (this._currentValues) {
            this._currentValues.splice(index, 1);
        }
    }
    getTarget(property) {
        return this.targets.find(target => target.property === property);
    }
    getProperty(componentId, propertyKey) {
        const component = this.system.components.getById(componentId);
        if (!component) {
            return null;
        }
        return component.ins[propertyKey];
    }
    setValues(valuesA, valuesB, factor, doSwitch) {
        const targets = this.targets;
        for (let i = 0, n = targets.length; i < n; ++i) {
            const target = targets[i];
            const property = target.property;
            if (target.isNumber && valuesB) {
                const vA = valuesA[i];
                const vB = valuesB[i];
                if (target.isArray) {
                    let changed = false;
                    for (let i = 0, n = vA.length; i < n; ++i) {
                        const v = vA[i] + factor * (vB[i] - vA[i]);
                        changed = property.value[i] !== v || changed;
                        property.value[i] = v;
                    }
                    if (changed) {
                        property.set();
                    }
                }
                else {
                    const v = vA + factor * (vB - vA);
                    if (v !== property.value) {
                        property.setValue(v);
                    }
                }
            }
            else if (!valuesB || doSwitch) {
                const value = valuesB ? valuesB[i] : valuesA[i];
                if (target.isArray) {
                    let changed = false;
                    for (let i = 0, n = value.length; i < n; ++i) {
                        changed = property.value[i] !== value[i] || changed;
                        property.value[i] = value[i];
                    }
                    if (changed) {
                        property.set();
                    }
                }
                else if (value !== property.value) {
                    property.setValue(value);
                }
            }
        }
    }
    getCurrentValues() {
        const values = [];
        const targets = this.targets;
        for (let i = 0, n = targets.length; i < n; ++i) {
            values.push(targets[i].property.cloneValue());
        }
        return values;
    }
}
exports.default = CTweenMachine;
CTweenMachine.typeName = "CTweenMachine";
CTweenMachine.ins = {
    id: Component_1.types.String("Snapshot.Id"),
    curve: Component_1.types.Enum("Tween.Curve", easing_1.EEasingCurve),
    duration: Component_1.types.Number("Tween.Duration", 2),
    threshold: Component_1.types.Percent("Tween.Threshold", 0.5),
    tween: Component_1.types.Event("Control.Tween"),
    recall: Component_1.types.Event("Control.Recall"),
    store: Component_1.types.Event("Control.Store"),
    delete: Component_1.types.Event("Control.Delete"),
    clear: Component_1.types.Event("Control.Clear"),
};
CTweenMachine.outs = {
    count: Component_1.types.Integer("Snapshots.Count"),
    tweening: Component_1.types.Boolean("Tween.IsTweening"),
    time: Component_1.types.Number("Tween.Time"),
    completed: Component_1.types.Percent("Tween.Completed"),
    switched: Component_1.types.Boolean("Tween.Switched"),
    start: Component_1.types.Event("Tween.Start"),
    switch: Component_1.types.Event("Tween.Switch"),
    end: Component_1.types.Event("Tween.End"),
};


/***/ }),

/***/ "../../libs/ff-graph/source/convert.ts":
/*!*********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/convert.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const _identity = [
    function (srcVal) {
        return srcVal;
    },
    function (srcVal, dstVal) {
        for (let i = 0, n = dstVal.length; i < n; ++i) {
            dstVal[i] = srcVal[i];
        }
        return dstVal;
    }
];
const _toBoolean = [
    function (srcVal) {
        return !!srcVal;
    },
    function (srcVal, dstVal) {
        for (let i = 0, n = dstVal.length; i < n; ++i) {
            dstVal[i] = !!srcVal[i];
        }
        return dstVal;
    }
];
const _toString = [
    function (srcVal) {
        return String(srcVal);
    },
    function (srcVal, dstVal) {
        for (let i = 0, n = dstVal.length; i < n; ++i) {
            dstVal[i] = String(srcVal[i]);
        }
        return dstVal;
    }
];
const _parseFloat = [
    function (srcVal) {
        return parseFloat(srcVal) || 0;
    },
    function (srcVal, dstVal) {
        for (let i = 0, n = dstVal.length; i < n; ++i) {
            dstVal[i] = parseFloat(srcVal[i]) || 0;
        }
        return dstVal;
    }
];
const _booleanToNumber = [
    function (srcVal) {
        return srcVal ? 1 : 0;
    },
    function (srcVal, dstVal) {
        for (let i = 0, n = dstVal.length; i < n; ++i) {
            dstVal[i] = srcVal[i] ? 1 : 0;
        }
        return dstVal;
    }
];
const _illegalThrow = [
    function (srcVal, dstVal) {
        throw new Error(`illegal value conversion from ${typeof srcVal} to ${typeof dstVal}`);
    },
    function (srcVal, dstVal, elements) {
        throw new Error(`illegal array conversion from ${typeof srcVal[0]} to ${typeof dstVal[0]}`);
    }
];
const _conversionFunctions = {
    "number": {
        "number": _identity,
        "boolean": _toBoolean,
        "string": _toString,
        "object": _illegalThrow
    },
    "boolean": {
        "number": _booleanToNumber,
        "boolean": _identity,
        "string": _toString,
        "object": _illegalThrow
    },
    "string": {
        "number": _parseFloat,
        "boolean": _toBoolean,
        "string": _identity,
        "object": _illegalThrow
    },
    "object": {
        "number": _illegalThrow,
        "boolean": _toBoolean,
        "string": _toString,
        "object": _identity
    }
};
const _conversionTable = {
    "number": {
        "number": true,
        "boolean": true,
        "string": true,
        "object": false
    },
    "boolean": {
        "number": true,
        "boolean": true,
        "string": true,
        "object": false
    },
    "string": {
        "number": true,
        "boolean": true,
        "string": true,
        "object": false
    },
    "object": {
        "number": false,
        "boolean": true,
        "string": true,
        "object": true
    }
};
const _copyFunctions = [
    [
        function (srcVal, dstVal, fnConvert) {
            return fnConvert(srcVal, dstVal); // value > value
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[0] = fnConvert(srcVal); // value > [0]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[1] = fnConvert(srcVal); // value > [1]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[2] = fnConvert(srcVal); // value > [2]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[3] = fnConvert(srcVal); // value > [3]
            return dstVal;
        }
    ],
    [
        function (srcVal, dstVal, fnConvert) {
            return fnConvert(srcVal[0]); // [0] > value
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[0] = fnConvert(srcVal[0]); // [0] > [0]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[1] = fnConvert(srcVal[0]); // [0] > [1]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[2] = fnConvert(srcVal[0]); // [0] > [2]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[3] = fnConvert(srcVal[0]); // [0] > [3]
            return dstVal;
        }
    ],
    [
        function (srcVal, dstVal, fnConvert) {
            return fnConvert(srcVal[1]); // [1] > value
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[0] = fnConvert(srcVal[1]); // [1] > [0]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[1] = fnConvert(srcVal[1]); // [1] > [1]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[2] = fnConvert(srcVal[1]); // [1] > [2]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[3] = fnConvert(srcVal[1]); // [1] > [3]
            return dstVal;
        }
    ],
    [
        function (srcVal, dstVal, fnConvert) {
            return fnConvert(srcVal[2]); // [2] > value
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[0] = fnConvert(srcVal[2]); // [2] > [0]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[1] = fnConvert(srcVal[2]); // [2] > [1]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[2] = fnConvert(srcVal[2]); // [2] > [2]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[3] = fnConvert(srcVal[2]); // [2] > [3]
            return dstVal;
        }
    ],
    [
        function (srcVal, dstVal, fnConvert) {
            return fnConvert(srcVal[3]); // [3] > value
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[0] = fnConvert(srcVal[3]); // [3] > [0]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[1] = fnConvert(srcVal[3]); // [3] > [1]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[2] = fnConvert(srcVal[3]); // [3] > [2]
            return dstVal;
        },
        function (srcVal, dstVal, fnConvert) {
            dstVal[3] = fnConvert(srcVal[3]); // [3] > [3]
            return dstVal;
        }
    ]
];
function getConversionFunction(sourceType, destinationType, isArray) {
    const index = isArray ? 1 : 0;
    return _conversionFunctions[sourceType][destinationType][index];
}
exports.getConversionFunction = getConversionFunction;
function canConvert(sourceType, destinationType) {
    return _conversionTable[sourceType][destinationType];
}
exports.canConvert = canConvert;
function getElementCopyFunction(sourceIndex, destinationIndex, fnConvert) {
    if (sourceIndex === -1 && destinationIndex === -1) {
        return fnConvert;
    }
    if (sourceIndex <= 3 && destinationIndex <= 3) {
        return _copyFunctions[sourceIndex + 1][destinationIndex + 1];
    }
    return function (srcVal, dstVal, fnConvert) {
        dstVal[destinationIndex] = fnConvert(srcVal[sourceIndex]);
        return dstVal;
    };
}
exports.getElementCopyFunction = getElementCopyFunction;
function getMultiCopyFunction(sourceIsMulti, destinationIsMulti, fnCopy) {
    if (sourceIsMulti === false) {
        if (destinationIsMulti === false) {
            // single > single
            return fnCopy;
        }
        else {
            // single > multi
            return function (srcVal, dstVal, fnConvert) {
                for (let i = 0, n = dstVal.length; i < n; ++i) {
                    dstVal[i] = fnCopy(srcVal, dstVal[i]);
                }
                return dstVal;
            };
        }
    }
    else {
        if (destinationIsMulti === false) {
            // multi > single
            return function (srcVal, dstVal, fnConvert) {
                if (srcVal.length > 0) {
                    dstVal = fnCopy(srcVal[0], dstVal);
                }
                return dstVal;
            };
        }
        else {
            // multi > multi
            return function (srcVal, dstVal, fnConvert) {
                for (let i = 0, m = srcVal.length, n = dstVal.length; i < n; ++i) {
                    dstVal[i] = fnCopy(srcVal[i % m], dstVal[i]);
                }
                return dstVal;
            };
        }
    }
}
exports.getMultiCopyFunction = getMultiCopyFunction;


/***/ }),

/***/ "../../libs/ff-graph/source/propertyTypes.ts":
/*!***************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-graph/source/propertyTypes.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = __webpack_require__(/*! @ff/core/types */ "../../libs/ff-core/source/types.ts");
exports.labels = {
    xyzw: ["X", "Y", "Z", "W"],
    rgba: ["R", "G", "B", "A"],
};
const parseProps = function (props) {
    if (props === undefined || (typeof props === "object" && !Array.isArray(props))) {
        return props;
    }
    return { preset: props };
};
exports.makeType = function (schema, path, props) {
    props = parseProps(props);
    return { path, schema: props ? Object.assign({}, schema, props) : schema };
};
exports.makeEnumType = function (enumeration, path, props) {
    props = parseProps(props);
    const schema = { enum: enumeration, options: types_1.enumToArray(enumeration), preset: 0 };
    return { path, schema: props ? Object.assign({}, schema, props) : schema };
};
exports.makeOptionType = function (options, path, props) {
    props = parseProps(props);
    const schema = { options, preset: 0 };
    return { path, schema: props ? Object.assign({}, schema, props) : schema };
};
exports.makeObjectType = function (type, path, props) {
    props = parseProps(props);
    const schema = { preset: null, objectType: type };
    return { path, schema: props ? Object.assign({}, schema, props) : schema };
};
exports.schemas = {
    Number: { preset: 0 },
    Integer: { preset: 0, step: 1, speed: 0.34, precision: 0 },
    Natural: { preset: 0, step: 1, speed: 0.34, precision: 0, min: 0 },
    Unit: { preset: 0, min: 0, max: 1, bar: true },
    Percent: { preset: 0, min: 0, max: 1, bar: true, percent: true },
    Vector2: { preset: [0, 0] },
    Vector3: { preset: [0, 0, 0] },
    Vector4: { preset: [0, 0, 0, 0] },
    Matrix2: { preset: [1, 0, 0, 1] },
    Matrix3: { preset: [1, 0, 0, 0, 1, 0, 0, 0, 1] },
    Matrix4: { preset: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1] },
    Scale: { preset: 1 },
    Scale2: { preset: [1, 1] },
    Scale3: { preset: [1, 1, 1] },
    IntVec2: { preset: [0, 0], step: 1, speed: 0.34, precision: 0 },
    IntVec3: { preset: [0, 0, 0], step: 1, speed: 0.34, precision: 0 },
    ColorRGB: { preset: [1, 1, 1], semantic: "color", labels: exports.labels.rgba, min: 0, max: 1, bar: true },
    ColorRGBA: { preset: [1, 1, 1, 1], semantic: "color", labels: exports.labels.rgba, min: 0, max: 1, bar: true },
    Boolean: { preset: false },
    String: { preset: "" },
    AssetPath: { preset: "", semantic: "asset-path" },
    Object: { preset: null, objectType: Object },
    Event: { preset: 0, event: true }
};
exports.types = {
    Property: (path, props) => exports.makeType(undefined, path, props),
    Number: (path, props) => exports.makeType(exports.schemas.Number, path, props),
    Integer: (path, props) => exports.makeType(exports.schemas.Integer, path, props),
    Natural: (path, props) => exports.makeType(exports.schemas.Natural, path, props),
    Unit: (path, props) => exports.makeType(exports.schemas.Unit, path, props),
    Percent: (path, props) => exports.makeType(exports.schemas.Percent, path, props),
    Vector2: (path, props) => exports.makeType(exports.schemas.Vector2, path, props),
    Vector3: (path, props) => exports.makeType(exports.schemas.Vector3, path, props),
    Vector4: (path, props) => exports.makeType(exports.schemas.Vector4, path, props),
    IntVec2: (path, props) => exports.makeType(exports.schemas.IntVec2, path, props),
    IntVec3: (path, props) => exports.makeType(exports.schemas.IntVec3, path, props),
    Matrix2: (path, props) => exports.makeType(exports.schemas.Matrix2, path, props),
    Matrix3: (path, props) => exports.makeType(exports.schemas.Matrix3, path, props),
    Matrix4: (path, props) => exports.makeType(exports.schemas.Matrix4, path, props),
    Scale: (path, props) => exports.makeType(exports.schemas.Scale, path, props),
    Scale2: (path, props) => exports.makeType(exports.schemas.Scale2, path, props),
    Scale3: (path, props) => exports.makeType(exports.schemas.Scale3, path, props),
    ColorRGB: (path, props) => exports.makeType(exports.schemas.ColorRGB, path, props),
    ColorRGBA: (path, props) => exports.makeType(exports.schemas.ColorRGBA, path, props),
    Boolean: (path, props) => exports.makeType(exports.schemas.Boolean, path, props),
    String: (path, props) => exports.makeType(exports.schemas.String, path, props),
    AssetPath: (path, props) => exports.makeType(exports.schemas.AssetPath, path, props),
    Enum: (path, enumeration, props) => exports.makeEnumType(enumeration, path, props),
    Option: (path, options, props) => exports.makeOptionType(options, path, props),
    Object: (path, type, props) => exports.makeObjectType(type, path, props),
    Event: (path, props) => exports.makeType(exports.schemas.Event, path, props)
};


/***/ }),

/***/ "../../libs/ff-scene/source/RenderQuadView.ts":
/*!****************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/RenderQuadView.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const UniversalCamera_1 = __webpack_require__(/*! @ff/three/UniversalCamera */ "../../libs/ff-three/source/UniversalCamera.ts");
const RenderView_1 = __webpack_require__(/*! ./RenderView */ "../../libs/ff-scene/source/RenderView.ts");
var EQuadViewLayout;
(function (EQuadViewLayout) {
    EQuadViewLayout[EQuadViewLayout["Single"] = 0] = "Single";
    EQuadViewLayout[EQuadViewLayout["HorizontalSplit"] = 1] = "HorizontalSplit";
    EQuadViewLayout[EQuadViewLayout["VerticalSplit"] = 2] = "VerticalSplit";
    EQuadViewLayout[EQuadViewLayout["Quad"] = 3] = "Quad";
})(EQuadViewLayout = exports.EQuadViewLayout || (exports.EQuadViewLayout = {}));
class RenderQuadView extends RenderView_1.default {
    constructor(system, canvas, overlay) {
        super(system, canvas, overlay);
        this._layout = EQuadViewLayout.Quad;
        this._horizontalSplit = 0.5;
        this._verticalSplit = 0.5;
        this.addEvent("layout");
        this.layout = EQuadViewLayout.Single;
    }
    set layout(layout) {
        if (layout === this._layout) {
            return;
        }
        this._layout = layout;
        const viewports = this.viewports;
        switch (this._layout) {
            case EQuadViewLayout.Single:
                this.setViewportCount(1);
                break;
            case EQuadViewLayout.HorizontalSplit:
            case EQuadViewLayout.VerticalSplit:
                this.setViewportCount(2);
                break;
            case EQuadViewLayout.Quad:
                this.setViewportCount(4);
                break;
        }
        this.updateSplitPositions();
        if (viewports[1]) {
            viewports[1].setBuiltInCamera(UniversalCamera_1.EProjection.Orthographic, UniversalCamera_1.EViewPreset.Top);
            viewports[1].enableCameraControl(true).orientationEnabled = false;
        }
        if (viewports[2]) {
            viewports[2].setBuiltInCamera(UniversalCamera_1.EProjection.Orthographic, UniversalCamera_1.EViewPreset.Left);
            viewports[2].enableCameraControl(true).orientationEnabled = false;
        }
        if (viewports[3]) {
            viewports[3].setBuiltInCamera(UniversalCamera_1.EProjection.Orthographic, UniversalCamera_1.EViewPreset.Front);
            viewports[3].enableCameraControl(true).orientationEnabled = false;
        }
        this.emit({ type: "layout", layout });
    }
    get layout() {
        return this._layout;
    }
    set horizontalSplit(value) {
        this._horizontalSplit = value;
        this.updateSplitPositions();
    }
    get horizontalSplit() {
        return this._horizontalSplit;
    }
    set verticalSplit(value) {
        this._verticalSplit = value;
        this.updateSplitPositions();
    }
    get verticalSplit() {
        return this._verticalSplit;
    }
    updateSplitPositions() {
        const h = this._horizontalSplit;
        const v = this._verticalSplit;
        switch (this._layout) {
            case EQuadViewLayout.Single:
                this.viewports[0].setSize(0, 0, 1, 1);
                break;
            case EQuadViewLayout.HorizontalSplit:
                this.viewports[0].setSize(0, 0, h, 1);
                this.viewports[1].setSize(h, 0, 1 - h, 1);
                break;
            case EQuadViewLayout.VerticalSplit:
                this.viewports[0].setSize(0, 1 - v, 1, v);
                this.viewports[1].setSize(0, 0, 1, 1 - v);
                break;
            case EQuadViewLayout.Quad:
                this.viewports[0].setSize(0, 1 - v, h, v);
                this.viewports[1].setSize(h, 1 - v, 1 - h, v);
                this.viewports[2].setSize(0, 0, h, 1 - v);
                this.viewports[3].setSize(h, 0, 1 - h, 1 - v);
                break;
        }
    }
}
exports.default = RenderQuadView;


/***/ }),

/***/ "../../libs/ff-scene/source/RenderView.ts":
/*!************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/RenderView.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const Publisher_1 = __webpack_require__(/*! @ff/core/Publisher */ "../../libs/ff-core/source/Publisher.ts");
const CHierarchy_1 = __webpack_require__(/*! @ff/graph/components/CHierarchy */ "../../libs/ff-graph/source/components/CHierarchy.ts");
const Viewport_1 = __webpack_require__(/*! @ff/three/Viewport */ "../../libs/ff-three/source/Viewport.ts");
exports.Viewport = Viewport_1.default;
const ViewportOverlay_1 = __webpack_require__(/*! @ff/three/ui/ViewportOverlay */ "../../libs/ff-three/source/ui/ViewportOverlay.ts");
const GPUPicker_1 = __webpack_require__(/*! @ff/three/GPUPicker */ "../../libs/ff-three/source/GPUPicker.ts");
const CRenderer_1 = __webpack_require__(/*! ./components/CRenderer */ "../../libs/ff-scene/source/components/CRenderer.ts");
const UniversalCamera_1 = __webpack_require__(/*! @ff/three/UniversalCamera */ "../../libs/ff-three/source/UniversalCamera.ts");
class RenderView extends Publisher_1.default {
    constructor(system, canvas, overlay) {
        super();
        this.viewports = [];
        this.rendererComponent = null;
        this.targetViewport = null;
        this.targetObject3D = null;
        this.targetComponent = null;
        this.targetScene = null;
        this.targetCamera = null;
        this.defaultScene = new THREE.Scene();
        this.defaultCamera = new UniversalCamera_1.default();
        this.system = system;
        this.canvas = canvas;
        this.overlay = overlay;
        this.renderer = new THREE.WebGLRenderer({
            canvas,
            antialias: true
        });
        this.renderer.autoClear = false;
        this.renderer.gammaOutput = true;
        this.renderer.gammaFactor = 2;
        this.picker = new GPUPicker_1.default(this.renderer);
    }
    dispose() {
        this.renderer.dispose();
        this.viewports.forEach(viewport => viewport.dispose());
    }
    get canvasWidth() {
        return this.canvas.width;
    }
    get canvasHeight() {
        return this.canvas.height;
    }
    attach() {
        const width = this.canvasWidth;
        const height = this.canvasHeight;
        this.viewports.forEach(viewport => viewport.setCanvasSize(width, height));
        this.renderer.setSize(width, height, false);
        this.rendererComponent = this.system.getComponent(CRenderer_1.default, true);
        this.rendererComponent.attachView(this);
    }
    detach() {
        this.rendererComponent = this.system.getComponent(CRenderer_1.default, true);
        this.rendererComponent.detachView(this);
        this.rendererComponent = null;
    }
    renderImage(width, height, format, quality) {
        if (true) {
            console.log("RenderView.renderImage - width: %s, height: %s, format: %s, quality: %s", width, height, format, quality);
        }
        const canvasWidth = this.canvas.width;
        const canvasHeight = this.canvas.height;
        this.setRenderSize(width, height);
        this.render();
        const dataURL = this.canvas.toDataURL(format, quality);
        this.setRenderSize(canvasWidth, canvasHeight);
        return dataURL;
    }
    render() {
        const sceneComponent = this.rendererComponent.activeSceneComponent;
        if (!sceneComponent) {
            return;
        }
        let scene = sceneComponent.scene;
        let camera = sceneComponent.activeCamera;
        if (!scene || !camera) {
            if (true) {
                console.warn(!scene ? !camera ? "no scene/camera" : "no scene" : "no camera");
            }
            scene = this.defaultScene;
            camera = this.defaultCamera;
        }
        const renderer = this.renderer;
        renderer.clear();
        renderer["__view"] = this;
        const viewports = this.viewports;
        for (let i = 0, n = viewports.length; i < n; ++i) {
            const viewport = viewports[i];
            renderer["__viewport"] = viewport;
            const currentCamera = viewport.updateCamera(camera);
            viewport.applyViewport(this.renderer);
            renderer.render(scene, currentCamera);
        }
    }
    setRenderSize(width, height) {
        this.canvas.width = width;
        this.canvas.height = height;
        this.viewports.forEach(viewport => viewport.setCanvasSize(width, height));
        this.renderer.setSize(width, height, false);
    }
    resize() {
        this.setRenderSize(this.canvas.clientWidth, this.canvas.clientHeight);
        this.render();
    }
    setViewportCount(count) {
        const viewports = this.viewports;
        for (let i = count; i < viewports.length; ++i) {
            viewports[i].dispose();
        }
        for (let i = viewports.length; i < count; ++i) {
            const overlay = new ViewportOverlay_1.default().appendTo(this.overlay);
            viewports[i] = new Viewport_1.default();
            viewports[i].setCanvasSize(this.canvasWidth, this.canvasHeight);
            viewports[i].overlay = overlay;
        }
        viewports.length = count;
    }
    getViewportCount() {
        return this.viewports.length;
    }
    onPointer(event) {
        const system = this.system;
        if (!system) {
            return false;
        }
        let doPick = false;
        let doHitTest = false;
        if (event.type === "pointer-hover") {
            doHitTest = true;
        }
        else if (event.isPrimary && event.type === "pointer-down") {
            doHitTest = true;
            doPick = true;
        }
        const viewEvent = this.routeEvent(event, doHitTest, doPick);
        if (viewEvent) {
            const component = viewEvent.component;
            if (component) {
                component.emit(viewEvent);
                const hierarchy = component.getComponent(CHierarchy_1.default);
                if (!viewEvent.stopPropagation && hierarchy) {
                    hierarchy.propagateUp(false, true, viewEvent);
                }
            }
            if (!viewEvent.stopPropagation) {
                this.system.emit(viewEvent);
            }
            if (!viewEvent.stopPropagation) {
                const updated = viewEvent.viewport.onPointer(viewEvent);
                if (updated) {
                    this.system.getMainComponent(CRenderer_1.default).forceRender();
                }
            }
            return true;
        }
        return false;
    }
    onTrigger(event) {
        const system = this.system;
        if (!system) {
            return false;
        }
        const viewEvent = this.routeEvent(event, true, true);
        if (viewEvent) {
            const component = viewEvent.component;
            if (component) {
                component.emit(viewEvent);
                const hierarchy = component.getComponent(CHierarchy_1.default);
                if (!viewEvent.stopPropagation && hierarchy) {
                    hierarchy.propagateUp(false, true, viewEvent);
                }
            }
            if (!viewEvent.stopPropagation) {
                this.system.emit(viewEvent);
            }
            if (!viewEvent.stopPropagation) {
                const updated = viewEvent.viewport.onTrigger(viewEvent);
                if (updated) {
                    this.system.getMainComponent(CRenderer_1.default).forceRender();
                }
            }
            return true;
        }
        return false;
    }
    pickPosition(event, range, result) {
        return this.picker.pickPosition(this.targetScene, this.targetCamera, event, range, result);
    }
    pickNormal(event, result) {
        return this.picker.pickNormal(this.targetScene, this.targetCamera, event, result);
    }
    routeEvent(event, doHitTest, doPick) {
        let viewport = this.targetViewport;
        let object3D = this.targetObject3D;
        let component = this.targetComponent;
        // if no active viewport, perform a hit test against all viewports
        if (doHitTest) {
            viewport = null;
            const viewports = this.viewports;
            for (let i = 0, n = viewports.length; i < n; ++i) {
                const vp = viewports[i];
                if (vp.isInside(event)) {
                    viewport = vp;
                    break;
                }
            }
        }
        // without an active viewport, return null to cancel the event
        if (!viewport) {
            return null;
        }
        // if we have an active viewport now, augment event with viewport/view information
        const viewEvent = event;
        viewEvent.view = this;
        viewEvent.viewport = viewport;
        viewEvent.deviceX = viewport.getDeviceX(event.localX);
        viewEvent.deviceY = viewport.getDeviceY(event.localY);
        viewEvent.stopPropagation = false;
        // perform 3D pick
        if (doPick) {
            const sceneComponent = this.rendererComponent.activeSceneComponent;
            const scene = this.targetScene = sceneComponent && sceneComponent.scene;
            const camera = this.targetCamera = sceneComponent && sceneComponent.activeCamera;
            object3D = null;
            component = null;
            if (scene && camera) {
                object3D = this.picker.pickObject(scene, camera, event);
                if (object3D === undefined) {
                    if (true) {
                        console.log("Pick Index - Background");
                    }
                }
                else {
                    let componentObject3D = object3D;
                    while (componentObject3D && !component) {
                        component = componentObject3D.userData["component"];
                        if (!component) {
                            componentObject3D = componentObject3D.parent;
                        }
                    }
                    if (true) {
                        if (component) {
                            console.log("Pick Index - Component: %s", component.typeName);
                        }
                        else {
                            console.warn("Pick Index - Object without component");
                        }
                    }
                }
            }
        }
        viewEvent.object3D = object3D;
        viewEvent.component = component;
        this.targetViewport = viewport;
        this.targetObject3D = object3D;
        this.targetComponent = component;
        return viewEvent;
    }
}
exports.default = RenderView;


/***/ }),

/***/ "../../libs/ff-scene/source/components/CBackground.ts":
/*!************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/components/CBackground.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CObject3D_1 = __webpack_require__(/*! ./CObject3D */ "../../libs/ff-scene/source/components/CObject3D.ts");
const Background_1 = __webpack_require__(/*! @ff/three/Background */ "../../libs/ff-three/source/Background.ts");
exports.EBackgroundStyle = Background_1.EBackgroundStyle;
class CBackground extends CObject3D_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CBackground.backgroundIns);
        this.object3D = new Background_1.default();
    }
    get background() {
        return this.object3D;
    }
    update(context) {
        super.update(context);
        const ins = this.ins;
        const material = this.background.material;
        if (ins.style.changed) {
            material.style = ins.style.getValidatedValue();
        }
        if (ins.color0.changed) {
            material.color0.fromArray(ins.color0.value);
        }
        if (ins.color1.changed) {
            material.color1.fromArray(ins.color1.value);
        }
        if (ins.noise.changed) {
            material.noise = ins.noise.value;
        }
        return true;
    }
    dispose() {
        this.background.dispose();
        super.dispose();
    }
}
exports.default = CBackground;
CBackground.typeName = "CBackground";
CBackground.backgroundIns = {
    style: CObject3D_1.types.Enum("Background.Style", Background_1.EBackgroundStyle, Background_1.EBackgroundStyle.RadialGradient),
    color0: CObject3D_1.types.ColorRGB("Background.Color0", [0.2, 0.25, 0.3]),
    color1: CObject3D_1.types.ColorRGB("Background.Color1", [0.01, 0.03, 0.05]),
    noise: CObject3D_1.types.Number("Background.Noise", { min: 0, max: 1, bar: true, preset: 0.02 }),
};


/***/ }),

/***/ "../../libs/ff-scene/source/components/CCamera.ts":
/*!********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/components/CCamera.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const UniversalCamera_1 = __webpack_require__(/*! @ff/three/UniversalCamera */ "../../libs/ff-three/source/UniversalCamera.ts");
exports.EProjection = UniversalCamera_1.EProjection;
const CObject3D_1 = __webpack_require__(/*! ./CObject3D */ "../../libs/ff-scene/source/components/CObject3D.ts");
const math_1 = __webpack_require__(/*! @ff/core/math */ "../../libs/ff-core/source/math.ts");
////////////////////////////////////////////////////////////////////////////////
const _vec3a = new THREE.Vector3();
const _vec3b = new THREE.Vector3();
const _euler = new THREE.Euler();
const _quat = new THREE.Quaternion();
class CCamera extends CObject3D_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CCamera.camIns);
        this.object3D = new UniversalCamera_1.default();
    }
    /**
     * Returns the internal [[UniversalCamera]] camera object of this component.
     */
    get camera() {
        return this.object3D;
    }
    update() {
        const { autoActivate, activate } = this.ins;
        // set the camera as active in the containing scene
        if (activate.changed || autoActivate.changed && autoActivate.value) {
            const scene = this.scene;
            if (scene) {
                scene.activeCameraComponent = this;
            }
        }
        const camera = this.camera;
        const { position, rotation, projection, fov, size, zoom, near, far } = this.ins;
        if (position.changed || rotation.changed) {
            camera.position.fromArray(position.value);
            camera.rotation.fromArray(rotation.value);
            camera.updateMatrix();
        }
        if (projection.changed) {
            camera.setProjection(projection.getValidatedValue());
        }
        camera.fov = fov.value;
        camera.size = size.value;
        camera.zoom = zoom.value;
        camera.near = near.value;
        camera.far = far.value;
        camera.updateProjectionMatrix();
        return true;
    }
    dispose() {
        const scene = this.scene;
        if (scene && scene.activeCameraComponent === this) {
            scene.activeCameraComponent = null;
        }
        super.dispose();
    }
    /**
     * Sets the position, rotation, and order properties from the given 4x4 transform matrix.
     * Updating the properties then also updates the matrix of the internal universal camera object.
     * @param matrix A 4x4 transform matrix. If omitted, properties are updated from the matrix of the internal camera.
     */
    setPropertiesFromMatrix(matrix) {
        const silent = !matrix;
        matrix = matrix || this.object3D.matrix;
        const { position, rotation, order } = this.ins;
        matrix.decompose(_vec3a, _quat, _vec3b);
        _vec3a.toArray(position.value);
        const orderName = order.getOptionText();
        _euler.setFromQuaternion(_quat, orderName);
        _euler.toVector3(_vec3a);
        _vec3a.multiplyScalar(math_1.default.RAD2DEG).toArray(rotation.value);
        position.set(silent);
        rotation.set(silent);
    }
}
exports.default = CCamera;
CCamera.typeName = "CCamera";
CCamera.camIns = {
    autoActivate: Component_1.types.Boolean("Camera.AutoActivate", true),
    activate: Component_1.types.Event("Camera.Activate"),
    position: Component_1.types.Vector3("Transform.Position"),
    rotation: Component_1.types.Vector3("Transform.Rotation"),
    order: Component_1.types.Enum("Transform.Order", CObject3D_1.ERotationOrder, CObject3D_1.ERotationOrder.ZYX),
    projection: Component_1.types.Enum("Projection.Type", UniversalCamera_1.EProjection, UniversalCamera_1.EProjection.Perspective),
    fov: Component_1.types.Number("Projection.FovY", 52),
    size: Component_1.types.Number("Projection.Size", 20),
    zoom: Component_1.types.Number("Projection.Zoom", 1),
    near: Component_1.types.Number("Frustum.ZNear", 0.01),
    far: Component_1.types.Number("Frustum.ZFar", 10000),
};


/***/ }),

/***/ "../../libs/ff-scene/source/components/CDirectionalLight.ts":
/*!******************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/components/CDirectionalLight.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CLight_1 = __webpack_require__(/*! ./CLight */ "../../libs/ff-scene/source/components/CLight.ts");
////////////////////////////////////////////////////////////////////////////////
class CDirectionalLight extends CLight_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CDirectionalLight.dirLightIns);
        this.object3D = new THREE.DirectionalLight();
        this.light.target.matrixAutoUpdate = false;
    }
    get light() {
        return this.object3D;
    }
    update(context) {
        super.update(context);
        const light = this.light;
        const ins = this.ins;
        if (ins.position.changed || ins.target.changed) {
            light.position.fromArray(ins.position.value);
            light.target.position.fromArray(ins.target.value);
            light.updateMatrix();
            light.target.updateMatrix();
        }
        if (ins.shadowSize.changed) {
            const camera = light.shadow.camera;
            const halfSize = ins.shadowSize.value * 0.5;
            camera.left = camera.bottom = -halfSize;
            camera.right = camera.top = halfSize;
            camera.updateProjectionMatrix();
        }
        return true;
    }
    onAddToParent(parent) {
        super.onAddToParent(parent);
        parent.add(this.light.target);
    }
    onRemoveFromParent(parent) {
        super.onRemoveFromParent(parent);
        parent.remove(this.light.target);
    }
}
exports.default = CDirectionalLight;
CDirectionalLight.typeName = "CDirectionalLight";
CDirectionalLight.dirLightIns = {
    position: Component_1.types.Vector3("Light.Position"),
    target: Component_1.types.Vector3("Light.Target", [0, -1, 0]),
    shadowSize: Component_1.types.Number("Shadow.Size", 100),
};


/***/ }),

/***/ "../../libs/ff-scene/source/components/CFloor.ts":
/*!*******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/components/CFloor.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CObject3D_1 = __webpack_require__(/*! ./CObject3D */ "../../libs/ff-scene/source/components/CObject3D.ts");
const Floor_1 = __webpack_require__(/*! @ff/three/Floor */ "../../libs/ff-three/source/Floor.ts");
////////////////////////////////////////////////////////////////////////////////
class CFloor extends CObject3D_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CFloor.floorIns);
        this.object3D = new Floor_1.default();
    }
    get floor() {
        return this.object3D;
    }
    update(context) {
        super.update(context);
        const ins = this.ins;
        const floor = this.floor;
        if (ins.position.changed || ins.radius.changed) {
            floor.position.fromArray(ins.position.value);
            floor.scale.setScalar(ins.radius.value);
            floor.updateMatrix();
        }
        if (ins.color.changed) {
            floor.material.color.fromArray(ins.color.value);
        }
        if (ins.opacity.changed) {
            floor.material.opacity = ins.opacity.value;
        }
        return true;
    }
    dispose() {
        this.floor.dispose();
        super.dispose();
    }
}
exports.default = CFloor;
CFloor.typeName = "CFloor";
CFloor.floorIns = {
    position: CObject3D_1.types.Vector3("Floor.Position", [0, -25, 0]),
    radius: CObject3D_1.types.Number("Floor.Radius", 50),
    color: CObject3D_1.types.ColorRGB("Floor.Color", [0.6, 0.75, 0.8]),
    opacity: CObject3D_1.types.Percent("Floor.Opacity", 0.5),
    castShadow: CObject3D_1.types.Boolean("Shadow.Cast"),
    receiveShadow: CObject3D_1.types.Boolean("Shadow.Receive"),
};


/***/ }),

/***/ "../../libs/ff-scene/source/components/CFullscreen.ts":
/*!************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/components/CFullscreen.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
////////////////////////////////////////////////////////////////////////////////
class CFullscreen extends Component_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CFullscreen.ins);
        this.outs = this.addOutputs(CFullscreen.outs);
        this._fullscreenElement = null;
        this.onFullscreenChange = this.onFullscreenChange.bind(this);
        const e = document.documentElement;
        const fullscreenAvailable = e.requestFullscreen || e.mozRequestFullScreen || e.webkitRequestFullscreen;
        this.outs.fullscreenAvailable.setValue(!!fullscreenAvailable);
        this.ins.toggle.on("value", this.toggle, this);
    }
    get fullscreenElement() {
        return this._fullscreenElement;
    }
    set fullscreenElement(element) {
        if (element !== this._fullscreenElement) {
            if (this._fullscreenElement) {
                this._fullscreenElement.removeEventListener("fullscreenchange", this.onFullscreenChange);
            }
            this._fullscreenElement = element;
            if (element) {
                element.addEventListener("fullscreenchange", this.onFullscreenChange);
            }
        }
    }
    update(context) {
        return true;
    }
    toggle() {
        const outs = this.outs;
        const e = this._fullscreenElement;
        if (e) {
            const state = outs.fullscreenActive.value;
            if (!state && outs.fullscreenAvailable.value) {
                if (e.requestFullscreen) {
                    e.requestFullscreen();
                }
                else if (e.mozRequestFullScreen) {
                    e.mozRequestFullScreen();
                }
                else if (e.webkitRequestFullscreen) {
                    e.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
                }
            }
            else if (state) {
                const d = document;
                if (d.exitFullscreen) {
                    d.exitFullscreen();
                }
                else if (d.cancelFullScreen) {
                    d.cancelFullScreen();
                }
                else if (d.mozCancelFullScreen) {
                    d.mozCancelFullScreen();
                }
                else if (d.webkitCancelFullScreen) {
                    d.webkitCancelFullScreen();
                }
            }
        }
    }
    onFullscreenChange(event) {
        const d = document;
        const element = d.fullscreenElement || d.mozFullScreenElement || d.webkitFullscreenElement;
        this.outs.fullscreenActive.setValue(!!element);
    }
}
exports.default = CFullscreen;
CFullscreen.typeName = "CFullscreen";
CFullscreen.ins = {
    toggle: Component_1.types.Event("Fullscreen.Toggle"),
};
CFullscreen.outs = {
    fullscreenAvailable: Component_1.types.Boolean("Fullscreen.Available", false),
    fullscreenActive: Component_1.types.Boolean("Fullscreen.Active", false),
};


/***/ }),

/***/ "../../libs/ff-scene/source/components/CLight.ts":
/*!*******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/components/CLight.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const propertyTypes_1 = __webpack_require__(/*! @ff/graph/propertyTypes */ "../../libs/ff-graph/source/propertyTypes.ts");
const CObject3D_1 = __webpack_require__(/*! ./CObject3D */ "../../libs/ff-scene/source/components/CObject3D.ts");
////////////////////////////////////////////////////////////////////////////////
var EShadowMapResolution;
(function (EShadowMapResolution) {
    EShadowMapResolution[EShadowMapResolution["Low"] = 0] = "Low";
    EShadowMapResolution[EShadowMapResolution["Medium"] = 1] = "Medium";
    EShadowMapResolution[EShadowMapResolution["High"] = 2] = "High";
})(EShadowMapResolution = exports.EShadowMapResolution || (exports.EShadowMapResolution = {}));
const _mapResolution = {
    [EShadowMapResolution.Low]: 512,
    [EShadowMapResolution.Medium]: 1024,
    [EShadowMapResolution.High]: 2048,
};
class CLight extends CObject3D_1.default {
    constructor() {
        super(...arguments);
        this.ins = this.addInputs(CLight.lightIns);
    }
    get light() {
        return this.object3D;
    }
    update(context) {
        super.update(context);
        const light = this.light;
        const ins = this.ins;
        if (ins.color.changed || ins.intensity.changed) {
            light.color.fromArray(ins.color.value);
            light.intensity = ins.intensity.value;
        }
        if (ins.shadowEnabled.changed || (ins.shadowEnabled.value && (ins.shadowResolution.changed || ins.shadowBlur.changed))) {
            light.castShadow = ins.shadowEnabled.value;
            light.shadow.radius = ins.shadowBlur.value;
            if (ins.shadowResolution.changed) {
                const mapResolution = _mapResolution[ins.shadowResolution.getValidatedValue()];
                light.shadow.mapSize.set(mapResolution, mapResolution);
                light.shadow.map = null; // TODO: check for resource leak
            }
        }
        return true;
    }
}
exports.default = CLight;
CLight.typeName = "CLight";
CLight.lightIns = {
    color: propertyTypes_1.types.ColorRGB("Light.Color"),
    intensity: propertyTypes_1.types.Number("Light.Intensity", 1),
    shadowEnabled: propertyTypes_1.types.Boolean("Shadow.Enabled"),
    shadowResolution: propertyTypes_1.types.Enum("Shadow.Resolution", EShadowMapResolution, EShadowMapResolution.Medium),
    shadowBlur: propertyTypes_1.types.Number("Shadow.Blur", 1),
};


/***/ }),

/***/ "../../libs/ff-scene/source/components/CObject3D.ts":
/*!**********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/components/CObject3D.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
exports.Node = Component_1.Node;
exports.types = Component_1.types;
const GPUPicker_1 = __webpack_require__(/*! @ff/three/GPUPicker */ "../../libs/ff-three/source/GPUPicker.ts");
const CScene_1 = __webpack_require__(/*! ./CScene */ "../../libs/ff-scene/source/components/CScene.ts");
const CTransform_1 = __webpack_require__(/*! ./CTransform */ "../../libs/ff-scene/source/components/CTransform.ts");
exports.ERotationOrder = CTransform_1.ERotationOrder;
////////////////////////////////////////////////////////////////////////////////
const _vec3 = new THREE.Vector3();
/**
 * Base class for drawable components. Wraps a THREE.Object3D based instance.
 * If component is added to a node together with a [[Transform]] component,
 * it is automatically added as a child to the transform.
 */
class CObject3D extends Component_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CObject3D.object3DIns);
        this.outs = this.addOutputs(CObject3D.object3DOuts);
        this._object3D = null;
        this._isPickable = false;
        this.addEvent("object");
        this.node.components.on(this.parentComponentClass, this._onParent, this);
    }
    /** The class of a component in the same node this component uses as parent transform. */
    get parentComponentClass() {
        return this.constructor.parentComponentClass;
    }
    /** The transform parent of this object. */
    get parentComponent() {
        return this.node.components.get(this.parentComponentClass, true);
    }
    /** The component node's transform component. */
    get transform() {
        return this.node.components.get(CTransform_1.default, true);
    }
    /** The scene this renderable object is part of. */
    get scene() {
        const transform = this.transform;
        return transform ? transform.getParentComponent(CScene_1.default, true) : undefined;
    }
    /** The underlying [[THREE.Object3D]] of this component. */
    get object3D() {
        return this._object3D;
    }
    /**
     * Assigns a [[THREE.Object3D]] to this component. The object automatically becomes a child
     * of the parent component's object.
     * @param object
     */
    set object3D(object) {
        const currentObject = this._object3D;
        if (currentObject) {
            currentObject.userData["component"] = null;
            this.unregisterPickableObject3D(currentObject, true);
            if (currentObject.parent) {
                this.onRemoveFromParent(currentObject.parent);
            }
        }
        this.emit({ type: "object", current: currentObject, next: object });
        this._object3D = object;
        if (object) {
            object.userData["component"] = this;
            object.matrixAutoUpdate = false;
            object.visible = this.ins.visible.value;
            this.registerPickableObject3D(object, true);
            const parentComponent = this.parentComponent;
            if (parentComponent) {
                this.onAddToParent(parentComponent.object3D);
            }
        }
    }
    update(context) {
        const { visible, pickable } = this.ins;
        if (visible.changed && this._object3D) {
            this._object3D.visible = visible.value;
        }
        if (pickable.changed && pickable.value !== this._isPickable) {
            this._isPickable = pickable.value;
            if (pickable.value) {
                this.enablePointerEvents();
            }
            else {
                this.disablePointerEvents();
            }
        }
        return true;
    }
    dispose() {
        this.object3D = null;
        if (this.ins.pickable.value) {
            this.disablePointerEvents();
        }
        this.node.components.off(this.parentComponentClass, this._onParent, this);
        super.dispose();
    }
    /**
     * This is called right before the graph's scene is rendered to a specific viewport/view.
     * Override to make adjustments specific to the renderer, view or viewport.
     * @param context
     */
    preRender(context) {
    }
    /**
     * This is called right after the graph's scene has been rendered to a specific viewport/view.
     * Override to make adjustments specific to the renderer, view or viewport.
     * @param context
     */
    postRender(context) {
    }
    /**
     * Returns a text representation.
     */
    toString() {
        return super.toString() + (this._object3D ? ` - type: ${this._object3D.type}` : " - (null)");
    }
    onPointer(event) {
        const outs = this.outs;
        if (event.type === "pointer-down") {
            outs.pointerDown.set();
            outs.pointerActive.setValue(true);
        }
        else if (event.type === "pointer-up") {
            outs.pointerUp.set();
            outs.pointerActive.setValue(false);
        }
        event.stopPropagation = true;
    }
    enablePointerEvents() {
        this.on("pointer-down", this.onPointer, this);
        this.on("pointer-up", this.onPointer, this);
    }
    disablePointerEvents() {
        this.off("pointer-down", this.onPointer, this);
        this.off("pointer-up", this.onPointer, this);
        const outs = this.outs;
        if (outs.pointerActive.value) {
            outs.pointerUp.set();
            outs.pointerActive.setValue(false);
        }
    }
    updateTransform() {
        const object3D = this._object3D;
        if (!object3D) {
            return;
        }
        const { position, rotation, order, scale } = this.ins;
        if (position.changed || rotation.changed || order.changed || scale.changed) {
            // update position
            object3D.position.fromArray(position.value);
            // update rotation angles, rotation order
            _vec3.fromArray(rotation.value).multiplyScalar(THREE.Math.DEG2RAD);
            const orderName = order.getOptionText();
            object3D.rotation.setFromVector3(_vec3, orderName);
            // update scale
            object3D.scale.fromArray(scale.value);
            // compose matrix
            object3D.updateMatrix();
        }
        return true;
    }
    onAddToParent(parent) {
        parent.add(this._object3D);
    }
    onRemoveFromParent(parent) {
        parent.remove(this._object3D);
    }
    /**
     * Adds a [[THREE.Object3D]] as a child to this component's object.
     * Registers the object with the picking service to make it pickable.
     * @param object
     */
    addObject3D(object) {
        this._object3D.add(object);
        this.registerPickableObject3D(object, true);
    }
    /**
     * Removes a [[THREE.Object3D]] child from this component's object.
     * Also unregisters the object from the picking service.
     * @param object
     */
    removeObject3D(object) {
        this.unregisterPickableObject3D(object, true);
        this._object3D.remove(object);
    }
    /**
     * This should be called after an external change to this component's Object3D subtree.
     * It registers newly added mesh objects with the picking service.
     * @param object
     * @param recursive
     */
    registerPickableObject3D(object, recursive) {
        GPUPicker_1.default.add(object, recursive);
    }
    /**
     * This should be called before an external change to this component's Object3D subtree.
     * It unregisters the mesh objects in the subtree from the picking service.
     * @param object
     * @param recursive
     */
    unregisterPickableObject3D(object, recursive) {
        GPUPicker_1.default.remove(object, recursive);
    }
    _onParent(event) {
        // add this THREE.Object3D to the parent THREE.Object3D
        if (this._object3D && !this._object3D.parent && event.add) {
            this.onAddToParent(event.object.object3D);
        }
    }
}
exports.default = CObject3D;
CObject3D.typeName = "CObject3D";
/** The component type whose object3D is the parent of this component's object3D. */
CObject3D.parentComponentClass = CTransform_1.default;
CObject3D.object3DIns = {
    visible: Component_1.types.Boolean("Object.Visible", true),
    pickable: Component_1.types.Boolean("Object.Pickable"),
};
CObject3D.object3DOuts = {
    pointerDown: Component_1.types.Event("Pointer.Down"),
    pointerUp: Component_1.types.Event("Pointer.Up"),
    pointerActive: Component_1.types.Boolean("Pointer.Active")
};
CObject3D.transformIns = CTransform_1.default.transformIns;
CObject3D.prototype.preRender = null;
CObject3D.prototype.postRender = null;


/***/ }),

/***/ "../../libs/ff-scene/source/components/CPickSelection.ts":
/*!***************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/components/CPickSelection.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const ComponentTracker_1 = __webpack_require__(/*! @ff/graph/ComponentTracker */ "../../libs/ff-graph/source/ComponentTracker.ts");
const CSelection_1 = __webpack_require__(/*! @ff/graph/components/CSelection */ "../../libs/ff-graph/source/components/CSelection.ts");
const Bracket_1 = __webpack_require__(/*! @ff/three/Bracket */ "../../libs/ff-three/source/Bracket.ts");
const CObject3D_1 = __webpack_require__(/*! ./CObject3D */ "../../libs/ff-scene/source/components/CObject3D.ts");
const CTransform_1 = __webpack_require__(/*! ./CTransform */ "../../libs/ff-scene/source/components/CTransform.ts");
const CScene_1 = __webpack_require__(/*! ./CScene */ "../../libs/ff-scene/source/components/CScene.ts");
////////////////////////////////////////////////////////////////////////////////
const _inputs = {
    viewportPicking: Component_1.types.Boolean("Viewport.Picking", true),
    viewportBrackets: Component_1.types.Boolean("Viewport.Brackets", true),
};
class CPickSelection extends CSelection_1.default {
    constructor() {
        super(...arguments);
        this.ins = this.addInputs(_inputs);
        this._brackets = new Map();
        this._sceneTracker = null;
    }
    create() {
        super.create();
        this.system.on("pointer-up", this.onPointerUp, this);
        this._sceneTracker = new ComponentTracker_1.default(this.system.components, CScene_1.default, component => {
            component.on("after-render", this.onSceneAfterRender, this);
        }, component => {
            component.off("after-render", this.onSceneAfterRender, this);
        });
    }
    dispose() {
        this._sceneTracker.dispose();
        this.system.off("pointer-up", this.onPointerUp, this);
        this._sceneTracker.dispose();
        super.dispose();
    }
    update() {
        return true;
    }
    onSelectNode(node, selected) {
        super.onSelectNode(node, selected);
        const transform = node.getComponent(CTransform_1.default, true);
        if (transform) {
            this.updateBracket(transform, selected);
        }
    }
    onSelectComponent(component, selected) {
        super.onSelectComponent(component, selected);
        if (component instanceof CObject3D_1.default || component instanceof CTransform_1.default) {
            this.updateBracket(component, selected);
        }
    }
    // protected onActiveGraph(graph: Graph)
    // {
    //     if (this._sceneTracker) {
    //         this._sceneTracker.dispose();
    //     }
    //
    //     if (graph) {
    //         this._sceneTracker = new ComponentTracker(graph.components, CScene, component => {
    //             component.on<ISceneAfterRenderEvent>("after-render", this.onSceneAfterRender, this);
    //         }, component => {
    //             component.off<ISceneAfterRenderEvent>("after-render", this.onSceneAfterRender, this);
    //         });
    //     }
    // }
    onPointerUp(event) {
        if (!this.ins.viewportPicking.value || !event.isPrimary || event.isDragging) {
            return;
        }
        if (event.component) {
            this.selectComponent(event.component, event.ctrlKey);
        }
        else if (!event.ctrlKey) {
            this.clearSelection();
        }
    }
    onSceneAfterRender(event) {
        if (!this.ins.viewportBrackets.value) {
            return;
        }
        const renderer = event.context.renderer;
        const camera = event.context.camera;
        for (let entry of this._brackets) {
            renderer.render(entry[1], camera);
        }
    }
    updateBracket(component, selected) {
        if (!component) {
            return;
        }
        if (selected) {
            const object3D = component.object3D;
            if (object3D) {
                const bracket = new Bracket_1.default(component.object3D);
                this._brackets.set(component, bracket);
            }
        }
        else {
            const bracket = this._brackets.get(component);
            if (bracket) {
                this._brackets.delete(component);
                bracket.dispose();
            }
        }
        this.changed = true;
    }
}
exports.default = CPickSelection;
CPickSelection.typeName = "CPickSelection";


/***/ }),

/***/ "../../libs/ff-scene/source/components/CPointLight.ts":
/*!************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/components/CPointLight.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CLight_1 = __webpack_require__(/*! ./CLight */ "../../libs/ff-scene/source/components/CLight.ts");
////////////////////////////////////////////////////////////////////////////////
const _vec3 = new THREE.Vector3();
class CPointLight extends CLight_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CPointLight.pointLightIns);
        this.object3D = new THREE.PointLight();
    }
    get light() {
        return this.object3D;
    }
    update(context) {
        super.update(context);
        const light = this.light;
        const ins = this.ins;
        if (ins.position.changed) {
            light.position.fromArray(ins.position.value);
            light.updateMatrix();
        }
        if (ins.distance.changed || ins.decay.changed) {
            light.distance = ins.distance.value;
            light.decay = ins.decay.value;
        }
        light.updateMatrix();
        return true;
    }
}
exports.default = CPointLight;
CPointLight.typeName = "CPointLight";
CPointLight.pointLightIns = {
    position: Component_1.types.Vector3("Light.Position"),
    distance: Component_1.types.Number("Light.Distance"),
    decay: Component_1.types.Number("Light.Decay", 1),
};


/***/ }),

/***/ "../../libs/ff-scene/source/components/CRenderGraph.ts":
/*!*************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/components/CRenderGraph.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const CGraph_1 = __webpack_require__(/*! @ff/graph/components/CGraph */ "../../libs/ff-graph/source/components/CGraph.ts");
exports.Node = CGraph_1.Node;
exports.types = CGraph_1.types;
const CTransform_1 = __webpack_require__(/*! ./CTransform */ "../../libs/ff-scene/source/components/CTransform.ts");
const CScene_1 = __webpack_require__(/*! ./CScene */ "../../libs/ff-scene/source/components/CScene.ts");
class CRenderGraph extends CGraph_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CRenderGraph.rgIns);
        this._object3D = null;
        this._isAttached = false;
        this._object3D = new THREE.Object3D();
        this._object3D.matrixAutoUpdate = false;
    }
    /** The component node's transform component. */
    get transform() {
        return this.node.components.get(CTransform_1.default, true);
    }
    /** The scene this renderable object is part of. */
    get scene() {
        const transform = this.transform;
        return transform ? transform.getParentComponent(CScene_1.default, true) : undefined;
    }
    /** The underlying [[THREE.Object3D]] of this component. */
    get object3D() {
        return this._object3D;
    }
    create() {
        super.create();
        // add existing inner root transforms
        this.innerRoots
            .filter(root => root.is(CTransform_1.default))
            .forEach((root) => this._object3D.add(root.object3D));
        // track transform component
        this.trackComponent(CTransform_1.default, component => this.ins.visible.value && this.attachObject3D(component), component => this.detachObject3D(component));
    }
    dispose() {
        this.detachObject3D(this.transform);
        // remove all inner root transforms
        this.innerRoots
            .filter(root => root.is(CTransform_1.default))
            .forEach((root) => this._object3D.remove(root.object3D));
        super.dispose();
    }
    update(context) {
        super.update(context);
        const ins = this.ins;
        if (ins.visible.changed) {
            const parent = this.transform;
            if (ins.visible.value) {
                this.attachObject3D(parent);
            }
            else {
                this.detachObject3D(parent);
            }
        }
        return true;
    }
    onAddInnerRoot(component) {
        if (component.is(CTransform_1.default)) {
            this._object3D.add(component.object3D);
        }
    }
    onRemoveInnerRoot(component) {
        if (component.is(CTransform_1.default)) {
            this._object3D.remove(component.object3D);
        }
    }
    attachObject3D(parent) {
        if (this._isAttached) {
            return;
        }
        if (parent) {
            parent.object3D.add(this._object3D);
            this._isAttached = true;
        }
    }
    detachObject3D(parent) {
        if (!this._isAttached) {
            return;
        }
        if (parent) {
            parent.object3D.remove(this._object3D);
            this._isAttached = false;
        }
    }
}
exports.default = CRenderGraph;
CRenderGraph.typeName = "CRenderGraph";
CRenderGraph.rgIns = {
    visible: CGraph_1.types.Boolean("Graph.Visible", true),
};


/***/ }),

/***/ "../../libs/ff-scene/source/components/CRenderer.ts":
/*!**********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/components/CRenderer.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CPulse_1 = __webpack_require__(/*! @ff/graph/components/CPulse */ "../../libs/ff-graph/source/components/CPulse.ts");
////////////////////////////////////////////////////////////////////////////////
var EShadowMapType;
(function (EShadowMapType) {
    EShadowMapType[EShadowMapType["Basic"] = 0] = "Basic";
    EShadowMapType[EShadowMapType["PCF"] = 1] = "PCF";
    EShadowMapType[EShadowMapType["PCFSoft"] = 2] = "PCFSoft"; /* , VSM */
})(EShadowMapType = exports.EShadowMapType || (exports.EShadowMapType = {}));
const _shadowMapType = {
    [EShadowMapType.Basic]: THREE.BasicShadowMap,
    [EShadowMapType.PCF]: THREE.PCFShadowMap,
    [EShadowMapType.PCFSoft]: THREE.PCFSoftShadowMap,
};
/**
 * Manages 3D rendering. Keeps track of one "active" scene/camera pair,
 * and of a number of render views. During each render cycle, the active scene
 * and camera are rendered to each render view.
 *
 * ### Events
 * - *"active-scene"* - emits [[IActiveSceneEvent]] when the active scene changes.
 * - *"active-camera"* - emits [[IActiveCameraEvent]] when the active camera changes.
 *
 * ### See also
 * - [[CScene]]
 * - [[CCamera]]
 * - [[RenderView]]
 */
class CRenderer extends Component_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CRenderer.ins);
        this.outs = this.addOutputs(CRenderer.outs);
        this.views = [];
        this._activeSceneComponent = null;
        this._forceRender = false;
        this.addEvents("active-scene", "active-camera");
    }
    get activeSceneComponent() {
        return this._activeSceneComponent;
    }
    set activeSceneComponent(component) {
        if (component !== this._activeSceneComponent) {
            const previousScene = this._activeSceneComponent;
            const previousCamera = this.activeCameraComponent;
            if (previousScene) {
                previousScene.off("active-camera", this.onActiveCamera, this);
            }
            if (component) {
                component.on("active-camera", this.onActiveCamera, this);
            }
            this._activeSceneComponent = component;
            const nextCamera = this.activeCameraComponent;
            const sceneEvent = { type: "active-scene", previous: previousScene, next: component };
            this.emit(sceneEvent);
            const cameraEvent = { type: "active-camera", previous: previousCamera, next: nextCamera };
            this.emit(cameraEvent);
        }
    }
    get activeSceneGraph() {
        return this._activeSceneComponent ? this._activeSceneComponent.graph : null;
    }
    get activeScene() {
        return this._activeSceneComponent ? this._activeSceneComponent.scene : null;
    }
    get activeCameraComponent() {
        return this._activeSceneComponent ? this._activeSceneComponent.activeCameraComponent : null;
    }
    get activeCamera() {
        const component = this._activeSceneComponent ? this._activeSceneComponent.activeCameraComponent : null;
        return component ? component.camera : null;
    }
    forceRender() {
        this._forceRender = true;
    }
    create() {
        super.create();
        this.trackComponent(CPulse_1.default, component => {
            component.on("pulse", this.onPulse, this);
        }, component => {
            component.off("pulse", this.onPulse, this);
        });
    }
    update() {
        const ins = this.ins;
        if (ins.exposure.changed) {
            this.views.forEach(view => view.renderer.toneMappingExposure = ins.exposure.value);
        }
        if (ins.gamma.changed) {
            this.views.forEach(view => view.renderer.gammaFactor = ins.gamma.value);
            const scene = this.activeScene;
            if (scene) {
                scene.traverse(object => {
                    const mesh = object;
                    if (mesh.isMesh) {
                        if (Array.isArray(mesh.material)) {
                            mesh.material.forEach(material => material.needsUpdate = true);
                        }
                        else {
                            mesh.material.needsUpdate = true;
                        }
                    }
                });
            }
        }
        if (ins.shadowsEnabled.changed) {
            this.views.forEach(view => view.renderer.shadowMap.enabled = ins.shadowsEnabled.value);
        }
        if (ins.shadowMapType.changed) {
            this.views.forEach(view => view.renderer.shadowMap.type = _shadowMapType[ins.shadowMapType.getValidatedValue()]);
        }
        return true;
    }
    attachView(view) {
        // set WebGL caps if it's the first view attached
        if (this.views.length === 0) {
            const renderer = view.renderer;
            const outs = this.outs;
            outs.maxTextureSize.setValue(renderer.capabilities.maxTextureSize);
            outs.maxCubemapSize.setValue(renderer.capabilities.maxCubemapSize);
        }
        this.views.push(view);
        if (true) {
            console.log("RenderSystem.attachView - total views: %s", this.views.length);
        }
    }
    detachView(view) {
        const index = this.views.indexOf(view);
        if (index < 0) {
            throw new Error("render view not registered");
        }
        this.views.splice(index, 1);
        if (true) {
            console.log("RenderSystem.detachView - total views: %s", this.views.length);
        }
    }
    logInfo() {
        this.views.forEach(view => {
            console.log(view.renderer.info);
        });
    }
    onPulse(event) {
        if (event.systemUpdated || this._forceRender) {
            if (true) {
                console.log("CRenderer.onPulse - render views...");
            }
            this.views.forEach(view => {
                view.render();
            });
            this._forceRender = false;
        }
    }
    onActiveCamera(event) {
        this.emit(event);
    }
}
exports.default = CRenderer;
CRenderer.typeName = "CRenderer";
CRenderer.isSystemSingleton = true;
CRenderer.ins = {
    exposure: Component_1.types.Number("Shading.Exposure", 1),
    gamma: Component_1.types.Number("Shading.Gamma", 2),
    shadowsEnabled: Component_1.types.Boolean("Shadows.Enabled", true),
    shadowMapType: Component_1.types.Enum("Shadows.MapType", EShadowMapType, EShadowMapType.PCF),
};
CRenderer.outs = {
    maxTextureSize: Component_1.types.Integer("Caps.MaxTextureSize"),
    maxCubemapSize: Component_1.types.Integer("Caps.MaxCubemapSize"),
};


/***/ }),

/***/ "../../libs/ff-scene/source/components/CScene.ts":
/*!*******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/components/CScene.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CRenderer_1 = __webpack_require__(/*! ./CRenderer */ "../../libs/ff-scene/source/components/CRenderer.ts");
const CTransform_1 = __webpack_require__(/*! ./CTransform */ "../../libs/ff-scene/source/components/CTransform.ts");
const _context = {
    view: null,
    viewport: null,
    renderer: null,
    scene: null,
    camera: null
};
const _beforeRenderEvent = {
    type: "before-render",
    component: null,
    context: _context
};
const _afterRenderEvent = {
    type: "after-render",
    component: null,
    context: _context
};
const _inputs = {
    activate: Component_1.types.Event("Scene.Activate")
};
/**
 * Represents a 3D scene. Root of a hierarchy of a number of 3D renderable objects and one
 * or multiple cameras. Only one camera at a time can be the "active" camera which is
 * used during each render cycle to render the currently active scene to one or multiple render views.
 */
class CScene extends CTransform_1.default {
    constructor(node, id) {
        super(node, id);
        this._activeCameraComponent = null;
        this._preRenderList = [];
        this._postRenderList = [];
        this._renderListsNeedUpdate = true;
        this.ins = this.addInputs(_inputs, 0);
        this.addEvents("before-render", "after-render", "active-camera");
    }
    get scene() {
        return this.object3D;
    }
    get activeCameraComponent() {
        return this._activeCameraComponent;
    }
    set activeCameraComponent(component) {
        if (component !== this._activeCameraComponent) {
            const previous = this._activeCameraComponent;
            this._activeCameraComponent = component;
            const event = { type: "active-camera", previous, next: component };
            this.emit(event);
        }
    }
    get activeCamera() {
        return this._activeCameraComponent ? this._activeCameraComponent.camera : null;
    }
    get renderer() {
        return this.getMainComponent(CRenderer_1.default);
    }
    create() {
        super.create();
        this.on("hierarchy", this.shouldUpdateRenderLists, this);
        this.on("child", this.shouldUpdateRenderLists, this);
        const renderer = this.renderer;
        if (renderer && !renderer.activeSceneComponent) {
            renderer.activeSceneComponent = this;
        }
    }
    update(context) {
        super.update(context);
        if (this.ins.activate.changed) {
            const renderer = this.renderer;
            if (renderer) {
                renderer.activeSceneComponent = this;
            }
        }
        return true;
    }
    tick(context) {
        if (this._renderListsNeedUpdate) {
            this.updateRenderLists();
            this._renderListsNeedUpdate = false;
        }
        return false;
    }
    dispose() {
        const renderer = this.renderer;
        if (renderer && renderer.activeSceneComponent === this) {
            renderer.activeSceneComponent = null;
        }
        this.off("hierarchy", this.shouldUpdateRenderLists, this);
        this.off("child", this.shouldUpdateRenderLists, this);
        super.dispose();
    }
    preRender(context) {
        const preRenderList = this._preRenderList;
        for (let i = 0, n = preRenderList.length; i < n; ++i) {
            preRenderList[i].preRender(context);
        }
    }
    postRender(context) {
        const postRenderList = this._postRenderList;
        for (let i = 0, n = postRenderList.length; i < n; ++i) {
            postRenderList[i].postRender(context);
        }
    }
    createObject3D() {
        const scene = new THREE.Scene();
        scene.onBeforeRender = this._onBeforeRender.bind(this);
        scene.onAfterRender = this._onAfterRender.bind(this);
        return scene;
    }
    shouldUpdateRenderLists() {
        this._renderListsNeedUpdate = true;
    }
    updateRenderLists() {
        this._preRenderList = [];
        this._postRenderList = [];
        this.traverseDown(false, true, true, (component) => {
            if (component.preRender) {
                this._preRenderList.push(component);
            }
            if (component.postRender) {
                this._postRenderList.push(component);
            }
            return false;
        });
        this.changed = true;
    }
    _onBeforeRender(renderer, scene, camera) {
        _context.view = renderer["__view"];
        _context.viewport = renderer["__viewport"];
        _context.renderer = renderer;
        _context.scene = scene;
        _context.camera = camera;
        this.preRender(_context);
        _beforeRenderEvent.component = this;
        this.emit(_beforeRenderEvent);
    }
    _onAfterRender(renderer, scene, camera) {
        _context.view = renderer["__view"];
        _context.viewport = renderer["__viewport"];
        _context.renderer = renderer;
        _context.scene = scene;
        _context.camera = camera;
        this.postRender(_context);
        _afterRenderEvent.component = this;
        this.emit(_afterRenderEvent);
    }
}
exports.default = CScene;
CScene.typeName = "CScene";
CScene.isGraphSingleton = true;


/***/ }),

/***/ "../../libs/ff-scene/source/components/CSpotLight.ts":
/*!***********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/components/CSpotLight.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CLight_1 = __webpack_require__(/*! ./CLight */ "../../libs/ff-scene/source/components/CLight.ts");
////////////////////////////////////////////////////////////////////////////////
class CSpotLight extends CLight_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CSpotLight.spotLightIns);
        this.object3D = new THREE.SpotLight();
        this.light.target.matrixAutoUpdate = false;
    }
    get light() {
        return this.object3D;
    }
    update(context) {
        super.update(context);
        const light = this.light;
        const ins = this.ins;
        if (ins.position.changed || ins.target.changed) {
            light.position.fromArray(ins.position.value);
            light.target.position.fromArray(ins.target.value);
            light.updateMatrix();
            light.target.updateMatrix();
        }
        if (ins.distance.changed || ins.decay.changed || ins.angle.changed || ins.penumbra.changed) {
            light.distance = ins.distance.value;
            light.decay = ins.decay.value;
            light.angle = ins.angle.value * THREE.Math.DEG2RAD;
            light.penumbra = ins.penumbra.value;
        }
        return true;
    }
    onAddToParent(parent) {
        super.onAddToParent(parent);
        parent.add(this.light.target);
    }
    onRemoveFromParent(parent) {
        super.onRemoveFromParent(parent);
        parent.remove(this.light.target);
    }
}
exports.default = CSpotLight;
CSpotLight.typeName = "CSpotLight";
CSpotLight.spotLightIns = {
    position: Component_1.types.Vector3("Light.Position"),
    target: Component_1.types.Vector3("Light.Target", [0, -1, 0]),
    distance: Component_1.types.Number("Light.Distance"),
    decay: Component_1.types.Number("Light.Decay", 1),
    angle: Component_1.types.Number("Light.Angle", 45),
    penumbra: Component_1.types.Percent("Light.Penumbra", 0.5),
};


/***/ }),

/***/ "../../libs/ff-scene/source/components/CTransform.ts":
/*!***********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/components/CTransform.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const math_1 = __webpack_require__(/*! @ff/core/math */ "../../libs/ff-core/source/math.ts");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
exports.types = Component_1.types;
const CHierarchy_1 = __webpack_require__(/*! @ff/graph/components/CHierarchy */ "../../libs/ff-graph/source/components/CHierarchy.ts");
////////////////////////////////////////////////////////////////////////////////
const _vec3a = new THREE.Vector3();
const _vec3b = new THREE.Vector3();
const _quat = new THREE.Quaternion();
const _euler = new THREE.Euler();
var ERotationOrder;
(function (ERotationOrder) {
    ERotationOrder[ERotationOrder["XYZ"] = 0] = "XYZ";
    ERotationOrder[ERotationOrder["YZX"] = 1] = "YZX";
    ERotationOrder[ERotationOrder["ZXY"] = 2] = "ZXY";
    ERotationOrder[ERotationOrder["XZY"] = 3] = "XZY";
    ERotationOrder[ERotationOrder["YXZ"] = 4] = "YXZ";
    ERotationOrder[ERotationOrder["ZYX"] = 5] = "ZYX";
})(ERotationOrder = exports.ERotationOrder || (exports.ERotationOrder = {}));
/**
 * Allows arranging components in a hierarchical structure. Each [[TransformComponent]]
 * contains a transformation which affects its children as well as other components which
 * are part of the same entity.
 */
class CTransform extends CHierarchy_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CTransform.transformIns);
        this.outs = this.addOutputs(CTransform.transformOuts);
        this._object3D = this.createObject3D();
        this._object3D.matrixAutoUpdate = false;
    }
    get transform() {
        return this;
    }
    /**
     * Returns the three.js renderable object wrapped in this component.
     */
    get object3D() {
        return this._object3D;
    }
    /**
     * Returns an array of child components of this.
     */
    get children() {
        return this._children || [];
    }
    /**
     * Returns a reference to the local transformation matrix.
     */
    get matrix() {
        return this._object3D.matrix;
    }
    update(context) {
        const object3D = this._object3D;
        const { position, rotation, order, scale } = this.ins;
        const { matrix } = this.outs;
        object3D.position.fromArray(position.value);
        _vec3a.fromArray(rotation.value).multiplyScalar(math_1.default.DEG2RAD);
        const orderName = order.getOptionText();
        object3D.rotation.setFromVector3(_vec3a, orderName);
        object3D.scale.fromArray(scale.value);
        object3D.updateMatrix();
        object3D.matrix.toArray(matrix.value);
        matrix.set();
        return true;
    }
    dispose() {
        if (this._object3D) {
            // detach all children
            this._object3D.children.slice().forEach(child => this._object3D.remove(child));
            // detach from parent
            if (this._object3D.parent) {
                this._object3D.parent.remove(this._object3D);
            }
        }
        super.dispose();
    }
    setPropertiesFromMatrix(matrix) {
        const silent = !matrix;
        matrix = matrix || this._object3D.matrix;
        const { position, rotation, order, scale } = this.ins;
        matrix.decompose(_vec3a, _quat, _vec3b);
        _vec3a.toArray(position.value);
        const orderName = order.getOptionText();
        _euler.setFromQuaternion(_quat, orderName);
        _euler.toVector3(_vec3a);
        _vec3a.multiplyScalar(math_1.default.RAD2DEG).toArray(rotation.value);
        _vec3b.toArray(scale.value);
        position.set(silent);
        rotation.set(silent);
        scale.set(silent);
    }
    /**
     * Adds the given transform component as a children to this.
     * @param component
     */
    addChild(component) {
        super.addChild(component);
        this._object3D.add(component._object3D);
    }
    /**
     * Removes the given transform component from the list of children of this.
     * @param component
     */
    removeChild(component) {
        this._object3D.remove(component._object3D);
        super.removeChild(component);
    }
    createObject3D() {
        return new THREE.Object3D();
    }
}
exports.default = CTransform;
CTransform.typeName = "CTransform";
CTransform.transformIns = {
    position: Component_1.types.Vector3("Transform.Position"),
    rotation: Component_1.types.Vector3("Transform.Rotation"),
    order: Component_1.types.Enum("Transform.Order", ERotationOrder),
    scale: Component_1.types.Scale3("Transform.Scale")
};
CTransform.transformOuts = {
    matrix: Component_1.types.Matrix4("Transform.Matrix")
};


/***/ }),

/***/ "../../libs/ff-scene/source/ui/SystemView.ts":
/*!***************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-scene/source/ui/SystemView.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const System_1 = __webpack_require__(/*! @ff/graph/System */ "../../libs/ff-graph/source/System.ts");
exports.System = System_1.default;
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
exports.customElement = CustomElement_1.customElement;
exports.property = CustomElement_1.property;
exports.html = CustomElement_1.html;
exports.TemplateResult = CustomElement_1.TemplateResult;
class SystemView extends CustomElement_1.default {
    constructor(system) {
        super();
        this.system = system;
    }
}
__decorate([
    CustomElement_1.property({ attribute: false })
], SystemView.prototype, "system", void 0);
exports.default = SystemView;


/***/ }),

/***/ "../../libs/ff-three/source/Background.ts":
/*!************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/Background.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
////////////////////////////////////////////////////////////////////////////////
var EBackgroundStyle;
(function (EBackgroundStyle) {
    EBackgroundStyle[EBackgroundStyle["Solid"] = 0] = "Solid";
    EBackgroundStyle[EBackgroundStyle["LinearGradient"] = 1] = "LinearGradient";
    EBackgroundStyle[EBackgroundStyle["RadialGradient"] = 2] = "RadialGradient";
})(EBackgroundStyle = exports.EBackgroundStyle || (exports.EBackgroundStyle = {}));
class Background extends THREE.Mesh {
    constructor() {
        super(new BackgroundGeometry(), new BackgroundMaterial());
        this.frustumCulled = false;
        this.renderOrder = -Infinity;
        this.matrixAutoUpdate = false;
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
    updateMatrixWorld(force) {
    }
}
exports.default = Background;
class BackgroundGeometry extends THREE.BufferGeometry {
    constructor() {
        super();
        const vertices = new Float32Array([
            -1, -1, 0, 0, 0,
            1, -1, 0, 1, 0,
            1, 1, 0, 1, 1,
            -1, 1, 0, 0, 1
        ]);
        const buffer = new THREE.InterleavedBuffer(vertices, 5);
        this.setIndex([0, 1, 2, 0, 2, 3]);
        this.addAttribute('position', new THREE.InterleavedBufferAttribute(buffer, 3, 0, false));
        this.addAttribute('uv', new THREE.InterleavedBufferAttribute(buffer, 2, 3, false));
    }
}
exports.BackgroundGeometry = BackgroundGeometry;
class BackgroundMaterial extends THREE.RawShaderMaterial {
    constructor() {
        super(...arguments);
        this.depthTest = false;
        this.depthWrite = false;
        this.transparent = false;
        this.uniforms = {
            style: { value: EBackgroundStyle.LinearGradient },
            color0: { value: new THREE.Vector3(0.15, 0.2, 0.25) },
            color1: { value: new THREE.Vector3(0, 0, 0) },
            noise: { value: 0.02 }
        };
        this.vertexShader = [
            "precision highp float;",
            "attribute vec3 position;",
            "attribute vec2 uv;",
            "varying vec2 ndc;",
            "void main() {",
            "  ndc = position.xy;",
            "  gl_Position = vec4(position, 1.0);",
            "}",
        ].join("\n");
        // NOTE: Source of random function:
        // http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/
        this.fragmentShader = [
            "precision highp float;",
            "uniform vec3 color0;",
            "uniform vec3 color1;",
            "uniform float noise;",
            "uniform int style;",
            "varying vec2 ndc;",
            "float rand(vec2 co) {",
            "float dt = dot(co.xy ,vec2(12.9898, 78.233));",
            "float sn = mod(dt, 3.14);",
            "return fract(sin(sn) * 43758.5453);",
            "}",
            "void main() {",
            "  float f = style == 0 ? 0.0 : (style == 1 ? ndc.y * 0.5 + 0.5 : length(ndc) * 0.707);",
            "  gl_FragColor = vec4(mix(color0, color1, f) + noise * rand(ndc), 1.0);",
            "}"
        ].join("\n");
    }
    set style(style) {
        this.uniforms.style.value = style;
    }
    get style() {
        return this.uniforms.style.value;
    }
    set color0(color) {
        if (color instanceof THREE.Color) {
            const value = this.uniforms.color0.value;
            value.x = color.r;
            value.y = color.g;
            value.z = color.b;
        }
        else {
            this.uniforms.color0.value.copy(color);
        }
    }
    get color0() {
        return this.uniforms.color0.value;
    }
    set color1(color) {
        if (color instanceof THREE.Color) {
            const value = this.uniforms.color1.value;
            value.x = color.r;
            value.y = color.g;
            value.z = color.b;
        }
        else {
            this.uniforms.color1.value.copy(color);
        }
    }
    get color1() {
        return this.uniforms.color1.value;
    }
    set noise(noise) {
        this.uniforms.noise.value = noise;
    }
    get noise() {
        return this.uniforms.noise.value;
    }
}
exports.BackgroundMaterial = BackgroundMaterial;


/***/ }),

/***/ "../../libs/ff-three/source/Bracket.ts":
/*!*********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/Bracket.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const helpers_1 = __webpack_require__(/*! ./helpers */ "../../libs/ff-three/source/helpers.ts");
////////////////////////////////////////////////////////////////////////////////
const _vec3 = new THREE.Vector3();
const _mat4 = new THREE.Matrix4();
/**
 * Wireframe selection bracket.
 */
class Bracket extends THREE.LineSegments {
    constructor(target, props) {
        props = Object.assign({}, Bracket.defaultProps, props);
        const box = new THREE.Box3();
        box.makeEmpty();
        helpers_1.computeLocalBoundingBox(target, box);
        const length = props.length;
        const min = [box.min.x, box.min.y, box.min.z];
        const max = [box.max.x, box.max.y, box.max.z];
        const size = [(max[0] - min[0]) * length, (max[1] - min[1]) * length, (max[2] - min[2]) * length];
        let vertices;
        if (isFinite(size[0]) && isFinite(size[1]) && isFinite(size[2])) {
            vertices = [
                min[0], min[1], min[2], min[0] + size[0], min[1], min[2],
                min[0], min[1], min[2], min[0], min[1] + size[1], min[2],
                min[0], min[1], min[2], min[0], min[1], min[2] + size[2],
                max[0], min[1], min[2], max[0] - size[0], min[1], min[2],
                max[0], min[1], min[2], max[0], min[1] + size[1], min[2],
                max[0], min[1], min[2], max[0], min[1], min[2] + size[2],
                min[0], max[1], min[2], min[0] + size[0], max[1], min[2],
                min[0], max[1], min[2], min[0], max[1] - size[1], min[2],
                min[0], max[1], min[2], min[0], max[1], min[2] + size[2],
                min[0], min[1], max[2], min[0] + size[0], min[1], max[2],
                min[0], min[1], max[2], min[0], min[1] + size[1], max[2],
                min[0], min[1], max[2], min[0], min[1], max[2] - size[2],
                min[0], max[1], max[2], min[0] + size[0], max[1], max[2],
                min[0], max[1], max[2], min[0], max[1] - size[1], max[2],
                min[0], max[1], max[2], min[0], max[1], max[2] - size[2],
                max[0], min[1], max[2], max[0] - size[0], min[1], max[2],
                max[0], min[1], max[2], max[0], min[1] + size[1], max[2],
                max[0], min[1], max[2], max[0], min[1], max[2] - size[2],
                max[0], max[1], min[2], max[0] - size[0], max[1], min[2],
                max[0], max[1], min[2], max[0], max[1] - size[1], min[2],
                max[0], max[1], min[2], max[0], max[1], min[2] + size[2],
                max[0], max[1], max[2], max[0] - size[0], max[1], max[2],
                max[0], max[1], max[2], max[0], max[1] - size[1], max[2],
                max[0], max[1], max[2], max[0], max[1], max[2] - size[2],
            ];
        }
        else {
            vertices = [
                -1, 0, 0, 1, 0, 0,
                0, -1, 0, 0, 1, 0,
                0, 0, -1, 0, 0, 1,
            ];
        }
        const geometry = new THREE.BufferGeometry();
        geometry.addAttribute("position", new THREE.Float32BufferAttribute(vertices, 3));
        const material = new THREE.LineBasicMaterial({
            color: props.color,
            depthTest: false
        });
        super(geometry, material);
        this.renderOrder = 1;
        this.onBeforeRender = () => {
            target.updateMatrixWorld(false);
            this.matrixWorld.copy(target.matrixWorld);
        };
    }
    dispose() {
        if (this.parent) {
            this.parent.remove(this);
        }
        this.geometry.dispose();
    }
    static expandBoundingBox(object, root, box) {
        const geometry = object.geometry;
        if (geometry !== undefined) {
            let parent = object;
            _mat4.identity();
            while (parent && parent !== root) {
                _mat4.premultiply(parent.matrix);
                parent = parent.parent;
            }
            if (geometry.isGeometry) {
                const vertices = geometry.vertices;
                for (let i = 0, n = vertices.length; i < n; ++i) {
                    _vec3.copy(vertices[i]).applyMatrix4(_mat4);
                    box.expandByPoint(_vec3);
                }
            }
            else if (geometry.isBufferGeometry) {
                const attribute = geometry.attributes.position;
                if (attribute !== undefined) {
                    for (let i = 0, n = attribute.count; i < n; ++i) {
                        _vec3.fromBufferAttribute(attribute, i).applyMatrix4(_mat4);
                        box.expandByPoint(_vec3);
                    }
                }
            }
        }
        const children = object.children;
        for (let i = 0, n = children.length; i < n; ++i) {
            Bracket.expandBoundingBox(children[i], root, box);
        }
    }
}
exports.default = Bracket;
Bracket.defaultProps = {
    color: new THREE.Color("#ffd633"),
    length: 0.25
};


/***/ }),

/***/ "../../libs/ff-three/source/CameraController.ts":
/*!******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/CameraController.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const math_1 = __webpack_require__(/*! @ff/core/math */ "../../libs/ff-core/source/math.ts");
const math_2 = __webpack_require__(/*! ./math */ "../../libs/ff-three/source/math.ts");
////////////////////////////////////////////////////////////////////////////////
const _mat4 = new THREE.Matrix4();
const _box3 = new THREE.Box3();
const _vec3a = new THREE.Vector3();
const _vec3b = new THREE.Vector3();
var EControllerMode;
(function (EControllerMode) {
    EControllerMode[EControllerMode["Orbit"] = 0] = "Orbit";
    EControllerMode[EControllerMode["FirstPerson"] = 1] = "FirstPerson";
})(EControllerMode || (EControllerMode = {}));
var EManipMode;
(function (EManipMode) {
    EManipMode[EManipMode["Off"] = 0] = "Off";
    EManipMode[EManipMode["Pan"] = 1] = "Pan";
    EManipMode[EManipMode["Orbit"] = 2] = "Orbit";
    EManipMode[EManipMode["Dolly"] = 3] = "Dolly";
    EManipMode[EManipMode["Zoom"] = 4] = "Zoom";
    EManipMode[EManipMode["PanDolly"] = 5] = "PanDolly";
    EManipMode[EManipMode["Roll"] = 6] = "Roll";
})(EManipMode || (EManipMode = {}));
var EManipPhase;
(function (EManipPhase) {
    EManipPhase[EManipPhase["Off"] = 0] = "Off";
    EManipPhase[EManipPhase["Active"] = 1] = "Active";
    EManipPhase[EManipPhase["Release"] = 2] = "Release";
})(EManipPhase || (EManipPhase = {}));
class CameraController {
    constructor(camera) {
        this.orbit = new THREE.Vector3(0, 0, 0);
        this.offset = new THREE.Vector3(0, 0, 50);
        this.minOrbit = new THREE.Vector3(-90, -Infinity, -Infinity);
        this.maxOrbit = new THREE.Vector3(90, Infinity, Infinity);
        this.minOffset = new THREE.Vector3(-Infinity, -Infinity, 0.1);
        this.maxOffset = new THREE.Vector3(Infinity, Infinity, 1000);
        this.orientationEnabled = true;
        this.offsetEnabled = true;
        this.mode = EManipMode.Off;
        this.phase = EManipPhase.Off;
        this.prevPinchDist = 0;
        this.deltaX = 0;
        this.deltaY = 0;
        this.deltaPinch = 0;
        this.deltaWheel = 0;
        this.viewportWidth = 100;
        this.viewportHeight = 100;
        this.camera = camera;
    }
    onPointer(event) {
        if (event.isPrimary) {
            if (event.type === "pointer-down") {
                this.phase = EManipPhase.Active;
            }
            else if (event.type === "pointer-up") {
                this.phase = EManipPhase.Release;
                return true;
            }
        }
        if (event.type === "pointer-down") {
            this.mode = this.getModeFromEvent(event);
        }
        const keyMultiplier = 1;
        this.deltaX += event.movementX * keyMultiplier;
        this.deltaY += event.movementY * keyMultiplier;
        // calculate pinch
        if (event.pointerCount === 2) {
            const positions = event.activePositions;
            const dx = positions[1].clientX - positions[0].clientX;
            const dy = positions[1].clientY - positions[0].clientY;
            const pinchDist = Math.sqrt(dx * dx + dy * dy);
            const prevPinchDist = this.prevPinchDist || pinchDist;
            this.deltaPinch *= prevPinchDist > 0 ? (pinchDist / prevPinchDist) : 1;
            this.prevPinchDist = pinchDist;
        }
        else {
            this.deltaPinch = 1;
            this.prevPinchDist = 0;
        }
        return true;
    }
    onTrigger(event) {
        if (event.type === "wheel") {
            this.deltaWheel += math_1.default.limit(event.wheel, -1, 1);
            return true;
        }
        return false;
    }
    setViewportSize(width, height) {
        this.viewportWidth = width;
        this.viewportHeight = height;
    }
    updateController(object, adaptLimits) {
        const camera = this.camera;
        object = object || camera;
        const orbit = this.orbit;
        const offset = this.offset;
        math_2.default.decomposeOrbitMatrix(object.matrix, orbit, offset);
        this.orbit.multiplyScalar(math_2.default.RAD2DEG);
        if (adaptLimits) {
            this.minOffset.min(offset);
            this.maxOffset.max(offset);
        }
    }
    /**
     * Adjusts the camera such that the given bounding box is entirely visible.
     * This method can only be called if an internal camera has been assigned.
     * @param box Bounding box
     */
    zoomExtents(box) {
        const camera = this.camera;
        const offset = this.offset;
        if (!camera) {
            console.warn("CameraController.zoomExtents - camera not set");
            return;
        }
        // rotate box to camera space
        _vec3a.copy(this.orbit).multiplyScalar(math_1.default.DEG2RAD);
        _vec3b.setScalar(0);
        math_2.default.composeOrbitMatrix(_vec3a, _vec3b, _mat4);
        _box3.copy(box).applyMatrix4(_mat4.transpose());
        _box3.getSize(_vec3a);
        _box3.getCenter(_vec3b);
        offset.x = _vec3b.x;
        offset.y = _vec3b.y;
        const size = Math.max(_vec3a.x / camera.aspect, _vec3a.y);
        if (camera.isOrthographicCamera) {
            offset.z = size * 1.1; // add some padding
        }
        else {
            const fovFactor = 1 / (2 * Math.tan(camera.fov * math_1.default.DEG2RAD * 0.5));
            offset.z = (_vec3b.z + size * fovFactor + _vec3a.z * 0.25 /* was 0.5 */);
        }
        this.maxOffset.z = Math.max(this.maxOffset.z, offset.z + _vec3a.z * 4);
    }
    /**
     * Updates the matrix of the given camera. If the camera's projection is orthographic,
     * updates the camera's size parameter as well.
     * @param object Updates this object if given, otherwise updates the internal camera.
     * @param force If true always updates, even if there haven't been any changes since the last update.
     */
    updateCamera(object, force) {
        const camera = this.camera;
        object = object || camera;
        if (!this.update() && !force) {
            return false;
        }
        _vec3a.copy(this.orbit).multiplyScalar(math_1.default.DEG2RAD);
        _vec3b.copy(this.offset);
        if (camera.isOrthographicCamera) {
            _vec3b.z = this.maxOffset.z; // fixed distance = maxOffset.z
            camera.size = this.offset.z; // use size to visualize distance
            camera.far = 2 * this.maxOffset.z; // adjust far clipping
            camera.updateProjectionMatrix();
        }
        math_2.default.composeOrbitMatrix(_vec3a, _vec3b, object.matrix);
        object.matrixWorldNeedsUpdate = true;
        return true;
    }
    /**
     * Updates the manipulator.
     * @returns true if the state has changed during the update.
     */
    update() {
        if (this.phase === EManipPhase.Off && this.deltaWheel === 0) {
            return false;
        }
        if (this.deltaWheel !== 0) {
            this.updatePose(0, 0, this.deltaWheel * 0.07 + 1, 0, 0, 0);
            this.deltaWheel = 0;
            return true;
        }
        if (this.phase === EManipPhase.Active) {
            if (this.deltaX === 0 && this.deltaY === 0 && this.deltaPinch === 1) {
                return false;
            }
            this.updateByMode();
            this.deltaX = 0;
            this.deltaY = 0;
            this.deltaPinch = 1;
            return true;
        }
        else if (this.phase === EManipPhase.Release) {
            this.deltaX *= 0.85;
            this.deltaY *= 0.85;
            this.deltaPinch = 1;
            this.updateByMode();
            const delta = Math.abs(this.deltaX) + Math.abs(this.deltaY);
            if (delta < 0.1) {
                this.mode = EManipMode.Off;
                this.phase = EManipPhase.Off;
            }
            return true;
        }
        return false;
    }
    updateByMode() {
        switch (this.mode) {
            case EManipMode.Orbit:
                this.updatePose(0, 0, 1, this.deltaY, this.deltaX, 0);
                break;
            case EManipMode.Pan:
                this.updatePose(this.deltaX, this.deltaY, 1, 0, 0, 0);
                break;
            case EManipMode.Roll:
                this.updatePose(0, 0, 1, 0, 0, this.deltaX);
                break;
            case EManipMode.Dolly:
                this.updatePose(0, 0, this.deltaY * 0.0075 + 1, 0, 0, 0);
                break;
            case EManipMode.PanDolly:
                const pinchScale = (this.deltaPinch - 1) * 0.42 + 1;
                this.updatePose(this.deltaX * 0.75, this.deltaY * 0.75, 1 / pinchScale, 0, 0, 0);
                break;
        }
    }
    updatePose(dX, dY, dScale, dPitch, dHead, dRoll) {
        const { orbit, minOrbit, maxOrbit, offset, minOffset, maxOffset } = this;
        let inverse = -1;
        if (this.orientationEnabled) {
            orbit.x += inverse * dPitch * 220 / this.viewportHeight;
            orbit.y += inverse * dHead * 220 / this.viewportHeight;
            orbit.z += inverse * dRoll * 220 / this.viewportHeight;
            // check limits
            orbit.x = math_1.default.limit(orbit.x, minOrbit.x, maxOrbit.x);
            orbit.y = math_1.default.limit(orbit.y, minOrbit.y, maxOrbit.y);
            orbit.z = math_1.default.limit(orbit.z, minOrbit.z, maxOrbit.z);
        }
        if (this.offsetEnabled) {
            const factor = offset.z = dScale * offset.z;
            offset.x += dX * factor * inverse / this.viewportHeight;
            offset.y -= dY * factor * inverse / this.viewportHeight;
            // check limits
            offset.x = math_1.default.limit(offset.x, minOffset.x, maxOffset.x);
            offset.y = math_1.default.limit(offset.y, minOffset.y, maxOffset.y);
            offset.z = math_1.default.limit(offset.z, minOffset.z, maxOffset.z);
        }
    }
    getModeFromEvent(event) {
        if (event.source === "mouse") {
            const button = event.originalEvent.button;
            // left button
            if (button === 0) {
                if (event.ctrlKey) {
                    return EManipMode.Pan;
                }
                if (event.altKey) {
                    return EManipMode.Dolly;
                }
                return EManipMode.Orbit;
            }
            // right button
            if (button === 2) {
                if (event.altKey) {
                    return EManipMode.Roll;
                }
                else {
                    return EManipMode.Pan;
                }
            }
            // middle button
            if (button === 1) {
                return EManipMode.Dolly;
            }
        }
        else if (event.source === "touch") {
            const count = event.pointerCount;
            if (count === 1) {
                return EManipMode.Orbit;
            }
            if (count === 2) {
                return EManipMode.PanDolly;
            }
            return EManipMode.Pan;
        }
    }
}
exports.default = CameraController;


/***/ }),

/***/ "../../libs/ff-three/source/Floor.ts":
/*!*******************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/Floor.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const fragmentShader = __webpack_require__(/*! ./shaders/floorPhongShader.frag */ "../../libs/ff-three/source/shaders/floorPhongShader.frag").default;
const vertexShader = __webpack_require__(/*! ./shaders/floorPhongShader.vert */ "../../libs/ff-three/source/shaders/floorPhongShader.vert").default;
////////////////////////////////////////////////////////////////////////////////
class Floor extends THREE.Mesh {
    constructor() {
        super(new THREE.PlaneBufferGeometry(2, 2, 1, 1), new FloorMaterial());
        this.geometry.rotateX(-90 * THREE.Math.DEG2RAD);
        this.receiveShadow = true;
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
exports.default = Floor;
class FloorMaterial extends THREE.MeshPhongMaterial {
    constructor(params) {
        super(params);
        this.defines = {};
        this.type = "FloorMaterial";
        this.isMeshPhongMaterial = true;
        this.isFloorMaterial = true;
        this.defines = {};
        this.uniforms = THREE.UniformsUtils.merge([
            THREE.ShaderLib.phong.uniforms
        ]);
        this.vertexShader = vertexShader;
        this.fragmentShader = fragmentShader;
        this.transparent = true;
        this.shininess = 0;
    }
}
exports.FloorMaterial = FloorMaterial;


/***/ }),

/***/ "../../libs/ff-three/source/GPUPicker.ts":
/*!***********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/GPUPicker.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const IndexShader_1 = __webpack_require__(/*! ./shaders/IndexShader */ "../../libs/ff-three/source/shaders/IndexShader.ts");
const PositionShader_1 = __webpack_require__(/*! ./shaders/PositionShader */ "../../libs/ff-three/source/shaders/PositionShader.ts");
const NormalShader_1 = __webpack_require__(/*! ./shaders/NormalShader */ "../../libs/ff-three/source/shaders/NormalShader.ts");
////////////////////////////////////////////////////////////////////////////////
const _vec3 = new THREE.Vector3();
const _range = 10000;
const _pickPositionRange = new THREE.Box3(new THREE.Vector3(-_range, -_range, -_range), new THREE.Vector3(_range, _range, _range));
class GPUPicker {
    constructor(renderer) {
        this.renderer = renderer;
        this.pickTextures = [];
        for (let i = 0; i < 3; ++i) {
            this.pickTextures[i] = new THREE.WebGLRenderTarget(1, 1, { stencilBuffer: false });
        }
        this.pickBuffer = new Uint8Array(4);
        this.indexShader = new IndexShader_1.default();
        this.positionShader = new PositionShader_1.default();
        this.normalShader = new NormalShader_1.default();
    }
    static add(object, recursive) {
        const hookObject3D = object => {
            if (object.material) {
                object.onBeforeRender = function (r, s, c, g, material) {
                    if (material.isIndexShader) {
                        //console.log("setIndex #%s for %s", object.id, object);
                        material.setIndex(object.id);
                    }
                };
            }
        };
        if (recursive) {
            object.traverse(object => hookObject3D(object));
        }
        else {
            hookObject3D(object);
        }
    }
    static remove(object, recursive) {
        const unhookObject3D = object => {
            if (object.material) {
                object.onBeforeRender = null;
            }
        };
        if (recursive) {
            object.traverse(object => unhookObject3D(object));
        }
        else {
            unhookObject3D(object);
        }
    }
    pickObject(scene, camera, event) {
        const index = this.pickIndex(scene, camera, event);
        if (index > 0) {
            return scene.getObjectById(index);
        }
        return undefined;
    }
    /**
     * Picks the index of the object at the position given by the event.
     * @param scene The scene containing the objects available for picking.
     * @param camera The active camera.
     * @param event A UI event providing the screen position at which to pick.
     */
    pickIndex(scene, camera, event) {
        const viewport = event.viewport;
        camera = viewport.updateCamera(camera);
        const overrideMaterial = scene.overrideMaterial;
        scene.overrideMaterial = this.indexShader;
        const renderer = this.renderer;
        const pickTexture = this.pickTextures[0];
        const color = renderer.getClearColor().clone();
        viewport.applyPickViewport(pickTexture, event);
        renderer.setRenderTarget(pickTexture);
        renderer.setClearColor(0);
        renderer.clear();
        renderer.render(scene, camera);
        renderer.setRenderTarget(null);
        renderer.setClearColor(color);
        scene.overrideMaterial = overrideMaterial;
        const buffer = this.pickBuffer;
        renderer.readRenderTargetPixels(pickTexture, 0, 0, 1, 1, buffer);
        return buffer[0] + buffer[1] * 256 + buffer[2] * 65536;
    }
    /**
     * Picks the local position on the surface of the object at the screen position of the given UI event.
     * @param scene The scene containing the objects available for picking.
     * @param camera The active camera.
     * @param event A UI event providing the screen position at which to pick.
     * @param range Optional range for the possible position values to be picked. Can be omitted. If given, should
     * be set to the local bounding box of the object whose position is picked.
     * @param result A vector containing the picked position in object-local coordinates.
     */
    pickPosition(scene, camera, event, range, result) {
        range = range || _pickPositionRange;
        result = result || new THREE.Vector3();
        const viewport = event.viewport;
        camera = viewport.updateCamera(camera);
        const overrideMaterial = scene.overrideMaterial;
        const shader = scene.overrideMaterial = this.positionShader;
        const renderer = this.renderer;
        const pickTextures = this.pickTextures;
        const color = renderer.getClearColor().clone();
        renderer.setClearColor(0);
        for (let i = 0; i < 3; ++i) {
            shader.uniforms.index.value = i;
            shader.uniforms.range.value[0] = range.min.getComponent(i);
            shader.uniforms.range.value[1] = range.max.getComponent(i);
            viewport.applyPickViewport(pickTextures[i], event);
            renderer.setRenderTarget(pickTextures[i]);
            renderer.clear();
            renderer.render(scene, camera);
        }
        renderer.setRenderTarget(null);
        renderer.setClearColor(color);
        scene.overrideMaterial = overrideMaterial;
        const buffer = this.pickBuffer;
        for (let i = 0; i < 3; ++i) {
            renderer.readRenderTargetPixels(pickTextures[i], 0, 0, 1, 1, buffer);
            result.setComponent(i, buffer[3] * 2.337437050015319e-10 /* / 255 / 16777216 */
                + buffer[2] * 5.983838848039216e-8 /* / 255 / 65536 */
                + buffer[1] * 1.531862745098039e-5 /* / 255 / 256 */
                + buffer[0] * 0.003921568627451 /* / 255 */);
        }
        range.getSize(_vec3);
        return result.multiply(_vec3).add(range.min);
    }
    /**
     * Picks the surface normal of the object at the screen position of the given UI event.
     * @param scene The scene containing the objects available for picking.
     * @param camera The active camera.
     * @param event A UI event providing the screen position at which to pick.
     * @param result A vector containing the picked normal in object-local coordinates.
     */
    pickNormal(scene, camera, event, result) {
        result = result || new THREE.Vector3();
        const viewport = event.viewport;
        camera = viewport.updateCamera(camera);
        const overrideMaterial = scene.overrideMaterial;
        scene.overrideMaterial = this.normalShader;
        const renderer = this.renderer;
        const pickTexture = this.pickTextures[0];
        const color = renderer.getClearColor().clone();
        viewport.applyPickViewport(pickTexture, event);
        renderer.setRenderTarget(pickTexture);
        renderer.setClearColor(0);
        renderer.clear();
        renderer.render(scene, camera);
        renderer.setRenderTarget(null);
        renderer.setClearColor(color);
        scene.overrideMaterial = overrideMaterial;
        const buffer = this.pickBuffer;
        renderer.readRenderTargetPixels(pickTexture, 0, 0, 1, 1, buffer);
        return result.set(buffer[0] / 255 * 2 - 1, buffer[1] / 255 * 2 - 1, buffer[2] / 255 * 2 - 1).normalize();
    }
}
exports.default = GPUPicker;


/***/ }),

/***/ "../../libs/ff-three/source/Grid.ts":
/*!******************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/Grid.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
class Grid extends THREE.LineSegments {
    constructor(props) {
        const geometry = Grid.generate(props);
        const material = new THREE.LineBasicMaterial({
            vertexColors: THREE.VertexColors,
        });
        super(geometry, material);
    }
    set opacity(value) {
        this.material["opacity"] = value;
        this.material["transparent"] = value < 1;
    }
    update(props) {
        if (this.geometry) {
            this.geometry.dispose();
        }
        this.geometry = Grid.generate(props);
    }
    static generate(props) {
        const mainColor = new THREE.Color(props.mainColor);
        const subColor = new THREE.Color(props.subColor);
        const divisions = props.mainDivisions * props.subDivisions;
        const step = props.size / divisions;
        const halfSize = props.size * 0.5;
        const vertices = [];
        const colors = [];
        for (let i = 0, j = 0, k = -halfSize; i <= divisions; ++i, k += step) {
            vertices.push(-halfSize, 0, k, halfSize, 0, k);
            vertices.push(k, 0, -halfSize, k, 0, halfSize);
            const color = i % props.subDivisions === 0 ? mainColor : subColor;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
        }
        const geometry = new THREE.BufferGeometry();
        geometry.addAttribute("position", new THREE.Float32BufferAttribute(vertices, 3));
        geometry.addAttribute("color", new THREE.Float32BufferAttribute(colors, 3));
        return geometry;
    }
}
exports.default = Grid;


/***/ }),

/***/ "../../libs/ff-three/source/HTMLSprite.ts":
/*!************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/HTMLSprite.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
exports.html = CustomElement_1.html;
const _vec3a = new THREE.Vector3();
const _vec3b = new THREE.Vector3();
const _vec3c = new THREE.Vector3();
const _vec3d = new THREE.Vector3();
const _vec2a = new THREE.Vector2();
const _vec2b = new THREE.Vector2();
var EQuadrant;
(function (EQuadrant) {
    EQuadrant[EQuadrant["TopRight"] = 0] = "TopRight";
    EQuadrant[EQuadrant["TopLeft"] = 1] = "TopLeft";
    EQuadrant[EQuadrant["BottomLeft"] = 2] = "BottomLeft";
    EQuadrant[EQuadrant["BottomRight"] = 3] = "BottomRight";
})(EQuadrant = exports.EQuadrant || (exports.EQuadrant = {}));
/**
 * A Three.js Object representing a 3D renderable part and a 2D (HTML) part.
 * HTML sprites should have a [[HTMLSpriteGroup]] as their parent.
 */
class HTMLSprite extends THREE.Object3D {
    constructor() {
        super();
        this.isHTMLSprite = true;
        this.viewAngle = 0;
        this.orientationAngle = 0;
        this.orientationQuadrant = EQuadrant.TopLeft;
        this._elements = new Map();
        this._visible = true;
        this.frustumCulled = false;
    }
    get visible() {
        return this._visible;
    }
    set visible(visible) {
        if (visible !== this._visible && this._elements) {
            this._visible = visible;
            this._elements.forEach(element => {
                if (element) {
                    element.setVisible(visible);
                }
            });
        }
    }
    dispose() {
        this._elements.forEach((element, container) => {
            if (element) {
                container.removeChild(element);
            }
        });
        this._elements.clear();
    }
    disposeHTMLElement(container) {
        const element = this._elements.get(container);
        if (element) {
            this._elements.delete(container);
            container.removeChild(element);
        }
    }
    /**
     * Called when the 3D parts of the sprite should be updated because
     * the underlying data has been changed.
     */
    update() {
        this._elements.forEach(element => {
            if (element) {
                this.updateHTMLElement(element);
            }
        });
    }
    /**
     * Called when the model-view of the sprite has changed.
     * This updates the position and orientation of the HTML element.
     * @param element The sprite HTML element to be updated.
     * @param container The container holding the sprite element.
     * @param camera The current scene camera.
     * @param anchor The 3D object to which the HTML sprite element is attached.
     * @param offset An offset to be added to the anchor 3D object.
     */
    renderHTMLElement(element, container, camera, anchor, offset) {
        anchor = anchor || this;
        _vec3a.set(0, 0, 0);
        _vec3a.applyMatrix4(anchor.modelViewMatrix);
        offset ? _vec3b.copy(offset) : _vec3b.set(0, 1, 0);
        _vec3b.applyMatrix4(anchor.modelViewMatrix);
        _vec3c.copy(_vec3b).sub(_vec3a).normalize();
        _vec3d.set(0, 0, 1);
        this.viewAngle = _vec3c.angleTo(_vec3d);
        _vec3a.applyMatrix4(camera.projectionMatrix);
        _vec3b.applyMatrix4(camera.projectionMatrix);
        _vec2b.set(_vec3b.x, _vec3b.y);
        _vec2a.set(_vec3a.x, _vec3a.y);
        _vec2b.sub(_vec2a);
        const x = (_vec3b.x + 1) * 0.5 * container.clientWidth;
        const y = (1 - _vec3b.y) * 0.5 * container.clientHeight;
        element.setPosition(x, y);
        const angle = this.orientationAngle = _vec2b.angle();
        this.orientationQuadrant = Math.floor(2 * angle / Math.PI);
    }
    getHTMLElement(container) {
        let element = this._elements.get(container);
        if (!element) {
            element = this.createHTMLElement();
            if (element) {
                element.setVisible(this._visible);
                container.appendChild(element);
                this._elements.set(container, element);
            }
        }
        return element;
    }
    /**
     * Called when the sprite becomes visible in a viewport.
     * Override to return a HTML element to visualize the 2D part of the sprite in the viewport.
     * The default implementation returns null, i.e. no HTML elements are created for this sprite.
     */
    createHTMLElement() {
        return null;
    }
    /**
     * Called when the HTML parts of the sprite should be updated because
     * the underlying data has been changed. This is called once for each viewport
     * the sprite is represented in with a HTML element.
     * Method is not called if the sprite has no HTML element.
     * @param element The HTML element that should be updated.
     */
    updateHTMLElement(element) {
        element.requestUpdate();
    }
}
exports.default = HTMLSprite;
////////////////////////////////////////////////////////////////////////////////
let SpriteElement = class SpriteElement extends CustomElement_1.default {
    setVisible(visible) {
        this.style.display = visible ? "block" : "none";
    }
    setOpacity(opacity) {
        this.style.opacity = opacity.toString();
        this.style.visibility = opacity > 0 ? "visible" : "hidden";
    }
    setPosition(x, y) {
        this.style.left = x.toString() + "px";
        this.style.top = y.toString() + "px";
    }
};
SpriteElement = __decorate([
    CustomElement_1.customElement("ff-sprite-element")
], SpriteElement);
exports.SpriteElement = SpriteElement;


/***/ }),

/***/ "../../libs/ff-three/source/HTMLSpriteGroup.ts":
/*!*****************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/HTMLSpriteGroup.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const HTMLSprite_1 = __webpack_require__(/*! ./HTMLSprite */ "../../libs/ff-three/source/HTMLSprite.ts");
exports.HTMLSprite = HTMLSprite_1.default;
/**
 * THREE 3D object, grouping a number of HTML sprites.
 */
class HTMLSpriteGroup extends THREE.Object3D {
    constructor() {
        super(...arguments);
        this.isHTMLSpriteGroup = true;
        this._visible = true;
    }
    get visible() {
        return this._visible;
    }
    set visible(visible) {
        if (visible !== this._visible) {
            this._visible = visible;
            const children = this.children;
            for (let i = 0, n = children.length; i < n; ++i) {
                children[i].visible = visible;
            }
        }
    }
    /**
     * Disposes of the group including all sprite objects and HTML elements.
     */
    dispose() {
        const children = this.children;
        for (let i = 0, n = children.length; i < n; ++i) {
            children[i].dispose();
        }
    }
    /**
     * Must be called if the container element is removed. Disposes of all sprite HTML elements
     * attached to the container.
     * @param container The HTML container element to be removed.
     */
    disposeHTMLElements(container) {
        const children = this.children;
        for (let i = 0, n = children.length; i < n; ++i) {
            children[i].disposeHTMLElement(container);
        }
    }
    /**
     * If necessary, adds HTML elements for all sprites to the given HTML container element.
     * Updates existing elements according to each sprite's position.
     * @param container HTML container element for the HTML elements.
     * @param camera The camera used to render the 3D scene.
     */
    render(container, camera) {
        if (!this.visible) {
            return;
        }
        const children = this.children;
        for (let i = 0, n = children.length; i < n; ++i) {
            const child = children[i];
            const element = child.getHTMLElement(container);
            if (element) {
                child.renderHTMLElement(element, container, camera);
            }
        }
    }
    /**
     * Calls update on all sprites in the group.
     */
    update() {
        const children = this.children;
        for (let i = 0, n = children.length; i < n; ++i) {
            children[i].update();
        }
    }
}
exports.default = HTMLSpriteGroup;


/***/ }),

/***/ "../../libs/ff-three/source/UniversalCamera.ts":
/*!*****************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/UniversalCamera.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const math_1 = __webpack_require__(/*! @ff/core/math */ "../../libs/ff-core/source/math.ts");
////////////////////////////////////////////////////////////////////////////////
const _halfPi = Math.PI * 0.5;
const _box = new THREE.Box3();
const _size = new THREE.Vector3();
const _center = new THREE.Vector3();
const _translation = new THREE.Vector3();
const _mat4a = new THREE.Matrix4();
const _mat4b = new THREE.Matrix4();
const _cameraOrientation = [
    new THREE.Vector3(0, -_halfPi, 0),
    new THREE.Vector3(0, _halfPi, 0),
    new THREE.Vector3(-_halfPi, 0, 0),
    new THREE.Vector3(_halfPi, 0, 0),
    new THREE.Vector3(0, 0, 0),
    new THREE.Vector3(0, Math.PI, 0),
];
var EProjection;
(function (EProjection) {
    EProjection[EProjection["Perspective"] = 0] = "Perspective";
    EProjection[EProjection["Orthographic"] = 1] = "Orthographic";
})(EProjection = exports.EProjection || (exports.EProjection = {}));
var EViewPreset;
(function (EViewPreset) {
    EViewPreset[EViewPreset["None"] = -1] = "None";
    EViewPreset[EViewPreset["Left"] = 0] = "Left";
    EViewPreset[EViewPreset["Right"] = 1] = "Right";
    EViewPreset[EViewPreset["Top"] = 2] = "Top";
    EViewPreset[EViewPreset["Bottom"] = 3] = "Bottom";
    EViewPreset[EViewPreset["Front"] = 4] = "Front";
    EViewPreset[EViewPreset["Back"] = 5] = "Back";
})(EViewPreset = exports.EViewPreset || (exports.EViewPreset = {}));
class UniversalCamera extends THREE.Camera {
    constructor(projection) {
        super();
        this.isUniversalCamera = true;
        this.fov = 50;
        this.size = 20;
        this.aspect = 1;
        this.distance = 20;
        this.zoom = 1;
        this.near = 0.1;
        this.far = 2000;
        // additional perspective parameters
        this.focus = 10;
        this.filmGauge = 35;
        this.filmOffset = 0;
        // view offset
        this.view = null;
        this.setProjection(projection);
    }
    setProjection(type) {
        if (type === EProjection.Orthographic) {
            this.type = "OrthographicCamera";
            this.isPerspectiveCamera = false;
            this.isOrthographicCamera = true;
        }
        else {
            this.type = "PerspectiveCamera";
            this.isPerspectiveCamera = true;
            this.isOrthographicCamera = false;
        }
        this.updateProjectionMatrix();
    }
    getProjection() {
        return this.isOrthographicCamera ? EProjection.Orthographic : EProjection.Perspective;
    }
    setPreset(preset) {
        if (preset !== EViewPreset.None) {
            this.rotation.setFromVector3(_cameraOrientation[preset], "XYZ");
            this.position.set(0, 0, this.distance).applyQuaternion(this.quaternion);
        }
        else {
            this.rotation.set(0, 0, 0);
            this.position.set(0, 0, 0);
        }
        this.updateMatrix();
    }
    setFocalLength(focalLength) {
        const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
        this.fov = THREE.Math.RAD2DEG * 2 * Math.atan(vExtentSlope);
        this.updateProjectionMatrix();
    }
    getFocalLength() {
        const vExtentSlope = Math.tan(THREE.Math.DEG2RAD * 0.5 * this.fov);
        return 0.5 * this.getFilmHeight() / vExtentSlope;
    }
    getEffectiveFOV() {
        return THREE.Math.RAD2DEG * 2 * Math.atan(Math.tan(THREE.Math.DEG2RAD * 0.5 * this.fov) / this.zoom);
    }
    getFilmWidth() {
        return this.filmGauge * Math.min(this.aspect, 1);
    }
    getFilmHeight() {
        return this.filmGauge / Math.max(this.aspect, 1);
    }
    setViewOffset(viewportWidth, viewportHeight, windowX, windowY, windowWidth, windowHeight) {
        if (this.isPerspectiveCamera) {
            THREE.PerspectiveCamera.prototype.setViewOffset.call(this, viewportWidth, viewportHeight, windowX, windowY, windowWidth, windowHeight);
        }
        else {
            THREE.OrthographicCamera.prototype.setViewOffset.call(this, viewportWidth, viewportHeight, windowX, windowY, windowWidth, windowHeight);
        }
    }
    clearViewOffset() {
        if (this.view !== null) {
            this.view.enabled = false;
        }
        this.updateProjectionMatrix();
    }
    zoomToView() {
        // TODO: Implement
    }
    moveToView(boundingBox) {
        this.updateMatrixWorld(false);
        _box.copy(boundingBox);
        _mat4a.extractRotation(this.matrixWorldInverse);
        _box.applyMatrix4(_mat4a);
        _box.getSize(_size);
        _box.getCenter(_center);
        const objectSize = Math.max(_size.x / this.aspect, _size.y);
        _translation.set(-_center.x, -_center.y, 0);
        if (this.isPerspectiveCamera) {
            _translation.z = _size.z / (2 * Math.tan(this.fov * math_1.default.DEG2RAD * 0.5));
        }
        else {
            this.size = objectSize * 0.5;
            _translation.z = _size.z * 2;
            this.far = Math.max(this.far, _translation.z * 2);
        }
        _mat4a.extractRotation(this.matrixWorld);
        _translation.applyMatrix4(_mat4a);
        this.matrix.decompose(this.position, this.quaternion, this.scale);
        this.position.copy(_translation);
        this.updateMatrix();
    }
    updateProjectionMatrix() {
        const near = this.near;
        const far = this.far;
        const aspect = this.aspect;
        const zoom = this.zoom;
        const view = this.view;
        if (this.isOrthographicCamera) {
            const size = this.size;
            const dy = size / (2 * zoom);
            const dx = dy * aspect;
            let left = -dx;
            let right = dx;
            let top = dy;
            let bottom = -dy;
            if (view && view.enabled) {
                const zoomW = zoom / (view.width / view.fullWidth);
                const zoomH = zoom / (view.height / view.fullHeight);
                const scaleW = size * aspect / view.width;
                const scaleH = size / view.height;
                left += scaleW * (view.offsetX / zoomW);
                right = left + scaleW * (view.width / zoomW);
                top -= scaleH * (view.offsetY / zoomH);
                bottom = top - scaleH * (view.height / zoomH);
            }
            this.projectionMatrix.makeOrthographic(left, right, top, bottom, near, far);
        }
        else {
            let top = near * Math.tan(THREE.Math.DEG2RAD * 0.5 * this.fov) / zoom;
            let height = 2 * top;
            let width = aspect * height;
            let left = -0.5 * width;
            if (view && view.enabled) {
                left += view.offsetX * width / view.fullWidth;
                top -= view.offsetY * height / view.fullHeight;
                width *= view.width / view.fullWidth;
                height *= view.height / view.fullHeight;
            }
            var skew = this.filmOffset;
            if (skew !== 0) {
                left += near * skew / this.getFilmWidth();
            }
            this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, far);
        }
        this.projectionMatrixInverse.getInverse(this.projectionMatrix);
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.type = source.type;
        this.isOrthographicCamera = source.isOrthographicCamera;
        this.isPerspectiveCamera = source.isPerspectiveCamera;
        this.fov = source.fov;
        this.size = source.size;
        this.aspect = source.aspect;
        this.zoom = source.zoom;
        this.near = source.near;
        this.far = source.far;
        this.focus = source.focus;
        this.filmGauge = source.filmGauge;
        this.filmOffset = source.filmOffset;
        this.view = source.view ? Object.assign({}, source.view) : null;
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.fov = this.fov;
        data.object.size = this.size;
        data.object.aspect = this.aspect;
        data.object.zoom = this.zoom;
        data.object.near = this.near;
        data.object.far = this.far;
        data.object.focus = this.focus;
        data.object.filmGauge = this.filmGauge;
        data.object.filmOffset = this.filmOffset;
        if (this.view !== null) {
            data.object.view = Object.assign({}, this.view);
        }
        return data;
    }
}
exports.default = UniversalCamera;


/***/ }),

/***/ "../../libs/ff-three/source/Viewport.ts":
/*!**********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/Viewport.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const Publisher_1 = __webpack_require__(/*! @ff/core/Publisher */ "../../libs/ff-core/source/Publisher.ts");
const UniversalCamera_1 = __webpack_require__(/*! ./UniversalCamera */ "../../libs/ff-three/source/UniversalCamera.ts");
const ViewportOverlay_1 = __webpack_require__(/*! ./ui/ViewportOverlay */ "../../libs/ff-three/source/ui/ViewportOverlay.ts");
const CameraController_1 = __webpack_require__(/*! ./CameraController */ "../../libs/ff-three/source/CameraController.ts");
class Viewport extends Publisher_1.default {
    constructor(props) {
        super();
        this.next = null;
        this._canvasWidth = 1;
        this._canvasHeight = 1;
        this._overlay = null;
        this._camera = null;
        this._controller = null;
        this.addEvent("dispose");
        this.next = null;
        props = props || {};
        this._relRect = {
            x: props.x || 0,
            y: props.y || 0,
            width: props.width || 1,
            height: props.height || 1
        };
        this._absRect = {
            x: 0,
            y: 0,
            width: 1,
            height: 1
        };
        if (props.overlay) {
            this._overlay = props.overlay;
        }
    }
    /**
     * The x-coordinate of the viewport's bottom-left corner in canvas pixels. The origin is at the bottom left.
     */
    get x() {
        return this._absRect.x;
    }
    /**
     * The y-coordinate of the viewport's bottom-left corner in canvas pixels. The origin is at the bottom left.
     */
    get y() {
        return this._absRect.y;
    }
    /**
     * The viewport's width in canvas pixels.
     */
    get width() {
        return this._absRect.width;
    }
    /**
     * The viewport's height in canvas pixels.
     */
    get height() {
        return this._absRect.height;
    }
    /** The width of the canvas in pixels. */
    get canvasWidth() {
        return this._canvasWidth;
    }
    /**
     * The height of the canvas in pixels.
     */
    get canvasHeight() {
        return this._canvasHeight;
    }
    /** The viewport's built-in camera. */
    get camera() {
        return this._camera;
    }
    /**
     * The controller of the build-in camera.
     */
    get controller() {
        return this._controller;
    }
    /**
     * The viewport's overlay HTML element.
     */
    get overlay() {
        return this._overlay;
    }
    set overlay(overlay) {
        this._overlay = overlay;
        this.updateGeometry();
    }
    /**
     * Frees all resources the viewport object may have claimed.
     */
    dispose() {
        if (true) {
            console.log("Viewport.dispose - " + this.toString());
        }
        this.emit({ type: "dispose", viewport: this });
        if (this._overlay) {
            this._overlay.remove();
            this._overlay = null;
        }
    }
    /**
     * Sets the size of the viewport in relative coordinates (origin at the bottom left, canvas width and height are 1).
     */
    setSize(x, y, width, height) {
        const relRect = this._relRect;
        relRect.x = x;
        relRect.y = y;
        relRect.width = width;
        relRect.height = height;
        this.updateGeometry();
    }
    /**
     *  Sets the size of the rendering canvas in pixels.
     */
    setCanvasSize(width, height) {
        this._canvasWidth = width;
        this._canvasHeight = height;
        this.updateGeometry();
        if (this._controller) {
            this._controller.setViewportSize(width, height);
        }
    }
    /** Creates or updates a built-in camera for the viewport. This camera will be used for rendering
     * instead of the scene camera.
     * @param type The camera's projection type (perspective or orthographic).
     * @param preset The camera's preset view (one of six principal directions).
     */
    setBuiltInCamera(type, preset) {
        if (!this._camera) {
            this._camera = new UniversalCamera_1.default(type);
            this._camera.matrixAutoUpdate = false;
        }
        else {
            this._camera.setProjection(type);
        }
        if (preset !== undefined) {
            this._camera.setPreset(preset);
            this.overlay.setLabel(ViewportOverlay_1.ELocation.TopRight, "view", UniversalCamera_1.EViewPreset[preset], "ff-label-box");
        }
    }
    /**
     * Removes a previously set built-in camera. The scene camera will be used for rendering.
     */
    unsetBuiltInCamera() {
        this._camera = null;
        this._controller = null;
        this.overlay.unsetLabel(ViewportOverlay_1.ELocation.TopRight, "view");
    }
    enableCameraControl(state) {
        if (!state && this._controller) {
            this._controller = null;
        }
        else if (state && this._camera) {
            if (!this._controller) {
                this._controller = new CameraController_1.default(this._camera);
                this._controller.setViewportSize(this.width, this.height);
                this._controller.updateController();
            }
        }
        return this._controller;
    }
    /**
     * Centers and positions the built-in camera such that the given box is entirely visible.
     * Does nothing if the viewport doesn't have a built-in camera and controller.
     * @param box
     */
    zoomExtents(box) {
        const camera = this._camera;
        const controller = this._controller;
        if (camera && controller) {
            controller.zoomExtents(box);
            controller.updateCamera(null, true);
        }
    }
    /**
     * Tests whether the pointer coordinates of the given UI event lie inside the viewport.
     * @param event
     */
    isInside(event) {
        return this.isPointInside(event.localX, event.localY);
    }
    isPointInside(x, y) {
        const absRect = this._absRect;
        y = this.canvasHeight - y;
        return x >= absRect.x && x < absRect.x + absRect.width
            && y >= absRect.y && y < absRect.y + absRect.height;
    }
    /**
     * Transforms the given local screen coordinates to normalized device coordinates.
     * @param localX canvas-local x coordinate.
     * @param localY canvas-local y coordinate.
     * @param result An optional 2-vector receiving the transformed coordinates.
     */
    getDevicePoint(localX, localY, result) {
        const absRect = this._absRect;
        const ndx = ((localX - absRect.x) / absRect.width) * 2 - 1;
        const ndy = ((this.canvasHeight - localY - absRect.y) / absRect.height) * 2 - 1;
        return result ? result.set(ndx, ndy) : new THREE.Vector2(ndx, ndy);
    }
    getDeviceX(x) {
        const absRect = this._absRect;
        return ((x - absRect.x) / absRect.width) * 2 - 1;
    }
    getDeviceY(y) {
        const absRect = this._absRect;
        return ((this.canvasHeight - y - absRect.y) / absRect.height) * 2 - 1;
    }
    updateCamera(sceneCamera) {
        let currentCamera = sceneCamera;
        if (this._camera) {
            currentCamera = this._camera;
            if (this._controller) {
                this._controller.updateCamera();
            }
        }
        if (!currentCamera) {
            return;
        }
        const absRect = this._absRect;
        const aspect = absRect.width / absRect.height;
        if (aspect !== currentCamera.userData["aspect"]) {
            currentCamera.userData["aspect"] = aspect;
            if (currentCamera.isUniversalCamera || currentCamera.isPerspectiveCamera) {
                currentCamera.aspect = aspect;
                currentCamera.updateProjectionMatrix();
            }
            else if (currentCamera.isOrthographicCamera) {
                const dy = (currentCamera.top - currentCamera.bottom) * 0.5;
                currentCamera.left = -dy * aspect;
                currentCamera.right = dy * aspect;
                currentCamera.updateProjectionMatrix();
            }
        }
        return currentCamera;
    }
    applyViewport(renderer) {
        const absRect = this._absRect;
        renderer.setViewport(absRect.x, absRect.y, absRect.width, absRect.height);
        renderer["viewport"] = this;
    }
    applyPickViewport(target, event) {
        const absRect = this._absRect;
        const x = event.localX - absRect.x;
        const y = this.canvasHeight - event.localY - absRect.y;
        target.viewport.set(-x, -y, absRect.width, absRect.height);
        //console.log("Viewport.applyPickViewport - offset: ", -left, -top);
    }
    toViewportEvent(event) {
        const vpEvent = event;
        vpEvent.viewport = this;
        vpEvent.deviceX = this.getDeviceX(event.localX);
        vpEvent.deviceY = this.getDeviceY(event.localY);
        return vpEvent;
    }
    onPointer(event) {
        if (this._controller) {
            return this._controller.onPointer(event);
        }
        return false;
    }
    onTrigger(event) {
        if (this._controller) {
            return this._controller.onTrigger(event);
        }
        return false;
    }
    toString() {
        return `Viewport (x: ${this.x}, y: ${this.y}, width: ${this.width}, height: ${this.height})`;
    }
    updateGeometry() {
        const relRect = this._relRect;
        const absRect = this._absRect;
        const canvasWidth = this._canvasWidth;
        const canvasHeight = this._canvasHeight;
        absRect.x = Math.round(relRect.x * canvasWidth);
        absRect.y = Math.round(relRect.y * canvasHeight);
        absRect.width = Math.round(relRect.width * canvasWidth);
        absRect.height = Math.round(relRect.height * canvasHeight);
        const overlay = this._overlay;
        if (overlay) {
            const top = this.canvasHeight - absRect.y - absRect.height;
            overlay.style.left = (absRect.x ? absRect.x.toFixed() + "px" : "0");
            overlay.style.top = (top ? top.toFixed() + "px" : "0");
            overlay.style.width = absRect.width.toFixed() + "px";
            overlay.style.height = absRect.height.toFixed() + "px";
        }
    }
}
exports.default = Viewport;


/***/ }),

/***/ "../../libs/ff-three/source/helpers.ts":
/*!*********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/helpers.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
////////////////////////////////////////////////////////////////////////////////
const _vec3 = new THREE.Vector3();
const _mat4 = new THREE.Matrix4();
const _euler = new THREE.Euler();
const _quat = new THREE.Quaternion();
function degreesToQuaternion(rotation, order, quaternion) {
    const result = quaternion || new THREE.Quaternion();
    _vec3.fromArray(rotation).multiplyScalar(THREE.Math.DEG2RAD);
    _euler.setFromVector3(_vec3, order);
    result.setFromEuler(_euler);
    return result;
}
exports.degreesToQuaternion = degreesToQuaternion;
function quaternionToDegrees(quaternion, order, rotation) {
    const result = rotation || [0, 0, 0];
    _euler.setFromQuaternion(quaternion, order);
    _euler.toVector3(_vec3);
    _vec3.multiplyScalar(THREE.Math.RAD2DEG).toArray(result);
    return result;
}
exports.quaternionToDegrees = quaternionToDegrees;
function disposeObject(object) {
    const geometries = new Map();
    const materials = new Map();
    const textures = new Map();
    object.traverse(object => {
        const mesh = object;
        if (mesh.isMesh) {
            const geometry = mesh.geometry;
            if (geometry) {
                geometries.set(geometry.uuid, geometry);
            }
            const material = mesh.material;
            if (material) {
                materials.set(material.uuid, material);
                for (let key in material) {
                    const texture = material[key]; // THREE.Texture;
                    if (texture && texture.isTexture) {
                        textures.set(texture.uuid, texture);
                    }
                }
            }
        }
    });
    if (true) {
        console.log("disposeObject - %s geometries, %s materials, %s textures", geometries.size, materials.size, textures.size);
    }
    for (let entry of textures) {
        entry[1].dispose();
    }
    for (let entry of materials) {
        entry[1].dispose();
    }
    for (let entry of geometries) {
        entry[1].dispose();
    }
}
exports.disposeObject = disposeObject;
/**
 * Computes the bounding box of the given object, relative to the given root (same as object if
 * not specified explicitly). Accounts for the transforms of all children relative to the root.
 * Caller is responsible for emptying the given bounding box, and for updating the matrices of
 * all child objects.
 * @param object
 * @param box The box to be updated.
 * @param root
 */
function computeLocalBoundingBox(object, box, root) {
    if (!root) {
        root = object;
    }
    const geometry = object.geometry;
    if (geometry && object.visible) {
        let current = object;
        _mat4.identity();
        while (current && current !== root) {
            _mat4.premultiply(current.matrix);
            current = current.parent;
        }
        if (geometry.isGeometry) {
            const vertices = geometry.vertices;
            for (let i = 0, n = vertices.length; i < n; ++i) {
                _vec3.copy(vertices[i]).applyMatrix4(_mat4);
                box.expandByPoint(_vec3);
            }
        }
        else if (geometry.isBufferGeometry) {
            const attribute = geometry.attributes.position;
            if (attribute !== undefined) {
                for (let i = 0, n = attribute.count; i < n; ++i) {
                    _vec3.fromBufferAttribute(attribute, i).applyMatrix4(_mat4);
                    box.expandByPoint(_vec3);
                }
            }
        }
    }
    const children = object.children;
    for (let i = 0, n = children.length; i < n; ++i) {
        computeLocalBoundingBox(children[i], box, root);
    }
}
exports.computeLocalBoundingBox = computeLocalBoundingBox;


/***/ }),

/***/ "../../libs/ff-three/source/math.ts":
/*!******************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/math.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const math_1 = __webpack_require__(/*! @ff/core/math */ "../../libs/ff-core/source/math.ts");
////////////////////////////////////////////////////////////////////////////////
const _vec4a = new THREE.Vector4();
const _vec4b = new THREE.Vector4();
const _vec3a = new THREE.Vector3();
const _vec3b = new THREE.Vector3();
const _mat4 = new THREE.Matrix4();
const _euler = new THREE.Euler();
const _quat = new THREE.Quaternion();
const math = {
    PI: 3.1415926535897932384626433832795,
    DOUBLE_PI: 6.283185307179586476925286766559,
    HALF_PI: 1.5707963267948966192313216916398,
    QUARTER_PI: 0.78539816339744830961566084581988,
    DEG2RAD: 0.01745329251994329576923690768489,
    RAD2DEG: 57.295779513082320876798154814105,
    composeOrbitMatrix: function (orientation, offset, result) {
        const pitch = orientation.x;
        const head = orientation.y;
        const roll = orientation.z;
        const ox = offset.x;
        const oy = offset.y;
        const oz = offset.z;
        const sinX = Math.sin(pitch);
        const cosX = Math.cos(pitch);
        const sinY = Math.sin(head);
        const cosY = Math.cos(head);
        const sinZ = Math.sin(roll);
        const cosZ = Math.cos(roll);
        const m00 = cosY * cosZ;
        const m01 = cosZ * sinY * sinX - sinZ * cosX;
        const m02 = cosZ * sinY * cosX + sinZ * sinX;
        const m10 = cosY * sinZ;
        const m11 = sinX * sinY * sinZ + cosZ * cosX;
        const m12 = sinZ * sinY * cosX - cosZ * sinX;
        const m20 = -sinY;
        const m21 = cosY * sinX;
        const m22 = cosY * cosX;
        result = result || new THREE.Matrix4();
        const e = result.elements;
        e[0] = m00;
        e[1] = m10;
        e[2] = m20;
        e[3] = 0;
        e[4] = m01;
        e[5] = m11;
        e[6] = m21;
        e[7] = 0;
        e[8] = m02;
        e[9] = m12;
        e[10] = m22;
        e[11] = 0;
        e[12] = ox * m00 + oy * m01 + oz * m02;
        e[13] = ox * m10 + oy * m11 + oz * m12;
        e[14] = ox * m20 + oy * m21 + oz * m22;
        e[15] = 1;
        return result;
    },
    decomposeOrbitMatrix: function (matrix, orientationOut, offsetOut) {
        _euler.setFromRotationMatrix(matrix, "ZYX");
        _euler.toVector3(orientationOut);
        _mat4.getInverse(matrix);
        _vec4a.set(0, 0, 0, 1);
        _vec4a.applyMatrix4(_mat4);
        offsetOut.x = -_vec4a.x;
        offsetOut.y = -_vec4a.y;
        offsetOut.z = -_vec4a.z;
    },
    isMatrix4Identity: function (matrix) {
        const e = matrix.elements;
        return e[0] === 1 && e[1] === 0 && e[2] === 0 && e[3] === 0
            && e[4] === 0 && e[5] === 1 && e[6] === 0 && e[7] === 0
            && e[8] === 0 && e[9] === 0 && e[10] === 1 && e[11] === 0
            && e[12] === 0 && e[13] === 0 && e[14] === 0 && e[15] === 1;
    },
    decomposeTransformMatrix: function (matrix, posOut, rotOut, scaleOut) {
        _mat4.fromArray(matrix);
        _mat4.decompose(_vec3a, _quat, _vec3b);
        _euler.setFromQuaternion(_quat, "XYZ");
        _vec3a.toArray(posOut);
        _vec3b.toArray(scaleOut);
        _euler.toVector3(_vec3a);
        _vec4a.multiplyScalar(math_1.default.RAD2DEG);
        _vec3a.toArray(rotOut);
    }
};
exports.default = math;


/***/ }),

/***/ "../../libs/ff-three/source/shaders/IndexShader.ts":
/*!*********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/shaders/IndexShader.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
////////////////////////////////////////////////////////////////////////////////
class IndexShader extends THREE.ShaderMaterial {
    constructor() {
        super(...arguments);
        this.isIndexShader = true;
        this.uniformsNeedUpdate = false;
        this.lights = false;
        this.uniforms = {
            index: { value: [0, 0, 0] }
        };
        this.vertexShader = [
            "void main() {",
            "  #include <begin_vertex>",
            "  #include <project_vertex>",
            "}",
        ].join("\n");
        this.fragmentShader = [
            "uniform vec3 index;",
            "void main() {",
            "  gl_FragColor = vec4(index, 1.0);",
            "}"
        ].join("\n");
    }
    static indexFromPixel(pixel) {
        return pixel[0] + pixel[1] << 8 + pixel[2] << 16;
    }
    static zoneFromPixel(pixel) {
        return pixel[3];
    }
    setIndex(index) {
        const hb = index >> 16;
        const mb = (index >> 8) - (hb << 8);
        const lb = index - (hb << 16) - (mb << 8);
        const value = this.uniforms.index.value;
        value[0] = lb / 255;
        value[1] = mb / 255;
        value[2] = hb / 255;
        this.uniformsNeedUpdate = true;
    }
}
exports.default = IndexShader;


/***/ }),

/***/ "../../libs/ff-three/source/shaders/NormalShader.ts":
/*!**********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/shaders/NormalShader.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
////////////////////////////////////////////////////////////////////////////////
class NormalShader extends THREE.ShaderMaterial {
    constructor() {
        super(...arguments);
        this.isNormalShader = true;
        this.uniforms = {
            index: { value: 0 }
        };
        this.vertexShader = [
            "varying vec3 vLocalNormal;",
            "void main() {",
            "  #include <beginnormal_vertex>",
            "  #include <begin_vertex>",
            "  #include <project_vertex>",
            "  vLocalNormal = vec3(normal);",
            "}",
        ].join("\n");
        this.fragmentShader = [
            "uniform vec3 index;",
            "varying vec3 vLocalNormal;",
            "void main() {",
            "  vec3 normal = normalize(vLocalNormal);",
            "  gl_FragColor = vec4(normal * 0.5 + 0.5, 1.0);",
            "}"
        ].join("\n");
    }
}
exports.default = NormalShader;


/***/ }),

/***/ "../../libs/ff-three/source/shaders/PositionShader.ts":
/*!************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/shaders/PositionShader.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
////////////////////////////////////////////////////////////////////////////////
/**
 * Renders the local position, requires one pass per component (x, y, z).
 */
class PositionShader extends THREE.ShaderMaterial {
    constructor() {
        super(...arguments);
        this.isPositionShader = true;
        this.uniforms = {
            index: { value: 0 },
            range: { value: [-1, 1] }
        };
        this.vertexShader = [
            "varying vec3 vLocalPosition;",
            "void main() {",
            "  #include <begin_vertex>",
            "  #include <project_vertex>",
            "  vLocalPosition = vec3(position);",
            "}",
        ].join("\n");
        this.fragmentShader = [
            "uniform float index;",
            "uniform vec2 range;",
            "varying vec3 vLocalPosition;",
            "vec4 toVec4(float v) {",
            "  float vn = (v - range.x) / (range.y - range.x);",
            "  float b0 = floor(vn * 255.0) / 255.0; vn = (vn - b0) * 256.0;",
            "  float b1 = floor(vn * 255.0) / 255.0; vn = (vn - b1) * 256.0;",
            "  float b2 = floor(vn * 255.0) / 255.0; vn = (vn - b2) * 256.0;",
            "  float b3 = floor(vn * 255.0) / 255.0;",
            "  return vec4(clamp(b0, 0.0, 1.0), clamp(b1, 0.0, 1.0), clamp(b2, 0.0, 1.0), clamp(b3, 0.0, 1.0));",
            "}",
            "void main() {",
            "  gl_FragColor = (index == 0.0 ? toVec4(vLocalPosition.x)",
            "    : (index == 1.0 ? toVec4(vLocalPosition.y) : toVec4(vLocalPosition.z)));",
            "}"
        ].join("\n");
    }
}
exports.default = PositionShader;


/***/ }),

/***/ "../../libs/ff-three/source/shaders/floorPhongShader.frag":
/*!****************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/shaders/floorPhongShader.frag ***!
  \****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n\n// #include <uv_pars_fragment>\n// replaced with\nvarying vec2 vUv;\n\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n    vec2 coords = vUv * 2.0 - 1.0;\n    float f = dot(coords, coords);\n\tgl_FragColor = vec4(outgoingLight, mix(diffuseColor.a, 0.0, f));\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n\n");

/***/ }),

/***/ "../../libs/ff-three/source/shaders/floorPhongShader.vert":
/*!****************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/shaders/floorPhongShader.vert ***!
  \****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n\n// #include <uv_pars_vertex>\n// replaced with\nvarying vec2 vUv;\nuniform mat3 uvTransform;\n\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t// #include <uv_vertex>\n\t// replaced with\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n\n");

/***/ }),

/***/ "../../libs/ff-three/source/ui/ViewportOverlay.ts":
/*!********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-three/source/ui/ViewportOverlay.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
////////////////////////////////////////////////////////////////////////////////
/** Location enumeration for [[ViewportOverlay]]. */
var ELocation;
(function (ELocation) {
    ELocation[ELocation["TopLeft"] = 0] = "TopLeft";
    ELocation[ELocation["TopCenter"] = 1] = "TopCenter";
    ELocation[ELocation["TopRight"] = 2] = "TopRight";
    ELocation[ELocation["BottomLeft"] = 3] = "BottomLeft";
    ELocation[ELocation["BottomCenter"] = 4] = "BottomCenter";
    ELocation[ELocation["BottomRight"] = 5] = "BottomRight";
})(ELocation = exports.ELocation || (exports.ELocation = {}));
/**
 * Custom HTML Element to be used as an overlay on top of a viewport.
 * Labels can be added to the overlay in six different locations. Each label is associated
 * with a key. Use the key to change or remove the label. Each label can be styled differently
 * using custom CSS classes.
 */
let ViewportOverlay = class ViewportOverlay extends CustomElement_1.default {
    constructor() {
        super();
        this.labels = [];
        this.labels.push({}, {}, {}, {}, {}, {});
    }
    setLabel(location, key, text, className) {
        this.labels[location][key] = { text, className };
        this.requestUpdate();
    }
    unsetLabel(location, key) {
        delete this.labels[location][key];
        this.requestUpdate();
    }
    firstConnected() {
        this.classList.add("ff-container", "ff-viewport-overlay");
    }
    render() {
        const labels = this.labels;
        return CustomElement_1.html `<div class="ff-row">
            <div class="ff-labels ff-top-left">${Object.keys(labels[ELocation.TopLeft]).map(key => {
            const label = labels[ELocation.TopLeft][key];
            return CustomElement_1.html `<div class=${"ff-label " + label.className || false}>${label.text}</div>`;
        })}</div>
            <div class="ff-labels ff-top-center">${Object.keys(labels[ELocation.TopCenter]).map(key => {
            const label = labels[ELocation.TopCenter][key];
            return CustomElement_1.html `<div class=${"ff-label " + label.className || false}>${label.text}</div>`;
        })}</div>
            <div class="ff-labels ff-top-right">${Object.keys(labels[ELocation.TopRight]).map(key => {
            const label = labels[ELocation.TopRight][key];
            return CustomElement_1.html `<div class=${"ff-label " + label.className || false}>${label.text}</div>`;
        })}</div>
        </div><div class="ff-row">
            <div class="ff-labels ff-bottom-left">${Object.keys(labels[ELocation.BottomLeft]).map(key => {
            const label = labels[ELocation.BottomLeft][key];
            return CustomElement_1.html `<div class=${"ff-label " + label.className || false}>${label.text}</div>`;
        })}</div>
            <div class="ff-labels ff-bottom-center">${Object.keys(labels[ELocation.BottomCenter]).map(key => {
            const label = labels[ELocation.BottomCenter][key];
            return CustomElement_1.html `<div class=${"ff-label " + label.className || false}>${label.text}</div>`;
        })}</div>
            <div class="ff-labels ff-bottom-right">${Object.keys(labels[ELocation.BottomRight]).map(key => {
            const label = labels[ELocation.BottomRight][key];
            return CustomElement_1.html `<div class=${"ff-label " + label.className || false}>${label.text}</div>`;
        })}</div>
        </div>`;
    }
};
ViewportOverlay = __decorate([
    CustomElement_1.customElement("ff-viewport-overlay")
], ViewportOverlay);
exports.default = ViewportOverlay;


/***/ }),

/***/ "../../libs/ff-ui/source/Button.ts":
/*!*****************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-ui/source/Button.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! ./Icon */ "../../libs/ff-ui/source/Icon.ts");
const CustomElement_1 = __webpack_require__(/*! ./CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
/**
 * Custom element displaying a button with a text and/or an icon.
 * The button emits a [[IButtonClickEvent]] if clicked.
 * Classes assigned: "ff-button", "ff-control".
 */
let Button = class Button extends CustomElement_1.default {
    constructor() {
        super();
        /** Optional name to identify the button. */
        this.name = "";
        /** Optional index to identify the button. */
        this.index = 0;
        this.selectedIndex = -1;
        /** If true, adds "ff-selected" class to element. */
        this.selected = false;
        /** If true, toggles selected state every time the button is clicked. */
        this.selectable = false;
        this.disabled = false;
        /** Optional name of the icon to be displayed on the button. */
        this.icon = "";
        /** If true, displays a downward facing triangle at the right side. */
        this.caret = false;
        this.inline = false;
        this.transparent = false;
        this.addEventListener("click", (e) => this.onClick(e));
        this.addEventListener("keydown", (e) => this.onKeyDown(e));
    }
    firstConnected() {
        this.tabIndex = 0;
        this.classList.add("ff-button");
    }
    shouldUpdate(changedProperties) {
        if (changedProperties.has("selectedIndex") || changedProperties.has("index")) {
            if (this.selectedIndex >= 0) {
                this.selected = this.index === this.selectedIndex;
            }
        }
        if (changedProperties.has("disabled")) {
            this.setClass("ff-disabled", this.disabled);
        }
        return true;
    }
    update(changedProperties) {
        this.classList.remove("ff-inline", "ff-transparent", "ff-control");
        if (this.inline) {
            this.classList.add("ff-inline");
        }
        else if (this.transparent) {
            this.classList.add("ff-transparent");
        }
        else {
            this.classList.add("ff-control");
        }
        super.update(changedProperties);
    }
    render() {
        return CustomElement_1.html `${this.renderIcon()}${this.renderText()}${this.renderCaret()}`;
    }
    renderIcon() {
        return this.icon ? CustomElement_1.html `<ff-icon class="ff-off" name=${this.icon}></ff-icon>` : null;
    }
    renderText() {
        return this.text ? CustomElement_1.html `<div class="ff-text ff-off">${this.text}</div>` : null;
    }
    renderCaret() {
        return this.caret ? CustomElement_1.html `<div class="ff-caret-down ff-off"></div>` : null;
    }
    onClick(event) {
        if (this.selectable) {
            this.selected = !this.selected;
        }
    }
    onKeyDown(event) {
        if (document.activeElement === this && (event.code === "Space" || event.code === "Enter")) {
            this.dispatchEvent(new MouseEvent("click", { bubbles: true }));
        }
    }
};
__decorate([
    CustomElement_1.property({ type: String })
], Button.prototype, "name", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], Button.prototype, "index", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], Button.prototype, "selectedIndex", void 0);
__decorate([
    CustomElement_1.property({ type: Boolean, reflect: true })
], Button.prototype, "selected", void 0);
__decorate([
    CustomElement_1.property({ type: Boolean })
], Button.prototype, "selectable", void 0);
__decorate([
    CustomElement_1.property({ type: Boolean })
], Button.prototype, "disabled", void 0);
__decorate([
    CustomElement_1.property()
], Button.prototype, "text", void 0);
__decorate([
    CustomElement_1.property()
], Button.prototype, "icon", void 0);
__decorate([
    CustomElement_1.property({ type: Boolean })
], Button.prototype, "caret", void 0);
__decorate([
    CustomElement_1.property({ type: Boolean })
], Button.prototype, "inline", void 0);
__decorate([
    CustomElement_1.property({ type: Boolean })
], Button.prototype, "transparent", void 0);
Button = __decorate([
    CustomElement_1.customElement("ff-button")
], Button);
exports.default = Button;


/***/ }),

/***/ "../../libs/ff-ui/source/ButtonGroup.ts":
/*!**********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-ui/source/ButtonGroup.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! ./CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
const Button_1 = __webpack_require__(/*! ./Button */ "../../libs/ff-ui/source/Button.ts");
let ButtonGroup = class ButtonGroup extends CustomElement_1.default {
    constructor() {
        super();
        this.mode = "radio";
        this.selectionIndex = -1;
        this.observer = new MutationObserver(this.onObserver);
        this.selectedButton = null;
        this.addEventListener("click", (e) => this.onClick(e));
    }
    firstConnected() {
        this.classList.add("ff-button-group");
        this.parseChildren();
    }
    connected() {
        this.observer.observe(this, { childList: true });
    }
    disconnected() {
        this.observer.disconnect();
    }
    onObserver(mutations) {
        mutations.forEach(mutation => {
            if (mutation.type === "childList") {
                this.parseChildren();
            }
        });
    }
    onClick(event) {
        let target = event.target;
        while (target && target !== this && !(target instanceof Button_1.default)) {
            target = target.parentElement;
        }
        if (!(target instanceof Button_1.default)) {
            return;
        }
        if (target.selected) {
            if (this.mode === "exclusive") {
                target.selected = false;
                this.selectedButton = null;
                this.selectionIndex = -1;
            }
        }
        else {
            if (this.selectedButton) {
                this.selectedButton.selected = false;
            }
            this.selectedButton = target;
            this.selectedButton.selected = true;
            this.selectionIndex = this.getButtons().indexOf(target);
        }
    }
    parseChildren() {
        const buttons = this.getButtons();
        if (this.selectedButton) {
            this.selectionIndex = buttons.indexOf(this.selectedButton);
            if (this.selectionIndex < 0) {
                this.selectedButton.selected = false;
                this.selectedButton = null;
            }
        }
        if (this.selectionIndex < 0 || this.selectionIndex >= buttons.length) {
            this.selectionIndex = this.mode === "radio" ? 0 : -1;
        }
        if (this.selectionIndex >= 0) {
            this.selectedButton = buttons[this.selectionIndex];
            this.selectedButton.selected = true;
        }
    }
    getButtons() {
        return this.getChildrenArray().filter(child => child instanceof Button_1.default);
    }
};
__decorate([
    CustomElement_1.property({ type: String })
], ButtonGroup.prototype, "mode", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], ButtonGroup.prototype, "selectionIndex", void 0);
ButtonGroup = __decorate([
    CustomElement_1.customElement("ff-button-group")
], ButtonGroup);
exports.default = ButtonGroup;


/***/ }),

/***/ "../../libs/ff-ui/source/ColorEdit.ts":
/*!********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-ui/source/ColorEdit.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const math_1 = __webpack_require__(/*! @ff/core/math */ "../../libs/ff-core/source/math.ts");
const Color_1 = __webpack_require__(/*! @ff/core/Color */ "../../libs/ff-core/source/Color.ts");
exports.Color = Color_1.default;
__webpack_require__(/*! ./LineEdit */ "../../libs/ff-ui/source/LineEdit.ts");
const LinearSlider_1 = __webpack_require__(/*! ./LinearSlider */ "../../libs/ff-ui/source/LinearSlider.ts");
const VectorSlider_1 = __webpack_require__(/*! ./VectorSlider */ "../../libs/ff-ui/source/VectorSlider.ts");
const CustomElement_1 = __webpack_require__(/*! ./CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
////////////////////////////////////////////////////////////////////////////////
const _hueColor = new Color_1.default();
let ColorEdit = class ColorEdit extends CustomElement_1.default {
    constructor() {
        super();
        this.color = new Color_1.default();
        this.alpha = false;
        this.numeric = false;
        this.onLumSatChange = this.onLumSatChange.bind(this);
        this.onHueChange = this.onHueChange.bind(this);
        this.onAlphaChange = this.onAlphaChange.bind(this);
        this.addEventListener("click", e => e.stopPropagation());
        this._hsv = new Color_1.Vector3();
        this._lumSatSlider = new VectorSlider_1.default().on("change", this.onLumSatChange);
        this._hueSlider = new LinearSlider_1.default().addClass("ff-hue-slider").on("change", this.onHueChange);
        this._hueSlider.direction = "vertical";
    }
    firstConnected() {
        this.classList.add("ff-flex-column", "ff-control", "ff-color-edit");
    }
    update(changedProperties) {
        if (changedProperties.has("color")) {
            this.color.toHSV(this._hsv);
        }
        if (changedProperties.has("alpha")) {
            if (this.alpha && !this._alphaSlider) {
                this._alphaSlider = new LinearSlider_1.default().addClass("ff-alpha-slider").on("change", this.onAlphaChange);
                this._alphaSlider.direction = "vertical";
            }
            else if (!this.alpha && this._alphaSlider) {
                this._alphaSlider.remove();
            }
        }
        super.update(changedProperties);
    }
    render() {
        let numericControls = null;
        if (this.numeric) {
            const color = this.color;
            const hex = color.toString(false).substr(1);
            const alphaControl = this.alpha ? CustomElement_1.html `
                <div class="ff-text">A</div><ff-line-edit name="alphaByte" text=${color.alphaByte} align="center" @change=${this.onNumericEdit}></ff-line-edit>
            ` : null;
            numericControls = CustomElement_1.html `<div class="ff-flex-row ff-numeric-controls">
                <div class="ff-text">R</div><ff-line-edit name="redByte" text=${color.redByte} align="center" @change=${this.onNumericEdit}></ff-line-edit>
                <div class="ff-text">G</div><ff-line-edit name="greenByte" text=${color.greenByte} align="center" @change=${this.onNumericEdit}></ff-line-edit>
                <div class="ff-text">B</div><ff-line-edit name="blueByte" text=${color.blueByte} align="center" @change=${this.onNumericEdit}></ff-line-edit>
                ${alphaControl}
                <div class="ff-text">#</div><ff-line-edit name="string" text=${hex} class="ff-wide" align="center" @change=${this.onNumericEdit}></ff-line-edit>
            </div>`;
        }
        return CustomElement_1.html `<div class="ff-flex-row ff-slider-controls">
                ${this._lumSatSlider}${this._hueSlider}${this._alphaSlider}
            </div>${numericControls}`;
    }
    updated() {
        this._hueSlider.value = 1 - this._hsv.x / 360;
        const hue = _hueColor.setHSV(this._hsv.x).toString(false);
        const slGrad = `linear-gradient(to bottom, transparent, black), linear-gradient(to right, white, ${hue})`;
        this._lumSatSlider.style.backgroundImage = slGrad;
        this._lumSatSlider.setXY(this._hsv.y, this._hsv.z);
        if (this.alpha) {
            const color = this.color.toString(/* includeAlpha */ false);
            const fg = getComputedStyle(this._alphaSlider).color;
            const alphaGrad = `linear-gradient(to top, transparent, ${color}), repeating-linear-gradient(-45deg, transparent, transparent 8px, ${fg} 8px, ${fg} 16px)`;
            this._alphaSlider.style.backgroundImage = alphaGrad;
            this._alphaSlider.value = this.color.alpha;
        }
    }
    onLumSatChange(event) {
        event.stopPropagation();
        const value = event.detail.value;
        this._hsv.y = value.x;
        this._hsv.z = value.y;
        this.color.setHSV(this._hsv);
        this.requestUpdate();
        this.emitChangeEvent(event.detail.isDragging);
    }
    onHueChange(event) {
        event.stopPropagation();
        this._hsv.x = (1 - event.target.value) * 360;
        this.color.setHSV(this._hsv);
        this.requestUpdate();
        this.emitChangeEvent(event.detail.isDragging);
    }
    onAlphaChange(event) {
        event.stopPropagation();
        this.color.alpha = event.target.value;
        this.requestUpdate();
        this.emitChangeEvent(event.detail.isDragging);
    }
    onNumericEdit(event) {
        event.stopPropagation();
        const name = event.target.name;
        if (name === "string") {
            this.color.setString(event.detail.text, 1, false);
        }
        else {
            let value = parseInt(event.detail.text);
            if (!isFinite(value)) {
                return;
            }
            this.color[name] = math_1.default.limit(value, 0, 255);
        }
        this.color.toHSV(this._hsv);
        this.requestUpdate();
        this.emitChangeEvent(event.detail.isEditing);
    }
    emitChangeEvent(isDragging) {
        this.dispatchEvent(new CustomEvent("change", {
            detail: {
                color: this.color,
                isDragging
            },
            bubbles: true
        }));
    }
};
__decorate([
    CustomElement_1.property({ attribute: false })
], ColorEdit.prototype, "color", void 0);
__decorate([
    CustomElement_1.property({ type: Boolean })
], ColorEdit.prototype, "alpha", void 0);
__decorate([
    CustomElement_1.property({ type: Boolean })
], ColorEdit.prototype, "numeric", void 0);
ColorEdit = __decorate([
    CustomElement_1.customElement("ff-color-edit")
], ColorEdit);
exports.default = ColorEdit;


/***/ }),

/***/ "../../libs/ff-ui/source/CustomElement.ts":
/*!************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-ui/source/CustomElement.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CustomElement_1;
Object.defineProperty(exports, "__esModule", { value: true });
const lit_element_1 = __webpack_require__(/*! lit-element */ "../../node_modules/lit-element/lit-element.js");
////////////////////////////////////////////////////////////////////////////////
var lit_element_2 = __webpack_require__(/*! lit-element */ "../../node_modules/lit-element/lit-element.js");
exports.property = lit_element_2.property;
var lit_html_1 = __webpack_require__(/*! lit-html */ "../../node_modules/lit-html/lit-html.js");
exports.html = lit_html_1.html;
exports.svg = lit_html_1.svg;
exports.render = lit_html_1.render;
exports.TemplateResult = lit_html_1.TemplateResult;
var repeat_1 = __webpack_require__(/*! lit-html/directives/repeat */ "../../node_modules/lit-html/directives/repeat.js");
exports.repeat = repeat_1.repeat;
let CustomElement = CustomElement_1 = class CustomElement extends lit_element_1.LitElement {
    constructor() {
        super(...arguments);
        this._isFirstConnected = false;
    }
    static setStyle(element, style) {
        Object.assign(element.style, style);
    }
    static setAttribs(element, attribs) {
        for (let name in attribs) {
            element.setAttribute(name, attribs[name]);
        }
    }
    get shady() {
        return this.constructor.shady;
    }
    appendTo(parent) {
        parent.appendChild(this);
        return this;
    }
    removeChildren() {
        while (this.firstChild) {
            this.removeChild(this.firstChild);
        }
    }
    getChildrenArray() {
        return Array.from(this.children);
    }
    appendElement(tagOrType, style) {
        return this.createElement(tagOrType, style, this);
    }
    createElement(tagOrType, style, parent) {
        let element;
        if (typeof tagOrType === "string") {
            element = document.createElement(tagOrType);
        }
        else if (tagOrType instanceof HTMLElement) {
            element = tagOrType;
        }
        else {
            element = new tagOrType();
        }
        if (style) {
            Object.assign(element.style, style);
        }
        if (parent) {
            parent.appendChild(element);
        }
        return element;
    }
    setStyle(style) {
        CustomElement_1.setStyle(this, style);
        return this;
    }
    setAttribute(name, value) {
        super.setAttribute(name, value);
        return this;
    }
    setAttributes(attribs) {
        CustomElement_1.setAttribs(this, attribs);
        return this;
    }
    addClass(...classes) {
        classes.forEach(klass => this.classList.add(klass));
        return this;
    }
    removeClass(...classes) {
        classes.forEach(klass => this.classList.remove(klass));
        return this;
    }
    setClass(name, state) {
        if (state) {
            this.classList.add(name);
        }
        else {
            this.classList.remove(name);
        }
        return this;
    }
    hasFocus() {
        return document.activeElement === this;
    }
    on(type, listener, options) {
        this.addEventListener(type, listener, options);
        return this;
    }
    off(type, listener, options) {
        this.removeEventListener(type, listener, options);
        return this;
    }
    connectedCallback() {
        if (!this._isFirstConnected) {
            this._isFirstConnected = true;
            this.firstConnected();
        }
        this.connected();
        super.connectedCallback();
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.disconnected();
    }
    createRenderRoot() {
        return this.shady ? super.createRenderRoot() : this;
    }
    firstConnected() {
    }
    connected() {
    }
    disconnected() {
    }
    onUpdate() {
        this.requestUpdate();
    }
};
CustomElement.tagName = "ff-custom-element";
CustomElement.shady = false;
CustomElement = CustomElement_1 = __decorate([
    customElement("ff-custom-element")
], CustomElement);
exports.default = CustomElement;
function customElement(tagName) {
    return (constructor) => {
        constructor.tagName = tagName;
        customElements.define(constructor.tagName, constructor);
        return constructor;
    };
}
exports.customElement = customElement;


/***/ }),

/***/ "../../libs/ff-ui/source/DragHelper.ts":
/*!*********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-ui/source/DragHelper.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
class DragHelper {
    constructor(target) {
        this.isEnabled = true;
        this._isDragging = false;
        this._startX = 0;
        this._startY = 0;
        this._lastX = 0;
        this._lastY = 0;
        this.target = target;
        this.onPointerDown = this.onPointerDown.bind(this);
        this.onPointerMove = this.onPointerMove.bind(this);
        this.onPointerUp = this.onPointerUp.bind(this);
        target.addEventListener("pointerdown", this.onPointerDown);
        target.addEventListener("pointermove", this.onPointerMove);
        target.addEventListener("pointerup", this.onPointerUp);
        target.addEventListener("pointercancel", this.onPointerUp);
    }
    get isDragging() {
        return this._isDragging;
    }
    get startX() {
        return this._startX;
    }
    get startY() {
        return this._startY;
    }
    onPointerDown(event) {
        if (event.isPrimary && this.isEnabled) {
            this._isDragging = true;
            this._startX = this._lastX = event.clientX;
            this._startY = this._lastY = event.clientY;
            this.target.setPointerCapture(event.pointerId);
            this.target.dragStart(event);
        }
        event.stopPropagation();
        event.preventDefault();
    }
    onPointerMove(event) {
        if (event.isPrimary && this._isDragging) {
            const dx = event.clientX - this._lastX;
            this._lastX = event.clientX;
            const dy = event.clientY - this._lastY;
            this._lastY = event.clientY;
            this.target.dragMove(event, dx, dy);
        }
        event.stopPropagation();
        event.preventDefault();
    }
    onPointerUp(event) {
        if (this._isDragging && event.isPrimary) {
            this.target.dragEnd(event);
            this.target.releasePointerCapture(event.pointerId);
            this._isDragging = false;
        }
        event.stopPropagation();
        event.preventDefault();
    }
}
exports.default = DragHelper;


/***/ }),

/***/ "../../libs/ff-ui/source/Icon.ts":
/*!***************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-ui/source/Icon.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Icon_1;
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! ./CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
exports.html = CustomElement_1.html;
let Icon = Icon_1 = class Icon extends CustomElement_1.default {
    constructor(name) {
        super();
        this.template = null;
        this.name = name || "";
    }
    static add(name, template) {
        if (Icon_1.templates[name]) {
            throw new Error(`icon already registered: '${name}'`);
        }
        Icon_1.templates[name] = template;
    }
    static getTemplateNames() {
        return Object.keys(Icon_1.templates);
    }
    firstConnected() {
        this.classList.add("ff-icon");
    }
    render() {
        if (this.name) {
            const template = this.constructor.templates[this.name];
            if (!template) {
                console.warn(`icon not found: '${this.name}'`);
            }
            return template;
        }
        if (this.template) {
            return this.template;
        }
        return CustomElement_1.html `[icon undefined]`;
    }
};
Icon.templates = {};
__decorate([
    CustomElement_1.property({ attribute: false })
], Icon.prototype, "template", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], Icon.prototype, "name", void 0);
Icon = Icon_1 = __decorate([
    CustomElement_1.customElement("ff-icon")
], Icon);
exports.default = Icon;
////////////////////////////////////////////////////////////////////////////////
// PREDEFINED ICONS
Icon.add("empty", CustomElement_1.html ``);
Icon.add("check", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg>`);
Icon.add("close", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 352 512"><path d="M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z"/></svg>`);
Icon.add("grip", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M149.333 56v80c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24h101.333c13.255 0 24 10.745 24 24zm181.334 240v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm32-240v80c0 13.255 10.745 24 24 24H488c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24zm-32 80V56c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm-205.334 56H24c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24zM0 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm386.667-56H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zm0 160H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zM181.333 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24z"/></svg>`);
Icon.add("up", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M34.9 289.5l-22.2-22.2c-9.4-9.4-9.4-24.6 0-33.9L207 39c9.4-9.4 24.6-9.4 33.9 0l194.3 194.3c9.4 9.4 9.4 24.6 0 33.9L413 289.4c-9.5 9.5-25 9.3-34.3-.4L264 168.6V456c0 13.3-10.7 24-24 24h-32c-13.3 0-24-10.7-24-24V168.6L69.2 289.1c-9.3 9.8-24.8 10-34.3.4z"/></svg>`);
Icon.add("down", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M413.1 222.5l22.2 22.2c9.4 9.4 9.4 24.6 0 33.9L241 473c-9.4 9.4-24.6 9.4-33.9 0L12.7 278.6c-9.4-9.4-9.4-24.6 0-33.9l22.2-22.2c9.5-9.5 25-9.3 34.3.4L184 343.4V56c0-13.3 10.7-24 24-24h32c13.3 0 24 10.7 24 24v287.4l114.8-120.5c9.3-9.8 24.8-10 34.3-.4z"/></svg>`);
Icon.add("caret-up", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M288.662 352H31.338c-17.818 0-26.741-21.543-14.142-34.142l128.662-128.662c7.81-7.81 20.474-7.81 28.284 0l128.662 128.662c12.6 12.599 3.676 34.142-14.142 34.142z"/></svg>`);
Icon.add("caret-down", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"/></svg>`);
Icon.add("folder", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M464 128H272l-64-64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V176c0-26.51-21.49-48-48-48z"/></svg>`);
Icon.add("file", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48z"/></svg>`);
Icon.add("info", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/></svg>`);
Icon.add("warning", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/></svg>`);
Icon.add("error", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"/></svg>`);
Icon.add("prompt", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z"/></svg>`);


/***/ }),

/***/ "../../libs/ff-ui/source/LineEdit.ts":
/*!*******************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-ui/source/LineEdit.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! ./CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
/**
 * Custom element displaying a single line text edit.
 *
 * ### Events
 * - *"change"* - [[ILineEditChangeEvent]] emitted when the control's text is edited.
 */
let LineEdit = class LineEdit extends CustomElement_1.default {
    constructor() {
        super(...arguments);
        /** Optional name to identify the button. */
        this.name = "";
        /** Optional index to identify the button. */
        this.index = 0;
        /** Text to be edited in the control. */
        this.text = "";
        /** Placeholder text to display if no other text is present. */
        this.placeholder = "";
        this.align = "left";
        this.initialValue = "";
        this.requestFocus = false;
    }
    get inputElement() {
        return this.getElementsByTagName("input").item(0);
    }
    focus() {
        this.requestFocus = true;
        this.performUpdate();
    }
    hasFocus() {
        return this.inputElement === document.activeElement;
    }
    firstConnected() {
        this.classList.add("ff-control", "ff-line-edit");
    }
    shouldUpdate(changedProperties) {
        // prevent rendering during editing
        if (this.hasFocus()) {
            return false;
        }
        return super.shouldUpdate(changedProperties);
    }
    render() {
        return CustomElement_1.html `<input
            type="text" .value=${this.text} placeholder=${this.placeholder}
            @keydown=${this.onKeyDown} @change=${this.onChange} @input=${this.onInput}
            @focus=${this.onFocus} @blur=${this.onBlur}
            style="box-sizing: border-box; width:100%; text-align: ${this.align};">`;
    }
    updated() {
        if (this.requestFocus) {
            this.requestFocus = false;
            this.inputElement.focus();
        }
    }
    onKeyDown(event) {
        const target = event.target;
        if (event.key === "Enter") {
            this.commit(target);
            target.blur();
        }
        else if (event.key === "Escape") {
            this.revert(target);
            target.blur();
        }
    }
    onChange(event) {
        event.stopPropagation();
        event.preventDefault();
        this.text = event.target.value;
        this.dispatchChangeEvent(this.text, false);
    }
    onInput(event) {
        event.stopPropagation();
        event.preventDefault();
        this.text = event.target.value;
        this.dispatchChangeEvent(this.text, true);
    }
    onFocus(event) {
        this.initialValue = event.target.value;
        event.target.select();
    }
    onBlur(event) {
        this.commit(event.target);
        this.requestUpdate();
    }
    revert(element) {
        element.value = this.initialValue;
        this.dispatchChangeEvent(element.value, false);
    }
    commit(element) {
        this.initialValue = element.value;
        this.dispatchChangeEvent(element.value, false);
    }
    dispatchChangeEvent(text, isEditing) {
        this.dispatchEvent(new CustomEvent("change", {
            detail: {
                text,
                isEditing
            }
        }));
    }
};
__decorate([
    CustomElement_1.property({ type: String })
], LineEdit.prototype, "name", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], LineEdit.prototype, "index", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], LineEdit.prototype, "text", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], LineEdit.prototype, "placeholder", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], LineEdit.prototype, "align", void 0);
LineEdit = __decorate([
    CustomElement_1.customElement("ff-line-edit")
], LineEdit);
exports.default = LineEdit;


/***/ }),

/***/ "../../libs/ff-ui/source/LinearSlider.ts":
/*!***********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-ui/source/LinearSlider.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const math_1 = __webpack_require__(/*! @ff/core/math */ "../../libs/ff-core/source/math.ts");
const CustomElement_1 = __webpack_require__(/*! ./CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
const DragHelper_1 = __webpack_require__(/*! ./DragHelper */ "../../libs/ff-ui/source/DragHelper.ts");
let LinearSlider = class LinearSlider extends CustomElement_1.default {
    constructor() {
        super();
        this.direction = "horizontal";
        this.value = 0;
        this._isVertical = false;
        this._offsetX = 0;
        this._offsetY = 0;
        this._knob = new CustomElement_1.default()
            .addClass("ff-knob")
            .setStyle({ display: "block", position: "relative " });
        new DragHelper_1.default(this);
    }
    dragStart(event) {
        const knob = this._knob;
        const track = this.getBoundingClientRect();
        if (event.target === this._knob) {
            this._offsetX = event.clientX - knob.offsetLeft + (knob.clientWidth - knob.offsetWidth) * 0.5;
            this._offsetY = event.clientY - knob.offsetTop + (knob.clientHeight - knob.offsetHeight) * 0.5;
        }
        else {
            this._offsetX = track.left + knob.clientWidth * 0.8;
            this._offsetY = track.top + knob.clientHeight * 0.8;
        }
        this.dragMove(event);
    }
    dragMove(event) {
        const knob = this._knob;
        const px = event.clientX - this._offsetX;
        const py = event.clientY - this._offsetY;
        let v = this._isVertical
            ? 1 - py / (this.clientHeight - knob.clientHeight)
            : px / (this.clientWidth - knob.clientWidth);
        v = math_1.default.limit(v, 0, 1);
        if (v !== this.value) {
            this.value = v;
            this.emitChangeEvent(true);
        }
    }
    dragEnd() {
        this.emitChangeEvent(false);
    }
    firstConnected() {
        this.setStyle({
            position: "relative",
            touchAction: "none"
        });
        this.setAttribute("touch-action", "none");
        this.setAttribute("tabindex", "0");
        this.classList.add("ff-control", "ff-linear-slider");
        this.appendChild(this._knob);
    }
    update(changedProperties) {
        if (changedProperties.has("direction")) {
            this._isVertical = this.direction === "vertical";
            this.setClass("ff-horizontal", !this._isVertical);
            this.setClass("ff-vertical", this._isVertical);
        }
        if (changedProperties.has("value")) {
            const value = math_1.default.limit(this.value, 0, 1);
            const x = this._isVertical ? 0 : value * 100;
            const y = this._isVertical ? (1 - value) * 100 : 0;
            this._knob.style.left = `${x.toFixed(3)}%`;
            this._knob.style.top = `${y.toFixed(3)}%`;
        }
        super.update(changedProperties);
    }
    emitChangeEvent(isDragging) {
        this.dispatchEvent(new CustomEvent("change", {
            detail: {
                value: this.value,
                isDragging
            },
            bubbles: true
        }));
    }
};
__decorate([
    CustomElement_1.property({ type: String })
], LinearSlider.prototype, "direction", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], LinearSlider.prototype, "value", void 0);
LinearSlider = __decorate([
    CustomElement_1.customElement("ff-linear-slider")
], LinearSlider);
exports.default = LinearSlider;


/***/ }),

/***/ "../../libs/ff-ui/source/Notification.ts":
/*!***********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-ui/source/Notification.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Notification_1;
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! ./Icon */ "../../libs/ff-ui/source/Icon.ts");
const CustomElement_1 = __webpack_require__(/*! ./CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
const _levelClasses = {
    "info": "ff-info",
    "success": "ff-success",
    "warning": "ff-warning",
    "error": "ff-error"
};
const _levelIcons = {
    "info": "info",
    "success": "check",
    "warning": "warning",
    "error": "error"
};
const _levelTimeouts = {
    "info": 2000,
    "success": 2000,
    "warning": 5000,
    "error": 0
};
let Notification = Notification_1 = class Notification extends CustomElement_1.default {
    constructor(message, level, timeout) {
        super();
        this._handler = 0;
        this.on("transitionend", this.remove.bind(this));
        this.message = message || "<messge>";
        this.level = level || "info";
        this.timeout = timeout !== undefined ? timeout : _levelTimeouts[this.level];
        const stack = document.getElementById(Notification_1.stackId);
        if (stack) {
            stack.appendChild(this);
        }
        else {
            console.warn(`element '#${Notification_1.stackId}' not found`);
        }
    }
    static show(message, level, timeout) {
        new Notification_1(message, level, timeout);
    }
    close() {
        if (this._handler > 0) {
            window.clearTimeout(this._handler);
            this._handler = 0;
        }
        this.classList.add("ff-out");
    }
    firstUpdated() {
        this.classList.add("ff-notification", _levelClasses[this.level]);
        if (this.timeout > 0) {
            this._handler = window.setTimeout(() => this.close(), this.timeout);
        }
    }
    render() {
        const icon = _levelIcons[this.level];
        return CustomElement_1.html `<ff-icon name=${icon}></ff-icon>
            <div class="ff-text">${this.message}</div>
            <ff-button inline icon="close" @click=${this.onClose}>`;
    }
    onClose(event) {
        event.stopPropagation();
        this.close();
    }
};
Notification.stackId = "ff-notification-stack";
__decorate([
    CustomElement_1.property({ type: String })
], Notification.prototype, "message", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], Notification.prototype, "level", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], Notification.prototype, "timeout", void 0);
Notification = Notification_1 = __decorate([
    CustomElement_1.customElement("ff-notification")
], Notification);
exports.default = Notification;
exports.info = (message, timeout) => new Notification(message, "info", timeout);
exports.success = (message, timeout) => new Notification(message, "success", timeout);
exports.warning = (message, timeout) => new Notification(message, "warning", timeout);
exports.error = (message, timeout) => new Notification(message, "error", timeout);


/***/ }),

/***/ "../../libs/ff-ui/source/Popup.ts":
/*!****************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-ui/source/Popup.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! ./CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
exports.customElement = CustomElement_1.customElement;
exports.property = CustomElement_1.property;
exports.html = CustomElement_1.html;
let Popup = class Popup extends CustomElement_1.default {
    constructor() {
        super();
        this.anchor = null;
        this.portal = null;
        this.position = undefined;
        this.align = undefined;
        this.justify = undefined;
        this.positionX = 0;
        this.positionY = 0;
        this.offsetX = 0;
        this.offsetY = 0;
        this.keepVisible = false;
        this.modal = false;
        this._modalPlane = null;
        this.onResize = this.onResize.bind(this);
        this.onCaptureEvent = this.onCaptureEvent.bind(this);
        this.onEatEvent = this.onEatEvent.bind(this);
    }
    close() {
        this.dispatchEvent(new CustomEvent("close"));
    }
    connected() {
        this.calculatePosition();
        window.addEventListener("resize", this.onResize);
        if (this.modal) {
            const modalPlane = this._modalPlane = this.createElement("div");
            modalPlane.classList.add("ff-modal-plane");
            modalPlane.addEventListener("mousedown", this.onEatEvent);
            modalPlane.addEventListener("contextmenu", this.onEatEvent);
            modalPlane.addEventListener("pointerdown", this.onEatEvent);
            this.parentElement.appendChild(modalPlane);
            setTimeout(() => modalPlane.classList.add("ff-transition"));
        }
        else {
            document.addEventListener("mousedown", this.onCaptureEvent, { capture: true, passive: true });
        }
    }
    disconnected() {
        window.removeEventListener("resize", this.onResize);
        if (this._modalPlane) {
            this._modalPlane.remove();
            this._modalPlane = null;
        }
        else {
            document.removeEventListener("mousedown", this.onCaptureEvent);
        }
    }
    firstConnected() {
        super.firstConnected();
        this.setStyle({
            position: "fixed",
            zIndex: "1000"
        });
        this.classList.add("ff-popup");
    }
    updated() {
        if (this.isConnected) {
            this.calculatePosition();
        }
    }
    calculatePosition() {
        let anchorRect, portalRect;
        const thisRect = this.getBoundingClientRect();
        if (this.portal) {
            portalRect = this.portal.getBoundingClientRect();
        }
        else {
            portalRect = {
                left: 0,
                top: 0,
                right: window.innerWidth,
                bottom: window.innerHeight,
                width: window.innerWidth,
                height: window.innerHeight
            };
        }
        let position;
        if (this.position === "center") {
            position = this.center(thisRect, portalRect);
        }
        else if (this.position === "anchor") {
            const anchor = this.anchor || this.parentElement;
            if (anchor) {
                anchorRect = anchor.getBoundingClientRect();
                position = this.positionToAnchor(thisRect, anchorRect, portalRect);
            }
        }
        else {
            position = { x: this.positionX, y: this.positionY };
        }
        if (this.keepVisible && this.position !== "center") {
            position = this.keepElementVisible(position, thisRect, portalRect);
        }
        this.style.left = Math.round(position.x) + "px";
        this.style.top = Math.round(position.y) + "px";
    }
    center(thisRect, portalRect) {
        return {
            x: Math.round((portalRect.width - thisRect.width) * 0.5),
            y: Math.round((portalRect.height - thisRect.height) * 0.5)
        };
    }
    positionToAnchor(thisRect, anchorRect, portalRect) {
        const align = this.align;
        const justify = this.justify;
        const offsetX = this.offsetX;
        const offsetY = this.offsetY;
        const position = { x: 0, y: 0 };
        switch (align) {
            case "start":
                position.x = justify !== "start" && justify !== "end"
                    ? anchorRect.left - thisRect.width - offsetX
                    : anchorRect.left;
                break;
            case "end":
                position.x = justify !== "start" && justify !== "end"
                    ? anchorRect.right + offsetX
                    : anchorRect.right - thisRect.width;
                break;
            case "fixed":
                position.x = this.positionX;
                break;
            default:
                position.x = anchorRect.left + (anchorRect.width - thisRect.width) * 0.5;
                break;
        }
        switch (justify) {
            case "start":
                position.y = anchorRect.top - thisRect.height - offsetY;
                break;
            case "end":
                position.y = anchorRect.bottom + offsetY;
                break;
            case "fixed":
                position.y = this.positionY;
                break;
            default:
                position.y = anchorRect.top + (anchorRect.height - thisRect.height) * 0.5;
                break;
        }
        position.x += this.offsetX;
        position.y += this.offsetY;
        return position;
    }
    keepElementVisible(position, thisRect, portalRect) {
        const offsetX = this.offsetX;
        const offsetY = this.offsetY;
        if (thisRect.width > portalRect.width) {
            position.x = (portalRect.width - thisRect.width) * 0.5;
        }
        else if (position.x < portalRect.left + offsetX) {
            position.x = portalRect.left + offsetX;
        }
        else if (position.x + thisRect.width + offsetX > portalRect.right) {
            position.x = portalRect.right - thisRect.width - offsetX;
        }
        if (thisRect.height > portalRect.height) {
            position.y = (portalRect.height - thisRect.height) * 0.5;
        }
        else if (position.y < portalRect.top + offsetY) {
            position.y = portalRect.top + offsetY;
        }
        else if (position.y + thisRect.height + offsetY > portalRect.bottom) {
            position.y = portalRect.bottom - thisRect.height - offsetY;
        }
        return position;
    }
    onResize() {
        this.calculatePosition();
    }
    onCaptureEvent(event) {
        if (event.target instanceof Node && this.contains(event.target)) {
            return;
        }
        this.close();
    }
    onEatEvent(event) {
        console.log("Popup.onEatEvent");
        event.stopPropagation();
        event.preventDefault();
    }
};
__decorate([
    CustomElement_1.property({ attribute: false })
], Popup.prototype, "anchor", void 0);
__decorate([
    CustomElement_1.property({ attribute: false })
], Popup.prototype, "portal", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], Popup.prototype, "position", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], Popup.prototype, "align", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], Popup.prototype, "justify", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], Popup.prototype, "positionX", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], Popup.prototype, "positionY", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], Popup.prototype, "offsetX", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], Popup.prototype, "offsetY", void 0);
__decorate([
    CustomElement_1.property({ type: Boolean })
], Popup.prototype, "keepVisible", void 0);
__decorate([
    CustomElement_1.property({ type: Boolean })
], Popup.prototype, "modal", void 0);
Popup = __decorate([
    CustomElement_1.customElement("ff-popup")
], Popup);
exports.default = Popup;


/***/ }),

/***/ "../../libs/ff-ui/source/QuadSplitter.ts":
/*!***********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-ui/source/QuadSplitter.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! ./Splitter */ "../../libs/ff-ui/source/Splitter.ts");
const CustomElement_1 = __webpack_require__(/*! ./CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
////////////////////////////////////////////////////////////////////////////////
var EQuadViewLayout;
(function (EQuadViewLayout) {
    EQuadViewLayout[EQuadViewLayout["Single"] = 0] = "Single";
    EQuadViewLayout[EQuadViewLayout["HorizontalSplit"] = 1] = "HorizontalSplit";
    EQuadViewLayout[EQuadViewLayout["VerticalSplit"] = 2] = "VerticalSplit";
    EQuadViewLayout[EQuadViewLayout["Quad"] = 3] = "Quad";
})(EQuadViewLayout = exports.EQuadViewLayout || (exports.EQuadViewLayout = {}));
let QuadSplitter = class QuadSplitter extends CustomElement_1.default {
    constructor() {
        super(...arguments);
        this.layout = EQuadViewLayout.Single;
        this.horizontalPosition = 0.5;
        this.verticalPosition = 0.5;
    }
    firstConnected() {
        this.classList.add("ff-quad-splitter");
    }
    render() {
        const layout = this.layout;
        if (layout === EQuadViewLayout.Single) {
            return CustomElement_1.html ``;
        }
        const elements = [];
        if (layout === EQuadViewLayout.HorizontalSplit || layout === EQuadViewLayout.Quad) {
            elements.push(CustomElement_1.html `
                <div class="ff-horizontal" style="position:absolute; top:0; bottom:0; left:0; right:0; display:flex;">
                    <div class="ff-left" style="flex:1 1;"></div>
                    <ff-splitter direction="horizontal" position=${this.horizontalPosition} @ff-splitter-change=${this.onSplitterChange}></ff-splitter>
                    <div style="flex:1 1;"></div>
                </div>
            `);
        }
        if (layout === EQuadViewLayout.VerticalSplit || layout === EQuadViewLayout.Quad) {
            elements.push(CustomElement_1.html `
                <div class="ff-vertical" style="position:absolute; top:0; bottom:0; left:0; right:0; display:flex; flex-direction: column">
                    <div class="ff-top" style="flex:1 1;"></div>
                    <ff-splitter direction="vertical" position=${this.verticalPosition} @ff-splitter-change=${this.onSplitterChange}></ff-splitter>
                    <div style="flex:1 1;"></div>
                </div>
            `);
        }
        return CustomElement_1.html `${elements}`;
    }
    onSplitterChange(event) {
        if (event.detail.direction === "horizontal") {
            this.horizontalPosition = event.detail.position;
        }
        else {
            this.verticalPosition = event.detail.position;
        }
        if (this.onChange) {
            this.onChange({
                layout: this.layout,
                horizontalSplit: this.horizontalPosition,
                verticalSplit: this.verticalPosition,
                isDragging: event.detail.isDragging
            });
        }
    }
};
__decorate([
    CustomElement_1.property({ attribute: false })
], QuadSplitter.prototype, "layout", void 0);
__decorate([
    CustomElement_1.property({ attribute: false })
], QuadSplitter.prototype, "horizontalPosition", void 0);
__decorate([
    CustomElement_1.property({ attribute: false })
], QuadSplitter.prototype, "verticalPosition", void 0);
QuadSplitter = __decorate([
    CustomElement_1.customElement("ff-quad-splitter")
], QuadSplitter);
exports.default = QuadSplitter;


/***/ }),

/***/ "../../libs/ff-ui/source/Splitter.ts":
/*!*******************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-ui/source/Splitter.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Splitter_1;
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! ./CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
let Splitter = Splitter_1 = class Splitter extends CustomElement_1.default {
    constructor() {
        super();
        this.direction = "horizontal";
        this.width = 5;
        this.margin = 20;
        this.detached = false;
        this._isActive = false;
        this._offset = 0;
        this._position = 0;
        this.addEventListener("pointerdown", (e) => this.onPointerDown(e));
        this.addEventListener("pointermove", (e) => this.onPointerMove(e));
        this.addEventListener("pointerup", (e) => this.onPointerUpOrCancel(e));
        this.addEventListener("pointercancel", (e) => this.onPointerUpOrCancel(e));
    }
    get position() {
        return this._position;
    }
    isHorizontal() {
        return this.direction === "horizontal";
    }
    update(changedProperties) {
        super.update(changedProperties);
        const isHorizontal = this.isHorizontal();
        const width = this.width;
        this.setStyle({
            padding: isHorizontal ? `0 ${width}px` : `${width}px 0`,
            margin: isHorizontal ? `0 ${-width}px` : `${-width}px 0`,
            cursor: isHorizontal ? "col-resize" : "row-resize"
        });
    }
    firstUpdated() {
        this.classList.add("ff-splitter");
        this.setAttribute("touch-action", "none");
        this.setStyle({
            position: "relative",
            display: "block",
            zIndex: "1",
            touchAction: "none"
        });
    }
    onPointerDown(event) {
        if (event.isPrimary) {
            event.stopPropagation();
            event.preventDefault();
            this._isActive = true;
            this.setPointerCapture(event.pointerId);
            const rect = this.getBoundingClientRect();
            this._offset = this.isHorizontal()
                ? rect.left + rect.width * 0.5 - event.clientX
                : rect.top + rect.height * 0.5 - event.clientY;
        }
    }
    onPointerMove(event) {
        if (event.isPrimary && this._isActive) {
            event.stopPropagation();
            event.preventDefault();
            const parent = this.parentElement;
            if (!parent) {
                return;
            }
            const rect = parent.getBoundingClientRect();
            const isHorizontal = this.isHorizontal();
            const parentSize = isHorizontal ? rect.width : rect.height;
            let position = this._offset + (isHorizontal ? event.clientX - rect.left : event.clientY - rect.top);
            let relativePosition = position / parentSize;
            if (!this.detached) {
                const prevElement = this.previousElementSibling;
                const nextElement = this.nextElementSibling;
                if (prevElement instanceof HTMLElement && nextElement instanceof HTMLElement) {
                    const children = Array.from(parent.children);
                    let splitAreaStart = 0;
                    let splitAreaSize = parentSize;
                    let visited = false;
                    children.forEach(child => {
                        if (child instanceof Splitter_1) {
                            return;
                        }
                        if (child === prevElement || child === nextElement) {
                            visited = true;
                            return;
                        }
                        const childRect = child.getBoundingClientRect();
                        const childSize = isHorizontal ? childRect.width : childRect.height;
                        splitAreaSize -= childSize;
                        if (!visited) {
                            splitAreaStart += childSize;
                        }
                    });
                    const minSize = this.margin;
                    const maxSize = splitAreaSize - minSize;
                    position = (position - splitAreaStart);
                    position = position < minSize ? minSize : (position > maxSize ? maxSize : position);
                    const nextSize = (splitAreaSize - position) / parentSize;
                    relativePosition = position / parentSize;
                    prevElement.style.flexBasis = (relativePosition * 100).toFixed(3) + "%";
                    nextElement.style.flexBasis = (nextSize * 100).toFixed(3) + "%";
                    // send global resize event so components can adjust to new size
                    setTimeout(() => window.dispatchEvent(new CustomEvent("resize")), 0);
                }
            }
            this._position = relativePosition;
            this.dispatchEvent(new CustomEvent(Splitter_1.changeEvent, {
                detail: {
                    direction: this.direction,
                    position: this._position,
                    isDragging: true
                }
            }));
        }
    }
    onPointerUpOrCancel(event) {
        if (event.isPrimary) {
            event.stopPropagation();
            event.preventDefault();
            this._isActive = false;
            this.dispatchEvent(new CustomEvent(Splitter_1.changeEvent, {
                detail: {
                    direction: this.direction,
                    position: this._position,
                    isDragging: false
                }
            }));
        }
    }
};
Splitter.changeEvent = "ff-splitter-change";
__decorate([
    CustomElement_1.property({ type: String })
], Splitter.prototype, "direction", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], Splitter.prototype, "width", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], Splitter.prototype, "margin", void 0);
__decorate([
    CustomElement_1.property({ type: Boolean })
], Splitter.prototype, "detached", void 0);
Splitter = Splitter_1 = __decorate([
    CustomElement_1.customElement("ff-splitter")
], Splitter);
exports.default = Splitter;


/***/ }),

/***/ "../../libs/ff-ui/source/TextEdit.ts":
/*!*******************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-ui/source/TextEdit.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! ./CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
let TextEdit = class TextEdit extends CustomElement_1.default {
    constructor() {
        super(...arguments);
        /** Optional name to identify the button. */
        this.name = "";
        /** Optional index to identify the button. */
        this.index = 0;
        /** Text to be edited in the control. */
        this.text = "";
        /** Placeholder text to display if no other text is present. */
        this.placeholder = "";
        this.align = "left";
        this.initialValue = "";
    }
    get textArea() {
        return this.getElementsByTagName("textarea").item(0);
    }
    select() {
        const textArea = this.textArea;
        textArea && textArea.select();
    }
    focus() {
        const textArea = this.textArea;
        textArea && textArea.focus();
    }
    blur() {
        const textArea = this.textArea;
        textArea && textArea.blur();
    }
    hasFocus() {
        return this.textArea === document.activeElement;
    }
    firstConnected() {
        this.classList.add("ff-control", "ff-text-edit");
    }
    shouldUpdate(changedProperties) {
        // prevent rendering during editing
        if (this.hasFocus()) {
            return false;
        }
        return super.shouldUpdate(changedProperties);
    }
    render() {
        return CustomElement_1.html `<textarea
            .value=${this.text} placeholder=${this.placeholder}
            @keydown=${this.onKeyDown} @change=${this.onChange} @input=${this.onInput}
            @focus=${this.onFocus} @blur=${this.onBlur}
            style="text-align: ${this.align};"></textarea>`;
    }
    onKeyDown(event) {
        const target = event.target;
        if (event.key === "Escape") {
            this.revert(target);
            target.blur();
        }
    }
    onChange(event) {
        event.stopPropagation();
        event.preventDefault();
        this.text = event.target.value;
        this.dispatchChangeEvent(this.text, false);
    }
    onInput(event) {
        event.stopPropagation();
        event.preventDefault();
        this.text = event.target.value;
        this.dispatchChangeEvent(this.text, true);
    }
    onFocus(event) {
        this.initialValue = event.target.value;
    }
    onBlur(event) {
        this.commit(event.target);
        this.requestUpdate();
    }
    revert(element) {
        element.value = this.initialValue;
        this.dispatchChangeEvent(element.value, false);
    }
    commit(element) {
        this.initialValue = element.value;
        this.dispatchChangeEvent(element.value, false);
    }
    dispatchChangeEvent(text, isEditing) {
        this.dispatchEvent(new CustomEvent("change", {
            detail: {
                text,
                isEditing
            }
        }));
    }
};
__decorate([
    CustomElement_1.property({ type: String })
], TextEdit.prototype, "name", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], TextEdit.prototype, "index", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], TextEdit.prototype, "text", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], TextEdit.prototype, "placeholder", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], TextEdit.prototype, "align", void 0);
TextEdit = __decorate([
    CustomElement_1.customElement("ff-text-edit")
], TextEdit);
exports.default = TextEdit;


/***/ }),

/***/ "../../libs/ff-ui/source/VectorSlider.ts":
/*!***********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/libs/ff-ui/source/VectorSlider.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * FF Typescript Foundation Library
 * Copyright 2019 Ralph Wiedemeier, Frame Factory GmbH
 *
 * License: MIT
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const math_1 = __webpack_require__(/*! @ff/core/math */ "../../libs/ff-core/source/math.ts");
const Vector2_1 = __webpack_require__(/*! @ff/core/Vector2 */ "../../libs/ff-core/source/Vector2.ts");
const CustomElement_1 = __webpack_require__(/*! ./CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
const DragHelper_1 = __webpack_require__(/*! ./DragHelper */ "../../libs/ff-ui/source/DragHelper.ts");
let VectorSlider = class VectorSlider extends CustomElement_1.default {
    constructor() {
        super();
        this.value = new Vector2_1.default();
        this._offsetX = 0;
        this._offsetY = 0;
        this._knob = new CustomElement_1.default()
            .addClass("ff-knob")
            .setStyle({ display: "block", position: "relative " });
        new DragHelper_1.default(this);
    }
    setXY(x, y) {
        this.value.set(x, y);
        this.requestUpdate();
    }
    dragStart(event) {
        const knob = this._knob;
        const track = this.getBoundingClientRect();
        if (event.target === this._knob) {
            this._offsetX = event.clientX - knob.offsetLeft + (knob.clientWidth - knob.offsetWidth) * 0.5;
            this._offsetY = event.clientY - knob.offsetTop + (knob.clientHeight - knob.offsetHeight) * 0.5;
        }
        else {
            this._offsetX = track.left + knob.clientWidth * 0.8;
            this._offsetY = track.top + knob.clientHeight * 0.8;
        }
        this.dragMove(event);
    }
    dragMove(event) {
        const knob = this._knob;
        const px = event.clientX - this._offsetX;
        const py = event.clientY - this._offsetY;
        let x = px / (this.clientWidth - knob.clientWidth);
        x = math_1.default.limit(x, 0, 1);
        let y = 1 - py / (this.clientHeight - knob.clientHeight);
        y = math_1.default.limit(y, 0, 1);
        if (x !== this.value.x || y !== this.value.y) {
            this.value = this.value.set(x, y);
            this.emitChangeEvent(true);
        }
    }
    dragEnd() {
        this.emitChangeEvent(false);
    }
    firstConnected() {
        this.setStyle({
            position: "relative",
            touchAction: "none"
        });
        this.setAttribute("touch-action", "none");
        this.setAttribute("tabindex", "0");
        this.classList.add("ff-control", "ff-vector-slider");
        this.appendChild(this._knob);
    }
    update(changedProperties) {
        const x = this.value.x * 100;
        const y = (1 - this.value.y) * 100;
        this._knob.style.left = `${x.toFixed(3)}%`;
        this._knob.style.top = `${y.toFixed(3)}%`;
        super.update(changedProperties);
    }
    emitChangeEvent(isDragging) {
        this.dispatchEvent(new CustomEvent("change", {
            detail: {
                value: this.value,
                isDragging
            },
            bubbles: true
        }));
    }
};
__decorate([
    CustomElement_1.property({ attribute: false })
], VectorSlider.prototype, "value", void 0);
VectorSlider = __decorate([
    CustomElement_1.customElement("ff-vector-slider")
], VectorSlider);
exports.default = VectorSlider;


/***/ }),

/***/ "../../node_modules/ajv/lib/ajv.js":
/*!*****************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/ajv.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var compileSchema = __webpack_require__(/*! ./compile */ "../../node_modules/ajv/lib/compile/index.js")
  , resolve = __webpack_require__(/*! ./compile/resolve */ "../../node_modules/ajv/lib/compile/resolve.js")
  , Cache = __webpack_require__(/*! ./cache */ "../../node_modules/ajv/lib/cache.js")
  , SchemaObject = __webpack_require__(/*! ./compile/schema_obj */ "../../node_modules/ajv/lib/compile/schema_obj.js")
  , stableStringify = __webpack_require__(/*! fast-json-stable-stringify */ "../../node_modules/fast-json-stable-stringify/index.js")
  , formats = __webpack_require__(/*! ./compile/formats */ "../../node_modules/ajv/lib/compile/formats.js")
  , rules = __webpack_require__(/*! ./compile/rules */ "../../node_modules/ajv/lib/compile/rules.js")
  , $dataMetaSchema = __webpack_require__(/*! ./data */ "../../node_modules/ajv/lib/data.js")
  , util = __webpack_require__(/*! ./compile/util */ "../../node_modules/ajv/lib/compile/util.js");

module.exports = Ajv;

Ajv.prototype.validate = validate;
Ajv.prototype.compile = compile;
Ajv.prototype.addSchema = addSchema;
Ajv.prototype.addMetaSchema = addMetaSchema;
Ajv.prototype.validateSchema = validateSchema;
Ajv.prototype.getSchema = getSchema;
Ajv.prototype.removeSchema = removeSchema;
Ajv.prototype.addFormat = addFormat;
Ajv.prototype.errorsText = errorsText;

Ajv.prototype._addSchema = _addSchema;
Ajv.prototype._compile = _compile;

Ajv.prototype.compileAsync = __webpack_require__(/*! ./compile/async */ "../../node_modules/ajv/lib/compile/async.js");
var customKeyword = __webpack_require__(/*! ./keyword */ "../../node_modules/ajv/lib/keyword.js");
Ajv.prototype.addKeyword = customKeyword.add;
Ajv.prototype.getKeyword = customKeyword.get;
Ajv.prototype.removeKeyword = customKeyword.remove;
Ajv.prototype.validateKeyword = customKeyword.validate;

var errorClasses = __webpack_require__(/*! ./compile/error_classes */ "../../node_modules/ajv/lib/compile/error_classes.js");
Ajv.ValidationError = errorClasses.Validation;
Ajv.MissingRefError = errorClasses.MissingRef;
Ajv.$dataMetaSchema = $dataMetaSchema;

var META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';

var META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults' ];
var META_SUPPORT_DATA = ['/properties'];

/**
 * Creates validator instance.
 * Usage: `Ajv(opts)`
 * @param {Object} opts optional options
 * @return {Object} ajv instance
 */
function Ajv(opts) {
  if (!(this instanceof Ajv)) return new Ajv(opts);
  opts = this._opts = util.copy(opts) || {};
  setLogger(this);
  this._schemas = {};
  this._refs = {};
  this._fragments = {};
  this._formats = formats(opts.format);

  this._cache = opts.cache || new Cache;
  this._loadingSchemas = {};
  this._compilations = [];
  this.RULES = rules();
  this._getId = chooseGetId(opts);

  opts.loopRequired = opts.loopRequired || Infinity;
  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;
  if (opts.serialize === undefined) opts.serialize = stableStringify;
  this._metaOpts = getMetaSchemaOptions(this);

  if (opts.formats) addInitialFormats(this);
  if (opts.keywords) addInitialKeywords(this);
  addDefaultMetaSchema(this);
  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);
  if (opts.nullable) this.addKeyword('nullable', {metaSchema: {type: 'boolean'}});
  addInitialSchemas(this);
}



/**
 * Validate data using schema
 * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.
 * @this   Ajv
 * @param  {String|Object} schemaKeyRef key, ref or schema object
 * @param  {Any} data to be validated
 * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
 */
function validate(schemaKeyRef, data) {
  var v;
  if (typeof schemaKeyRef == 'string') {
    v = this.getSchema(schemaKeyRef);
    if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
  } else {
    var schemaObj = this._addSchema(schemaKeyRef);
    v = schemaObj.validate || this._compile(schemaObj);
  }

  var valid = v(data);
  if (v.$async !== true) this.errors = v.errors;
  return valid;
}


/**
 * Create validating function for passed schema.
 * @this   Ajv
 * @param  {Object} schema schema object
 * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
 * @return {Function} validating function
 */
function compile(schema, _meta) {
  var schemaObj = this._addSchema(schema, undefined, _meta);
  return schemaObj.validate || this._compile(schemaObj);
}


/**
 * Adds schema to the instance.
 * @this   Ajv
 * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
 * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
 * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
 * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
 * @return {Ajv} this for method chaining
 */
function addSchema(schema, key, _skipValidation, _meta) {
  if (Array.isArray(schema)){
    for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);
    return this;
  }
  var id = this._getId(schema);
  if (id !== undefined && typeof id != 'string')
    throw new Error('schema id must be string');
  key = resolve.normalizeId(key || id);
  checkUnique(this, key);
  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
  return this;
}


/**
 * Add schema that will be used to validate other schemas
 * options in META_IGNORE_OPTIONS are alway set to false
 * @this   Ajv
 * @param {Object} schema schema object
 * @param {String} key optional schema key
 * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
 * @return {Ajv} this for method chaining
 */
function addMetaSchema(schema, key, skipValidation) {
  this.addSchema(schema, key, skipValidation, true);
  return this;
}


/**
 * Validate schema
 * @this   Ajv
 * @param {Object} schema schema to validate
 * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
 * @return {Boolean} true if schema is valid
 */
function validateSchema(schema, throwOrLogError) {
  var $schema = schema.$schema;
  if ($schema !== undefined && typeof $schema != 'string')
    throw new Error('$schema must be a string');
  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);
  if (!$schema) {
    this.logger.warn('meta-schema not available');
    this.errors = null;
    return true;
  }
  var valid = this.validate($schema, schema);
  if (!valid && throwOrLogError) {
    var message = 'schema is invalid: ' + this.errorsText();
    if (this._opts.validateSchema == 'log') this.logger.error(message);
    else throw new Error(message);
  }
  return valid;
}


function defaultMeta(self) {
  var meta = self._opts.meta;
  self._opts.defaultMeta = typeof meta == 'object'
                            ? self._getId(meta) || meta
                            : self.getSchema(META_SCHEMA_ID)
                              ? META_SCHEMA_ID
                              : undefined;
  return self._opts.defaultMeta;
}


/**
 * Get compiled schema from the instance by `key` or `ref`.
 * @this   Ajv
 * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
 * @return {Function} schema validating function (with property `schema`).
 */
function getSchema(keyRef) {
  var schemaObj = _getSchemaObj(this, keyRef);
  switch (typeof schemaObj) {
    case 'object': return schemaObj.validate || this._compile(schemaObj);
    case 'string': return this.getSchema(schemaObj);
    case 'undefined': return _getSchemaFragment(this, keyRef);
  }
}


function _getSchemaFragment(self, ref) {
  var res = resolve.schema.call(self, { schema: {} }, ref);
  if (res) {
    var schema = res.schema
      , root = res.root
      , baseId = res.baseId;
    var v = compileSchema.call(self, schema, root, undefined, baseId);
    self._fragments[ref] = new SchemaObject({
      ref: ref,
      fragment: true,
      schema: schema,
      root: root,
      baseId: baseId,
      validate: v
    });
    return v;
  }
}


function _getSchemaObj(self, keyRef) {
  keyRef = resolve.normalizeId(keyRef);
  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
}


/**
 * Remove cached schema(s).
 * If no parameter is passed all schemas but meta-schemas are removed.
 * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
 * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
 * @this   Ajv
 * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
 * @return {Ajv} this for method chaining
 */
function removeSchema(schemaKeyRef) {
  if (schemaKeyRef instanceof RegExp) {
    _removeAllSchemas(this, this._schemas, schemaKeyRef);
    _removeAllSchemas(this, this._refs, schemaKeyRef);
    return this;
  }
  switch (typeof schemaKeyRef) {
    case 'undefined':
      _removeAllSchemas(this, this._schemas);
      _removeAllSchemas(this, this._refs);
      this._cache.clear();
      return this;
    case 'string':
      var schemaObj = _getSchemaObj(this, schemaKeyRef);
      if (schemaObj) this._cache.del(schemaObj.cacheKey);
      delete this._schemas[schemaKeyRef];
      delete this._refs[schemaKeyRef];
      return this;
    case 'object':
      var serialize = this._opts.serialize;
      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
      this._cache.del(cacheKey);
      var id = this._getId(schemaKeyRef);
      if (id) {
        id = resolve.normalizeId(id);
        delete this._schemas[id];
        delete this._refs[id];
      }
  }
  return this;
}


function _removeAllSchemas(self, schemas, regex) {
  for (var keyRef in schemas) {
    var schemaObj = schemas[keyRef];
    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
      self._cache.del(schemaObj.cacheKey);
      delete schemas[keyRef];
    }
  }
}


/* @this   Ajv */
function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
  if (typeof schema != 'object' && typeof schema != 'boolean')
    throw new Error('schema should be object or boolean');
  var serialize = this._opts.serialize;
  var cacheKey = serialize ? serialize(schema) : schema;
  var cached = this._cache.get(cacheKey);
  if (cached) return cached;

  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;

  var id = resolve.normalizeId(this._getId(schema));
  if (id && shouldAddSchema) checkUnique(this, id);

  var willValidate = this._opts.validateSchema !== false && !skipValidation;
  var recursiveMeta;
  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))
    this.validateSchema(schema, true);

  var localRefs = resolve.ids.call(this, schema);

  var schemaObj = new SchemaObject({
    id: id,
    schema: schema,
    localRefs: localRefs,
    cacheKey: cacheKey,
    meta: meta
  });

  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;
  this._cache.put(cacheKey, schemaObj);

  if (willValidate && recursiveMeta) this.validateSchema(schema, true);

  return schemaObj;
}


/* @this   Ajv */
function _compile(schemaObj, root) {
  if (schemaObj.compiling) {
    schemaObj.validate = callValidate;
    callValidate.schema = schemaObj.schema;
    callValidate.errors = null;
    callValidate.root = root ? root : callValidate;
    if (schemaObj.schema.$async === true)
      callValidate.$async = true;
    return callValidate;
  }
  schemaObj.compiling = true;

  var currentOpts;
  if (schemaObj.meta) {
    currentOpts = this._opts;
    this._opts = this._metaOpts;
  }

  var v;
  try { v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs); }
  catch(e) {
    delete schemaObj.validate;
    throw e;
  }
  finally {
    schemaObj.compiling = false;
    if (schemaObj.meta) this._opts = currentOpts;
  }

  schemaObj.validate = v;
  schemaObj.refs = v.refs;
  schemaObj.refVal = v.refVal;
  schemaObj.root = v.root;
  return v;


  /* @this   {*} - custom context, see passContext option */
  function callValidate() {
    /* jshint validthis: true */
    var _validate = schemaObj.validate;
    var result = _validate.apply(this, arguments);
    callValidate.errors = _validate.errors;
    return result;
  }
}


function chooseGetId(opts) {
  switch (opts.schemaId) {
    case 'auto': return _get$IdOrId;
    case 'id': return _getId;
    default: return _get$Id;
  }
}

/* @this   Ajv */
function _getId(schema) {
  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);
  return schema.id;
}

/* @this   Ajv */
function _get$Id(schema) {
  if (schema.id) this.logger.warn('schema id ignored', schema.id);
  return schema.$id;
}


function _get$IdOrId(schema) {
  if (schema.$id && schema.id && schema.$id != schema.id)
    throw new Error('schema $id is different from id');
  return schema.$id || schema.id;
}


/**
 * Convert array of error message objects to string
 * @this   Ajv
 * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
 * @param  {Object} options optional options with properties `separator` and `dataVar`.
 * @return {String} human readable string with all errors descriptions
 */
function errorsText(errors, options) {
  errors = errors || this.errors;
  if (!errors) return 'No errors';
  options = options || {};
  var separator = options.separator === undefined ? ', ' : options.separator;
  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;

  var text = '';
  for (var i=0; i<errors.length; i++) {
    var e = errors[i];
    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;
  }
  return text.slice(0, -separator.length);
}


/**
 * Add custom format
 * @this   Ajv
 * @param {String} name format name
 * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
 * @return {Ajv} this for method chaining
 */
function addFormat(name, format) {
  if (typeof format == 'string') format = new RegExp(format);
  this._formats[name] = format;
  return this;
}


function addDefaultMetaSchema(self) {
  var $dataSchema;
  if (self._opts.$data) {
    $dataSchema = __webpack_require__(/*! ./refs/data.json */ "../../node_modules/ajv/lib/refs/data.json");
    self.addMetaSchema($dataSchema, $dataSchema.$id, true);
  }
  if (self._opts.meta === false) return;
  var metaSchema = __webpack_require__(/*! ./refs/json-schema-draft-07.json */ "../../node_modules/ajv/lib/refs/json-schema-draft-07.json");
  if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);
  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
}


function addInitialSchemas(self) {
  var optsSchemas = self._opts.schemas;
  if (!optsSchemas) return;
  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);
  else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);
}


function addInitialFormats(self) {
  for (var name in self._opts.formats) {
    var format = self._opts.formats[name];
    self.addFormat(name, format);
  }
}


function addInitialKeywords(self) {
  for (var name in self._opts.keywords) {
    var keyword = self._opts.keywords[name];
    self.addKeyword(name, keyword);
  }
}


function checkUnique(self, id) {
  if (self._schemas[id] || self._refs[id])
    throw new Error('schema with key or id "' + id + '" already exists');
}


function getMetaSchemaOptions(self) {
  var metaOpts = util.copy(self._opts);
  for (var i=0; i<META_IGNORE_OPTIONS.length; i++)
    delete metaOpts[META_IGNORE_OPTIONS[i]];
  return metaOpts;
}


function setLogger(self) {
  var logger = self._opts.logger;
  if (logger === false) {
    self.logger = {log: noop, warn: noop, error: noop};
  } else {
    if (logger === undefined) logger = console;
    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))
      throw new Error('logger must implement log, warn and error methods');
    self.logger = logger;
  }
}


function noop() {}


/***/ }),

/***/ "../../node_modules/ajv/lib/cache.js":
/*!*******************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/cache.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var Cache = module.exports = function Cache() {
  this._cache = {};
};


Cache.prototype.put = function Cache_put(key, value) {
  this._cache[key] = value;
};


Cache.prototype.get = function Cache_get(key) {
  return this._cache[key];
};


Cache.prototype.del = function Cache_del(key) {
  delete this._cache[key];
};


Cache.prototype.clear = function Cache_clear() {
  this._cache = {};
};


/***/ }),

/***/ "../../node_modules/ajv/lib/compile/async.js":
/*!***************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/compile/async.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var MissingRefError = __webpack_require__(/*! ./error_classes */ "../../node_modules/ajv/lib/compile/error_classes.js").MissingRef;

module.exports = compileAsync;


/**
 * Creates validating function for passed schema with asynchronous loading of missing schemas.
 * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.
 * @this  Ajv
 * @param {Object}   schema schema object
 * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped
 * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.
 * @return {Promise} promise that resolves with a validating function.
 */
function compileAsync(schema, meta, callback) {
  /* eslint no-shadow: 0 */
  /* global Promise */
  /* jshint validthis: true */
  var self = this;
  if (typeof this._opts.loadSchema != 'function')
    throw new Error('options.loadSchema should be a function');

  if (typeof meta == 'function') {
    callback = meta;
    meta = undefined;
  }

  var p = loadMetaSchemaOf(schema).then(function () {
    var schemaObj = self._addSchema(schema, undefined, meta);
    return schemaObj.validate || _compileAsync(schemaObj);
  });

  if (callback) {
    p.then(
      function(v) { callback(null, v); },
      callback
    );
  }

  return p;


  function loadMetaSchemaOf(sch) {
    var $schema = sch.$schema;
    return $schema && !self.getSchema($schema)
            ? compileAsync.call(self, { $ref: $schema }, true)
            : Promise.resolve();
  }


  function _compileAsync(schemaObj) {
    try { return self._compile(schemaObj); }
    catch(e) {
      if (e instanceof MissingRefError) return loadMissingSchema(e);
      throw e;
    }


    function loadMissingSchema(e) {
      var ref = e.missingSchema;
      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');

      var schemaPromise = self._loadingSchemas[ref];
      if (!schemaPromise) {
        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);
        schemaPromise.then(removePromise, removePromise);
      }

      return schemaPromise.then(function (sch) {
        if (!added(ref)) {
          return loadMetaSchemaOf(sch).then(function () {
            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);
          });
        }
      }).then(function() {
        return _compileAsync(schemaObj);
      });

      function removePromise() {
        delete self._loadingSchemas[ref];
      }

      function added(ref) {
        return self._refs[ref] || self._schemas[ref];
      }
    }
  }
}


/***/ }),

/***/ "../../node_modules/ajv/lib/compile/error_classes.js":
/*!***********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/compile/error_classes.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var resolve = __webpack_require__(/*! ./resolve */ "../../node_modules/ajv/lib/compile/resolve.js");

module.exports = {
  Validation: errorSubclass(ValidationError),
  MissingRef: errorSubclass(MissingRefError)
};


function ValidationError(errors) {
  this.message = 'validation failed';
  this.errors = errors;
  this.ajv = this.validation = true;
}


MissingRefError.message = function (baseId, ref) {
  return 'can\'t resolve reference ' + ref + ' from id ' + baseId;
};


function MissingRefError(baseId, ref, message) {
  this.message = message || MissingRefError.message(baseId, ref);
  this.missingRef = resolve.url(baseId, ref);
  this.missingSchema = resolve.normalizeId(resolve.fullPath(this.missingRef));
}


function errorSubclass(Subclass) {
  Subclass.prototype = Object.create(Error.prototype);
  Subclass.prototype.constructor = Subclass;
  return Subclass;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/compile/formats.js":
/*!*****************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/compile/formats.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var util = __webpack_require__(/*! ./util */ "../../node_modules/ajv/lib/compile/util.js");

var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
var DAYS = [0,31,28,31,30,31,30,31,31,30,31,30,31];
var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
var HOSTNAME = /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i;
var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
// uri-template: https://tools.ietf.org/html/rfc6570
var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
// For the source: https://gist.github.com/dperini/729294
// For test cases: https://mathiasbynens.be/demo/url-regex
// @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.
// var URL = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu;
var URL = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
var JSON_POINTER = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;


module.exports = formats;

function formats(mode) {
  mode = mode == 'full' ? 'full' : 'fast';
  return util.copy(formats[mode]);
}


formats.fast = {
  // date: http://tools.ietf.org/html/rfc3339#section-5.6
  date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
  time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,
  'date-time': /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,
  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
  uri: /^(?:[a-z][a-z0-9+-.]*:)(?:\/?\/)?[^\s]*$/i,
  'uri-reference': /^(?:(?:[a-z][a-z0-9+-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
  'uri-template': URITEMPLATE,
  url: URL,
  // email (sources from jsen validator):
  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
  email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
  hostname: HOSTNAME,
  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
  regex: regex,
  // uuid: http://tools.ietf.org/html/rfc4122
  uuid: UUID,
  // JSON-pointer: https://tools.ietf.org/html/rfc6901
  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
  'json-pointer': JSON_POINTER,
  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
  'relative-json-pointer': RELATIVE_JSON_POINTER
};


formats.full = {
  date: date,
  time: time,
  'date-time': date_time,
  uri: uri,
  'uri-reference': URIREF,
  'uri-template': URITEMPLATE,
  url: URL,
  email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
  hostname: HOSTNAME,
  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
  regex: regex,
  uuid: UUID,
  'json-pointer': JSON_POINTER,
  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
  'relative-json-pointer': RELATIVE_JSON_POINTER
};


function isLeapYear(year) {
  // https://tools.ietf.org/html/rfc3339#appendix-C
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}


function date(str) {
  // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
  var matches = str.match(DATE);
  if (!matches) return false;

  var year = +matches[1];
  var month = +matches[2];
  var day = +matches[3];

  return month >= 1 && month <= 12 && day >= 1 &&
          day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
}


function time(str, full) {
  var matches = str.match(TIME);
  if (!matches) return false;

  var hour = matches[1];
  var minute = matches[2];
  var second = matches[3];
  var timeZone = matches[5];
  return ((hour <= 23 && minute <= 59 && second <= 59) ||
          (hour == 23 && minute == 59 && second == 60)) &&
         (!full || timeZone);
}


var DATE_TIME_SEPARATOR = /t|\s/i;
function date_time(str) {
  // http://tools.ietf.org/html/rfc3339#section-5.6
  var dateTime = str.split(DATE_TIME_SEPARATOR);
  return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
}


var NOT_URI_FRAGMENT = /\/|:/;
function uri(str) {
  // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
  return NOT_URI_FRAGMENT.test(str) && URI.test(str);
}


var Z_ANCHOR = /[^\\]\\Z/;
function regex(str) {
  if (Z_ANCHOR.test(str)) return false;
  try {
    new RegExp(str);
    return true;
  } catch(e) {
    return false;
  }
}


/***/ }),

/***/ "../../node_modules/ajv/lib/compile/index.js":
/*!***************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/compile/index.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var resolve = __webpack_require__(/*! ./resolve */ "../../node_modules/ajv/lib/compile/resolve.js")
  , util = __webpack_require__(/*! ./util */ "../../node_modules/ajv/lib/compile/util.js")
  , errorClasses = __webpack_require__(/*! ./error_classes */ "../../node_modules/ajv/lib/compile/error_classes.js")
  , stableStringify = __webpack_require__(/*! fast-json-stable-stringify */ "../../node_modules/fast-json-stable-stringify/index.js");

var validateGenerator = __webpack_require__(/*! ../dotjs/validate */ "../../node_modules/ajv/lib/dotjs/validate.js");

/**
 * Functions below are used inside compiled validations function
 */

var ucs2length = util.ucs2length;
var equal = __webpack_require__(/*! fast-deep-equal */ "../../node_modules/fast-deep-equal/index.js");

// this error is thrown by async schemas to return validation errors via exception
var ValidationError = errorClasses.Validation;

module.exports = compile;


/**
 * Compiles schema to validation function
 * @this   Ajv
 * @param  {Object} schema schema object
 * @param  {Object} root object with information about the root schema for this schema
 * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
 * @param  {String} baseId base ID for IDs in the schema
 * @return {Function} validation function
 */
function compile(schema, root, localRefs, baseId) {
  /* jshint validthis: true, evil: true */
  /* eslint no-shadow: 0 */
  var self = this
    , opts = this._opts
    , refVal = [ undefined ]
    , refs = {}
    , patterns = []
    , patternsHash = {}
    , defaults = []
    , defaultsHash = {}
    , customRules = [];

  root = root || { schema: schema, refVal: refVal, refs: refs };

  var c = checkCompiling.call(this, schema, root, baseId);
  var compilation = this._compilations[c.index];
  if (c.compiling) return (compilation.callValidate = callValidate);

  var formats = this._formats;
  var RULES = this.RULES;

  try {
    var v = localCompile(schema, root, localRefs, baseId);
    compilation.validate = v;
    var cv = compilation.callValidate;
    if (cv) {
      cv.schema = v.schema;
      cv.errors = null;
      cv.refs = v.refs;
      cv.refVal = v.refVal;
      cv.root = v.root;
      cv.$async = v.$async;
      if (opts.sourceCode) cv.source = v.source;
    }
    return v;
  } finally {
    endCompiling.call(this, schema, root, baseId);
  }

  /* @this   {*} - custom context, see passContext option */
  function callValidate() {
    /* jshint validthis: true */
    var validate = compilation.validate;
    var result = validate.apply(this, arguments);
    callValidate.errors = validate.errors;
    return result;
  }

  function localCompile(_schema, _root, localRefs, baseId) {
    var isRoot = !_root || (_root && _root.schema == _schema);
    if (_root.schema != root.schema)
      return compile.call(self, _schema, _root, localRefs, baseId);

    var $async = _schema.$async === true;

    var sourceCode = validateGenerator({
      isTop: true,
      schema: _schema,
      isRoot: isRoot,
      baseId: baseId,
      root: _root,
      schemaPath: '',
      errSchemaPath: '#',
      errorPath: '""',
      MissingRefError: errorClasses.MissingRef,
      RULES: RULES,
      validate: validateGenerator,
      util: util,
      resolve: resolve,
      resolveRef: resolveRef,
      usePattern: usePattern,
      useDefault: useDefault,
      useCustomRule: useCustomRule,
      opts: opts,
      formats: formats,
      logger: self.logger,
      self: self
    });

    sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode)
                   + vars(defaults, defaultCode) + vars(customRules, customRuleCode)
                   + sourceCode;

    if (opts.processCode) sourceCode = opts.processCode(sourceCode);
    // console.log('\n\n\n *** \n', JSON.stringify(sourceCode));
    var validate;
    try {
      var makeValidate = new Function(
        'self',
        'RULES',
        'formats',
        'root',
        'refVal',
        'defaults',
        'customRules',
        'equal',
        'ucs2length',
        'ValidationError',
        sourceCode
      );

      validate = makeValidate(
        self,
        RULES,
        formats,
        root,
        refVal,
        defaults,
        customRules,
        equal,
        ucs2length,
        ValidationError
      );

      refVal[0] = validate;
    } catch(e) {
      self.logger.error('Error compiling schema, function code:', sourceCode);
      throw e;
    }

    validate.schema = _schema;
    validate.errors = null;
    validate.refs = refs;
    validate.refVal = refVal;
    validate.root = isRoot ? validate : _root;
    if ($async) validate.$async = true;
    if (opts.sourceCode === true) {
      validate.source = {
        code: sourceCode,
        patterns: patterns,
        defaults: defaults
      };
    }

    return validate;
  }

  function resolveRef(baseId, ref, isRoot) {
    ref = resolve.url(baseId, ref);
    var refIndex = refs[ref];
    var _refVal, refCode;
    if (refIndex !== undefined) {
      _refVal = refVal[refIndex];
      refCode = 'refVal[' + refIndex + ']';
      return resolvedRef(_refVal, refCode);
    }
    if (!isRoot && root.refs) {
      var rootRefId = root.refs[ref];
      if (rootRefId !== undefined) {
        _refVal = root.refVal[rootRefId];
        refCode = addLocalRef(ref, _refVal);
        return resolvedRef(_refVal, refCode);
      }
    }

    refCode = addLocalRef(ref);
    var v = resolve.call(self, localCompile, root, ref);
    if (v === undefined) {
      var localSchema = localRefs && localRefs[ref];
      if (localSchema) {
        v = resolve.inlineRef(localSchema, opts.inlineRefs)
            ? localSchema
            : compile.call(self, localSchema, root, localRefs, baseId);
      }
    }

    if (v === undefined) {
      removeLocalRef(ref);
    } else {
      replaceLocalRef(ref, v);
      return resolvedRef(v, refCode);
    }
  }

  function addLocalRef(ref, v) {
    var refId = refVal.length;
    refVal[refId] = v;
    refs[ref] = refId;
    return 'refVal' + refId;
  }

  function removeLocalRef(ref) {
    delete refs[ref];
  }

  function replaceLocalRef(ref, v) {
    var refId = refs[ref];
    refVal[refId] = v;
  }

  function resolvedRef(refVal, code) {
    return typeof refVal == 'object' || typeof refVal == 'boolean'
            ? { code: code, schema: refVal, inline: true }
            : { code: code, $async: refVal && !!refVal.$async };
  }

  function usePattern(regexStr) {
    var index = patternsHash[regexStr];
    if (index === undefined) {
      index = patternsHash[regexStr] = patterns.length;
      patterns[index] = regexStr;
    }
    return 'pattern' + index;
  }

  function useDefault(value) {
    switch (typeof value) {
      case 'boolean':
      case 'number':
        return '' + value;
      case 'string':
        return util.toQuotedString(value);
      case 'object':
        if (value === null) return 'null';
        var valueStr = stableStringify(value);
        var index = defaultsHash[valueStr];
        if (index === undefined) {
          index = defaultsHash[valueStr] = defaults.length;
          defaults[index] = value;
        }
        return 'default' + index;
    }
  }

  function useCustomRule(rule, schema, parentSchema, it) {
    if (self._opts.validateSchema !== false) {
      var deps = rule.definition.dependencies;
      if (deps && !deps.every(function(keyword) {
        return Object.prototype.hasOwnProperty.call(parentSchema, keyword);
      }))
        throw new Error('parent schema must have all required keywords: ' + deps.join(','));

      var validateSchema = rule.definition.validateSchema;
      if (validateSchema) {
        var valid = validateSchema(schema);
        if (!valid) {
          var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);
          if (self._opts.validateSchema == 'log') self.logger.error(message);
          else throw new Error(message);
        }
      }
    }

    var compile = rule.definition.compile
      , inline = rule.definition.inline
      , macro = rule.definition.macro;

    var validate;
    if (compile) {
      validate = compile.call(self, schema, parentSchema, it);
    } else if (macro) {
      validate = macro.call(self, schema, parentSchema, it);
      if (opts.validateSchema !== false) self.validateSchema(validate, true);
    } else if (inline) {
      validate = inline.call(self, it, rule.keyword, schema, parentSchema);
    } else {
      validate = rule.definition.validate;
      if (!validate) return;
    }

    if (validate === undefined)
      throw new Error('custom keyword "' + rule.keyword + '"failed to compile');

    var index = customRules.length;
    customRules[index] = validate;

    return {
      code: 'customRule' + index,
      validate: validate
    };
  }
}


/**
 * Checks if the schema is currently compiled
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 * @return {Object} object with properties "index" (compilation index) and "compiling" (boolean)
 */
function checkCompiling(schema, root, baseId) {
  /* jshint validthis: true */
  var index = compIndex.call(this, schema, root, baseId);
  if (index >= 0) return { index: index, compiling: true };
  index = this._compilations.length;
  this._compilations[index] = {
    schema: schema,
    root: root,
    baseId: baseId
  };
  return { index: index, compiling: false };
}


/**
 * Removes the schema from the currently compiled list
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 */
function endCompiling(schema, root, baseId) {
  /* jshint validthis: true */
  var i = compIndex.call(this, schema, root, baseId);
  if (i >= 0) this._compilations.splice(i, 1);
}


/**
 * Index of schema compilation in the currently compiled list
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 * @return {Integer} compilation index
 */
function compIndex(schema, root, baseId) {
  /* jshint validthis: true */
  for (var i=0; i<this._compilations.length; i++) {
    var c = this._compilations[i];
    if (c.schema == schema && c.root == root && c.baseId == baseId) return i;
  }
  return -1;
}


function patternCode(i, patterns) {
  return 'var pattern' + i + ' = new RegExp(' + util.toQuotedString(patterns[i]) + ');';
}


function defaultCode(i) {
  return 'var default' + i + ' = defaults[' + i + '];';
}


function refValCode(i, refVal) {
  return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';
}


function customRuleCode(i) {
  return 'var customRule' + i + ' = customRules[' + i + '];';
}


function vars(arr, statement) {
  if (!arr.length) return '';
  var code = '';
  for (var i=0; i<arr.length; i++)
    code += statement(i, arr);
  return code;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/compile/resolve.js":
/*!*****************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/compile/resolve.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var URI = __webpack_require__(/*! uri-js */ "../../node_modules/uri-js/dist/es5/uri.all.js")
  , equal = __webpack_require__(/*! fast-deep-equal */ "../../node_modules/fast-deep-equal/index.js")
  , util = __webpack_require__(/*! ./util */ "../../node_modules/ajv/lib/compile/util.js")
  , SchemaObject = __webpack_require__(/*! ./schema_obj */ "../../node_modules/ajv/lib/compile/schema_obj.js")
  , traverse = __webpack_require__(/*! json-schema-traverse */ "../../node_modules/json-schema-traverse/index.js");

module.exports = resolve;

resolve.normalizeId = normalizeId;
resolve.fullPath = getFullPath;
resolve.url = resolveUrl;
resolve.ids = resolveIds;
resolve.inlineRef = inlineRef;
resolve.schema = resolveSchema;

/**
 * [resolve and compile the references ($ref)]
 * @this   Ajv
 * @param  {Function} compile reference to schema compilation funciton (localCompile)
 * @param  {Object} root object with information about the root schema for the current schema
 * @param  {String} ref reference to resolve
 * @return {Object|Function} schema object (if the schema can be inlined) or validation function
 */
function resolve(compile, root, ref) {
  /* jshint validthis: true */
  var refVal = this._refs[ref];
  if (typeof refVal == 'string') {
    if (this._refs[refVal]) refVal = this._refs[refVal];
    else return resolve.call(this, compile, root, refVal);
  }

  refVal = refVal || this._schemas[ref];
  if (refVal instanceof SchemaObject) {
    return inlineRef(refVal.schema, this._opts.inlineRefs)
            ? refVal.schema
            : refVal.validate || this._compile(refVal);
  }

  var res = resolveSchema.call(this, root, ref);
  var schema, v, baseId;
  if (res) {
    schema = res.schema;
    root = res.root;
    baseId = res.baseId;
  }

  if (schema instanceof SchemaObject) {
    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
  } else if (schema !== undefined) {
    v = inlineRef(schema, this._opts.inlineRefs)
        ? schema
        : compile.call(this, schema, root, undefined, baseId);
  }

  return v;
}


/**
 * Resolve schema, its root and baseId
 * @this Ajv
 * @param  {Object} root root object with properties schema, refVal, refs
 * @param  {String} ref  reference to resolve
 * @return {Object} object with properties schema, root, baseId
 */
function resolveSchema(root, ref) {
  /* jshint validthis: true */
  var p = URI.parse(ref)
    , refPath = _getFullPath(p)
    , baseId = getFullPath(this._getId(root.schema));
  if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
    var id = normalizeId(refPath);
    var refVal = this._refs[id];
    if (typeof refVal == 'string') {
      return resolveRecursive.call(this, root, refVal, p);
    } else if (refVal instanceof SchemaObject) {
      if (!refVal.validate) this._compile(refVal);
      root = refVal;
    } else {
      refVal = this._schemas[id];
      if (refVal instanceof SchemaObject) {
        if (!refVal.validate) this._compile(refVal);
        if (id == normalizeId(ref))
          return { schema: refVal, root: root, baseId: baseId };
        root = refVal;
      } else {
        return;
      }
    }
    if (!root.schema) return;
    baseId = getFullPath(this._getId(root.schema));
  }
  return getJsonPointer.call(this, p, baseId, root.schema, root);
}


/* @this Ajv */
function resolveRecursive(root, ref, parsedRef) {
  /* jshint validthis: true */
  var res = resolveSchema.call(this, root, ref);
  if (res) {
    var schema = res.schema;
    var baseId = res.baseId;
    root = res.root;
    var id = this._getId(schema);
    if (id) baseId = resolveUrl(baseId, id);
    return getJsonPointer.call(this, parsedRef, baseId, schema, root);
  }
}


var PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);
/* @this Ajv */
function getJsonPointer(parsedRef, baseId, schema, root) {
  /* jshint validthis: true */
  parsedRef.fragment = parsedRef.fragment || '';
  if (parsedRef.fragment.slice(0,1) != '/') return;
  var parts = parsedRef.fragment.split('/');

  for (var i = 1; i < parts.length; i++) {
    var part = parts[i];
    if (part) {
      part = util.unescapeFragment(part);
      schema = schema[part];
      if (schema === undefined) break;
      var id;
      if (!PREVENT_SCOPE_CHANGE[part]) {
        id = this._getId(schema);
        if (id) baseId = resolveUrl(baseId, id);
        if (schema.$ref) {
          var $ref = resolveUrl(baseId, schema.$ref);
          var res = resolveSchema.call(this, root, $ref);
          if (res) {
            schema = res.schema;
            root = res.root;
            baseId = res.baseId;
          }
        }
      }
    }
  }
  if (schema !== undefined && schema !== root.schema)
    return { schema: schema, root: root, baseId: baseId };
}


var SIMPLE_INLINED = util.toHash([
  'type', 'format', 'pattern',
  'maxLength', 'minLength',
  'maxProperties', 'minProperties',
  'maxItems', 'minItems',
  'maximum', 'minimum',
  'uniqueItems', 'multipleOf',
  'required', 'enum'
]);
function inlineRef(schema, limit) {
  if (limit === false) return false;
  if (limit === undefined || limit === true) return checkNoRef(schema);
  else if (limit) return countKeys(schema) <= limit;
}


function checkNoRef(schema) {
  var item;
  if (Array.isArray(schema)) {
    for (var i=0; i<schema.length; i++) {
      item = schema[i];
      if (typeof item == 'object' && !checkNoRef(item)) return false;
    }
  } else {
    for (var key in schema) {
      if (key == '$ref') return false;
      item = schema[key];
      if (typeof item == 'object' && !checkNoRef(item)) return false;
    }
  }
  return true;
}


function countKeys(schema) {
  var count = 0, item;
  if (Array.isArray(schema)) {
    for (var i=0; i<schema.length; i++) {
      item = schema[i];
      if (typeof item == 'object') count += countKeys(item);
      if (count == Infinity) return Infinity;
    }
  } else {
    for (var key in schema) {
      if (key == '$ref') return Infinity;
      if (SIMPLE_INLINED[key]) {
        count++;
      } else {
        item = schema[key];
        if (typeof item == 'object') count += countKeys(item) + 1;
        if (count == Infinity) return Infinity;
      }
    }
  }
  return count;
}


function getFullPath(id, normalize) {
  if (normalize !== false) id = normalizeId(id);
  var p = URI.parse(id);
  return _getFullPath(p);
}


function _getFullPath(p) {
  return URI.serialize(p).split('#')[0] + '#';
}


var TRAILING_SLASH_HASH = /#\/?$/;
function normalizeId(id) {
  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
}


function resolveUrl(baseId, id) {
  id = normalizeId(id);
  return URI.resolve(baseId, id);
}


/* @this Ajv */
function resolveIds(schema) {
  var schemaId = normalizeId(this._getId(schema));
  var baseIds = {'': schemaId};
  var fullPaths = {'': getFullPath(schemaId, false)};
  var localRefs = {};
  var self = this;

  traverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
    if (jsonPtr === '') return;
    var id = self._getId(sch);
    var baseId = baseIds[parentJsonPtr];
    var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;
    if (keyIndex !== undefined)
      fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));

    if (typeof id == 'string') {
      id = baseId = normalizeId(baseId ? URI.resolve(baseId, id) : id);

      var refVal = self._refs[id];
      if (typeof refVal == 'string') refVal = self._refs[refVal];
      if (refVal && refVal.schema) {
        if (!equal(sch, refVal.schema))
          throw new Error('id "' + id + '" resolves to more than one schema');
      } else if (id != normalizeId(fullPath)) {
        if (id[0] == '#') {
          if (localRefs[id] && !equal(sch, localRefs[id]))
            throw new Error('id "' + id + '" resolves to more than one schema');
          localRefs[id] = sch;
        } else {
          self._refs[id] = fullPath;
        }
      }
    }
    baseIds[jsonPtr] = baseId;
    fullPaths[jsonPtr] = fullPath;
  });

  return localRefs;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/compile/rules.js":
/*!***************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/compile/rules.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ruleModules = __webpack_require__(/*! ../dotjs */ "../../node_modules/ajv/lib/dotjs/index.js")
  , toHash = __webpack_require__(/*! ./util */ "../../node_modules/ajv/lib/compile/util.js").toHash;

module.exports = function rules() {
  var RULES = [
    { type: 'number',
      rules: [ { 'maximum': ['exclusiveMaximum'] },
               { 'minimum': ['exclusiveMinimum'] }, 'multipleOf', 'format'] },
    { type: 'string',
      rules: [ 'maxLength', 'minLength', 'pattern', 'format' ] },
    { type: 'array',
      rules: [ 'maxItems', 'minItems', 'items', 'contains', 'uniqueItems' ] },
    { type: 'object',
      rules: [ 'maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames',
               { 'properties': ['additionalProperties', 'patternProperties'] } ] },
    { rules: [ '$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if' ] }
  ];

  var ALL = [ 'type', '$comment' ];
  var KEYWORDS = [
    '$schema', '$id', 'id', '$data', '$async', 'title',
    'description', 'default', 'definitions',
    'examples', 'readOnly', 'writeOnly',
    'contentMediaType', 'contentEncoding',
    'additionalItems', 'then', 'else'
  ];
  var TYPES = [ 'number', 'integer', 'string', 'array', 'object', 'boolean', 'null' ];
  RULES.all = toHash(ALL);
  RULES.types = toHash(TYPES);

  RULES.forEach(function (group) {
    group.rules = group.rules.map(function (keyword) {
      var implKeywords;
      if (typeof keyword == 'object') {
        var key = Object.keys(keyword)[0];
        implKeywords = keyword[key];
        keyword = key;
        implKeywords.forEach(function (k) {
          ALL.push(k);
          RULES.all[k] = true;
        });
      }
      ALL.push(keyword);
      var rule = RULES.all[keyword] = {
        keyword: keyword,
        code: ruleModules[keyword],
        implements: implKeywords
      };
      return rule;
    });

    RULES.all.$comment = {
      keyword: '$comment',
      code: ruleModules.$comment
    };

    if (group.type) RULES.types[group.type] = group;
  });

  RULES.keywords = toHash(ALL.concat(KEYWORDS));
  RULES.custom = {};

  return RULES;
};


/***/ }),

/***/ "../../node_modules/ajv/lib/compile/schema_obj.js":
/*!********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/compile/schema_obj.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var util = __webpack_require__(/*! ./util */ "../../node_modules/ajv/lib/compile/util.js");

module.exports = SchemaObject;

function SchemaObject(obj) {
  util.copy(obj, this);
}


/***/ }),

/***/ "../../node_modules/ajv/lib/compile/ucs2length.js":
/*!********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/compile/ucs2length.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// https://mathiasbynens.be/notes/javascript-encoding
// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
module.exports = function ucs2length(str) {
  var length = 0
    , len = str.length
    , pos = 0
    , value;
  while (pos < len) {
    length++;
    value = str.charCodeAt(pos++);
    if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
      // high surrogate, and there is a next character
      value = str.charCodeAt(pos);
      if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
    }
  }
  return length;
};


/***/ }),

/***/ "../../node_modules/ajv/lib/compile/util.js":
/*!**************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/compile/util.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



module.exports = {
  copy: copy,
  checkDataType: checkDataType,
  checkDataTypes: checkDataTypes,
  coerceToTypes: coerceToTypes,
  toHash: toHash,
  getProperty: getProperty,
  escapeQuotes: escapeQuotes,
  equal: __webpack_require__(/*! fast-deep-equal */ "../../node_modules/fast-deep-equal/index.js"),
  ucs2length: __webpack_require__(/*! ./ucs2length */ "../../node_modules/ajv/lib/compile/ucs2length.js"),
  varOccurences: varOccurences,
  varReplace: varReplace,
  cleanUpCode: cleanUpCode,
  finalCleanUpCode: finalCleanUpCode,
  schemaHasRules: schemaHasRules,
  schemaHasRulesExcept: schemaHasRulesExcept,
  schemaUnknownRules: schemaUnknownRules,
  toQuotedString: toQuotedString,
  getPathExpr: getPathExpr,
  getPath: getPath,
  getData: getData,
  unescapeFragment: unescapeFragment,
  unescapeJsonPointer: unescapeJsonPointer,
  escapeFragment: escapeFragment,
  escapeJsonPointer: escapeJsonPointer
};


function copy(o, to) {
  to = to || {};
  for (var key in o) to[key] = o[key];
  return to;
}


function checkDataType(dataType, data, negate) {
  var EQUAL = negate ? ' !== ' : ' === '
    , AND = negate ? ' || ' : ' && '
    , OK = negate ? '!' : ''
    , NOT = negate ? '' : '!';
  switch (dataType) {
    case 'null': return data + EQUAL + 'null';
    case 'array': return OK + 'Array.isArray(' + data + ')';
    case 'object': return '(' + OK + data + AND +
                          'typeof ' + data + EQUAL + '"object"' + AND +
                          NOT + 'Array.isArray(' + data + '))';
    case 'integer': return '(typeof ' + data + EQUAL + '"number"' + AND +
                           NOT + '(' + data + ' % 1)' +
                           AND + data + EQUAL + data + ')';
    default: return 'typeof ' + data + EQUAL + '"' + dataType + '"';
  }
}


function checkDataTypes(dataTypes, data) {
  switch (dataTypes.length) {
    case 1: return checkDataType(dataTypes[0], data, true);
    default:
      var code = '';
      var types = toHash(dataTypes);
      if (types.array && types.object) {
        code = types.null ? '(': '(!' + data + ' || ';
        code += 'typeof ' + data + ' !== "object")';
        delete types.null;
        delete types.array;
        delete types.object;
      }
      if (types.number) delete types.integer;
      for (var t in types)
        code += (code ? ' && ' : '' ) + checkDataType(t, data, true);

      return code;
  }
}


var COERCE_TO_TYPES = toHash([ 'string', 'number', 'integer', 'boolean', 'null' ]);
function coerceToTypes(optionCoerceTypes, dataTypes) {
  if (Array.isArray(dataTypes)) {
    var types = [];
    for (var i=0; i<dataTypes.length; i++) {
      var t = dataTypes[i];
      if (COERCE_TO_TYPES[t]) types[types.length] = t;
      else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;
    }
    if (types.length) return types;
  } else if (COERCE_TO_TYPES[dataTypes]) {
    return [dataTypes];
  } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {
    return ['array'];
  }
}


function toHash(arr) {
  var hash = {};
  for (var i=0; i<arr.length; i++) hash[arr[i]] = true;
  return hash;
}


var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
var SINGLE_QUOTE = /'|\\/g;
function getProperty(key) {
  return typeof key == 'number'
          ? '[' + key + ']'
          : IDENTIFIER.test(key)
            ? '.' + key
            : "['" + escapeQuotes(key) + "']";
}


function escapeQuotes(str) {
  return str.replace(SINGLE_QUOTE, '\\$&')
            .replace(/\n/g, '\\n')
            .replace(/\r/g, '\\r')
            .replace(/\f/g, '\\f')
            .replace(/\t/g, '\\t');
}


function varOccurences(str, dataVar) {
  dataVar += '[^0-9]';
  var matches = str.match(new RegExp(dataVar, 'g'));
  return matches ? matches.length : 0;
}


function varReplace(str, dataVar, expr) {
  dataVar += '([^0-9])';
  expr = expr.replace(/\$/g, '$$$$');
  return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
}


var EMPTY_ELSE = /else\s*{\s*}/g
  , EMPTY_IF_NO_ELSE = /if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g
  , EMPTY_IF_WITH_ELSE = /if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;
function cleanUpCode(out) {
  return out.replace(EMPTY_ELSE, '')
            .replace(EMPTY_IF_NO_ELSE, '')
            .replace(EMPTY_IF_WITH_ELSE, 'if (!($1))');
}


var ERRORS_REGEXP = /[^v.]errors/g
  , REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g
  , REMOVE_ERRORS_ASYNC = /var errors = 0;|var vErrors = null;/g
  , RETURN_VALID = 'return errors === 0;'
  , RETURN_TRUE = 'validate.errors = null; return true;'
  , RETURN_ASYNC = /if \(errors === 0\) return data;\s*else throw new ValidationError\(vErrors\);/
  , RETURN_DATA_ASYNC = 'return data;'
  , ROOTDATA_REGEXP = /[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g
  , REMOVE_ROOTDATA = /if \(rootData === undefined\) rootData = data;/;

function finalCleanUpCode(out, async) {
  var matches = out.match(ERRORS_REGEXP);
  if (matches && matches.length == 2) {
    out = async
          ? out.replace(REMOVE_ERRORS_ASYNC, '')
               .replace(RETURN_ASYNC, RETURN_DATA_ASYNC)
          : out.replace(REMOVE_ERRORS, '')
               .replace(RETURN_VALID, RETURN_TRUE);
  }

  matches = out.match(ROOTDATA_REGEXP);
  if (!matches || matches.length !== 3) return out;
  return out.replace(REMOVE_ROOTDATA, '');
}


function schemaHasRules(schema, rules) {
  if (typeof schema == 'boolean') return !schema;
  for (var key in schema) if (rules[key]) return true;
}


function schemaHasRulesExcept(schema, rules, exceptKeyword) {
  if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';
  for (var key in schema) if (key != exceptKeyword && rules[key]) return true;
}


function schemaUnknownRules(schema, rules) {
  if (typeof schema == 'boolean') return;
  for (var key in schema) if (!rules[key]) return key;
}


function toQuotedString(str) {
  return '\'' + escapeQuotes(str) + '\'';
}


function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
  var path = jsonPointers // false by default
              ? '\'/\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \'~0\').replace(/\\//g, \'~1\')')
              : (isNumber ? '\'[\' + ' + expr + ' + \']\'' : '\'[\\\'\' + ' + expr + ' + \'\\\']\'');
  return joinPaths(currentPath, path);
}


function getPath(currentPath, prop, jsonPointers) {
  var path = jsonPointers // false by default
              ? toQuotedString('/' + escapeJsonPointer(prop))
              : toQuotedString(getProperty(prop));
  return joinPaths(currentPath, path);
}


var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
function getData($data, lvl, paths) {
  var up, jsonPointer, data, matches;
  if ($data === '') return 'rootData';
  if ($data[0] == '/') {
    if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);
    jsonPointer = $data;
    data = 'rootData';
  } else {
    matches = $data.match(RELATIVE_JSON_POINTER);
    if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);
    up = +matches[1];
    jsonPointer = matches[2];
    if (jsonPointer == '#') {
      if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);
      return paths[lvl - up];
    }

    if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);
    data = 'data' + ((lvl - up) || '');
    if (!jsonPointer) return data;
  }

  var expr = data;
  var segments = jsonPointer.split('/');
  for (var i=0; i<segments.length; i++) {
    var segment = segments[i];
    if (segment) {
      data += getProperty(unescapeJsonPointer(segment));
      expr += ' && ' + data;
    }
  }
  return expr;
}


function joinPaths (a, b) {
  if (a == '""') return b;
  return (a + ' + ' + b).replace(/' \+ '/g, '');
}


function unescapeFragment(str) {
  return unescapeJsonPointer(decodeURIComponent(str));
}


function escapeFragment(str) {
  return encodeURIComponent(escapeJsonPointer(str));
}


function escapeJsonPointer(str) {
  return str.replace(/~/g, '~0').replace(/\//g, '~1');
}


function unescapeJsonPointer(str) {
  return str.replace(/~1/g, '/').replace(/~0/g, '~');
}


/***/ }),

/***/ "../../node_modules/ajv/lib/data.js":
/*!******************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/data.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KEYWORDS = [
  'multipleOf',
  'maximum',
  'exclusiveMaximum',
  'minimum',
  'exclusiveMinimum',
  'maxLength',
  'minLength',
  'pattern',
  'additionalItems',
  'maxItems',
  'minItems',
  'uniqueItems',
  'maxProperties',
  'minProperties',
  'required',
  'additionalProperties',
  'enum',
  'format',
  'const'
];

module.exports = function (metaSchema, keywordsJsonPointers) {
  for (var i=0; i<keywordsJsonPointers.length; i++) {
    metaSchema = JSON.parse(JSON.stringify(metaSchema));
    var segments = keywordsJsonPointers[i].split('/');
    var keywords = metaSchema;
    var j;
    for (j=1; j<segments.length; j++)
      keywords = keywords[segments[j]];

    for (j=0; j<KEYWORDS.length; j++) {
      var key = KEYWORDS[j];
      var schema = keywords[key];
      if (schema) {
        keywords[key] = {
          anyOf: [
            schema,
            { $ref: 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#' }
          ]
        };
      }
    }
  }

  return metaSchema;
};


/***/ }),

/***/ "../../node_modules/ajv/lib/definition_schema.js":
/*!*******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/definition_schema.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var metaSchema = __webpack_require__(/*! ./refs/json-schema-draft-07.json */ "../../node_modules/ajv/lib/refs/json-schema-draft-07.json");

module.exports = {
  $id: 'https://github.com/epoberezkin/ajv/blob/master/lib/definition_schema.js',
  definitions: {
    simpleTypes: metaSchema.definitions.simpleTypes
  },
  type: 'object',
  dependencies: {
    schema: ['validate'],
    $data: ['validate'],
    statements: ['inline'],
    valid: {not: {required: ['macro']}}
  },
  properties: {
    type: metaSchema.properties.type,
    schema: {type: 'boolean'},
    statements: {type: 'boolean'},
    dependencies: {
      type: 'array',
      items: {type: 'string'}
    },
    metaSchema: {type: 'object'},
    modifying: {type: 'boolean'},
    valid: {type: 'boolean'},
    $data: {type: 'boolean'},
    async: {type: 'boolean'},
    errors: {
      anyOf: [
        {type: 'boolean'},
        {const: 'full'}
      ]
    }
  }
};


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/_limit.js":
/*!**************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/_limit.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate__limit(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $isMax = $keyword == 'maximum',
    $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',
    $schemaExcl = it.schema[$exclusiveKeyword],
    $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
    $op = $isMax ? '<' : '>',
    $notOp = $isMax ? '>' : '<',
    $errorKeyword = undefined;
  if ($isDataExcl) {
    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
      $exclusive = 'exclusive' + $lvl,
      $exclType = 'exclType' + $lvl,
      $exclIsNumber = 'exclIsNumber' + $lvl,
      $opExpr = 'op' + $lvl,
      $opStr = '\' + ' + $opExpr + ' + \'';
    out += ' var schemaExcl' + ($lvl) + ' = ' + ($schemaValueExcl) + '; ';
    $schemaValueExcl = 'schemaExcl' + $lvl;
    out += ' var ' + ($exclusive) + '; var ' + ($exclType) + ' = typeof ' + ($schemaValueExcl) + '; if (' + ($exclType) + ' != \'boolean\' && ' + ($exclType) + ' != \'undefined\' && ' + ($exclType) + ' != \'number\') { ';
    var $errorKeyword = $exclusiveKeyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_exclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \'' + ($exclusiveKeyword) + ' should be boolean\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } else if ( ';
    if ($isData) {
      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
    }
    out += ' ' + ($exclType) + ' == \'number\' ? ( (' + ($exclusive) + ' = ' + ($schemaValue) + ' === undefined || ' + ($schemaValueExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ') ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValueExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) : ( (' + ($exclusive) + ' = ' + ($schemaValueExcl) + ' === true) ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValue) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { var op' + ($lvl) + ' = ' + ($exclusive) + ' ? \'' + ($op) + '\' : \'' + ($op) + '=\'; ';
    if ($schema === undefined) {
      $errorKeyword = $exclusiveKeyword;
      $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
      $schemaValue = $schemaValueExcl;
      $isData = $isDataExcl;
    }
  } else {
    var $exclIsNumber = typeof $schemaExcl == 'number',
      $opStr = $op;
    if ($exclIsNumber && $isData) {
      var $opExpr = '\'' + $opStr + '\'';
      out += ' if ( ';
      if ($isData) {
        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
      }
      out += ' ( ' + ($schemaValue) + ' === undefined || ' + ($schemaExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ' ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { ';
    } else {
      if ($exclIsNumber && $schema === undefined) {
        $exclusive = true;
        $errorKeyword = $exclusiveKeyword;
        $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
        $schemaValue = $schemaExcl;
        $notOp += '=';
      } else {
        if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);
        if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
          $exclusive = true;
          $errorKeyword = $exclusiveKeyword;
          $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
          $notOp += '=';
        } else {
          $exclusive = false;
          $opStr += '=';
        }
      }
      var $opExpr = '\'' + $opStr + '\'';
      out += ' if ( ';
      if ($isData) {
        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
      }
      out += ' ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' || ' + ($data) + ' !== ' + ($data) + ') { ';
    }
  }
  $errorKeyword = $errorKeyword || $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit: ' + ($schemaValue) + ', exclusive: ' + ($exclusive) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should be ' + ($opStr) + ' ';
      if ($isData) {
        out += '\' + ' + ($schemaValue);
      } else {
        out += '' + ($schemaValue) + '\'';
      }
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + ($schema);
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' } ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/_limitItems.js":
/*!*******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/_limitItems.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate__limitItems(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $op = $keyword == 'maxItems' ? '>' : '<';
  out += 'if ( ';
  if ($isData) {
    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
  }
  out += ' ' + ($data) + '.length ' + ($op) + ' ' + ($schemaValue) + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limitItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should NOT have ';
      if ($keyword == 'maxItems') {
        out += 'more';
      } else {
        out += 'fewer';
      }
      out += ' than ';
      if ($isData) {
        out += '\' + ' + ($schemaValue) + ' + \'';
      } else {
        out += '' + ($schema);
      }
      out += ' items\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + ($schema);
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/_limitLength.js":
/*!********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/_limitLength.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate__limitLength(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $op = $keyword == 'maxLength' ? '>' : '<';
  out += 'if ( ';
  if ($isData) {
    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
  }
  if (it.opts.unicode === false) {
    out += ' ' + ($data) + '.length ';
  } else {
    out += ' ucs2length(' + ($data) + ') ';
  }
  out += ' ' + ($op) + ' ' + ($schemaValue) + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limitLength') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should NOT be ';
      if ($keyword == 'maxLength') {
        out += 'longer';
      } else {
        out += 'shorter';
      }
      out += ' than ';
      if ($isData) {
        out += '\' + ' + ($schemaValue) + ' + \'';
      } else {
        out += '' + ($schema);
      }
      out += ' characters\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + ($schema);
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/_limitProperties.js":
/*!************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/_limitProperties.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate__limitProperties(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $op = $keyword == 'maxProperties' ? '>' : '<';
  out += 'if ( ';
  if ($isData) {
    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
  }
  out += ' Object.keys(' + ($data) + ').length ' + ($op) + ' ' + ($schemaValue) + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limitProperties') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should NOT have ';
      if ($keyword == 'maxProperties') {
        out += 'more';
      } else {
        out += 'fewer';
      }
      out += ' than ';
      if ($isData) {
        out += '\' + ' + ($schemaValue) + ' + \'';
      } else {
        out += '' + ($schema);
      }
      out += ' properties\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + ($schema);
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/allOf.js":
/*!*************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/allOf.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_allOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $currentBaseId = $it.baseId,
    $allSchemasEmpty = true;
  var arr1 = $schema;
  if (arr1) {
    var $sch, $i = -1,
      l1 = arr1.length - 1;
    while ($i < l1) {
      $sch = arr1[$i += 1];
      if ((it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all))) {
        $allSchemasEmpty = false;
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + (it.validate($it)) + ' ';
        $it.baseId = $currentBaseId;
        if ($breakOnError) {
          out += ' if (' + ($nextValid) + ') { ';
          $closingBraces += '}';
        }
      }
    }
  }
  if ($breakOnError) {
    if ($allSchemasEmpty) {
      out += ' if (true) { ';
    } else {
      out += ' ' + ($closingBraces.slice(0, -1)) + ' ';
    }
  }
  out = it.util.cleanUpCode(out);
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/anyOf.js":
/*!*************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/anyOf.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_anyOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $noEmptySchema = $schema.every(function($sch) {
    return (it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all));
  });
  if ($noEmptySchema) {
    var $currentBaseId = $it.baseId;
    out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = false;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var arr1 = $schema;
    if (arr1) {
      var $sch, $i = -1,
        l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + (it.validate($it)) + ' ';
        $it.baseId = $currentBaseId;
        out += ' ' + ($valid) + ' = ' + ($valid) + ' || ' + ($nextValid) + '; if (!' + ($valid) + ') { ';
        $closingBraces += '}';
      }
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + ($closingBraces) + ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('anyOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match some schema in anyOf\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }
    out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
    if (it.opts.allErrors) {
      out += ' } ';
    }
    out = it.util.cleanUpCode(out);
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/comment.js":
/*!***************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/comment.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_comment(it, $keyword, $ruleType) {
  var out = ' ';
  var $schema = it.schema[$keyword];
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $comment = it.util.toQuotedString($schema);
  if (it.opts.$comment === true) {
    out += ' console.log(' + ($comment) + ');';
  } else if (typeof it.opts.$comment == 'function') {
    out += ' self._opts.$comment(' + ($comment) + ', ' + (it.util.toQuotedString($errSchemaPath)) + ', validate.root.schema);';
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/const.js":
/*!*************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/const.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_const(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  if (!$isData) {
    out += ' var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + ';';
  }
  out += 'var ' + ($valid) + ' = equal(' + ($data) + ', schema' + ($lvl) + '); if (!' + ($valid) + ') {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ('const') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValue: schema' + ($lvl) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should be equal to constant\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' }';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/contains.js":
/*!****************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/contains.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_contains(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $idx = 'i' + $lvl,
    $dataNxt = $it.dataLevel = it.dataLevel + 1,
    $nextData = 'data' + $dataNxt,
    $currentBaseId = it.baseId,
    $nonEmptySchema = (it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 : it.util.schemaHasRules($schema, it.RULES.all));
  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
  if ($nonEmptySchema) {
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + ($nextValid) + ' = false; for (var ' + ($idx) + ' = 0; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
    var $passData = $data + '[' + $idx + ']';
    $it.dataPathArr[$dataNxt] = $idx;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
    } else {
      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
    }
    out += ' if (' + ($nextValid) + ') break; }  ';
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + ($closingBraces) + ' if (!' + ($nextValid) + ') {';
  } else {
    out += ' if (' + ($data) + '.length == 0) {';
  }
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ('contains') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should contain a valid item\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' } else { ';
  if ($nonEmptySchema) {
    out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
  }
  if (it.opts.allErrors) {
    out += ' } ';
  }
  out = it.util.cleanUpCode(out);
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/custom.js":
/*!**************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/custom.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_custom(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $rule = this,
    $definition = 'definition' + $lvl,
    $rDef = $rule.definition,
    $closingBraces = '';
  var $compile, $inline, $macro, $ruleValidate, $validateCode;
  if ($isData && $rDef.$data) {
    $validateCode = 'keywordValidate' + $lvl;
    var $validateSchema = $rDef.validateSchema;
    out += ' var ' + ($definition) + ' = RULES.custom[\'' + ($keyword) + '\'].definition; var ' + ($validateCode) + ' = ' + ($definition) + '.validate;';
  } else {
    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
    if (!$ruleValidate) return;
    $schemaValue = 'validate.schema' + $schemaPath;
    $validateCode = $ruleValidate.code;
    $compile = $rDef.compile;
    $inline = $rDef.inline;
    $macro = $rDef.macro;
  }
  var $ruleErrs = $validateCode + '.errors',
    $i = 'i' + $lvl,
    $ruleErr = 'ruleErr' + $lvl,
    $asyncKeyword = $rDef.async;
  if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');
  if (!($inline || $macro)) {
    out += '' + ($ruleErrs) + ' = null;';
  }
  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
  if ($isData && $rDef.$data) {
    $closingBraces += '}';
    out += ' if (' + ($schemaValue) + ' === undefined) { ' + ($valid) + ' = true; } else { ';
    if ($validateSchema) {
      $closingBraces += '}';
      out += ' ' + ($valid) + ' = ' + ($definition) + '.validateSchema(' + ($schemaValue) + '); if (' + ($valid) + ') { ';
    }
  }
  if ($inline) {
    if ($rDef.statements) {
      out += ' ' + ($ruleValidate.validate) + ' ';
    } else {
      out += ' ' + ($valid) + ' = ' + ($ruleValidate.validate) + '; ';
    }
  } else if ($macro) {
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    $it.schema = $ruleValidate.validate;
    $it.schemaPath = '';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + ($code);
  } else {
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    out += '  ' + ($validateCode) + '.call( ';
    if (it.opts.passContext) {
      out += 'this';
    } else {
      out += 'self';
    }
    if ($compile || $rDef.schema === false) {
      out += ' , ' + ($data) + ' ';
    } else {
      out += ' , ' + ($schemaValue) + ' , ' + ($data) + ' , validate.schema' + (it.schemaPath) + ' ';
    }
    out += ' , (dataPath || \'\')';
    if (it.errorPath != '""') {
      out += ' + ' + (it.errorPath);
    }
    var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
    out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ' , rootData )  ';
    var def_callRuleValidate = out;
    out = $$outStack.pop();
    if ($rDef.errors === false) {
      out += ' ' + ($valid) + ' = ';
      if ($asyncKeyword) {
        out += 'await ';
      }
      out += '' + (def_callRuleValidate) + '; ';
    } else {
      if ($asyncKeyword) {
        $ruleErrs = 'customErrors' + $lvl;
        out += ' var ' + ($ruleErrs) + ' = null; try { ' + ($valid) + ' = await ' + (def_callRuleValidate) + '; } catch (e) { ' + ($valid) + ' = false; if (e instanceof ValidationError) ' + ($ruleErrs) + ' = e.errors; else throw e; } ';
      } else {
        out += ' ' + ($ruleErrs) + ' = null; ' + ($valid) + ' = ' + (def_callRuleValidate) + '; ';
      }
    }
  }
  if ($rDef.modifying) {
    out += ' if (' + ($parentData) + ') ' + ($data) + ' = ' + ($parentData) + '[' + ($parentDataProperty) + '];';
  }
  out += '' + ($closingBraces);
  if ($rDef.valid) {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  } else {
    out += ' if ( ';
    if ($rDef.valid === undefined) {
      out += ' !';
      if ($macro) {
        out += '' + ($nextValid);
      } else {
        out += '' + ($valid);
      }
    } else {
      out += ' ' + (!$rDef.valid) + ' ';
    }
    out += ') { ';
    $errorKeyword = $rule.keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \'' + ($rule.keyword) + '\' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should pass "' + ($rule.keyword) + '" keyword validation\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    var def_customError = out;
    out = $$outStack.pop();
    if ($inline) {
      if ($rDef.errors) {
        if ($rDef.errors != 'full') {
          out += '  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '"; } ';
          if (it.opts.verbose) {
            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
          }
          out += ' } ';
        }
      } else {
        if ($rDef.errors === false) {
          out += ' ' + (def_customError) + ' ';
        } else {
          out += ' if (' + ($errs) + ' == errors) { ' + (def_customError) + ' } else {  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '"; } ';
          if (it.opts.verbose) {
            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
          }
          out += ' } } ';
        }
      }
    } else if ($macro) {
      out += '   var err =   '; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \'' + ($rule.keyword) + '\' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should pass "' + ($rule.keyword) + '" keyword validation\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError(vErrors); ';
        } else {
          out += ' validate.errors = vErrors; return false; ';
        }
      }
    } else {
      if ($rDef.errors === false) {
        out += ' ' + (def_customError) + ' ';
      } else {
        out += ' if (Array.isArray(' + ($ruleErrs) + ')) { if (vErrors === null) vErrors = ' + ($ruleErrs) + '; else vErrors = vErrors.concat(' + ($ruleErrs) + '); errors = vErrors.length;  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + ';  ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '";  ';
        if (it.opts.verbose) {
          out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
        }
        out += ' } } else { ' + (def_customError) + ' } ';
      }
    }
    out += ' } ';
    if ($breakOnError) {
      out += ' else { ';
    }
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/dependencies.js":
/*!********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/dependencies.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_dependencies(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $schemaDeps = {},
    $propertyDeps = {},
    $ownProperties = it.opts.ownProperties;
  for ($property in $schema) {
    var $sch = $schema[$property];
    var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
    $deps[$property] = $sch;
  }
  out += 'var ' + ($errs) + ' = errors;';
  var $currentErrorPath = it.errorPath;
  out += 'var missing' + ($lvl) + ';';
  for (var $property in $propertyDeps) {
    $deps = $propertyDeps[$property];
    if ($deps.length) {
      out += ' if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
      if ($ownProperties) {
        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';
      }
      if ($breakOnError) {
        out += ' && ( ';
        var arr1 = $deps;
        if (arr1) {
          var $propertyKey, $i = -1,
            l1 = arr1.length - 1;
          while ($i < l1) {
            $propertyKey = arr1[$i += 1];
            if ($i) {
              out += ' || ';
            }
            var $prop = it.util.getProperty($propertyKey),
              $useData = $data + $prop;
            out += ' ( ( ' + ($useData) + ' === undefined ';
            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
            }
            out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
          }
        }
        out += ')) {  ';
        var $propertyPath = 'missing' + $lvl,
          $missingProperty = '\' + ' + $propertyPath + ' + \'';
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should have ';
            if ($deps.length == 1) {
              out += 'property ' + (it.util.escapeQuotes($deps[0]));
            } else {
              out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
            }
            out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
      } else {
        out += ' ) { ';
        var arr2 = $deps;
        if (arr2) {
          var $propertyKey, i2 = -1,
            l2 = arr2.length - 1;
          while (i2 < l2) {
            $propertyKey = arr2[i2 += 1];
            var $prop = it.util.getProperty($propertyKey),
              $missingProperty = it.util.escapeQuotes($propertyKey),
              $useData = $data + $prop;
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            }
            out += ' if ( ' + ($useData) + ' === undefined ';
            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
            }
            out += ') {  var err =   '; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'should have ';
                if ($deps.length == 1) {
                  out += 'property ' + (it.util.escapeQuotes($deps[0]));
                } else {
                  out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
                }
                out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
          }
        }
      }
      out += ' }   ';
      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }
  }
  it.errorPath = $currentErrorPath;
  var $currentBaseId = $it.baseId;
  for (var $property in $schemaDeps) {
    var $sch = $schemaDeps[$property];
    if ((it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all))) {
      out += ' ' + ($nextValid) + ' = true; if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
      if ($ownProperties) {
        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';
      }
      out += ') { ';
      $it.schema = $sch;
      $it.schemaPath = $schemaPath + it.util.getProperty($property);
      $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);
      out += '  ' + (it.validate($it)) + ' ';
      $it.baseId = $currentBaseId;
      out += ' }  ';
      if ($breakOnError) {
        out += ' if (' + ($nextValid) + ') { ';
        $closingBraces += '}';
      }
    }
  }
  if ($breakOnError) {
    out += '   ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/enum.js":
/*!************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/enum.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_enum(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $i = 'i' + $lvl,
    $vSchema = 'schema' + $lvl;
  if (!$isData) {
    out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + ';';
  }
  out += 'var ' + ($valid) + ';';
  if ($isData) {
    out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
  }
  out += '' + ($valid) + ' = false;for (var ' + ($i) + '=0; ' + ($i) + '<' + ($vSchema) + '.length; ' + ($i) + '++) if (equal(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + '])) { ' + ($valid) + ' = true; break; }';
  if ($isData) {
    out += '  }  ';
  }
  out += ' if (!' + ($valid) + ') {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ('enum') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValues: schema' + ($lvl) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should be equal to one of the allowed values\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' }';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/format.js":
/*!**************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/format.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_format(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  if (it.opts.format === false) {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
    return out;
  }
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $unknownFormats = it.opts.unknownFormats,
    $allowUnknown = Array.isArray($unknownFormats);
  if ($isData) {
    var $format = 'format' + $lvl,
      $isObject = 'isObject' + $lvl,
      $formatType = 'formatType' + $lvl;
    out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var ' + ($isObject) + ' = typeof ' + ($format) + ' == \'object\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; var ' + ($formatType) + ' = ' + ($isObject) + ' && ' + ($format) + '.type || \'string\'; if (' + ($isObject) + ') { ';
    if (it.async) {
      out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';
    }
    out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';
    if ($isData) {
      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'string\') || ';
    }
    out += ' (';
    if ($unknownFormats != 'ignore') {
      out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';
      if ($allowUnknown) {
        out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';
      }
      out += ') || ';
    }
    out += ' (' + ($format) + ' && ' + ($formatType) + ' == \'' + ($ruleType) + '\' && !(typeof ' + ($format) + ' == \'function\' ? ';
    if (it.async) {
      out += ' (async' + ($lvl) + ' ? await ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';
    } else {
      out += ' ' + ($format) + '(' + ($data) + ') ';
    }
    out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';
  } else {
    var $format = it.formats[$schema];
    if (!$format) {
      if ($unknownFormats == 'ignore') {
        it.logger.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');
        if ($breakOnError) {
          out += ' if (true) { ';
        }
        return out;
      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
        if ($breakOnError) {
          out += ' if (true) { ';
        }
        return out;
      } else {
        throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
      }
    }
    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;
    var $formatType = $isObject && $format.type || 'string';
    if ($isObject) {
      var $async = $format.async === true;
      $format = $format.validate;
    }
    if ($formatType != $ruleType) {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
      return out;
    }
    if ($async) {
      if (!it.async) throw new Error('async format in sync schema');
      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';
      out += ' if (!(await ' + ($formatRef) + '(' + ($data) + '))) { ';
    } else {
      out += ' if (! ';
      var $formatRef = 'formats' + it.util.getProperty($schema);
      if ($isObject) $formatRef += '.validate';
      if (typeof $format == 'function') {
        out += ' ' + ($formatRef) + '(' + ($data) + ') ';
      } else {
        out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';
      }
      out += ') { ';
    }
  }
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ('format') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';
    if ($isData) {
      out += '' + ($schemaValue);
    } else {
      out += '' + (it.util.toQuotedString($schema));
    }
    out += '  } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should match format "';
      if ($isData) {
        out += '\' + ' + ($schemaValue) + ' + \'';
      } else {
        out += '' + (it.util.escapeQuotes($schema));
      }
      out += '"\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + (it.util.toQuotedString($schema));
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' } ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/if.js":
/*!**********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/if.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_if(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $thenSch = it.schema['then'],
    $elseSch = it.schema['else'],
    $thenPresent = $thenSch !== undefined && (it.opts.strictKeywords ? typeof $thenSch == 'object' && Object.keys($thenSch).length > 0 : it.util.schemaHasRules($thenSch, it.RULES.all)),
    $elsePresent = $elseSch !== undefined && (it.opts.strictKeywords ? typeof $elseSch == 'object' && Object.keys($elseSch).length > 0 : it.util.schemaHasRules($elseSch, it.RULES.all)),
    $currentBaseId = $it.baseId;
  if ($thenPresent || $elsePresent) {
    var $ifClause;
    $it.createErrors = false;
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = true;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    out += '  ' + (it.validate($it)) + ' ';
    $it.baseId = $currentBaseId;
    $it.createErrors = true;
    out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }  ';
    it.compositeRule = $it.compositeRule = $wasComposite;
    if ($thenPresent) {
      out += ' if (' + ($nextValid) + ') {  ';
      $it.schema = it.schema['then'];
      $it.schemaPath = it.schemaPath + '.then';
      $it.errSchemaPath = it.errSchemaPath + '/then';
      out += '  ' + (it.validate($it)) + ' ';
      $it.baseId = $currentBaseId;
      out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';
      if ($thenPresent && $elsePresent) {
        $ifClause = 'ifClause' + $lvl;
        out += ' var ' + ($ifClause) + ' = \'then\'; ';
      } else {
        $ifClause = '\'then\'';
      }
      out += ' } ';
      if ($elsePresent) {
        out += ' else { ';
      }
    } else {
      out += ' if (!' + ($nextValid) + ') { ';
    }
    if ($elsePresent) {
      $it.schema = it.schema['else'];
      $it.schemaPath = it.schemaPath + '.else';
      $it.errSchemaPath = it.errSchemaPath + '/else';
      out += '  ' + (it.validate($it)) + ' ';
      $it.baseId = $currentBaseId;
      out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';
      if ($thenPresent && $elsePresent) {
        $ifClause = 'ifClause' + $lvl;
        out += ' var ' + ($ifClause) + ' = \'else\'; ';
      } else {
        $ifClause = '\'else\'';
      }
      out += ' } ';
    }
    out += ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('if') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { failingKeyword: ' + ($ifClause) + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match "\' + ' + ($ifClause) + ' + \'" schema\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }
    out += ' }   ';
    if ($breakOnError) {
      out += ' else { ';
    }
    out = it.util.cleanUpCode(out);
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/index.js":
/*!*************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/index.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//all requires must be explicit because browserify won't work with dynamic requires
module.exports = {
  '$ref': __webpack_require__(/*! ./ref */ "../../node_modules/ajv/lib/dotjs/ref.js"),
  allOf: __webpack_require__(/*! ./allOf */ "../../node_modules/ajv/lib/dotjs/allOf.js"),
  anyOf: __webpack_require__(/*! ./anyOf */ "../../node_modules/ajv/lib/dotjs/anyOf.js"),
  '$comment': __webpack_require__(/*! ./comment */ "../../node_modules/ajv/lib/dotjs/comment.js"),
  const: __webpack_require__(/*! ./const */ "../../node_modules/ajv/lib/dotjs/const.js"),
  contains: __webpack_require__(/*! ./contains */ "../../node_modules/ajv/lib/dotjs/contains.js"),
  dependencies: __webpack_require__(/*! ./dependencies */ "../../node_modules/ajv/lib/dotjs/dependencies.js"),
  'enum': __webpack_require__(/*! ./enum */ "../../node_modules/ajv/lib/dotjs/enum.js"),
  format: __webpack_require__(/*! ./format */ "../../node_modules/ajv/lib/dotjs/format.js"),
  'if': __webpack_require__(/*! ./if */ "../../node_modules/ajv/lib/dotjs/if.js"),
  items: __webpack_require__(/*! ./items */ "../../node_modules/ajv/lib/dotjs/items.js"),
  maximum: __webpack_require__(/*! ./_limit */ "../../node_modules/ajv/lib/dotjs/_limit.js"),
  minimum: __webpack_require__(/*! ./_limit */ "../../node_modules/ajv/lib/dotjs/_limit.js"),
  maxItems: __webpack_require__(/*! ./_limitItems */ "../../node_modules/ajv/lib/dotjs/_limitItems.js"),
  minItems: __webpack_require__(/*! ./_limitItems */ "../../node_modules/ajv/lib/dotjs/_limitItems.js"),
  maxLength: __webpack_require__(/*! ./_limitLength */ "../../node_modules/ajv/lib/dotjs/_limitLength.js"),
  minLength: __webpack_require__(/*! ./_limitLength */ "../../node_modules/ajv/lib/dotjs/_limitLength.js"),
  maxProperties: __webpack_require__(/*! ./_limitProperties */ "../../node_modules/ajv/lib/dotjs/_limitProperties.js"),
  minProperties: __webpack_require__(/*! ./_limitProperties */ "../../node_modules/ajv/lib/dotjs/_limitProperties.js"),
  multipleOf: __webpack_require__(/*! ./multipleOf */ "../../node_modules/ajv/lib/dotjs/multipleOf.js"),
  not: __webpack_require__(/*! ./not */ "../../node_modules/ajv/lib/dotjs/not.js"),
  oneOf: __webpack_require__(/*! ./oneOf */ "../../node_modules/ajv/lib/dotjs/oneOf.js"),
  pattern: __webpack_require__(/*! ./pattern */ "../../node_modules/ajv/lib/dotjs/pattern.js"),
  properties: __webpack_require__(/*! ./properties */ "../../node_modules/ajv/lib/dotjs/properties.js"),
  propertyNames: __webpack_require__(/*! ./propertyNames */ "../../node_modules/ajv/lib/dotjs/propertyNames.js"),
  required: __webpack_require__(/*! ./required */ "../../node_modules/ajv/lib/dotjs/required.js"),
  uniqueItems: __webpack_require__(/*! ./uniqueItems */ "../../node_modules/ajv/lib/dotjs/uniqueItems.js"),
  validate: __webpack_require__(/*! ./validate */ "../../node_modules/ajv/lib/dotjs/validate.js")
};


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/items.js":
/*!*************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/items.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_items(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $idx = 'i' + $lvl,
    $dataNxt = $it.dataLevel = it.dataLevel + 1,
    $nextData = 'data' + $dataNxt,
    $currentBaseId = it.baseId;
  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
  if (Array.isArray($schema)) {
    var $additionalItems = it.schema.additionalItems;
    if ($additionalItems === false) {
      out += ' ' + ($valid) + ' = ' + ($data) + '.length <= ' + ($schema.length) + '; ';
      var $currErrSchemaPath = $errSchemaPath;
      $errSchemaPath = it.errSchemaPath + '/additionalItems';
      out += '  if (!' + ($valid) + ') {   ';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('additionalItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schema.length) + ' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT have more than ' + ($schema.length) + ' items\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } ';
      $errSchemaPath = $currErrSchemaPath;
      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }
    var arr1 = $schema;
    if (arr1) {
      var $sch, $i = -1,
        l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        if ((it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all))) {
          out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($i) + ') { ';
          var $passData = $data + '[' + $i + ']';
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          $it.errSchemaPath = $errSchemaPath + '/' + $i;
          $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
          $it.dataPathArr[$dataNxt] = $i;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
          } else {
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
          }
          out += ' }  ';
          if ($breakOnError) {
            out += ' if (' + ($nextValid) + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
    if (typeof $additionalItems == 'object' && (it.opts.strictKeywords ? typeof $additionalItems == 'object' && Object.keys($additionalItems).length > 0 : it.util.schemaHasRules($additionalItems, it.RULES.all))) {
      $it.schema = $additionalItems;
      $it.schemaPath = it.schemaPath + '.additionalItems';
      $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
      out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($schema.length) + ') {  for (var ' + ($idx) + ' = ' + ($schema.length) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + '[' + $idx + ']';
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
      } else {
        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
      }
      if ($breakOnError) {
        out += ' if (!' + ($nextValid) + ') break; ';
      }
      out += ' } }  ';
      if ($breakOnError) {
        out += ' if (' + ($nextValid) + ') { ';
        $closingBraces += '}';
      }
    }
  } else if ((it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 : it.util.schemaHasRules($schema, it.RULES.all))) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += '  for (var ' + ($idx) + ' = ' + (0) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
    var $passData = $data + '[' + $idx + ']';
    $it.dataPathArr[$dataNxt] = $idx;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
    } else {
      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
    }
    if ($breakOnError) {
      out += ' if (!' + ($nextValid) + ') break; ';
    }
    out += ' }';
  }
  if ($breakOnError) {
    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/multipleOf.js":
/*!******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/multipleOf.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_multipleOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  out += 'var division' + ($lvl) + ';if (';
  if ($isData) {
    out += ' ' + ($schemaValue) + ' !== undefined && ( typeof ' + ($schemaValue) + ' != \'number\' || ';
  }
  out += ' (division' + ($lvl) + ' = ' + ($data) + ' / ' + ($schemaValue) + ', ';
  if (it.opts.multipleOfPrecision) {
    out += ' Math.abs(Math.round(division' + ($lvl) + ') - division' + ($lvl) + ') > 1e-' + (it.opts.multipleOfPrecision) + ' ';
  } else {
    out += ' division' + ($lvl) + ' !== parseInt(division' + ($lvl) + ') ';
  }
  out += ' ) ';
  if ($isData) {
    out += '  )  ';
  }
  out += ' ) {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ('multipleOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { multipleOf: ' + ($schemaValue) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should be multiple of ';
      if ($isData) {
        out += '\' + ' + ($schemaValue);
      } else {
        out += '' + ($schemaValue) + '\'';
      }
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + ($schema);
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/not.js":
/*!***********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/not.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_not(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  if ((it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 : it.util.schemaHasRules($schema, it.RULES.all))) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + ($errs) + ' = errors;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    $it.createErrors = false;
    var $allErrorsOption;
    if ($it.opts.allErrors) {
      $allErrorsOption = $it.opts.allErrors;
      $it.opts.allErrors = false;
    }
    out += ' ' + (it.validate($it)) + ' ';
    $it.createErrors = true;
    if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' if (' + ($nextValid) + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('not') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be valid\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
    if (it.opts.allErrors) {
      out += ' } ';
    }
  } else {
    out += '  var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('not') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be valid\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if ($breakOnError) {
      out += ' if (false) { ';
    }
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/oneOf.js":
/*!*************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/oneOf.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_oneOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $currentBaseId = $it.baseId,
    $prevValid = 'prevValid' + $lvl,
    $passingSchemas = 'passingSchemas' + $lvl;
  out += 'var ' + ($errs) + ' = errors , ' + ($prevValid) + ' = false , ' + ($valid) + ' = false , ' + ($passingSchemas) + ' = null; ';
  var $wasComposite = it.compositeRule;
  it.compositeRule = $it.compositeRule = true;
  var arr1 = $schema;
  if (arr1) {
    var $sch, $i = -1,
      l1 = arr1.length - 1;
    while ($i < l1) {
      $sch = arr1[$i += 1];
      if ((it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all))) {
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + (it.validate($it)) + ' ';
        $it.baseId = $currentBaseId;
      } else {
        out += ' var ' + ($nextValid) + ' = true; ';
      }
      if ($i) {
        out += ' if (' + ($nextValid) + ' && ' + ($prevValid) + ') { ' + ($valid) + ' = false; ' + ($passingSchemas) + ' = [' + ($passingSchemas) + ', ' + ($i) + ']; } else { ';
        $closingBraces += '}';
      }
      out += ' if (' + ($nextValid) + ') { ' + ($valid) + ' = ' + ($prevValid) + ' = true; ' + ($passingSchemas) + ' = ' + ($i) + '; }';
    }
  }
  it.compositeRule = $it.compositeRule = $wasComposite;
  out += '' + ($closingBraces) + 'if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ('oneOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { passingSchemas: ' + ($passingSchemas) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should match exactly one schema in oneOf\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError(vErrors); ';
    } else {
      out += ' validate.errors = vErrors; return false; ';
    }
  }
  out += '} else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }';
  if (it.opts.allErrors) {
    out += ' } ';
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/pattern.js":
/*!***************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/pattern.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_pattern(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);
  out += 'if ( ';
  if ($isData) {
    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'string\') || ';
  }
  out += ' !' + ($regexp) + '.test(' + ($data) + ') ) {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ('pattern') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { pattern:  ';
    if ($isData) {
      out += '' + ($schemaValue);
    } else {
      out += '' + (it.util.toQuotedString($schema));
    }
    out += '  } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should match pattern "';
      if ($isData) {
        out += '\' + ' + ($schemaValue) + ' + \'';
      } else {
        out += '' + (it.util.escapeQuotes($schema));
      }
      out += '"\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + (it.util.toQuotedString($schema));
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/properties.js":
/*!******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/properties.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_properties(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $key = 'key' + $lvl,
    $idx = 'idx' + $lvl,
    $dataNxt = $it.dataLevel = it.dataLevel + 1,
    $nextData = 'data' + $dataNxt,
    $dataProperties = 'dataProperties' + $lvl;
  var $schemaKeys = Object.keys($schema || {}),
    $pProperties = it.schema.patternProperties || {},
    $pPropertyKeys = Object.keys($pProperties),
    $aProperties = it.schema.additionalProperties,
    $someProperties = $schemaKeys.length || $pPropertyKeys.length,
    $noAdditional = $aProperties === false,
    $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,
    $removeAdditional = it.opts.removeAdditional,
    $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
    $ownProperties = it.opts.ownProperties,
    $currentBaseId = it.baseId;
  var $required = it.schema.required;
  if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);
  out += 'var ' + ($errs) + ' = errors;var ' + ($nextValid) + ' = true;';
  if ($ownProperties) {
    out += ' var ' + ($dataProperties) + ' = undefined;';
  }
  if ($checkAdditional) {
    if ($ownProperties) {
      out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
    } else {
      out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
    }
    if ($someProperties) {
      out += ' var isAdditional' + ($lvl) + ' = !(false ';
      if ($schemaKeys.length) {
        if ($schemaKeys.length > 8) {
          out += ' || validate.schema' + ($schemaPath) + '.hasOwnProperty(' + ($key) + ') ';
        } else {
          var arr1 = $schemaKeys;
          if (arr1) {
            var $propertyKey, i1 = -1,
              l1 = arr1.length - 1;
            while (i1 < l1) {
              $propertyKey = arr1[i1 += 1];
              out += ' || ' + ($key) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';
            }
          }
        }
      }
      if ($pPropertyKeys.length) {
        var arr2 = $pPropertyKeys;
        if (arr2) {
          var $pProperty, $i = -1,
            l2 = arr2.length - 1;
          while ($i < l2) {
            $pProperty = arr2[$i += 1];
            out += ' || ' + (it.usePattern($pProperty)) + '.test(' + ($key) + ') ';
          }
        }
      }
      out += ' ); if (isAdditional' + ($lvl) + ') { ';
    }
    if ($removeAdditional == 'all') {
      out += ' delete ' + ($data) + '[' + ($key) + ']; ';
    } else {
      var $currentErrorPath = it.errorPath;
      var $additionalProperty = '\' + ' + $key + ' + \'';
      if (it.opts._errorDataPathProperty) {
        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
      }
      if ($noAdditional) {
        if ($removeAdditional) {
          out += ' delete ' + ($data) + '[' + ($key) + ']; ';
        } else {
          out += ' ' + ($nextValid) + ' = false; ';
          var $currErrSchemaPath = $errSchemaPath;
          $errSchemaPath = it.errSchemaPath + '/additionalProperties';
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ('additionalProperties') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { additionalProperty: \'' + ($additionalProperty) + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'';
              if (it.opts._errorDataPathProperty) {
                out += 'is an invalid additional property';
              } else {
                out += 'should NOT have additional properties';
              }
              out += '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + (__err) + ']); ';
            } else {
              out += ' validate.errors = [' + (__err) + ']; return false; ';
            }
          } else {
            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          $errSchemaPath = $currErrSchemaPath;
          if ($breakOnError) {
            out += ' break; ';
          }
        }
      } else if ($additionalIsSchema) {
        if ($removeAdditional == 'failing') {
          out += ' var ' + ($errs) + ' = errors;  ';
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + '.additionalProperties';
          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
          } else {
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
          }
          out += ' if (!' + ($nextValid) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[' + ($key) + ']; }  ';
          it.compositeRule = $it.compositeRule = $wasComposite;
        } else {
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + '.additionalProperties';
          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
          } else {
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
          }
          if ($breakOnError) {
            out += ' if (!' + ($nextValid) + ') break; ';
          }
        }
      }
      it.errorPath = $currentErrorPath;
    }
    if ($someProperties) {
      out += ' } ';
    }
    out += ' }  ';
    if ($breakOnError) {
      out += ' if (' + ($nextValid) + ') { ';
      $closingBraces += '}';
    }
  }
  var $useDefaults = it.opts.useDefaults && !it.compositeRule;
  if ($schemaKeys.length) {
    var arr3 = $schemaKeys;
    if (arr3) {
      var $propertyKey, i3 = -1,
        l3 = arr3.length - 1;
      while (i3 < l3) {
        $propertyKey = arr3[i3 += 1];
        var $sch = $schema[$propertyKey];
        if ((it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all))) {
          var $prop = it.util.getProperty($propertyKey),
            $passData = $data + $prop,
            $hasDefault = $useDefaults && $sch.default !== undefined;
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + $prop;
          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);
          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            $code = it.util.varReplace($code, $nextData, $passData);
            var $useData = $passData;
          } else {
            var $useData = $nextData;
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';
          }
          if ($hasDefault) {
            out += ' ' + ($code) + ' ';
          } else {
            if ($requiredHash && $requiredHash[$propertyKey]) {
              out += ' if ( ' + ($useData) + ' === undefined ';
              if ($ownProperties) {
                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
              }
              out += ') { ' + ($nextValid) + ' = false; ';
              var $currentErrorPath = it.errorPath,
                $currErrSchemaPath = $errSchemaPath,
                $missingProperty = it.util.escapeQuotes($propertyKey);
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }
              $errSchemaPath = it.errSchemaPath + '/required';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'';
                  if (it.opts._errorDataPathProperty) {
                    out += 'is a required property';
                  } else {
                    out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                  }
                  out += '\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              $errSchemaPath = $currErrSchemaPath;
              it.errorPath = $currentErrorPath;
              out += ' } else { ';
            } else {
              if ($breakOnError) {
                out += ' if ( ' + ($useData) + ' === undefined ';
                if ($ownProperties) {
                  out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                }
                out += ') { ' + ($nextValid) + ' = true; } else { ';
              } else {
                out += ' if (' + ($useData) + ' !== undefined ';
                if ($ownProperties) {
                  out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                }
                out += ' ) { ';
              }
            }
            out += ' ' + ($code) + ' } ';
          }
        }
        if ($breakOnError) {
          out += ' if (' + ($nextValid) + ') { ';
          $closingBraces += '}';
        }
      }
    }
  }
  if ($pPropertyKeys.length) {
    var arr4 = $pPropertyKeys;
    if (arr4) {
      var $pProperty, i4 = -1,
        l4 = arr4.length - 1;
      while (i4 < l4) {
        $pProperty = arr4[i4 += 1];
        var $sch = $pProperties[$pProperty];
        if ((it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all))) {
          $it.schema = $sch;
          $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
          $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);
          if ($ownProperties) {
            out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
          } else {
            out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
          }
          out += ' if (' + (it.usePattern($pProperty)) + '.test(' + ($key) + ')) { ';
          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
          } else {
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
          }
          if ($breakOnError) {
            out += ' if (!' + ($nextValid) + ') break; ';
          }
          out += ' } ';
          if ($breakOnError) {
            out += ' else ' + ($nextValid) + ' = true; ';
          }
          out += ' }  ';
          if ($breakOnError) {
            out += ' if (' + ($nextValid) + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
  }
  if ($breakOnError) {
    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/propertyNames.js":
/*!*********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/propertyNames.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_propertyNames(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  out += 'var ' + ($errs) + ' = errors;';
  if ((it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 : it.util.schemaHasRules($schema, it.RULES.all))) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    var $key = 'key' + $lvl,
      $idx = 'idx' + $lvl,
      $i = 'i' + $lvl,
      $invalidName = '\' + ' + $key + ' + \'',
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $dataProperties = 'dataProperties' + $lvl,
      $ownProperties = it.opts.ownProperties,
      $currentBaseId = it.baseId;
    if ($ownProperties) {
      out += ' var ' + ($dataProperties) + ' = undefined; ';
    }
    if ($ownProperties) {
      out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
    } else {
      out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
    }
    out += ' var startErrs' + ($lvl) + ' = errors; ';
    var $passData = $key;
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
    } else {
      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' if (!' + ($nextValid) + ') { for (var ' + ($i) + '=startErrs' + ($lvl) + '; ' + ($i) + '<errors; ' + ($i) + '++) { vErrors[' + ($i) + '].propertyName = ' + ($key) + '; }   var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('propertyNames') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { propertyName: \'' + ($invalidName) + '\' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'property name \\\'' + ($invalidName) + '\\\' is invalid\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }
    if ($breakOnError) {
      out += ' break; ';
    }
    out += ' } }';
  }
  if ($breakOnError) {
    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/ref.js":
/*!***********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/ref.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_ref(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $async, $refCode;
  if ($schema == '#' || $schema == '#/') {
    if (it.isRoot) {
      $async = it.async;
      $refCode = 'validate';
    } else {
      $async = it.root.schema.$async === true;
      $refCode = 'root.refVal[0]';
    }
  } else {
    var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
    if ($refVal === undefined) {
      var $message = it.MissingRefError.message(it.baseId, $schema);
      if (it.opts.missingRefs == 'fail') {
        it.logger.error($message);
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ('$ref') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { ref: \'' + (it.util.escapeQuotes($schema)) + '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'can\\\'t resolve reference ' + (it.util.escapeQuotes($schema)) + '\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        if ($breakOnError) {
          out += ' if (false) { ';
        }
      } else if (it.opts.missingRefs == 'ignore') {
        it.logger.warn($message);
        if ($breakOnError) {
          out += ' if (true) { ';
        }
      } else {
        throw new it.MissingRefError(it.baseId, $schema, $message);
      }
    } else if ($refVal.inline) {
      var $it = it.util.copy(it);
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      $it.schema = $refVal.schema;
      $it.schemaPath = '';
      $it.errSchemaPath = $schema;
      var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
      out += ' ' + ($code) + ' ';
      if ($breakOnError) {
        out += ' if (' + ($nextValid) + ') { ';
      }
    } else {
      $async = $refVal.$async === true || (it.async && $refVal.$async !== false);
      $refCode = $refVal.code;
    }
  }
  if ($refCode) {
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    if (it.opts.passContext) {
      out += ' ' + ($refCode) + '.call(this, ';
    } else {
      out += ' ' + ($refCode) + '( ';
    }
    out += ' ' + ($data) + ', (dataPath || \'\')';
    if (it.errorPath != '""') {
      out += ' + ' + (it.errorPath);
    }
    var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
    out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ', rootData)  ';
    var __callValidate = out;
    out = $$outStack.pop();
    if ($async) {
      if (!it.async) throw new Error('async schema referenced by sync schema');
      if ($breakOnError) {
        out += ' var ' + ($valid) + '; ';
      }
      out += ' try { await ' + (__callValidate) + '; ';
      if ($breakOnError) {
        out += ' ' + ($valid) + ' = true; ';
      }
      out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';
      if ($breakOnError) {
        out += ' ' + ($valid) + ' = false; ';
      }
      out += ' } ';
      if ($breakOnError) {
        out += ' if (' + ($valid) + ') { ';
      }
    } else {
      out += ' if (!' + (__callValidate) + ') { if (vErrors === null) vErrors = ' + ($refCode) + '.errors; else vErrors = vErrors.concat(' + ($refCode) + '.errors); errors = vErrors.length; } ';
      if ($breakOnError) {
        out += ' else { ';
      }
    }
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/required.js":
/*!****************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/required.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_required(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $vSchema = 'schema' + $lvl;
  if (!$isData) {
    if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
      var $required = [];
      var arr1 = $schema;
      if (arr1) {
        var $property, i1 = -1,
          l1 = arr1.length - 1;
        while (i1 < l1) {
          $property = arr1[i1 += 1];
          var $propertySch = it.schema.properties[$property];
          if (!($propertySch && (it.opts.strictKeywords ? typeof $propertySch == 'object' && Object.keys($propertySch).length > 0 : it.util.schemaHasRules($propertySch, it.RULES.all)))) {
            $required[$required.length] = $property;
          }
        }
      }
    } else {
      var $required = $schema;
    }
  }
  if ($isData || $required.length) {
    var $currentErrorPath = it.errorPath,
      $loopRequired = $isData || $required.length >= it.opts.loopRequired,
      $ownProperties = it.opts.ownProperties;
    if ($breakOnError) {
      out += ' var missing' + ($lvl) + '; ';
      if ($loopRequired) {
        if (!$isData) {
          out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
        }
        var $i = 'i' + $lvl,
          $propertyPath = 'schema' + $lvl + '[' + $i + ']',
          $missingProperty = '\' + ' + $propertyPath + ' + \'';
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        }
        out += ' var ' + ($valid) + ' = true; ';
        if ($isData) {
          out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
        }
        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { ' + ($valid) + ' = ' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] !== undefined ';
        if ($ownProperties) {
          out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
        }
        out += '; if (!' + ($valid) + ') break; } ';
        if ($isData) {
          out += '  }  ';
        }
        out += '  if (!' + ($valid) + ') {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'';
            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
            }
            out += '\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else { ';
      } else {
        out += ' if ( ';
        var arr2 = $required;
        if (arr2) {
          var $propertyKey, $i = -1,
            l2 = arr2.length - 1;
          while ($i < l2) {
            $propertyKey = arr2[$i += 1];
            if ($i) {
              out += ' || ';
            }
            var $prop = it.util.getProperty($propertyKey),
              $useData = $data + $prop;
            out += ' ( ( ' + ($useData) + ' === undefined ';
            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
            }
            out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
          }
        }
        out += ') {  ';
        var $propertyPath = 'missing' + $lvl,
          $missingProperty = '\' + ' + $propertyPath + ' + \'';
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'';
            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
            }
            out += '\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else { ';
      }
    } else {
      if ($loopRequired) {
        if (!$isData) {
          out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
        }
        var $i = 'i' + $lvl,
          $propertyPath = 'schema' + $lvl + '[' + $i + ']',
          $missingProperty = '\' + ' + $propertyPath + ' + \'';
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        }
        if ($isData) {
          out += ' if (' + ($vSchema) + ' && !Array.isArray(' + ($vSchema) + ')) {  var err =   '; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'';
              if (it.opts._errorDataPathProperty) {
                out += 'is a required property';
              } else {
                out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
              }
              out += '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + ($vSchema) + ' !== undefined) { ';
        }
        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { if (' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] === undefined ';
        if ($ownProperties) {
          out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
        }
        out += ') {  var err =   '; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'';
            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
            }
            out += '\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';
        if ($isData) {
          out += '  }  ';
        }
      } else {
        var arr3 = $required;
        if (arr3) {
          var $propertyKey, i3 = -1,
            l3 = arr3.length - 1;
          while (i3 < l3) {
            $propertyKey = arr3[i3 += 1];
            var $prop = it.util.getProperty($propertyKey),
              $missingProperty = it.util.escapeQuotes($propertyKey),
              $useData = $data + $prop;
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            }
            out += ' if ( ' + ($useData) + ' === undefined ';
            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
            }
            out += ') {  var err =   '; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'';
                if (it.opts._errorDataPathProperty) {
                  out += 'is a required property';
                } else {
                  out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                }
                out += '\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
          }
        }
      }
    }
    it.errorPath = $currentErrorPath;
  } else if ($breakOnError) {
    out += ' if (true) {';
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/uniqueItems.js":
/*!*******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/uniqueItems.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_uniqueItems(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  if (($schema || $isData) && it.opts.uniqueItems !== false) {
    if ($isData) {
      out += ' var ' + ($valid) + '; if (' + ($schemaValue) + ' === false || ' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \'boolean\') ' + ($valid) + ' = false; else { ';
    }
    out += ' var i = ' + ($data) + '.length , ' + ($valid) + ' = true , j; if (i > 1) { ';
    var $itemType = it.schema.items && it.schema.items.type,
      $typeIsArray = Array.isArray($itemType);
    if (!$itemType || $itemType == 'object' || $itemType == 'array' || ($typeIsArray && ($itemType.indexOf('object') >= 0 || $itemType.indexOf('array') >= 0))) {
      out += ' outer: for (;i--;) { for (j = i; j--;) { if (equal(' + ($data) + '[i], ' + ($data) + '[j])) { ' + ($valid) + ' = false; break outer; } } } ';
    } else {
      out += ' var itemIndices = {}, item; for (;i--;) { var item = ' + ($data) + '[i]; ';
      var $method = 'checkDataType' + ($typeIsArray ? 's' : '');
      out += ' if (' + (it.util[$method]($itemType, 'item', true)) + ') continue; ';
      if ($typeIsArray) {
        out += ' if (typeof item == \'string\') item = \'"\' + item; ';
      }
      out += ' if (typeof itemIndices[item] == \'number\') { ' + ($valid) + ' = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ';
    }
    out += ' } ';
    if ($isData) {
      out += '  }  ';
    }
    out += ' if (!' + ($valid) + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ('uniqueItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { i: i, j: j } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + ($schemaPath);
        } else {
          out += '' + ($schema);
        }
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } ';
    if ($breakOnError) {
      out += ' else { ';
    }
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/dotjs/validate.js":
/*!****************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/dotjs/validate.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function generate_validate(it, $keyword, $ruleType) {
  var out = '';
  var $async = it.schema.$async === true,
    $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),
    $id = it.self._getId(it.schema);
  if (it.opts.strictKeywords) {
    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);
    if ($unknownKwd) {
      var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;
      if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);
      else throw new Error($keywordsMsg);
    }
  }
  if (it.isTop) {
    out += ' var validate = ';
    if ($async) {
      it.async = true;
      out += 'async ';
    }
    out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \'use strict\'; ';
    if ($id && (it.opts.sourceCode || it.opts.processCode)) {
      out += ' ' + ('/\*# sourceURL=' + $id + ' */') + ' ';
    }
  }
  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {
    var $keyword = 'false schema';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    if (it.schema === false) {
      if (it.isTop) {
        $breakOnError = true;
      } else {
        out += ' var ' + ($valid) + ' = false; ';
      }
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || 'false schema') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
        if (it.opts.messages !== false) {
          out += ' , message: \'boolean schema is false\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + (__err) + ']); ';
        } else {
          out += ' validate.errors = [' + (__err) + ']; return false; ';
        }
      } else {
        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
    } else {
      if (it.isTop) {
        if ($async) {
          out += ' return data; ';
        } else {
          out += ' validate.errors = null; return true; ';
        }
      } else {
        out += ' var ' + ($valid) + ' = true; ';
      }
    }
    if (it.isTop) {
      out += ' }; return validate; ';
    }
    return out;
  }
  if (it.isTop) {
    var $top = it.isTop,
      $lvl = it.level = 0,
      $dataLvl = it.dataLevel = 0,
      $data = 'data';
    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
    it.baseId = it.baseId || it.rootId;
    delete it.isTop;
    it.dataPathArr = [undefined];
    if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {
      var $defaultMsg = 'default is ignored in the schema root';
      if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
      else throw new Error($defaultMsg);
    }
    out += ' var vErrors = null; ';
    out += ' var errors = 0;     ';
    out += ' if (rootData === undefined) rootData = data; ';
  } else {
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $data = 'data' + ($dataLvl || '');
    if ($id) it.baseId = it.resolve.url(it.baseId, $id);
    if ($async && !it.async) throw new Error('async schema in sync schema');
    out += ' var errs_' + ($lvl) + ' = errors;';
  }
  var $valid = 'valid' + $lvl,
    $breakOnError = !it.opts.allErrors,
    $closingBraces1 = '',
    $closingBraces2 = '';
  var $errorKeyword;
  var $typeSchema = it.schema.type,
    $typeIsArray = Array.isArray($typeSchema);
  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
    if ($typeIsArray) {
      if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');
    } else if ($typeSchema != 'null') {
      $typeSchema = [$typeSchema, 'null'];
      $typeIsArray = true;
    }
  }
  if ($typeIsArray && $typeSchema.length == 1) {
    $typeSchema = $typeSchema[0];
    $typeIsArray = false;
  }
  if (it.schema.$ref && $refKeywords) {
    if (it.opts.extendRefs == 'fail') {
      throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)');
    } else if (it.opts.extendRefs !== true) {
      $refKeywords = false;
      it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
    }
  }
  if (it.schema.$comment && it.opts.$comment) {
    out += ' ' + (it.RULES.all.$comment.code(it, '$comment'));
  }
  if ($typeSchema) {
    if (it.opts.coerceTypes) {
      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
    }
    var $rulesGroup = it.RULES.types[$typeSchema];
    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {
      var $schemaPath = it.schemaPath + '.type',
        $errSchemaPath = it.errSchemaPath + '/type';
      var $schemaPath = it.schemaPath + '.type',
        $errSchemaPath = it.errSchemaPath + '/type',
        $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
      out += ' if (' + (it.util[$method]($typeSchema, $data, true)) + ') { ';
      if ($coerceToTypes) {
        var $dataType = 'dataType' + $lvl,
          $coerced = 'coerced' + $lvl;
        out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; ';
        if (it.opts.coerceTypes == 'array') {
          out += ' if (' + ($dataType) + ' == \'object\' && Array.isArray(' + ($data) + ')) ' + ($dataType) + ' = \'array\'; ';
        }
        out += ' var ' + ($coerced) + ' = undefined; ';
        var $bracesCoercion = '';
        var arr1 = $coerceToTypes;
        if (arr1) {
          var $type, $i = -1,
            l1 = arr1.length - 1;
          while ($i < l1) {
            $type = arr1[$i += 1];
            if ($i) {
              out += ' if (' + ($coerced) + ' === undefined) { ';
              $bracesCoercion += '}';
            }
            if (it.opts.coerceTypes == 'array' && $type != 'array') {
              out += ' if (' + ($dataType) + ' == \'array\' && ' + ($data) + '.length == 1) { ' + ($coerced) + ' = ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + ';  } ';
            }
            if ($type == 'string') {
              out += ' if (' + ($dataType) + ' == \'number\' || ' + ($dataType) + ' == \'boolean\') ' + ($coerced) + ' = \'\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \'\'; ';
            } else if ($type == 'number' || $type == 'integer') {
              out += ' if (' + ($dataType) + ' == \'boolean\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \'string\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';
              if ($type == 'integer') {
                out += ' && !(' + ($data) + ' % 1)';
              }
              out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';
            } else if ($type == 'boolean') {
              out += ' if (' + ($data) + ' === \'false\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \'true\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';
            } else if ($type == 'null') {
              out += ' if (' + ($data) + ' === \'\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';
            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {
              out += ' if (' + ($dataType) + ' == \'string\' || ' + ($dataType) + ' == \'number\' || ' + ($dataType) + ' == \'boolean\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';
            }
          }
        }
        out += ' ' + ($bracesCoercion) + ' if (' + ($coerced) + ' === undefined) {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
          if ($typeIsArray) {
            out += '' + ($typeSchema.join(","));
          } else {
            out += '' + ($typeSchema);
          }
          out += '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should be ';
            if ($typeIsArray) {
              out += '' + ($typeSchema.join(","));
            } else {
              out += '' + ($typeSchema);
            }
            out += '\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else {  ';
        var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
          $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
        out += ' ' + ($data) + ' = ' + ($coerced) + '; ';
        if (!$dataLvl) {
          out += 'if (' + ($parentData) + ' !== undefined)';
        }
        out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';
      } else {
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
          if ($typeIsArray) {
            out += '' + ($typeSchema.join(","));
          } else {
            out += '' + ($typeSchema);
          }
          out += '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should be ';
            if ($typeIsArray) {
              out += '' + ($typeSchema.join(","));
            } else {
              out += '' + ($typeSchema);
            }
            out += '\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + (__err) + ']); ';
          } else {
            out += ' validate.errors = [' + (__err) + ']; return false; ';
          }
        } else {
          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
      }
      out += ' } ';
    }
  }
  if (it.schema.$ref && !$refKeywords) {
    out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';
    if ($breakOnError) {
      out += ' } if (errors === ';
      if ($top) {
        out += '0';
      } else {
        out += 'errs_' + ($lvl);
      }
      out += ') { ';
      $closingBraces2 += '}';
    }
  } else {
    var arr2 = it.RULES;
    if (arr2) {
      var $rulesGroup, i2 = -1,
        l2 = arr2.length - 1;
      while (i2 < l2) {
        $rulesGroup = arr2[i2 += 1];
        if ($shouldUseGroup($rulesGroup)) {
          if ($rulesGroup.type) {
            out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data)) + ') { ';
          }
          if (it.opts.useDefaults) {
            if ($rulesGroup.type == 'object' && it.schema.properties) {
              var $schema = it.schema.properties,
                $schemaKeys = Object.keys($schema);
              var arr3 = $schemaKeys;
              if (arr3) {
                var $propertyKey, i3 = -1,
                  l3 = arr3.length - 1;
                while (i3 < l3) {
                  $propertyKey = arr3[i3 += 1];
                  var $sch = $schema[$propertyKey];
                  if ($sch.default !== undefined) {
                    var $passData = $data + it.util.getProperty($propertyKey);
                    if (it.compositeRule) {
                      if (it.opts.strictDefaults) {
                        var $defaultMsg = 'default is ignored for: ' + $passData;
                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
                        else throw new Error($defaultMsg);
                      }
                    } else {
                      out += ' if (' + ($passData) + ' === undefined ';
                      if (it.opts.useDefaults == 'empty') {
                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \'\' ';
                      }
                      out += ' ) ' + ($passData) + ' = ';
                      if (it.opts.useDefaults == 'shared') {
                        out += ' ' + (it.useDefault($sch.default)) + ' ';
                      } else {
                        out += ' ' + (JSON.stringify($sch.default)) + ' ';
                      }
                      out += '; ';
                    }
                  }
                }
              }
            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {
              var arr4 = it.schema.items;
              if (arr4) {
                var $sch, $i = -1,
                  l4 = arr4.length - 1;
                while ($i < l4) {
                  $sch = arr4[$i += 1];
                  if ($sch.default !== undefined) {
                    var $passData = $data + '[' + $i + ']';
                    if (it.compositeRule) {
                      if (it.opts.strictDefaults) {
                        var $defaultMsg = 'default is ignored for: ' + $passData;
                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
                        else throw new Error($defaultMsg);
                      }
                    } else {
                      out += ' if (' + ($passData) + ' === undefined ';
                      if (it.opts.useDefaults == 'empty') {
                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \'\' ';
                      }
                      out += ' ) ' + ($passData) + ' = ';
                      if (it.opts.useDefaults == 'shared') {
                        out += ' ' + (it.useDefault($sch.default)) + ' ';
                      } else {
                        out += ' ' + (JSON.stringify($sch.default)) + ' ';
                      }
                      out += '; ';
                    }
                  }
                }
              }
            }
          }
          var arr5 = $rulesGroup.rules;
          if (arr5) {
            var $rule, i5 = -1,
              l5 = arr5.length - 1;
            while (i5 < l5) {
              $rule = arr5[i5 += 1];
              if ($shouldUseRule($rule)) {
                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
                if ($code) {
                  out += ' ' + ($code) + ' ';
                  if ($breakOnError) {
                    $closingBraces1 += '}';
                  }
                }
              }
            }
          }
          if ($breakOnError) {
            out += ' ' + ($closingBraces1) + ' ';
            $closingBraces1 = '';
          }
          if ($rulesGroup.type) {
            out += ' } ';
            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
              out += ' else { ';
              var $schemaPath = it.schemaPath + '.type',
                $errSchemaPath = it.errSchemaPath + '/type';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
                if ($typeIsArray) {
                  out += '' + ($typeSchema.join(","));
                } else {
                  out += '' + ($typeSchema);
                }
                out += '\' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should be ';
                  if ($typeIsArray) {
                    out += '' + ($typeSchema.join(","));
                  } else {
                    out += '' + ($typeSchema);
                  }
                  out += '\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += ' } ';
            }
          }
          if ($breakOnError) {
            out += ' if (errors === ';
            if ($top) {
              out += '0';
            } else {
              out += 'errs_' + ($lvl);
            }
            out += ') { ';
            $closingBraces2 += '}';
          }
        }
      }
    }
  }
  if ($breakOnError) {
    out += ' ' + ($closingBraces2) + ' ';
  }
  if ($top) {
    if ($async) {
      out += ' if (errors === 0) return data;           ';
      out += ' else throw new ValidationError(vErrors); ';
    } else {
      out += ' validate.errors = vErrors; ';
      out += ' return errors === 0;       ';
    }
    out += ' }; return validate;';
  } else {
    out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';
  }
  out = it.util.cleanUpCode(out);
  if ($top) {
    out = it.util.finalCleanUpCode(out, $async);
  }

  function $shouldUseGroup($rulesGroup) {
    var rules = $rulesGroup.rules;
    for (var i = 0; i < rules.length; i++)
      if ($shouldUseRule(rules[i])) return true;
  }

  function $shouldUseRule($rule) {
    return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));
  }

  function $ruleImplementsSomeKeyword($rule) {
    var impl = $rule.implements;
    for (var i = 0; i < impl.length; i++)
      if (it.schema[impl[i]] !== undefined) return true;
  }
  return out;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/keyword.js":
/*!*********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/keyword.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;
var customRuleCode = __webpack_require__(/*! ./dotjs/custom */ "../../node_modules/ajv/lib/dotjs/custom.js");
var definitionSchema = __webpack_require__(/*! ./definition_schema */ "../../node_modules/ajv/lib/definition_schema.js");

module.exports = {
  add: addKeyword,
  get: getKeyword,
  remove: removeKeyword,
  validate: validateKeyword
};


/**
 * Define custom keyword
 * @this  Ajv
 * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
 * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.
 * @return {Ajv} this for method chaining
 */
function addKeyword(keyword, definition) {
  /* jshint validthis: true */
  /* eslint no-shadow: 0 */
  var RULES = this.RULES;
  if (RULES.keywords[keyword])
    throw new Error('Keyword ' + keyword + ' is already defined');

  if (!IDENTIFIER.test(keyword))
    throw new Error('Keyword ' + keyword + ' is not a valid identifier');

  if (definition) {
    this.validateKeyword(definition, true);

    var dataType = definition.type;
    if (Array.isArray(dataType)) {
      for (var i=0; i<dataType.length; i++)
        _addRule(keyword, dataType[i], definition);
    } else {
      _addRule(keyword, dataType, definition);
    }

    var metaSchema = definition.metaSchema;
    if (metaSchema) {
      if (definition.$data && this._opts.$data) {
        metaSchema = {
          anyOf: [
            metaSchema,
            { '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#' }
          ]
        };
      }
      definition.validateSchema = this.compile(metaSchema, true);
    }
  }

  RULES.keywords[keyword] = RULES.all[keyword] = true;


  function _addRule(keyword, dataType, definition) {
    var ruleGroup;
    for (var i=0; i<RULES.length; i++) {
      var rg = RULES[i];
      if (rg.type == dataType) {
        ruleGroup = rg;
        break;
      }
    }

    if (!ruleGroup) {
      ruleGroup = { type: dataType, rules: [] };
      RULES.push(ruleGroup);
    }

    var rule = {
      keyword: keyword,
      definition: definition,
      custom: true,
      code: customRuleCode,
      implements: definition.implements
    };
    ruleGroup.rules.push(rule);
    RULES.custom[keyword] = rule;
  }

  return this;
}


/**
 * Get keyword
 * @this  Ajv
 * @param {String} keyword pre-defined or custom keyword.
 * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.
 */
function getKeyword(keyword) {
  /* jshint validthis: true */
  var rule = this.RULES.custom[keyword];
  return rule ? rule.definition : this.RULES.keywords[keyword] || false;
}


/**
 * Remove keyword
 * @this  Ajv
 * @param {String} keyword pre-defined or custom keyword.
 * @return {Ajv} this for method chaining
 */
function removeKeyword(keyword) {
  /* jshint validthis: true */
  var RULES = this.RULES;
  delete RULES.keywords[keyword];
  delete RULES.all[keyword];
  delete RULES.custom[keyword];
  for (var i=0; i<RULES.length; i++) {
    var rules = RULES[i].rules;
    for (var j=0; j<rules.length; j++) {
      if (rules[j].keyword == keyword) {
        rules.splice(j, 1);
        break;
      }
    }
  }
  return this;
}


/**
 * Validate keyword definition
 * @this  Ajv
 * @param {Object} definition keyword definition object.
 * @param {Boolean} throwError true to throw exception if definition is invalid
 * @return {boolean} validation result
 */
function validateKeyword(definition, throwError) {
  validateKeyword.errors = null;
  var v = this._validateKeyword = this._validateKeyword
                                  || this.compile(definitionSchema, true);

  if (v(definition)) return true;
  validateKeyword.errors = v.errors;
  if (throwError)
    throw new Error('custom keyword definition is invalid: '  + this.errorsText(v.errors));
  else
    return false;
}


/***/ }),

/***/ "../../node_modules/ajv/lib/refs/data.json":
/*!*************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/refs/data.json ***!
  \*************************************************************************************/
/*! exports provided: $schema, $id, description, type, required, properties, additionalProperties, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"$id\":\"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#\",\"description\":\"Meta-schema for $data reference (JSON Schema extension proposal)\",\"type\":\"object\",\"required\":[\"$data\"],\"properties\":{\"$data\":{\"type\":\"string\",\"anyOf\":[{\"format\":\"relative-json-pointer\"},{\"format\":\"json-pointer\"}]}},\"additionalProperties\":false}");

/***/ }),

/***/ "../../node_modules/ajv/lib/refs/json-schema-draft-07.json":
/*!*****************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/ajv/lib/refs/json-schema-draft-07.json ***!
  \*****************************************************************************************************/
/*! exports provided: $schema, $id, title, definitions, type, properties, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"$id\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Core schema meta-schema\",\"definitions\":{\"schemaArray\":{\"type\":\"array\",\"minItems\":1,\"items\":{\"$ref\":\"#\"}},\"nonNegativeInteger\":{\"type\":\"integer\",\"minimum\":0},\"nonNegativeIntegerDefault0\":{\"allOf\":[{\"$ref\":\"#/definitions/nonNegativeInteger\"},{\"default\":0}]},\"simpleTypes\":{\"enum\":[\"array\",\"boolean\",\"integer\",\"null\",\"number\",\"object\",\"string\"]},\"stringArray\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"uniqueItems\":true,\"default\":[]}},\"type\":[\"object\",\"boolean\"],\"properties\":{\"$id\":{\"type\":\"string\",\"format\":\"uri-reference\"},\"$schema\":{\"type\":\"string\",\"format\":\"uri\"},\"$ref\":{\"type\":\"string\",\"format\":\"uri-reference\"},\"$comment\":{\"type\":\"string\"},\"title\":{\"type\":\"string\"},\"description\":{\"type\":\"string\"},\"default\":true,\"readOnly\":{\"type\":\"boolean\",\"default\":false},\"examples\":{\"type\":\"array\",\"items\":true},\"multipleOf\":{\"type\":\"number\",\"exclusiveMinimum\":0},\"maximum\":{\"type\":\"number\"},\"exclusiveMaximum\":{\"type\":\"number\"},\"minimum\":{\"type\":\"number\"},\"exclusiveMinimum\":{\"type\":\"number\"},\"maxLength\":{\"$ref\":\"#/definitions/nonNegativeInteger\"},\"minLength\":{\"$ref\":\"#/definitions/nonNegativeIntegerDefault0\"},\"pattern\":{\"type\":\"string\",\"format\":\"regex\"},\"additionalItems\":{\"$ref\":\"#\"},\"items\":{\"anyOf\":[{\"$ref\":\"#\"},{\"$ref\":\"#/definitions/schemaArray\"}],\"default\":true},\"maxItems\":{\"$ref\":\"#/definitions/nonNegativeInteger\"},\"minItems\":{\"$ref\":\"#/definitions/nonNegativeIntegerDefault0\"},\"uniqueItems\":{\"type\":\"boolean\",\"default\":false},\"contains\":{\"$ref\":\"#\"},\"maxProperties\":{\"$ref\":\"#/definitions/nonNegativeInteger\"},\"minProperties\":{\"$ref\":\"#/definitions/nonNegativeIntegerDefault0\"},\"required\":{\"$ref\":\"#/definitions/stringArray\"},\"additionalProperties\":{\"$ref\":\"#\"},\"definitions\":{\"type\":\"object\",\"additionalProperties\":{\"$ref\":\"#\"},\"default\":{}},\"properties\":{\"type\":\"object\",\"additionalProperties\":{\"$ref\":\"#\"},\"default\":{}},\"patternProperties\":{\"type\":\"object\",\"additionalProperties\":{\"$ref\":\"#\"},\"propertyNames\":{\"format\":\"regex\"},\"default\":{}},\"dependencies\":{\"type\":\"object\",\"additionalProperties\":{\"anyOf\":[{\"$ref\":\"#\"},{\"$ref\":\"#/definitions/stringArray\"}]}},\"propertyNames\":{\"$ref\":\"#\"},\"const\":true,\"enum\":{\"type\":\"array\",\"items\":true,\"minItems\":1,\"uniqueItems\":true},\"type\":{\"anyOf\":[{\"$ref\":\"#/definitions/simpleTypes\"},{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/simpleTypes\"},\"minItems\":1,\"uniqueItems\":true}]},\"format\":{\"type\":\"string\"},\"contentMediaType\":{\"type\":\"string\"},\"contentEncoding\":{\"type\":\"string\"},\"if\":{\"$ref\":\"#\"},\"then\":{\"$ref\":\"#\"},\"else\":{\"$ref\":\"#\"},\"allOf\":{\"$ref\":\"#/definitions/schemaArray\"},\"anyOf\":{\"$ref\":\"#/definitions/schemaArray\"},\"oneOf\":{\"$ref\":\"#/definitions/schemaArray\"},\"not\":{\"$ref\":\"#\"}},\"default\":true}");

/***/ }),

/***/ "../../node_modules/an-array/index.js":
/*!********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/an-array/index.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var str = Object.prototype.toString

module.exports = anArray

function anArray(arr) {
  return (
       arr.BYTES_PER_ELEMENT
    && str.call(arr.buffer) === '[object ArrayBuffer]'
    || Array.isArray(arr)
  )
}


/***/ }),

/***/ "../../node_modules/as-number/index.js":
/*!*********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/as-number/index.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function numtype(num, def) {
	return typeof num === 'number'
		? num 
		: (typeof def === 'number' ? def : 0)
}

/***/ }),

/***/ "../../node_modules/dtype/index.js":
/*!*****************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/dtype/index.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(dtype) {
  switch (dtype) {
    case 'int8':
      return Int8Array
    case 'int16':
      return Int16Array
    case 'int32':
      return Int32Array
    case 'uint8':
      return Uint8Array
    case 'uint16':
      return Uint16Array
    case 'uint32':
      return Uint32Array
    case 'float32':
      return Float32Array
    case 'float64':
      return Float64Array
    case 'array':
      return Array
    case 'uint8_clamped':
      return Uint8ClampedArray
  }
}


/***/ }),

/***/ "../../node_modules/fast-deep-equal/index.js":
/*!***************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/fast-deep-equal/index.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// do not edit .js files directly - edit src/index.jst



module.exports = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;

    var length, i, keys;
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (!equal(a[i], b[i])) return false;
      return true;
    }



    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;)
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

    for (i = length; i-- !== 0;) {
      var key = keys[i];

      if (!equal(a[key], b[key])) return false;
    }

    return true;
  }

  // true if both NaN, false otherwise
  return a!==a && b!==b;
};


/***/ }),

/***/ "../../node_modules/fast-json-stable-stringify/index.js":
/*!**************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/fast-json-stable-stringify/index.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (data, opts) {
    if (!opts) opts = {};
    if (typeof opts === 'function') opts = { cmp: opts };
    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;

    var cmp = opts.cmp && (function (f) {
        return function (node) {
            return function (a, b) {
                var aobj = { key: a, value: node[a] };
                var bobj = { key: b, value: node[b] };
                return f(aobj, bobj);
            };
        };
    })(opts.cmp);

    var seen = [];
    return (function stringify (node) {
        if (node && node.toJSON && typeof node.toJSON === 'function') {
            node = node.toJSON();
        }

        if (node === undefined) return;
        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
        if (typeof node !== 'object') return JSON.stringify(node);

        var i, out;
        if (Array.isArray(node)) {
            out = '[';
            for (i = 0; i < node.length; i++) {
                if (i) out += ',';
                out += stringify(node[i]) || 'null';
            }
            return out + ']';
        }

        if (node === null) return 'null';

        if (seen.indexOf(node) !== -1) {
            if (cycles) return JSON.stringify('__cycle__');
            throw new TypeError('Converting circular structure to JSON');
        }

        var seenIndex = seen.push(node) - 1;
        var keys = Object.keys(node).sort(cmp && cmp(node));
        out = '';
        for (i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = stringify(node[key]);

            if (!value) continue;
            if (out) out += ',';
            out += JSON.stringify(key) + ':' + value;
        }
        seen.splice(seenIndex, 1);
        return '{' + out + '}';
    })(data);
};


/***/ }),

/***/ "../../node_modules/flatten-vertex-data/index.js":
/*!*******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/flatten-vertex-data/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*eslint new-cap:0*/
var dtype = __webpack_require__(/*! dtype */ "../../node_modules/dtype/index.js")

module.exports = flattenVertexData

function flattenVertexData (data, output, offset) {
  if (!data) throw new TypeError('must specify data as first parameter')
  offset = +(offset || 0) | 0

  if (Array.isArray(data) && (data[0] && typeof data[0][0] === 'number')) {
    var dim = data[0].length
    var length = data.length * dim
    var i, j, k, l

    // no output specified, create a new typed array
    if (!output || typeof output === 'string') {
      output = new (dtype(output || 'float32'))(length + offset)
    }

    var dstLength = output.length - offset
    if (length !== dstLength) {
      throw new Error('source length ' + length + ' (' + dim + 'x' + data.length + ')' +
        ' does not match destination length ' + dstLength)
    }

    for (i = 0, k = offset; i < data.length; i++) {
      for (j = 0; j < dim; j++) {
        output[k++] = data[i][j] === null ? NaN : data[i][j]
      }
    }
  } else {
    if (!output || typeof output === 'string') {
      // no output, create a new one
      var Ctor = dtype(output || 'float32')

      // handle arrays separately due to possible nulls
      if (Array.isArray(data) || output === 'array') {
        output = new Ctor(data.length + offset)
        for (i = 0, k = offset, l = output.length; k < l; k++, i++) {
          output[k] = data[i] === null ? NaN : data[i]
        }
      } else {
        if (offset === 0) {
          output = new Ctor(data)
        } else {
          output = new Ctor(data.length + offset)

          output.set(data, offset)
        }
      }
    } else {
      // store output in existing array
      output.set(data, offset)
    }
  }

  return output
}


/***/ }),

/***/ "../../node_modules/inherits/inherits_browser.js":
/*!*******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/inherits/inherits_browser.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ "../../node_modules/is-buffer/index.js":
/*!*********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/is-buffer/index.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),

/***/ "../../node_modules/json-schema-traverse/index.js":
/*!********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/json-schema-traverse/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var traverse = module.exports = function (schema, opts, cb) {
  // Legacy support for v0.3.1 and earlier.
  if (typeof opts == 'function') {
    cb = opts;
    opts = {};
  }

  cb = opts.cb || cb;
  var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
  var post = cb.post || function() {};

  _traverse(opts, pre, post, schema, '', schema);
};


traverse.keywords = {
  additionalItems: true,
  items: true,
  contains: true,
  additionalProperties: true,
  propertyNames: true,
  not: true
};

traverse.arrayKeywords = {
  items: true,
  allOf: true,
  anyOf: true,
  oneOf: true
};

traverse.propsKeywords = {
  definitions: true,
  properties: true,
  patternProperties: true,
  dependencies: true
};

traverse.skipKeywords = {
  default: true,
  enum: true,
  const: true,
  required: true,
  maximum: true,
  minimum: true,
  exclusiveMaximum: true,
  exclusiveMinimum: true,
  multipleOf: true,
  maxLength: true,
  minLength: true,
  pattern: true,
  format: true,
  maxItems: true,
  minItems: true,
  uniqueItems: true,
  maxProperties: true,
  minProperties: true
};


function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    for (var key in schema) {
      var sch = schema[key];
      if (Array.isArray(sch)) {
        if (key in traverse.arrayKeywords) {
          for (var i=0; i<sch.length; i++)
            _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
        }
      } else if (key in traverse.propsKeywords) {
        if (sch && typeof sch == 'object') {
          for (var prop in sch)
            _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
        }
      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
      }
    }
    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
  }
}


function escapeJsonPtr(str) {
  return str.replace(/~/g, '~0').replace(/\//g, '~1');
}


/***/ }),

/***/ "../../node_modules/layout-bmfont-text/index.js":
/*!******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/layout-bmfont-text/index.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var wordWrap = __webpack_require__(/*! word-wrapper */ "../../node_modules/word-wrapper/index.js")
var xtend = __webpack_require__(/*! xtend */ "../../node_modules/xtend/immutable.js")
var number = __webpack_require__(/*! as-number */ "../../node_modules/as-number/index.js")

var X_HEIGHTS = ['x', 'e', 'a', 'o', 'n', 's', 'r', 'c', 'u', 'm', 'v', 'w', 'z']
var M_WIDTHS = ['m', 'w']
var CAP_HEIGHTS = ['H', 'I', 'N', 'E', 'F', 'K', 'L', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']


var TAB_ID = '\t'.charCodeAt(0)
var SPACE_ID = ' '.charCodeAt(0)
var ALIGN_LEFT = 0, 
    ALIGN_CENTER = 1, 
    ALIGN_RIGHT = 2

module.exports = function createLayout(opt) {
  return new TextLayout(opt)
}

function TextLayout(opt) {
  this.glyphs = []
  this._measure = this.computeMetrics.bind(this)
  this.update(opt)
}

TextLayout.prototype.update = function(opt) {
  opt = xtend({
    measure: this._measure
  }, opt)
  this._opt = opt
  this._opt.tabSize = number(this._opt.tabSize, 4)

  if (!opt.font)
    throw new Error('must provide a valid bitmap font')

  var glyphs = this.glyphs
  var text = opt.text||'' 
  var font = opt.font
  this._setupSpaceGlyphs(font)
  
  var lines = wordWrap.lines(text, opt)
  var minWidth = opt.width || 0

  //clear glyphs
  glyphs.length = 0

  //get max line width
  var maxLineWidth = lines.reduce(function(prev, line) {
    return Math.max(prev, line.width, minWidth)
  }, 0)

  //the pen position
  var x = 0
  var y = 0
  var lineHeight = number(opt.lineHeight, font.common.lineHeight)
  var baseline = font.common.base
  var descender = lineHeight-baseline
  var letterSpacing = opt.letterSpacing || 0
  var height = lineHeight * lines.length - descender
  var align = getAlignType(this._opt.align)

  //draw text along baseline
  y -= height
  
  //the metrics for this text layout
  this._width = maxLineWidth
  this._height = height
  this._descender = lineHeight - baseline
  this._baseline = baseline
  this._xHeight = getXHeight(font)
  this._capHeight = getCapHeight(font)
  this._lineHeight = lineHeight
  this._ascender = lineHeight - descender - this._xHeight
    
  //layout each glyph
  var self = this
  lines.forEach(function(line, lineIndex) {
    var start = line.start
    var end = line.end
    var lineWidth = line.width
    var lastGlyph
    
    //for each glyph in that line...
    for (var i=start; i<end; i++) {
      var id = text.charCodeAt(i)
      var glyph = self.getGlyph(font, id)
      if (glyph) {
        if (lastGlyph) 
          x += getKerning(font, lastGlyph.id, glyph.id)

        var tx = x
        if (align === ALIGN_CENTER) 
          tx += (maxLineWidth-lineWidth)/2
        else if (align === ALIGN_RIGHT)
          tx += (maxLineWidth-lineWidth)

        glyphs.push({
          position: [tx, y],
          data: glyph,
          index: i,
          line: lineIndex
        })  

        //move pen forward
        x += glyph.xadvance + letterSpacing
        lastGlyph = glyph
      }
    }

    //next line down
    y += lineHeight
    x = 0
  })
  this._linesTotal = lines.length;
}

TextLayout.prototype._setupSpaceGlyphs = function(font) {
  //These are fallbacks, when the font doesn't include
  //' ' or '\t' glyphs
  this._fallbackSpaceGlyph = null
  this._fallbackTabGlyph = null

  if (!font.chars || font.chars.length === 0)
    return

  //try to get space glyph
  //then fall back to the 'm' or 'w' glyphs
  //then fall back to the first glyph available
  var space = getGlyphById(font, SPACE_ID) 
          || getMGlyph(font) 
          || font.chars[0]

  //and create a fallback for tab
  var tabWidth = this._opt.tabSize * space.xadvance
  this._fallbackSpaceGlyph = space
  this._fallbackTabGlyph = xtend(space, {
    x: 0, y: 0, xadvance: tabWidth, id: TAB_ID, 
    xoffset: 0, yoffset: 0, width: 0, height: 0
  })
}

TextLayout.prototype.getGlyph = function(font, id) {
  var glyph = getGlyphById(font, id)
  if (glyph)
    return glyph
  else if (id === TAB_ID) 
    return this._fallbackTabGlyph
  else if (id === SPACE_ID) 
    return this._fallbackSpaceGlyph
  return null
}

TextLayout.prototype.computeMetrics = function(text, start, end, width) {
  var letterSpacing = this._opt.letterSpacing || 0
  var font = this._opt.font
  var curPen = 0
  var curWidth = 0
  var count = 0
  var glyph
  var lastGlyph

  if (!font.chars || font.chars.length === 0) {
    return {
      start: start,
      end: start,
      width: 0
    }
  }

  end = Math.min(text.length, end)
  for (var i=start; i < end; i++) {
    var id = text.charCodeAt(i)
    var glyph = this.getGlyph(font, id)

    if (glyph) {
      //move pen forward
      var xoff = glyph.xoffset
      var kern = lastGlyph ? getKerning(font, lastGlyph.id, glyph.id) : 0
      curPen += kern

      var nextPen = curPen + glyph.xadvance + letterSpacing
      var nextWidth = curPen + glyph.width

      //we've hit our limit; we can't move onto the next glyph
      if (nextWidth >= width || nextPen >= width)
        break

      //otherwise continue along our line
      curPen = nextPen
      curWidth = nextWidth
      lastGlyph = glyph
    }
    count++
  }
  
  //make sure rightmost edge lines up with rendered glyphs
  if (lastGlyph)
    curWidth += lastGlyph.xoffset

  return {
    start: start,
    end: start + count,
    width: curWidth
  }
}

//getters for the private vars
;['width', 'height', 
  'descender', 'ascender',
  'xHeight', 'baseline',
  'capHeight',
  'lineHeight' ].forEach(addGetter)

function addGetter(name) {
  Object.defineProperty(TextLayout.prototype, name, {
    get: wrapper(name),
    configurable: true
  })
}

//create lookups for private vars
function wrapper(name) {
  return (new Function([
    'return function '+name+'() {',
    '  return this._'+name,
    '}'
  ].join('\n')))()
}

function getGlyphById(font, id) {
  if (!font.chars || font.chars.length === 0)
    return null

  var glyphIdx = findChar(font.chars, id)
  if (glyphIdx >= 0)
    return font.chars[glyphIdx]
  return null
}

function getXHeight(font) {
  for (var i=0; i<X_HEIGHTS.length; i++) {
    var id = X_HEIGHTS[i].charCodeAt(0)
    var idx = findChar(font.chars, id)
    if (idx >= 0) 
      return font.chars[idx].height
  }
  return 0
}

function getMGlyph(font) {
  for (var i=0; i<M_WIDTHS.length; i++) {
    var id = M_WIDTHS[i].charCodeAt(0)
    var idx = findChar(font.chars, id)
    if (idx >= 0) 
      return font.chars[idx]
  }
  return 0
}

function getCapHeight(font) {
  for (var i=0; i<CAP_HEIGHTS.length; i++) {
    var id = CAP_HEIGHTS[i].charCodeAt(0)
    var idx = findChar(font.chars, id)
    if (idx >= 0) 
      return font.chars[idx].height
  }
  return 0
}

function getKerning(font, left, right) {
  if (!font.kernings || font.kernings.length === 0)
    return 0

  var table = font.kernings
  for (var i=0; i<table.length; i++) {
    var kern = table[i]
    if (kern.first === left && kern.second === right)
      return kern.amount
  }
  return 0
}

function getAlignType(align) {
  if (align === 'center')
    return ALIGN_CENTER
  else if (align === 'right')
    return ALIGN_RIGHT
  return ALIGN_LEFT
}

function findChar (array, value, start) {
  start = start || 0
  for (var i = start; i < array.length; i++) {
    if (array[i].id === value) {
      return i
    }
  }
  return -1
}

/***/ }),

/***/ "../../node_modules/lit-element/lib/css-tag.js":
/*!*****************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-element/lib/css-tag.js ***!
  \*****************************************************************************************/
/*! exports provided: supportsAdoptingStyleSheets, CSSResult, unsafeCSS, css */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsAdoptingStyleSheets", function() { return supportsAdoptingStyleSheets; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSSResult", function() { return CSSResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsafeCSS", function() { return unsafeCSS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "css", function() { return css; });
/**
@license
Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&
    ('replace' in CSSStyleSheet.prototype);
const constructionToken = Symbol();
class CSSResult {
    constructor(cssText, safeToken) {
        if (safeToken !== constructionToken) {
            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
        }
        this.cssText = cssText;
    }
    // Note, this is a getter so that it's lazy. In practice, this means
    // stylesheets are not created until the first element instance is made.
    get styleSheet() {
        if (this._styleSheet === undefined) {
            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet
            // is constructable.
            if (supportsAdoptingStyleSheets) {
                this._styleSheet = new CSSStyleSheet();
                this._styleSheet.replaceSync(this.cssText);
            }
            else {
                this._styleSheet = null;
            }
        }
        return this._styleSheet;
    }
    toString() {
        return this.cssText;
    }
}
/**
 * Wrap a value for interpolation in a css tagged template literal.
 *
 * This is unsafe because untrusted CSS text can be used to phone home
 * or exfiltrate data to an attacker controlled site. Take care to only use
 * this with trusted input.
 */
const unsafeCSS = (value) => {
    return new CSSResult(String(value), constructionToken);
};
const textFromCSSResult = (value) => {
    if (value instanceof CSSResult) {
        return value.cssText;
    }
    else if (typeof value === 'number') {
        return value;
    }
    else {
        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but
            take care to ensure page security.`);
    }
};
/**
 * Template tag which which can be used with LitElement's `style` property to
 * set element styles. For security reasons, only literal string values may be
 * used. To incorporate non-literal values `unsafeCSS` may be used inside a
 * template string part.
 */
const css = (strings, ...values) => {
    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);
    return new CSSResult(cssText, constructionToken);
};


/***/ }),

/***/ "../../node_modules/lit-element/lib/decorators.js":
/*!********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-element/lib/decorators.js ***!
  \********************************************************************************************/
/*! exports provided: customElement, property, internalProperty, query, queryAsync, queryAll, eventOptions, queryAssignedNodes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "customElement", function() { return customElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "property", function() { return property; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "internalProperty", function() { return internalProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "query", function() { return query; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "queryAsync", function() { return queryAsync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "queryAll", function() { return queryAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventOptions", function() { return eventOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "queryAssignedNodes", function() { return queryAssignedNodes; });
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const legacyCustomElement = (tagName, clazz) => {
    window.customElements.define(tagName, clazz);
    // Cast as any because TS doesn't recognize the return type as being a
    // subtype of the decorated class when clazz is typed as
    // `Constructor<HTMLElement>` for some reason.
    // `Constructor<HTMLElement>` is helpful to make sure the decorator is
    // applied to elements however.
    // tslint:disable-next-line:no-any
    return clazz;
};
const standardCustomElement = (tagName, descriptor) => {
    const { kind, elements } = descriptor;
    return {
        kind,
        elements,
        // This callback is called once the class is otherwise fully defined
        finisher(clazz) {
            window.customElements.define(tagName, clazz);
        }
    };
};
/**
 * Class decorator factory that defines the decorated class as a custom element.
 *
 * ```
 * @customElement('my-element')
 * class MyElement {
 *   render() {
 *     return html``;
 *   }
 * }
 * ```
 *
 * @param tagName The name of the custom element to define.
 */
const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?
    legacyCustomElement(tagName, classOrDescriptor) :
    standardCustomElement(tagName, classOrDescriptor);
const standardProperty = (options, element) => {
    // When decorating an accessor, pass it through and add property metadata.
    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't
    // stomp over the user's accessor.
    if (element.kind === 'method' && element.descriptor &&
        !('value' in element.descriptor)) {
        return Object.assign(Object.assign({}, element), { finisher(clazz) {
                clazz.createProperty(element.key, options);
            } });
    }
    else {
        // createProperty() takes care of defining the property, but we still
        // must return some kind of descriptor, so return a descriptor for an
        // unused prototype field. The finisher calls createProperty().
        return {
            kind: 'field',
            key: Symbol(),
            placement: 'own',
            descriptor: {},
            // When @babel/plugin-proposal-decorators implements initializers,
            // do this instead of the initializer below. See:
            // https://github.com/babel/babel/issues/9260 extras: [
            //   {
            //     kind: 'initializer',
            //     placement: 'own',
            //     initializer: descriptor.initializer,
            //   }
            // ],
            initializer() {
                if (typeof element.initializer === 'function') {
                    this[element.key] = element.initializer.call(this);
                }
            },
            finisher(clazz) {
                clazz.createProperty(element.key, options);
            }
        };
    }
};
const legacyProperty = (options, proto, name) => {
    proto.constructor
        .createProperty(name, options);
};
/**
 * A property decorator which creates a LitElement property which reflects a
 * corresponding attribute value. A `PropertyDeclaration` may optionally be
 * supplied to configure property features.
 *
 * This decorator should only be used for public fields. Private or protected
 * fields should use the internalProperty decorator.
 *
 * @example
 *
 *     class MyElement {
 *       @property({ type: Boolean })
 *       clicked = false;
 *     }
 *
 * @ExportDecoratedItems
 */
function property(options) {
    // tslint:disable-next-line:no-any decorator
    return (protoOrDescriptor, name) => (name !== undefined) ?
        legacyProperty(options, protoOrDescriptor, name) :
        standardProperty(options, protoOrDescriptor);
}
/**
 * Declares a private or protected property that still triggers updates to the
 * element when it changes.
 *
 * Properties declared this way must not be used from HTML or HTML templating
 * systems, they're solely for properties internal to the element. These
 * properties may be renamed by optimization tools like closure compiler.
 */
function internalProperty(options) {
    return property({ attribute: false, hasChanged: options === null || options === void 0 ? void 0 : options.hasChanged });
}
/**
 * A property decorator that converts a class property into a getter that
 * executes a querySelector on the element's renderRoot.
 *
 * @param selector A DOMString containing one or more selectors to match.
 *
 * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector
 *
 * @example
 *
 *     class MyElement {
 *       @query('#first')
 *       first;
 *
 *       render() {
 *         return html`
 *           <div id="first"></div>
 *           <div id="second"></div>
 *         `;
 *       }
 *     }
 *
 */
function query(selector) {
    return (protoOrDescriptor, 
    // tslint:disable-next-line:no-any decorator
    name) => {
        const descriptor = {
            get() {
                return this.renderRoot.querySelector(selector);
            },
            enumerable: true,
            configurable: true,
        };
        return (name !== undefined) ?
            legacyQuery(descriptor, protoOrDescriptor, name) :
            standardQuery(descriptor, protoOrDescriptor);
    };
}
// Note, in the future, we may extend this decorator to support the use case
// where the queried element may need to do work to become ready to interact
// with (e.g. load some implementation code). If so, we might elect to
// add a second argument defining a function that can be run to make the
// queried element loaded/updated/ready.
/**
 * A property decorator that converts a class property into a getter that
 * returns a promise that resolves to the result of a querySelector on the
 * element's renderRoot done after the element's `updateComplete` promise
 * resolves. When the queried property may change with element state, this
 * decorator can be used instead of requiring users to await the
 * `updateComplete` before accessing the property.
 *
 * @param selector A DOMString containing one or more selectors to match.
 *
 * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector
 *
 * @example
 *
 *     class MyElement {
 *       @queryAsync('#first')
 *       first;
 *
 *       render() {
 *         return html`
 *           <div id="first"></div>
 *           <div id="second"></div>
 *         `;
 *       }
 *     }
 *
 *     // external usage
 *     async doSomethingWithFirst() {
 *      (await aMyElement.first).doSomething();
 *     }
 */
function queryAsync(selector) {
    return (protoOrDescriptor, 
    // tslint:disable-next-line:no-any decorator
    name) => {
        const descriptor = {
            async get() {
                await this.updateComplete;
                return this.renderRoot.querySelector(selector);
            },
            enumerable: true,
            configurable: true,
        };
        return (name !== undefined) ?
            legacyQuery(descriptor, protoOrDescriptor, name) :
            standardQuery(descriptor, protoOrDescriptor);
    };
}
/**
 * A property decorator that converts a class property into a getter
 * that executes a querySelectorAll on the element's renderRoot.
 *
 * @param selector A DOMString containing one or more selectors to match.
 *
 * See:
 * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll
 *
 * @example
 *
 *     class MyElement {
 *       @queryAll('div')
 *       divs;
 *
 *       render() {
 *         return html`
 *           <div id="first"></div>
 *           <div id="second"></div>
 *         `;
 *       }
 *     }
 */
function queryAll(selector) {
    return (protoOrDescriptor, 
    // tslint:disable-next-line:no-any decorator
    name) => {
        const descriptor = {
            get() {
                return this.renderRoot.querySelectorAll(selector);
            },
            enumerable: true,
            configurable: true,
        };
        return (name !== undefined) ?
            legacyQuery(descriptor, protoOrDescriptor, name) :
            standardQuery(descriptor, protoOrDescriptor);
    };
}
const legacyQuery = (descriptor, proto, name) => {
    Object.defineProperty(proto, name, descriptor);
};
const standardQuery = (descriptor, element) => ({
    kind: 'method',
    placement: 'prototype',
    key: element.key,
    descriptor,
});
const standardEventOptions = (options, element) => {
    return Object.assign(Object.assign({}, element), { finisher(clazz) {
            Object.assign(clazz.prototype[element.key], options);
        } });
};
const legacyEventOptions = 
// tslint:disable-next-line:no-any legacy decorator
(options, proto, name) => {
    Object.assign(proto[name], options);
};
/**
 * Adds event listener options to a method used as an event listener in a
 * lit-html template.
 *
 * @param options An object that specifies event listener options as accepted by
 * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.
 *
 * Current browsers support the `capture`, `passive`, and `once` options. See:
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters
 *
 * @example
 *
 *     class MyElement {
 *       clicked = false;
 *
 *       render() {
 *         return html`
 *           <div @click=${this._onClick}`>
 *             <button></button>
 *           </div>
 *         `;
 *       }
 *
 *       @eventOptions({capture: true})
 *       _onClick(e) {
 *         this.clicked = true;
 *       }
 *     }
 */
function eventOptions(options) {
    // Return value typed as any to prevent TypeScript from complaining that
    // standard decorator function signature does not match TypeScript decorator
    // signature
    // TODO(kschaaf): unclear why it was only failing on this decorator and not
    // the others
    return ((protoOrDescriptor, name) => (name !== undefined) ?
        legacyEventOptions(options, protoOrDescriptor, name) :
        standardEventOptions(options, protoOrDescriptor));
}
/**
 * A property decorator that converts a class property into a getter that
 * returns the `assignedNodes` of the given named `slot`. Note, the type of
 * this property should be annotated as `NodeListOf<HTMLElement>`.
 *
 */
function queryAssignedNodes(slotName = '', flatten = false) {
    return (protoOrDescriptor, 
    // tslint:disable-next-line:no-any decorator
    name) => {
        const descriptor = {
            get() {
                const selector = `slot${slotName ? `[name=${slotName}]` : ''}`;
                const slot = this.renderRoot.querySelector(selector);
                return slot && slot.assignedNodes({ flatten });
            },
            enumerable: true,
            configurable: true,
        };
        return (name !== undefined) ?
            legacyQuery(descriptor, protoOrDescriptor, name) :
            standardQuery(descriptor, protoOrDescriptor);
    };
}


/***/ }),

/***/ "../../node_modules/lit-element/lib/updating-element.js":
/*!**************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-element/lib/updating-element.js ***!
  \**************************************************************************************************/
/*! exports provided: defaultConverter, notEqual, UpdatingElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultConverter", function() { return defaultConverter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "notEqual", function() { return notEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdatingElement", function() { return UpdatingElement; });
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var _a;
/**
 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
 * replaced at compile time by the munged name for object[property]. We cannot
 * alias this function, so we have to use a small shim that has the same
 * behavior when not compiling.
 */
window.JSCompiler_renameProperty =
    (prop, _obj) => prop;
const defaultConverter = {
    toAttribute(value, type) {
        switch (type) {
            case Boolean:
                return value ? '' : null;
            case Object:
            case Array:
                // if the value is `null` or `undefined` pass this through
                // to allow removing/no change behavior.
                return value == null ? value : JSON.stringify(value);
        }
        return value;
    },
    fromAttribute(value, type) {
        switch (type) {
            case Boolean:
                return value !== null;
            case Number:
                return value === null ? null : Number(value);
            case Object:
            case Array:
                return JSON.parse(value);
        }
        return value;
    }
};
/**
 * Change function that returns true if `value` is different from `oldValue`.
 * This method is used as the default for a property's `hasChanged` function.
 */
const notEqual = (value, old) => {
    // This ensures (old==NaN, value==NaN) always returns false
    return old !== value && (old === old || value === value);
};
const defaultPropertyDeclaration = {
    attribute: true,
    type: String,
    converter: defaultConverter,
    reflect: false,
    hasChanged: notEqual
};
const STATE_HAS_UPDATED = 1;
const STATE_UPDATE_REQUESTED = 1 << 2;
const STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;
const STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;
/**
 * The Closure JS Compiler doesn't currently have good support for static
 * property semantics where "this" is dynamic (e.g.
 * https://github.com/google/closure-compiler/issues/3177 and others) so we use
 * this hack to bypass any rewriting by the compiler.
 */
const finalized = 'finalized';
/**
 * Base element class which manages element properties and attributes. When
 * properties change, the `update` method is asynchronously called. This method
 * should be supplied by subclassers to render updates as desired.
 */
class UpdatingElement extends HTMLElement {
    constructor() {
        super();
        this._updateState = 0;
        this._instanceProperties = undefined;
        // Initialize to an unresolved Promise so we can make sure the element has
        // connected before first update.
        this._updatePromise = new Promise((res) => this._enableUpdatingResolver = res);
        /**
         * Map with keys for any properties that have changed since the last
         * update cycle with previous values.
         */
        this._changedProperties = new Map();
        /**
         * Map with keys of properties that should be reflected when updated.
         */
        this._reflectingProperties = undefined;
        this.initialize();
    }
    /**
     * Returns a list of attributes corresponding to the registered properties.
     * @nocollapse
     */
    static get observedAttributes() {
        // note: piggy backing on this to ensure we're finalized.
        this.finalize();
        const attributes = [];
        // Use forEach so this works even if for/of loops are compiled to for loops
        // expecting arrays
        this._classProperties.forEach((v, p) => {
            const attr = this._attributeNameForProperty(p, v);
            if (attr !== undefined) {
                this._attributeToPropertyMap.set(attr, p);
                attributes.push(attr);
            }
        });
        return attributes;
    }
    /**
     * Ensures the private `_classProperties` property metadata is created.
     * In addition to `finalize` this is also called in `createProperty` to
     * ensure the `@property` decorator can add property metadata.
     */
    /** @nocollapse */
    static _ensureClassProperties() {
        // ensure private storage for property declarations.
        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {
            this._classProperties = new Map();
            // NOTE: Workaround IE11 not supporting Map constructor argument.
            const superProperties = Object.getPrototypeOf(this)._classProperties;
            if (superProperties !== undefined) {
                superProperties.forEach((v, k) => this._classProperties.set(k, v));
            }
        }
    }
    /**
     * Creates a property accessor on the element prototype if one does not exist
     * and stores a PropertyDeclaration for the property with the given options.
     * The property setter calls the property's `hasChanged` property option
     * or uses a strict identity check to determine whether or not to request
     * an update.
     *
     * This method may be overridden to customize properties; however,
     * when doing so, it's important to call `super.createProperty` to ensure
     * the property is setup correctly. This method calls
     * `getPropertyDescriptor` internally to get a descriptor to install.
     * To customize what properties do when they are get or set, override
     * `getPropertyDescriptor`. To customize the options for a property,
     * implement `createProperty` like this:
     *
     * static createProperty(name, options) {
     *   options = Object.assign(options, {myOption: true});
     *   super.createProperty(name, options);
     * }
     *
     * @nocollapse
     */
    static createProperty(name, options = defaultPropertyDeclaration) {
        // Note, since this can be called by the `@property` decorator which
        // is called before `finalize`, we ensure storage exists for property
        // metadata.
        this._ensureClassProperties();
        this._classProperties.set(name, options);
        // Do not generate an accessor if the prototype already has one, since
        // it would be lost otherwise and that would never be the user's intention;
        // Instead, we expect users to call `requestUpdate` themselves from
        // user-defined accessors. Note that if the super has an accessor we will
        // still overwrite it
        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {
            return;
        }
        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;
        const descriptor = this.getPropertyDescriptor(name, key, options);
        if (descriptor !== undefined) {
            Object.defineProperty(this.prototype, name, descriptor);
        }
    }
    /**
     * Returns a property descriptor to be defined on the given named property.
     * If no descriptor is returned, the property will not become an accessor.
     * For example,
     *
     *   class MyElement extends LitElement {
     *     static getPropertyDescriptor(name, key, options) {
     *       const defaultDescriptor =
     *           super.getPropertyDescriptor(name, key, options);
     *       const setter = defaultDescriptor.set;
     *       return {
     *         get: defaultDescriptor.get,
     *         set(value) {
     *           setter.call(this, value);
     *           // custom action.
     *         },
     *         configurable: true,
     *         enumerable: true
     *       }
     *     }
     *   }
     *
     * @nocollapse
     */
    static getPropertyDescriptor(name, key, _options) {
        return {
            // tslint:disable-next-line:no-any no symbol in index
            get() {
                return this[key];
            },
            set(value) {
                const oldValue = this[name];
                this[key] = value;
                this._requestUpdate(name, oldValue);
            },
            configurable: true,
            enumerable: true
        };
    }
    /**
     * Returns the property options associated with the given property.
     * These options are defined with a PropertyDeclaration via the `properties`
     * object or the `@property` decorator and are registered in
     * `createProperty(...)`.
     *
     * Note, this method should be considered "final" and not overridden. To
     * customize the options for a given property, override `createProperty`.
     *
     * @nocollapse
     * @final
     */
    static getPropertyOptions(name) {
        return this._classProperties && this._classProperties.get(name) ||
            defaultPropertyDeclaration;
    }
    /**
     * Creates property accessors for registered properties and ensures
     * any superclasses are also finalized.
     * @nocollapse
     */
    static finalize() {
        // finalize any superclasses
        const superCtor = Object.getPrototypeOf(this);
        if (!superCtor.hasOwnProperty(finalized)) {
            superCtor.finalize();
        }
        this[finalized] = true;
        this._ensureClassProperties();
        // initialize Map populated in observedAttributes
        this._attributeToPropertyMap = new Map();
        // make any properties
        // Note, only process "own" properties since this element will inherit
        // any properties defined on the superClass, and finalization ensures
        // the entire prototype chain is finalized.
        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {
            const props = this.properties;
            // support symbols in properties (IE11 does not support this)
            const propKeys = [
                ...Object.getOwnPropertyNames(props),
                ...(typeof Object.getOwnPropertySymbols === 'function') ?
                    Object.getOwnPropertySymbols(props) :
                    []
            ];
            // This for/of is ok because propKeys is an array
            for (const p of propKeys) {
                // note, use of `any` is due to TypeSript lack of support for symbol in
                // index types
                // tslint:disable-next-line:no-any no symbol in index
                this.createProperty(p, props[p]);
            }
        }
    }
    /**
     * Returns the property name for the given attribute `name`.
     * @nocollapse
     */
    static _attributeNameForProperty(name, options) {
        const attribute = options.attribute;
        return attribute === false ?
            undefined :
            (typeof attribute === 'string' ?
                attribute :
                (typeof name === 'string' ? name.toLowerCase() : undefined));
    }
    /**
     * Returns true if a property should request an update.
     * Called when a property value is set and uses the `hasChanged`
     * option for the property if present or a strict identity check.
     * @nocollapse
     */
    static _valueHasChanged(value, old, hasChanged = notEqual) {
        return hasChanged(value, old);
    }
    /**
     * Returns the property value for the given attribute value.
     * Called via the `attributeChangedCallback` and uses the property's
     * `converter` or `converter.fromAttribute` property option.
     * @nocollapse
     */
    static _propertyValueFromAttribute(value, options) {
        const type = options.type;
        const converter = options.converter || defaultConverter;
        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);
        return fromAttribute ? fromAttribute(value, type) : value;
    }
    /**
     * Returns the attribute value for the given property value. If this
     * returns undefined, the property will *not* be reflected to an attribute.
     * If this returns null, the attribute will be removed, otherwise the
     * attribute will be set to the value.
     * This uses the property's `reflect` and `type.toAttribute` property options.
     * @nocollapse
     */
    static _propertyValueToAttribute(value, options) {
        if (options.reflect === undefined) {
            return;
        }
        const type = options.type;
        const converter = options.converter;
        const toAttribute = converter && converter.toAttribute ||
            defaultConverter.toAttribute;
        return toAttribute(value, type);
    }
    /**
     * Performs element initialization. By default captures any pre-set values for
     * registered properties.
     */
    initialize() {
        this._saveInstanceProperties();
        // ensures first update will be caught by an early access of
        // `updateComplete`
        this._requestUpdate();
    }
    /**
     * Fixes any properties set on the instance before upgrade time.
     * Otherwise these would shadow the accessor and break these properties.
     * The properties are stored in a Map which is played back after the
     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
     * (<=41), properties created for native platform properties like (`id` or
     * `name`) may not have default values set in the element constructor. On
     * these browsers native properties appear on instances and therefore their
     * default value will overwrite any element default (e.g. if the element sets
     * this.id = 'id' in the constructor, the 'id' will become '' since this is
     * the native platform default).
     */
    _saveInstanceProperties() {
        // Use forEach so this works even if for/of loops are compiled to for loops
        // expecting arrays
        this.constructor
            ._classProperties.forEach((_v, p) => {
            if (this.hasOwnProperty(p)) {
                const value = this[p];
                delete this[p];
                if (!this._instanceProperties) {
                    this._instanceProperties = new Map();
                }
                this._instanceProperties.set(p, value);
            }
        });
    }
    /**
     * Applies previously saved instance properties.
     */
    _applyInstanceProperties() {
        // Use forEach so this works even if for/of loops are compiled to for loops
        // expecting arrays
        // tslint:disable-next-line:no-any
        this._instanceProperties.forEach((v, p) => this[p] = v);
        this._instanceProperties = undefined;
    }
    connectedCallback() {
        // Ensure first connection completes an update. Updates cannot complete
        // before connection.
        this.enableUpdating();
    }
    enableUpdating() {
        if (this._enableUpdatingResolver !== undefined) {
            this._enableUpdatingResolver();
            this._enableUpdatingResolver = undefined;
        }
    }
    /**
     * Allows for `super.disconnectedCallback()` in extensions while
     * reserving the possibility of making non-breaking feature additions
     * when disconnecting at some point in the future.
     */
    disconnectedCallback() {
    }
    /**
     * Synchronizes property values when attributes change.
     */
    attributeChangedCallback(name, old, value) {
        if (old !== value) {
            this._attributeToProperty(name, value);
        }
    }
    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {
        const ctor = this.constructor;
        const attr = ctor._attributeNameForProperty(name, options);
        if (attr !== undefined) {
            const attrValue = ctor._propertyValueToAttribute(value, options);
            // an undefined value does not change the attribute.
            if (attrValue === undefined) {
                return;
            }
            // Track if the property is being reflected to avoid
            // setting the property again via `attributeChangedCallback`. Note:
            // 1. this takes advantage of the fact that the callback is synchronous.
            // 2. will behave incorrectly if multiple attributes are in the reaction
            // stack at time of calling. However, since we process attributes
            // in `update` this should not be possible (or an extreme corner case
            // that we'd like to discover).
            // mark state reflecting
            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;
            if (attrValue == null) {
                this.removeAttribute(attr);
            }
            else {
                this.setAttribute(attr, attrValue);
            }
            // mark state not reflecting
            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;
        }
    }
    _attributeToProperty(name, value) {
        // Use tracking info to avoid deserializing attribute value if it was
        // just set from a property setter.
        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {
            return;
        }
        const ctor = this.constructor;
        // Note, hint this as an `AttributeMap` so closure clearly understands
        // the type; it has issues with tracking types through statics
        // tslint:disable-next-line:no-unnecessary-type-assertion
        const propName = ctor._attributeToPropertyMap.get(name);
        if (propName !== undefined) {
            const options = ctor.getPropertyOptions(propName);
            // mark state reflecting
            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;
            this[propName] =
                // tslint:disable-next-line:no-any
                ctor._propertyValueFromAttribute(value, options);
            // mark state not reflecting
            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;
        }
    }
    /**
     * This private version of `requestUpdate` does not access or return the
     * `updateComplete` promise. This promise can be overridden and is therefore
     * not free to access.
     */
    _requestUpdate(name, oldValue) {
        let shouldRequestUpdate = true;
        // If we have a property key, perform property update steps.
        if (name !== undefined) {
            const ctor = this.constructor;
            const options = ctor.getPropertyOptions(name);
            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {
                if (!this._changedProperties.has(name)) {
                    this._changedProperties.set(name, oldValue);
                }
                // Add to reflecting properties set.
                // Note, it's important that every change has a chance to add the
                // property to `_reflectingProperties`. This ensures setting
                // attribute + property reflects correctly.
                if (options.reflect === true &&
                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {
                    if (this._reflectingProperties === undefined) {
                        this._reflectingProperties = new Map();
                    }
                    this._reflectingProperties.set(name, options);
                }
            }
            else {
                // Abort the request if the property should not be considered changed.
                shouldRequestUpdate = false;
            }
        }
        if (!this._hasRequestedUpdate && shouldRequestUpdate) {
            this._updatePromise = this._enqueueUpdate();
        }
    }
    /**
     * Requests an update which is processed asynchronously. This should
     * be called when an element should update based on some state not triggered
     * by setting a property. In this case, pass no arguments. It should also be
     * called when manually implementing a property setter. In this case, pass the
     * property `name` and `oldValue` to ensure that any configured property
     * options are honored. Returns the `updateComplete` Promise which is resolved
     * when the update completes.
     *
     * @param name {PropertyKey} (optional) name of requesting property
     * @param oldValue {any} (optional) old value of requesting property
     * @returns {Promise} A Promise that is resolved when the update completes.
     */
    requestUpdate(name, oldValue) {
        this._requestUpdate(name, oldValue);
        return this.updateComplete;
    }
    /**
     * Sets up the element to asynchronously update.
     */
    async _enqueueUpdate() {
        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;
        try {
            // Ensure any previous update has resolved before updating.
            // This `await` also ensures that property changes are batched.
            await this._updatePromise;
        }
        catch (e) {
            // Ignore any previous errors. We only care that the previous cycle is
            // done. Any error should have been handled in the previous update.
        }
        const result = this.performUpdate();
        // If `performUpdate` returns a Promise, we await it. This is done to
        // enable coordinating updates with a scheduler. Note, the result is
        // checked to avoid delaying an additional microtask unless we need to.
        if (result != null) {
            await result;
        }
        return !this._hasRequestedUpdate;
    }
    get _hasRequestedUpdate() {
        return (this._updateState & STATE_UPDATE_REQUESTED);
    }
    get hasUpdated() {
        return (this._updateState & STATE_HAS_UPDATED);
    }
    /**
     * Performs an element update. Note, if an exception is thrown during the
     * update, `firstUpdated` and `updated` will not be called.
     *
     * You can override this method to change the timing of updates. If this
     * method is overridden, `super.performUpdate()` must be called.
     *
     * For instance, to schedule updates to occur just before the next frame:
     *
     * ```
     * protected async performUpdate(): Promise<unknown> {
     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
     *   super.performUpdate();
     * }
     * ```
     */
    performUpdate() {
        // Mixin instance properties once, if they exist.
        if (this._instanceProperties) {
            this._applyInstanceProperties();
        }
        let shouldUpdate = false;
        const changedProperties = this._changedProperties;
        try {
            shouldUpdate = this.shouldUpdate(changedProperties);
            if (shouldUpdate) {
                this.update(changedProperties);
            }
            else {
                this._markUpdated();
            }
        }
        catch (e) {
            // Prevent `firstUpdated` and `updated` from running when there's an
            // update exception.
            shouldUpdate = false;
            // Ensure element can accept additional updates after an exception.
            this._markUpdated();
            throw e;
        }
        if (shouldUpdate) {
            if (!(this._updateState & STATE_HAS_UPDATED)) {
                this._updateState = this._updateState | STATE_HAS_UPDATED;
                this.firstUpdated(changedProperties);
            }
            this.updated(changedProperties);
        }
    }
    _markUpdated() {
        this._changedProperties = new Map();
        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;
    }
    /**
     * Returns a Promise that resolves when the element has completed updating.
     * The Promise value is a boolean that is `true` if the element completed the
     * update without triggering another update. The Promise result is `false` if
     * a property was set inside `updated()`. If the Promise is rejected, an
     * exception was thrown during the update.
     *
     * To await additional asynchronous work, override the `_getUpdateComplete`
     * method. For example, it is sometimes useful to await a rendered element
     * before fulfilling this Promise. To do this, first await
     * `super._getUpdateComplete()`, then any subsequent state.
     *
     * @returns {Promise} The Promise returns a boolean that indicates if the
     * update resolved without triggering another update.
     */
    get updateComplete() {
        return this._getUpdateComplete();
    }
    /**
     * Override point for the `updateComplete` promise.
     *
     * It is not safe to override the `updateComplete` getter directly due to a
     * limitation in TypeScript which means it is not possible to call a
     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
     * This method should be overridden instead. For example:
     *
     *   class MyElement extends LitElement {
     *     async _getUpdateComplete() {
     *       await super._getUpdateComplete();
     *       await this._myChild.updateComplete;
     *     }
     *   }
     */
    _getUpdateComplete() {
        return this._updatePromise;
    }
    /**
     * Controls whether or not `update` should be called when the element requests
     * an update. By default, this method always returns `true`, but this can be
     * customized to control when to update.
     *
     * @param _changedProperties Map of changed properties with old values
     */
    shouldUpdate(_changedProperties) {
        return true;
    }
    /**
     * Updates the element. This method reflects property values to attributes.
     * It can be overridden to render and keep updated element DOM.
     * Setting properties inside this method will *not* trigger
     * another update.
     *
     * @param _changedProperties Map of changed properties with old values
     */
    update(_changedProperties) {
        if (this._reflectingProperties !== undefined &&
            this._reflectingProperties.size > 0) {
            // Use forEach so this works even if for/of loops are compiled to for
            // loops expecting arrays
            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));
            this._reflectingProperties = undefined;
        }
        this._markUpdated();
    }
    /**
     * Invoked whenever the element is updated. Implement to perform
     * post-updating tasks via DOM APIs, for example, focusing an element.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * @param _changedProperties Map of changed properties with old values
     */
    updated(_changedProperties) {
    }
    /**
     * Invoked when the element is first updated. Implement to perform one time
     * work on the element after update.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * @param _changedProperties Map of changed properties with old values
     */
    firstUpdated(_changedProperties) {
    }
}
_a = finalized;
/**
 * Marks class as having finished creating properties.
 */
UpdatingElement[_a] = true;


/***/ }),

/***/ "../../node_modules/lit-element/lit-element.js":
/*!*****************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-element/lit-element.js ***!
  \*****************************************************************************************/
/*! exports provided: defaultConverter, notEqual, UpdatingElement, customElement, property, internalProperty, query, queryAsync, queryAll, eventOptions, queryAssignedNodes, html, svg, TemplateResult, SVGTemplateResult, supportsAdoptingStyleSheets, CSSResult, unsafeCSS, css, LitElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LitElement", function() { return LitElement; });
/* harmony import */ var lit_html_lib_shady_render_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit-html/lib/shady-render.js */ "../../node_modules/lit-html/lib/shady-render.js");
/* harmony import */ var _lib_updating_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/updating-element.js */ "../../node_modules/lit-element/lib/updating-element.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultConverter", function() { return _lib_updating_element_js__WEBPACK_IMPORTED_MODULE_1__["defaultConverter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "notEqual", function() { return _lib_updating_element_js__WEBPACK_IMPORTED_MODULE_1__["notEqual"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UpdatingElement", function() { return _lib_updating_element_js__WEBPACK_IMPORTED_MODULE_1__["UpdatingElement"]; });

/* harmony import */ var _lib_decorators_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/decorators.js */ "../../node_modules/lit-element/lib/decorators.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "customElement", function() { return _lib_decorators_js__WEBPACK_IMPORTED_MODULE_2__["customElement"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "property", function() { return _lib_decorators_js__WEBPACK_IMPORTED_MODULE_2__["property"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "internalProperty", function() { return _lib_decorators_js__WEBPACK_IMPORTED_MODULE_2__["internalProperty"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "query", function() { return _lib_decorators_js__WEBPACK_IMPORTED_MODULE_2__["query"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "queryAsync", function() { return _lib_decorators_js__WEBPACK_IMPORTED_MODULE_2__["queryAsync"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "queryAll", function() { return _lib_decorators_js__WEBPACK_IMPORTED_MODULE_2__["queryAll"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eventOptions", function() { return _lib_decorators_js__WEBPACK_IMPORTED_MODULE_2__["eventOptions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "queryAssignedNodes", function() { return _lib_decorators_js__WEBPACK_IMPORTED_MODULE_2__["queryAssignedNodes"]; });

/* harmony import */ var lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lit-html/lit-html.js */ "../../node_modules/lit-html/lit-html.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "html", function() { return lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_3__["html"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "svg", function() { return lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_3__["svg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TemplateResult", function() { return lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_3__["TemplateResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SVGTemplateResult", function() { return lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_3__["SVGTemplateResult"]; });

/* harmony import */ var _lib_css_tag_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/css-tag.js */ "../../node_modules/lit-element/lib/css-tag.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "supportsAdoptingStyleSheets", function() { return _lib_css_tag_js__WEBPACK_IMPORTED_MODULE_4__["supportsAdoptingStyleSheets"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CSSResult", function() { return _lib_css_tag_js__WEBPACK_IMPORTED_MODULE_4__["CSSResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unsafeCSS", function() { return _lib_css_tag_js__WEBPACK_IMPORTED_MODULE_4__["unsafeCSS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "css", function() { return _lib_css_tag_js__WEBPACK_IMPORTED_MODULE_4__["css"]; });

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */







// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for LitElement usage.
// TODO(justinfagnani): inject version number at build time
(window['litElementVersions'] || (window['litElementVersions'] = []))
    .push('2.3.1');
/**
 * Sentinal value used to avoid calling lit-html's render function when
 * subclasses do not implement `render`
 */
const renderNotImplemented = {};
class LitElement extends _lib_updating_element_js__WEBPACK_IMPORTED_MODULE_1__["UpdatingElement"] {
    /**
     * Return the array of styles to apply to the element.
     * Override this method to integrate into a style management system.
     *
     * @nocollapse
     */
    static getStyles() {
        return this.styles;
    }
    /** @nocollapse */
    static _getUniqueStyles() {
        // Only gather styles once per class
        if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {
            return;
        }
        // Take care not to call `this.getStyles()` multiple times since this
        // generates new CSSResults each time.
        // TODO(sorvell): Since we do not cache CSSResults by input, any
        // shared styles will generate new stylesheet objects, which is wasteful.
        // This should be addressed when a browser ships constructable
        // stylesheets.
        const userStyles = this.getStyles();
        if (userStyles === undefined) {
            this._styles = [];
        }
        else if (Array.isArray(userStyles)) {
            // De-duplicate styles preserving the _last_ instance in the set.
            // This is a performance optimization to avoid duplicated styles that can
            // occur especially when composing via subclassing.
            // The last item is kept to try to preserve the cascade order with the
            // assumption that it's most important that last added styles override
            // previous styles.
            const addStyles = (styles, set) => styles.reduceRight((set, s) => 
            // Note: On IE set.add() does not return the set
            Array.isArray(s) ? addStyles(s, set) : (set.add(s), set), set);
            // Array.from does not work on Set in IE, otherwise return
            // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()
            const set = addStyles(userStyles, new Set());
            const styles = [];
            set.forEach((v) => styles.unshift(v));
            this._styles = styles;
        }
        else {
            this._styles = [userStyles];
        }
    }
    /**
     * Performs element initialization. By default this calls `createRenderRoot`
     * to create the element `renderRoot` node and captures any pre-set values for
     * registered properties.
     */
    initialize() {
        super.initialize();
        this.constructor._getUniqueStyles();
        this.renderRoot =
            this.createRenderRoot();
        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the
        // element's getRootNode(). While this could be done, we're choosing not to
        // support this now since it would require different logic around de-duping.
        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {
            this.adoptStyles();
        }
    }
    /**
     * Returns the node into which the element should render and by default
     * creates and returns an open shadowRoot. Implement to customize where the
     * element's DOM is rendered. For example, to render into the element's
     * childNodes, return `this`.
     * @returns {Element|DocumentFragment} Returns a node into which to render.
     */
    createRenderRoot() {
        return this.attachShadow({ mode: 'open' });
    }
    /**
     * Applies styling to the element shadowRoot using the `static get styles`
     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where
     * available and will fallback otherwise. When Shadow DOM is polyfilled,
     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM
     * is available but `adoptedStyleSheets` is not, styles are appended to the
     * end of the `shadowRoot` to [mimic spec
     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
     */
    adoptStyles() {
        const styles = this.constructor._styles;
        if (styles.length === 0) {
            return;
        }
        // There are three separate cases here based on Shadow DOM support.
        // (1) shadowRoot polyfilled: use ShadyCSS
        // (2) shadowRoot.adoptedStyleSheets available: use it.
        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after
        // rendering
        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {
            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);
        }
        else if (_lib_css_tag_js__WEBPACK_IMPORTED_MODULE_4__["supportsAdoptingStyleSheets"]) {
            this.renderRoot.adoptedStyleSheets =
                styles.map((s) => s.styleSheet);
        }
        else {
            // This must be done after rendering so the actual style insertion is done
            // in `update`.
            this._needsShimAdoptedStyleSheets = true;
        }
    }
    connectedCallback() {
        super.connectedCallback();
        // Note, first update/render handles styleElement so we only call this if
        // connected after first update.
        if (this.hasUpdated && window.ShadyCSS !== undefined) {
            window.ShadyCSS.styleElement(this);
        }
    }
    /**
     * Updates the element. This method reflects property values to attributes
     * and calls `render` to render DOM via lit-html. Setting properties inside
     * this method will *not* trigger another update.
     * @param _changedProperties Map of changed properties with old values
     */
    update(changedProperties) {
        // Setting properties in `render` should not trigger an update. Since
        // updates are allowed after super.update, it's important to call `render`
        // before that.
        const templateResult = this.render();
        super.update(changedProperties);
        // If render is not implemented by the component, don't call lit-html render
        if (templateResult !== renderNotImplemented) {
            this.constructor
                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });
        }
        // When native Shadow DOM is used but adoptedStyles are not supported,
        // insert styling after rendering to ensure adoptedStyles have highest
        // priority.
        if (this._needsShimAdoptedStyleSheets) {
            this._needsShimAdoptedStyleSheets = false;
            this.constructor._styles.forEach((s) => {
                const style = document.createElement('style');
                style.textContent = s.cssText;
                this.renderRoot.appendChild(style);
            });
        }
    }
    /**
     * Invoked on each update to perform rendering tasks. This method may return
     * any value renderable by lit-html's NodePart - typically a TemplateResult.
     * Setting properties inside this method will *not* trigger the element to
     * update.
     */
    render() {
        return renderNotImplemented;
    }
}
/**
 * Ensure this class is marked as `finalized` as an optimization ensuring
 * it will not needlessly try to `finalize`.
 *
 * Note this property name is a string to prevent breaking Closure JS Compiler
 * optimizations. See updating-element.ts for more information.
 */
LitElement['finalized'] = true;
/**
 * Render method used to render the value to the element's DOM.
 * @param result The value to render.
 * @param container Node into which to render.
 * @param options Element name.
 * @nocollapse
 */
LitElement.render = lit_html_lib_shady_render_js__WEBPACK_IMPORTED_MODULE_0__["render"];


/***/ }),

/***/ "../../node_modules/lit-html/directives/repeat.js":
/*!********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-html/directives/repeat.js ***!
  \********************************************************************************************/
/*! exports provided: repeat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "repeat", function() { return repeat; });
/* harmony import */ var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lit-html.js */ "../../node_modules/lit-html/lit-html.js");
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

// Helper functions for manipulating parts
// TODO(kschaaf): Refactor into Part API?
const createAndInsertPart = (containerPart, beforePart) => {
    const container = containerPart.startNode.parentNode;
    const beforeNode = beforePart === undefined ? containerPart.endNode :
        beforePart.startNode;
    const startNode = container.insertBefore(Object(_lit_html_js__WEBPACK_IMPORTED_MODULE_0__["createMarker"])(), beforeNode);
    container.insertBefore(Object(_lit_html_js__WEBPACK_IMPORTED_MODULE_0__["createMarker"])(), beforeNode);
    const newPart = new _lit_html_js__WEBPACK_IMPORTED_MODULE_0__["NodePart"](containerPart.options);
    newPart.insertAfterNode(startNode);
    return newPart;
};
const updatePart = (part, value) => {
    part.setValue(value);
    part.commit();
    return part;
};
const insertPartBefore = (containerPart, part, ref) => {
    const container = containerPart.startNode.parentNode;
    const beforeNode = ref ? ref.startNode : containerPart.endNode;
    const endNode = part.endNode.nextSibling;
    if (endNode !== beforeNode) {
        Object(_lit_html_js__WEBPACK_IMPORTED_MODULE_0__["reparentNodes"])(container, part.startNode, endNode, beforeNode);
    }
};
const removePart = (part) => {
    Object(_lit_html_js__WEBPACK_IMPORTED_MODULE_0__["removeNodes"])(part.startNode.parentNode, part.startNode, part.endNode.nextSibling);
};
// Helper for generating a map of array item to its index over a subset
// of an array (used to lazily generate `newKeyToIndexMap` and
// `oldKeyToIndexMap`)
const generateMap = (list, start, end) => {
    const map = new Map();
    for (let i = start; i <= end; i++) {
        map.set(list[i], i);
    }
    return map;
};
// Stores previous ordered list of parts and map of key to index
const partListCache = new WeakMap();
const keyListCache = new WeakMap();
/**
 * A directive that repeats a series of values (usually `TemplateResults`)
 * generated from an iterable, and updates those items efficiently when the
 * iterable changes based on user-provided `keys` associated with each item.
 *
 * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,
 * meaning previous DOM for a given key is moved into the new position if
 * needed, and DOM will never be reused with values for different keys (new DOM
 * will always be created for new keys). This is generally the most efficient
 * way to use `repeat` since it performs minimum unnecessary work for insertions
 * and removals.
 *
 * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a
 * given call to `repeat`. The behavior when two or more items have the same key
 * is undefined.
 *
 * If no `keyFn` is provided, this directive will perform similar to mapping
 * items to values, and DOM will be reused against potentially different items.
 */
const repeat = Object(_lit_html_js__WEBPACK_IMPORTED_MODULE_0__["directive"])((items, keyFnOrTemplate, template) => {
    let keyFn;
    if (template === undefined) {
        template = keyFnOrTemplate;
    }
    else if (keyFnOrTemplate !== undefined) {
        keyFn = keyFnOrTemplate;
    }
    return (containerPart) => {
        if (!(containerPart instanceof _lit_html_js__WEBPACK_IMPORTED_MODULE_0__["NodePart"])) {
            throw new Error('repeat can only be used in text bindings');
        }
        // Old part & key lists are retrieved from the last update
        // (associated with the part for this instance of the directive)
        const oldParts = partListCache.get(containerPart) || [];
        const oldKeys = keyListCache.get(containerPart) || [];
        // New part list will be built up as we go (either reused from
        // old parts or created for new keys in this update). This is
        // saved in the above cache at the end of the update.
        const newParts = [];
        // New value list is eagerly generated from items along with a
        // parallel array indicating its key.
        const newValues = [];
        const newKeys = [];
        let index = 0;
        for (const item of items) {
            newKeys[index] = keyFn ? keyFn(item, index) : index;
            newValues[index] = template(item, index);
            index++;
        }
        // Maps from key to index for current and previous update; these
        // are generated lazily only when needed as a performance
        // optimization, since they are only required for multiple
        // non-contiguous changes in the list, which are less common.
        let newKeyToIndexMap;
        let oldKeyToIndexMap;
        // Head and tail pointers to old parts and new values
        let oldHead = 0;
        let oldTail = oldParts.length - 1;
        let newHead = 0;
        let newTail = newValues.length - 1;
        // Overview of O(n) reconciliation algorithm (general approach
        // based on ideas found in ivi, vue, snabbdom, etc.):
        //
        // * We start with the list of old parts and new values (and
        //   arrays of their respective keys), head/tail pointers into
        //   each, and we build up the new list of parts by updating
        //   (and when needed, moving) old parts or creating new ones.
        //   The initial scenario might look like this (for brevity of
        //   the diagrams, the numbers in the array reflect keys
        //   associated with the old parts or new values, although keys
        //   and parts/values are actually stored in parallel arrays
        //   indexed using the same head/tail pointers):
        //
        //      oldHead v                 v oldTail
        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
        //   newParts: [ ,  ,  ,  ,  ,  ,  ]
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new
        //                                      item order
        //      newHead ^                 ^ newTail
        //
        // * Iterate old & new lists from both sides, updating,
        //   swapping, or removing parts at the head/tail locations
        //   until neither head nor tail can move.
        //
        // * Example below: keys at head pointers match, so update old
        //   part 0 in-place (no need to move it) and record part 0 in
        //   the `newParts` list. The last thing we do is advance the
        //   `oldHead` and `newHead` pointers (will be reflected in the
        //   next diagram).
        //
        //      oldHead v                 v oldTail
        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
        //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead
        //                                      & newHead
        //      newHead ^                 ^ newTail
        //
        // * Example below: head pointers don't match, but tail
        //   pointers do, so update part 6 in place (no need to move
        //   it), and record part 6 in the `newParts` list. Last,
        //   advance the `oldTail` and `oldHead` pointers.
        //
        //         oldHead v              v oldTail
        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
        //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail
        //                                      & newTail
        //         newHead ^              ^ newTail
        //
        // * If neither head nor tail match; next check if one of the
        //   old head/tail items was removed. We first need to generate
        //   the reverse map of new keys to index (`newKeyToIndexMap`),
        //   which is done once lazily as a performance optimization,
        //   since we only hit this case if multiple non-contiguous
        //   changes were made. Note that for contiguous removal
        //   anywhere in the list, the head and tails would advance
        //   from either end and pass each other before we get to this
        //   case and removals would be handled in the final while loop
        //   without needing to generate the map.
        //
        // * Example below: The key at `oldTail` was removed (no longer
        //   in the `newKeyToIndexMap`), so remove that part from the
        //   DOM and advance just the `oldTail` pointer.
        //
        //         oldHead v           v oldTail
        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
        //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail
        //         newHead ^           ^ newTail
        //
        // * Once head and tail cannot move, any mismatches are due to
        //   either new or moved items; if a new key is in the previous
        //   "old key to old index" map, move the old part to the new
        //   location, otherwise create and insert a new part. Note
        //   that when moving an old part we null its position in the
        //   oldParts array if it lies between the head and tail so we
        //   know to skip it when the pointers get there.
        //
        // * Example below: neither head nor tail match, and neither
        //   were removed; so find the `newHead` key in the
        //   `oldKeyToIndexMap`, and move that old part's DOM into the
        //   next head position (before `oldParts[oldHead]`). Last,
        //   null the part in the `oldPart` array since it was
        //   somewhere in the remaining oldParts still to be scanned
        //   (between the head and tail pointers) so that we know to
        //   skip that old part on future iterations.
        //
        //         oldHead v        v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance
        //                                      newHead
        //         newHead ^           ^ newTail
        //
        // * Note that for moves/insertions like the one above, a part
        //   inserted at the head pointer is inserted before the
        //   current `oldParts[oldHead]`, and a part inserted at the
        //   tail pointer is inserted before `newParts[newTail+1]`. The
        //   seeming asymmetry lies in the fact that new parts are
        //   moved into place outside in, so to the right of the head
        //   pointer are old parts, and to the right of the tail
        //   pointer are new parts.
        //
        // * We always restart back from the top of the algorithm,
        //   allowing matching and simple updates in place to
        //   continue...
        //
        // * Example below: the head pointers once again match, so
        //   simply update part 1 and record it in the `newParts`
        //   array.  Last, advance both head pointers.
        //
        //         oldHead v        v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead
        //                                      & newHead
        //            newHead ^        ^ newTail
        //
        // * As mentioned above, items that were moved as a result of
        //   being stuck (the final else clause in the code below) are
        //   marked with null, so we always advance old pointers over
        //   these so we're comparing the next actual old value on
        //   either end.
        //
        // * Example below: `oldHead` is null (already placed in
        //   newParts), so advance `oldHead`.
        //
        //            oldHead v     v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:
        //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]
        //               newHead ^     ^ newTail
        //
        // * Note it's not critical to mark old parts as null when they
        //   are moved from head to tail or tail to head, since they
        //   will be outside the pointer range and never visited again.
        //
        // * Example below: Here the old tail key matches the new head
        //   key, so the part at the `oldTail` position and move its
        //   DOM to the new head position (before `oldParts[oldHead]`).
        //   Last, advance `oldTail` and `newHead` pointers.
        //
        //               oldHead v  v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,
        //                                     advance oldTail & newHead
        //               newHead ^     ^ newTail
        //
        // * Example below: Old and new head keys match, so update the
        //   old head part in place, and advance the `oldHead` and
        //   `newHead` pointers.
        //
        //               oldHead v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &
        //                                      newHead
        //                  newHead ^  ^ newTail
        //
        // * Once the new or old pointers move past each other then all
        //   we have left is additions (if old list exhausted) or
        //   removals (if new list exhausted). Those are handled in the
        //   final while loops at the end.
        //
        // * Example below: `oldHead` exceeded `oldTail`, so we're done
        //   with the main loop.  Create the remaining part and insert
        //   it at the new head position, and the update is complete.
        //
        //                   (oldHead > oldTail)
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]
        //                     newHead ^ newTail
        //
        // * Note that the order of the if/else clauses is not
        //   important to the algorithm, as long as the null checks
        //   come first (to ensure we're always working on valid old
        //   parts) and that the final else clause comes last (since
        //   that's where the expensive moves occur). The order of
        //   remaining clauses is is just a simple guess at which cases
        //   will be most common.
        //
        // * TODO(kschaaf) Note, we could calculate the longest
        //   increasing subsequence (LIS) of old items in new position,
        //   and only move those not in the LIS set. However that costs
        //   O(nlogn) time and adds a bit more code, and only helps
        //   make rare types of mutations require fewer moves. The
        //   above handles removes, adds, reversal, swaps, and single
        //   moves of contiguous items in linear time, in the minimum
        //   number of moves. As the number of multiple moves where LIS
        //   might help approaches a random shuffle, the LIS
        //   optimization becomes less helpful, so it seems not worth
        //   the code at this point. Could reconsider if a compelling
        //   case arises.
        while (oldHead <= oldTail && newHead <= newTail) {
            if (oldParts[oldHead] === null) {
                // `null` means old part at head has already been used
                // below; skip
                oldHead++;
            }
            else if (oldParts[oldTail] === null) {
                // `null` means old part at tail has already been used
                // below; skip
                oldTail--;
            }
            else if (oldKeys[oldHead] === newKeys[newHead]) {
                // Old head matches new head; update in place
                newParts[newHead] =
                    updatePart(oldParts[oldHead], newValues[newHead]);
                oldHead++;
                newHead++;
            }
            else if (oldKeys[oldTail] === newKeys[newTail]) {
                // Old tail matches new tail; update in place
                newParts[newTail] =
                    updatePart(oldParts[oldTail], newValues[newTail]);
                oldTail--;
                newTail--;
            }
            else if (oldKeys[oldHead] === newKeys[newTail]) {
                // Old head matches new tail; update and move to new tail
                newParts[newTail] =
                    updatePart(oldParts[oldHead], newValues[newTail]);
                insertPartBefore(containerPart, oldParts[oldHead], newParts[newTail + 1]);
                oldHead++;
                newTail--;
            }
            else if (oldKeys[oldTail] === newKeys[newHead]) {
                // Old tail matches new head; update and move to new head
                newParts[newHead] =
                    updatePart(oldParts[oldTail], newValues[newHead]);
                insertPartBefore(containerPart, oldParts[oldTail], oldParts[oldHead]);
                oldTail--;
                newHead++;
            }
            else {
                if (newKeyToIndexMap === undefined) {
                    // Lazily generate key-to-index maps, used for removals &
                    // moves below
                    newKeyToIndexMap = generateMap(newKeys, newHead, newTail);
                    oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);
                }
                if (!newKeyToIndexMap.has(oldKeys[oldHead])) {
                    // Old head is no longer in new list; remove
                    removePart(oldParts[oldHead]);
                    oldHead++;
                }
                else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {
                    // Old tail is no longer in new list; remove
                    removePart(oldParts[oldTail]);
                    oldTail--;
                }
                else {
                    // Any mismatches at this point are due to additions or
                    // moves; see if we have an old part we can reuse and move
                    // into place
                    const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);
                    const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;
                    if (oldPart === null) {
                        // No old part for this value; create a new one and
                        // insert it
                        const newPart = createAndInsertPart(containerPart, oldParts[oldHead]);
                        updatePart(newPart, newValues[newHead]);
                        newParts[newHead] = newPart;
                    }
                    else {
                        // Reuse old part
                        newParts[newHead] =
                            updatePart(oldPart, newValues[newHead]);
                        insertPartBefore(containerPart, oldPart, oldParts[oldHead]);
                        // This marks the old part as having been used, so that
                        // it will be skipped in the first two checks above
                        oldParts[oldIndex] = null;
                    }
                    newHead++;
                }
            }
        }
        // Add parts for any remaining new values
        while (newHead <= newTail) {
            // For all remaining additions, we insert before last new
            // tail, since old pointers are no longer valid
            const newPart = createAndInsertPart(containerPart, newParts[newTail + 1]);
            updatePart(newPart, newValues[newHead]);
            newParts[newHead++] = newPart;
        }
        // Remove any remaining unused old parts
        while (oldHead <= oldTail) {
            const oldPart = oldParts[oldHead++];
            if (oldPart !== null) {
                removePart(oldPart);
            }
        }
        // Save order of new parts for next round
        partListCache.set(containerPart, newParts);
        keyListCache.set(containerPart, newKeys);
    };
});


/***/ }),

/***/ "../../node_modules/lit-html/lib/default-template-processor.js":
/*!*********************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-html/lib/default-template-processor.js ***!
  \*********************************************************************************************************/
/*! exports provided: DefaultTemplateProcessor, defaultTemplateProcessor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultTemplateProcessor", function() { return DefaultTemplateProcessor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultTemplateProcessor", function() { return defaultTemplateProcessor; });
/* harmony import */ var _parts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parts.js */ "../../node_modules/lit-html/lib/parts.js");
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * Creates Parts when a template is instantiated.
 */
class DefaultTemplateProcessor {
    /**
     * Create parts for an attribute-position binding, given the event, attribute
     * name, and string literals.
     *
     * @param element The element containing the binding
     * @param name  The attribute name
     * @param strings The string literals. There are always at least two strings,
     *   event for fully-controlled bindings with a single expression.
     */
    handleAttributeExpressions(element, name, strings, options) {
        const prefix = name[0];
        if (prefix === '.') {
            const committer = new _parts_js__WEBPACK_IMPORTED_MODULE_0__["PropertyCommitter"](element, name.slice(1), strings);
            return committer.parts;
        }
        if (prefix === '@') {
            return [new _parts_js__WEBPACK_IMPORTED_MODULE_0__["EventPart"](element, name.slice(1), options.eventContext)];
        }
        if (prefix === '?') {
            return [new _parts_js__WEBPACK_IMPORTED_MODULE_0__["BooleanAttributePart"](element, name.slice(1), strings)];
        }
        const committer = new _parts_js__WEBPACK_IMPORTED_MODULE_0__["AttributeCommitter"](element, name, strings);
        return committer.parts;
    }
    /**
     * Create parts for a text-position binding.
     * @param templateFactory
     */
    handleTextExpression(options) {
        return new _parts_js__WEBPACK_IMPORTED_MODULE_0__["NodePart"](options);
    }
}
const defaultTemplateProcessor = new DefaultTemplateProcessor();


/***/ }),

/***/ "../../node_modules/lit-html/lib/directive.js":
/*!****************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-html/lib/directive.js ***!
  \****************************************************************************************/
/*! exports provided: directive, isDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "directive", function() { return directive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDirective", function() { return isDirective; });
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const directives = new WeakMap();
/**
 * Brands a function as a directive factory function so that lit-html will call
 * the function during template rendering, rather than passing as a value.
 *
 * A _directive_ is a function that takes a Part as an argument. It has the
 * signature: `(part: Part) => void`.
 *
 * A directive _factory_ is a function that takes arguments for data and
 * configuration and returns a directive. Users of directive usually refer to
 * the directive factory as the directive. For example, "The repeat directive".
 *
 * Usually a template author will invoke a directive factory in their template
 * with relevant arguments, which will then return a directive function.
 *
 * Here's an example of using the `repeat()` directive factory that takes an
 * array and a function to render an item:
 *
 * ```js
 * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`
 * ```
 *
 * When `repeat` is invoked, it returns a directive function that closes over
 * `items` and the template function. When the outer template is rendered, the
 * return directive function is called with the Part for the expression.
 * `repeat` then performs it's custom logic to render multiple items.
 *
 * @param f The directive factory function. Must be a function that returns a
 * function of the signature `(part: Part) => void`. The returned function will
 * be called with the part object.
 *
 * @example
 *
 * import {directive, html} from 'lit-html';
 *
 * const immutable = directive((v) => (part) => {
 *   if (part.value !== v) {
 *     part.setValue(v)
 *   }
 * });
 */
const directive = (f) => ((...args) => {
    const d = f(...args);
    directives.set(d, true);
    return d;
});
const isDirective = (o) => {
    return typeof o === 'function' && directives.has(o);
};


/***/ }),

/***/ "../../node_modules/lit-html/lib/dom.js":
/*!**********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-html/lib/dom.js ***!
  \**********************************************************************************/
/*! exports provided: isCEPolyfill, reparentNodes, removeNodes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCEPolyfill", function() { return isCEPolyfill; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reparentNodes", function() { return reparentNodes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeNodes", function() { return removeNodes; });
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * True if the custom elements polyfill is in use.
 */
const isCEPolyfill = typeof window !== 'undefined' &&
    window.customElements != null &&
    window.customElements.polyfillWrapFlushCallback !==
        undefined;
/**
 * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),
 * into another container (could be the same container), before `before`. If
 * `before` is null, it appends the nodes to the container.
 */
const reparentNodes = (container, start, end = null, before = null) => {
    while (start !== end) {
        const n = start.nextSibling;
        container.insertBefore(start, before);
        start = n;
    }
};
/**
 * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from
 * `container`.
 */
const removeNodes = (container, start, end = null) => {
    while (start !== end) {
        const n = start.nextSibling;
        container.removeChild(start);
        start = n;
    }
};


/***/ }),

/***/ "../../node_modules/lit-html/lib/modify-template.js":
/*!**********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-html/lib/modify-template.js ***!
  \**********************************************************************************************/
/*! exports provided: removeNodesFromTemplate, insertNodeIntoTemplate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeNodesFromTemplate", function() { return removeNodesFromTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertNodeIntoTemplate", function() { return insertNodeIntoTemplate; });
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./template.js */ "../../node_modules/lit-html/lib/template.js");
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @module shady-render
 */

const walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;
/**
 * Removes the list of nodes from a Template safely. In addition to removing
 * nodes from the Template, the Template part indices are updated to match
 * the mutated Template DOM.
 *
 * As the template is walked the removal state is tracked and
 * part indices are adjusted as needed.
 *
 * div
 *   div#1 (remove) <-- start removing (removing node is div#1)
 *     div
 *       div#2 (remove)  <-- continue removing (removing node is still div#1)
 *         div
 * div <-- stop removing since previous sibling is the removing node (div#1,
 * removed 4 nodes)
 */
function removeNodesFromTemplate(template, nodesToRemove) {
    const { element: { content }, parts } = template;
    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
    let partIndex = nextActiveIndexInTemplateParts(parts);
    let part = parts[partIndex];
    let nodeIndex = -1;
    let removeCount = 0;
    const nodesToRemoveInTemplate = [];
    let currentRemovingNode = null;
    while (walker.nextNode()) {
        nodeIndex++;
        const node = walker.currentNode;
        // End removal if stepped past the removing node
        if (node.previousSibling === currentRemovingNode) {
            currentRemovingNode = null;
        }
        // A node to remove was found in the template
        if (nodesToRemove.has(node)) {
            nodesToRemoveInTemplate.push(node);
            // Track node we're removing
            if (currentRemovingNode === null) {
                currentRemovingNode = node;
            }
        }
        // When removing, increment count by which to adjust subsequent part indices
        if (currentRemovingNode !== null) {
            removeCount++;
        }
        while (part !== undefined && part.index === nodeIndex) {
            // If part is in a removed node deactivate it by setting index to -1 or
            // adjust the index as needed.
            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;
            // go to the next active part.
            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
            part = parts[partIndex];
        }
    }
    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));
}
const countNodes = (node) => {
    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;
    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);
    while (walker.nextNode()) {
        count++;
    }
    return count;
};
const nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {
    for (let i = startIndex + 1; i < parts.length; i++) {
        const part = parts[i];
        if (Object(_template_js__WEBPACK_IMPORTED_MODULE_0__["isTemplatePartActive"])(part)) {
            return i;
        }
    }
    return -1;
};
/**
 * Inserts the given node into the Template, optionally before the given
 * refNode. In addition to inserting the node into the Template, the Template
 * part indices are updated to match the mutated Template DOM.
 */
function insertNodeIntoTemplate(template, node, refNode = null) {
    const { element: { content }, parts } = template;
    // If there's no refNode, then put node at end of template.
    // No part indices need to be shifted in this case.
    if (refNode === null || refNode === undefined) {
        content.appendChild(node);
        return;
    }
    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
    let partIndex = nextActiveIndexInTemplateParts(parts);
    let insertCount = 0;
    let walkerIndex = -1;
    while (walker.nextNode()) {
        walkerIndex++;
        const walkerNode = walker.currentNode;
        if (walkerNode === refNode) {
            insertCount = countNodes(node);
            refNode.parentNode.insertBefore(node, refNode);
        }
        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {
            // If we've inserted the node, simply adjust all subsequent parts
            if (insertCount > 0) {
                while (partIndex !== -1) {
                    parts[partIndex].index += insertCount;
                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
                }
                return;
            }
            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
        }
    }
}


/***/ }),

/***/ "../../node_modules/lit-html/lib/part.js":
/*!***********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-html/lib/part.js ***!
  \***********************************************************************************/
/*! exports provided: noChange, nothing */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "noChange", function() { return noChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nothing", function() { return nothing; });
/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * A sentinel value that signals that a value was handled by a directive and
 * should not be written to the DOM.
 */
const noChange = {};
/**
 * A sentinel value that signals a NodePart to fully clear its content.
 */
const nothing = {};


/***/ }),

/***/ "../../node_modules/lit-html/lib/parts.js":
/*!************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-html/lib/parts.js ***!
  \************************************************************************************/
/*! exports provided: isPrimitive, isIterable, AttributeCommitter, AttributePart, NodePart, BooleanAttributePart, PropertyCommitter, PropertyPart, EventPart */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPrimitive", function() { return isPrimitive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isIterable", function() { return isIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AttributeCommitter", function() { return AttributeCommitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AttributePart", function() { return AttributePart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NodePart", function() { return NodePart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BooleanAttributePart", function() { return BooleanAttributePart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyCommitter", function() { return PropertyCommitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyPart", function() { return PropertyPart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventPart", function() { return EventPart; });
/* harmony import */ var _directive_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./directive.js */ "../../node_modules/lit-html/lib/directive.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom.js */ "../../node_modules/lit-html/lib/dom.js");
/* harmony import */ var _part_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./part.js */ "../../node_modules/lit-html/lib/part.js");
/* harmony import */ var _template_instance_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./template-instance.js */ "../../node_modules/lit-html/lib/template-instance.js");
/* harmony import */ var _template_result_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./template-result.js */ "../../node_modules/lit-html/lib/template-result.js");
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./template.js */ "../../node_modules/lit-html/lib/template.js");
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @module lit-html
 */






const isPrimitive = (value) => {
    return (value === null ||
        !(typeof value === 'object' || typeof value === 'function'));
};
const isIterable = (value) => {
    return Array.isArray(value) ||
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        !!(value && value[Symbol.iterator]);
};
/**
 * Writes attribute values to the DOM for a group of AttributeParts bound to a
 * single attribute. The value is only set once even if there are multiple parts
 * for an attribute.
 */
class AttributeCommitter {
    constructor(element, name, strings) {
        this.dirty = true;
        this.element = element;
        this.name = name;
        this.strings = strings;
        this.parts = [];
        for (let i = 0; i < strings.length - 1; i++) {
            this.parts[i] = this._createPart();
        }
    }
    /**
     * Creates a single part. Override this to create a differnt type of part.
     */
    _createPart() {
        return new AttributePart(this);
    }
    _getValue() {
        const strings = this.strings;
        const l = strings.length - 1;
        let text = '';
        for (let i = 0; i < l; i++) {
            text += strings[i];
            const part = this.parts[i];
            if (part !== undefined) {
                const v = part.value;
                if (isPrimitive(v) || !isIterable(v)) {
                    text += typeof v === 'string' ? v : String(v);
                }
                else {
                    for (const t of v) {
                        text += typeof t === 'string' ? t : String(t);
                    }
                }
            }
        }
        text += strings[l];
        return text;
    }
    commit() {
        if (this.dirty) {
            this.dirty = false;
            this.element.setAttribute(this.name, this._getValue());
        }
    }
}
/**
 * A Part that controls all or part of an attribute value.
 */
class AttributePart {
    constructor(committer) {
        this.value = undefined;
        this.committer = committer;
    }
    setValue(value) {
        if (value !== _part_js__WEBPACK_IMPORTED_MODULE_2__["noChange"] && (!isPrimitive(value) || value !== this.value)) {
            this.value = value;
            // If the value is a not a directive, dirty the committer so that it'll
            // call setAttribute. If the value is a directive, it'll dirty the
            // committer if it calls setValue().
            if (!Object(_directive_js__WEBPACK_IMPORTED_MODULE_0__["isDirective"])(value)) {
                this.committer.dirty = true;
            }
        }
    }
    commit() {
        while (Object(_directive_js__WEBPACK_IMPORTED_MODULE_0__["isDirective"])(this.value)) {
            const directive = this.value;
            this.value = _part_js__WEBPACK_IMPORTED_MODULE_2__["noChange"];
            directive(this);
        }
        if (this.value === _part_js__WEBPACK_IMPORTED_MODULE_2__["noChange"]) {
            return;
        }
        this.committer.commit();
    }
}
/**
 * A Part that controls a location within a Node tree. Like a Range, NodePart
 * has start and end locations and can set and update the Nodes between those
 * locations.
 *
 * NodeParts support several value types: primitives, Nodes, TemplateResults,
 * as well as arrays and iterables of those types.
 */
class NodePart {
    constructor(options) {
        this.value = undefined;
        this.__pendingValue = undefined;
        this.options = options;
    }
    /**
     * Appends this part into a container.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    appendInto(container) {
        this.startNode = container.appendChild(Object(_template_js__WEBPACK_IMPORTED_MODULE_5__["createMarker"])());
        this.endNode = container.appendChild(Object(_template_js__WEBPACK_IMPORTED_MODULE_5__["createMarker"])());
    }
    /**
     * Inserts this part after the `ref` node (between `ref` and `ref`'s next
     * sibling). Both `ref` and its next sibling must be static, unchanging nodes
     * such as those that appear in a literal section of a template.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    insertAfterNode(ref) {
        this.startNode = ref;
        this.endNode = ref.nextSibling;
    }
    /**
     * Appends this part into a parent part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    appendIntoPart(part) {
        part.__insert(this.startNode = Object(_template_js__WEBPACK_IMPORTED_MODULE_5__["createMarker"])());
        part.__insert(this.endNode = Object(_template_js__WEBPACK_IMPORTED_MODULE_5__["createMarker"])());
    }
    /**
     * Inserts this part after the `ref` part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    insertAfterPart(ref) {
        ref.__insert(this.startNode = Object(_template_js__WEBPACK_IMPORTED_MODULE_5__["createMarker"])());
        this.endNode = ref.endNode;
        ref.endNode = this.startNode;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        if (this.startNode.parentNode === null) {
            return;
        }
        while (Object(_directive_js__WEBPACK_IMPORTED_MODULE_0__["isDirective"])(this.__pendingValue)) {
            const directive = this.__pendingValue;
            this.__pendingValue = _part_js__WEBPACK_IMPORTED_MODULE_2__["noChange"];
            directive(this);
        }
        const value = this.__pendingValue;
        if (value === _part_js__WEBPACK_IMPORTED_MODULE_2__["noChange"]) {
            return;
        }
        if (isPrimitive(value)) {
            if (value !== this.value) {
                this.__commitText(value);
            }
        }
        else if (value instanceof _template_result_js__WEBPACK_IMPORTED_MODULE_4__["TemplateResult"]) {
            this.__commitTemplateResult(value);
        }
        else if (value instanceof Node) {
            this.__commitNode(value);
        }
        else if (isIterable(value)) {
            this.__commitIterable(value);
        }
        else if (value === _part_js__WEBPACK_IMPORTED_MODULE_2__["nothing"]) {
            this.value = _part_js__WEBPACK_IMPORTED_MODULE_2__["nothing"];
            this.clear();
        }
        else {
            // Fallback, will render the string representation
            this.__commitText(value);
        }
    }
    __insert(node) {
        this.endNode.parentNode.insertBefore(node, this.endNode);
    }
    __commitNode(value) {
        if (this.value === value) {
            return;
        }
        this.clear();
        this.__insert(value);
        this.value = value;
    }
    __commitText(value) {
        const node = this.startNode.nextSibling;
        value = value == null ? '' : value;
        // If `value` isn't already a string, we explicitly convert it here in case
        // it can't be implicitly converted - i.e. it's a symbol.
        const valueAsString = typeof value === 'string' ? value : String(value);
        if (node === this.endNode.previousSibling &&
            node.nodeType === 3 /* Node.TEXT_NODE */) {
            // If we only have a single text node between the markers, we can just
            // set its value, rather than replacing it.
            // TODO(justinfagnani): Can we just check if this.value is primitive?
            node.data = valueAsString;
        }
        else {
            this.__commitNode(document.createTextNode(valueAsString));
        }
        this.value = value;
    }
    __commitTemplateResult(value) {
        const template = this.options.templateFactory(value);
        if (this.value instanceof _template_instance_js__WEBPACK_IMPORTED_MODULE_3__["TemplateInstance"] &&
            this.value.template === template) {
            this.value.update(value.values);
        }
        else {
            // Make sure we propagate the template processor from the TemplateResult
            // so that we use its syntax extension, etc. The template factory comes
            // from the render function options so that it can control template
            // caching and preprocessing.
            const instance = new _template_instance_js__WEBPACK_IMPORTED_MODULE_3__["TemplateInstance"](template, value.processor, this.options);
            const fragment = instance._clone();
            instance.update(value.values);
            this.__commitNode(fragment);
            this.value = instance;
        }
    }
    __commitIterable(value) {
        // For an Iterable, we create a new InstancePart per item, then set its
        // value to the item. This is a little bit of overhead for every item in
        // an Iterable, but it lets us recurse easily and efficiently update Arrays
        // of TemplateResults that will be commonly returned from expressions like:
        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
        // If _value is an array, then the previous render was of an
        // iterable and _value will contain the NodeParts from the previous
        // render. If _value is not an array, clear this part and make a new
        // array for NodeParts.
        if (!Array.isArray(this.value)) {
            this.value = [];
            this.clear();
        }
        // Lets us keep track of how many items we stamped so we can clear leftover
        // items from a previous render
        const itemParts = this.value;
        let partIndex = 0;
        let itemPart;
        for (const item of value) {
            // Try to reuse an existing part
            itemPart = itemParts[partIndex];
            // If no existing part, create a new one
            if (itemPart === undefined) {
                itemPart = new NodePart(this.options);
                itemParts.push(itemPart);
                if (partIndex === 0) {
                    itemPart.appendIntoPart(this);
                }
                else {
                    itemPart.insertAfterPart(itemParts[partIndex - 1]);
                }
            }
            itemPart.setValue(item);
            itemPart.commit();
            partIndex++;
        }
        if (partIndex < itemParts.length) {
            // Truncate the parts array so _value reflects the current state
            itemParts.length = partIndex;
            this.clear(itemPart && itemPart.endNode);
        }
    }
    clear(startNode = this.startNode) {
        Object(_dom_js__WEBPACK_IMPORTED_MODULE_1__["removeNodes"])(this.startNode.parentNode, startNode.nextSibling, this.endNode);
    }
}
/**
 * Implements a boolean attribute, roughly as defined in the HTML
 * specification.
 *
 * If the value is truthy, then the attribute is present with a value of
 * ''. If the value is falsey, the attribute is removed.
 */
class BooleanAttributePart {
    constructor(element, name, strings) {
        this.value = undefined;
        this.__pendingValue = undefined;
        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {
            throw new Error('Boolean attributes can only contain a single expression');
        }
        this.element = element;
        this.name = name;
        this.strings = strings;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        while (Object(_directive_js__WEBPACK_IMPORTED_MODULE_0__["isDirective"])(this.__pendingValue)) {
            const directive = this.__pendingValue;
            this.__pendingValue = _part_js__WEBPACK_IMPORTED_MODULE_2__["noChange"];
            directive(this);
        }
        if (this.__pendingValue === _part_js__WEBPACK_IMPORTED_MODULE_2__["noChange"]) {
            return;
        }
        const value = !!this.__pendingValue;
        if (this.value !== value) {
            if (value) {
                this.element.setAttribute(this.name, '');
            }
            else {
                this.element.removeAttribute(this.name);
            }
            this.value = value;
        }
        this.__pendingValue = _part_js__WEBPACK_IMPORTED_MODULE_2__["noChange"];
    }
}
/**
 * Sets attribute values for PropertyParts, so that the value is only set once
 * even if there are multiple parts for a property.
 *
 * If an expression controls the whole property value, then the value is simply
 * assigned to the property under control. If there are string literals or
 * multiple expressions, then the strings are expressions are interpolated into
 * a string first.
 */
class PropertyCommitter extends AttributeCommitter {
    constructor(element, name, strings) {
        super(element, name, strings);
        this.single =
            (strings.length === 2 && strings[0] === '' && strings[1] === '');
    }
    _createPart() {
        return new PropertyPart(this);
    }
    _getValue() {
        if (this.single) {
            return this.parts[0].value;
        }
        return super._getValue();
    }
    commit() {
        if (this.dirty) {
            this.dirty = false;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.element[this.name] = this._getValue();
        }
    }
}
class PropertyPart extends AttributePart {
}
// Detect event listener options support. If the `capture` property is read
// from the options object, then options are supported. If not, then the third
// argument to add/removeEventListener is interpreted as the boolean capture
// value so we should only pass the `capture` property.
let eventOptionsSupported = false;
// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch
// blocks right into the body of a module
(() => {
    try {
        const options = {
            get capture() {
                eventOptionsSupported = true;
                return false;
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        window.addEventListener('test', options, options);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        window.removeEventListener('test', options, options);
    }
    catch (_e) {
        // event options not supported
    }
})();
class EventPart {
    constructor(element, eventName, eventContext) {
        this.value = undefined;
        this.__pendingValue = undefined;
        this.element = element;
        this.eventName = eventName;
        this.eventContext = eventContext;
        this.__boundHandleEvent = (e) => this.handleEvent(e);
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        while (Object(_directive_js__WEBPACK_IMPORTED_MODULE_0__["isDirective"])(this.__pendingValue)) {
            const directive = this.__pendingValue;
            this.__pendingValue = _part_js__WEBPACK_IMPORTED_MODULE_2__["noChange"];
            directive(this);
        }
        if (this.__pendingValue === _part_js__WEBPACK_IMPORTED_MODULE_2__["noChange"]) {
            return;
        }
        const newListener = this.__pendingValue;
        const oldListener = this.value;
        const shouldRemoveListener = newListener == null ||
            oldListener != null &&
                (newListener.capture !== oldListener.capture ||
                    newListener.once !== oldListener.once ||
                    newListener.passive !== oldListener.passive);
        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);
        if (shouldRemoveListener) {
            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);
        }
        if (shouldAddListener) {
            this.__options = getOptions(newListener);
            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);
        }
        this.value = newListener;
        this.__pendingValue = _part_js__WEBPACK_IMPORTED_MODULE_2__["noChange"];
    }
    handleEvent(event) {
        if (typeof this.value === 'function') {
            this.value.call(this.eventContext || this.element, event);
        }
        else {
            this.value.handleEvent(event);
        }
    }
}
// We copy options because of the inconsistent behavior of browsers when reading
// the third argument of add/removeEventListener. IE11 doesn't support options
// at all. Chrome 41 only reads `capture` if the argument is an object.
const getOptions = (o) => o &&
    (eventOptionsSupported ?
        { capture: o.capture, passive: o.passive, once: o.once } :
        o.capture);


/***/ }),

/***/ "../../node_modules/lit-html/lib/render.js":
/*!*************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-html/lib/render.js ***!
  \*************************************************************************************/
/*! exports provided: parts, render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parts", function() { return parts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom.js */ "../../node_modules/lit-html/lib/dom.js");
/* harmony import */ var _parts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parts.js */ "../../node_modules/lit-html/lib/parts.js");
/* harmony import */ var _template_factory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./template-factory.js */ "../../node_modules/lit-html/lib/template-factory.js");
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @module lit-html
 */



const parts = new WeakMap();
/**
 * Renders a template result or other value to a container.
 *
 * To update a container with new values, reevaluate the template literal and
 * call `render` with the new result.
 *
 * @param result Any value renderable by NodePart - typically a TemplateResult
 *     created by evaluating a template tag like `html` or `svg`.
 * @param container A DOM parent to render to. The entire contents are either
 *     replaced, or efficiently updated if the same result type was previous
 *     rendered there.
 * @param options RenderOptions for the entire render tree rendered to this
 *     container. Render options must *not* change between renders to the same
 *     container, as those changes will not effect previously rendered DOM.
 */
const render = (result, container, options) => {
    let part = parts.get(container);
    if (part === undefined) {
        Object(_dom_js__WEBPACK_IMPORTED_MODULE_0__["removeNodes"])(container, container.firstChild);
        parts.set(container, part = new _parts_js__WEBPACK_IMPORTED_MODULE_1__["NodePart"](Object.assign({ templateFactory: _template_factory_js__WEBPACK_IMPORTED_MODULE_2__["templateFactory"] }, options)));
        part.appendInto(container);
    }
    part.setValue(result);
    part.commit();
};


/***/ }),

/***/ "../../node_modules/lit-html/lib/shady-render.js":
/*!*******************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-html/lib/shady-render.js ***!
  \*******************************************************************************************/
/*! exports provided: html, svg, TemplateResult, render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom.js */ "../../node_modules/lit-html/lib/dom.js");
/* harmony import */ var _modify_template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modify-template.js */ "../../node_modules/lit-html/lib/modify-template.js");
/* harmony import */ var _render_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./render.js */ "../../node_modules/lit-html/lib/render.js");
/* harmony import */ var _template_factory_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./template-factory.js */ "../../node_modules/lit-html/lib/template-factory.js");
/* harmony import */ var _template_instance_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./template-instance.js */ "../../node_modules/lit-html/lib/template-instance.js");
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./template.js */ "../../node_modules/lit-html/lib/template.js");
/* harmony import */ var _lit_html_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lit-html.js */ "../../node_modules/lit-html/lit-html.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "html", function() { return _lit_html_js__WEBPACK_IMPORTED_MODULE_6__["html"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "svg", function() { return _lit_html_js__WEBPACK_IMPORTED_MODULE_6__["svg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TemplateResult", function() { return _lit_html_js__WEBPACK_IMPORTED_MODULE_6__["TemplateResult"]; });

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * Module to add shady DOM/shady CSS polyfill support to lit-html template
 * rendering. See the [[render]] method for details.
 *
 * @module shady-render
 * @preferred
 */
/**
 * Do not remove this comment; it keeps typedoc from misplacing the module
 * docs.
 */







// Get a key to lookup in `templateCaches`.
const getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;
let compatibleShadyCSSVersion = true;
if (typeof window.ShadyCSS === 'undefined') {
    compatibleShadyCSSVersion = false;
}
else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {
    console.warn(`Incompatible ShadyCSS version detected. ` +
        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +
        `@webcomponents/shadycss@1.3.1.`);
    compatibleShadyCSSVersion = false;
}
/**
 * Template factory which scopes template DOM using ShadyCSS.
 * @param scopeName {string}
 */
const shadyTemplateFactory = (scopeName) => (result) => {
    const cacheKey = getTemplateCacheKey(result.type, scopeName);
    let templateCache = _template_factory_js__WEBPACK_IMPORTED_MODULE_3__["templateCaches"].get(cacheKey);
    if (templateCache === undefined) {
        templateCache = {
            stringsArray: new WeakMap(),
            keyString: new Map()
        };
        _template_factory_js__WEBPACK_IMPORTED_MODULE_3__["templateCaches"].set(cacheKey, templateCache);
    }
    let template = templateCache.stringsArray.get(result.strings);
    if (template !== undefined) {
        return template;
    }
    const key = result.strings.join(_template_js__WEBPACK_IMPORTED_MODULE_5__["marker"]);
    template = templateCache.keyString.get(key);
    if (template === undefined) {
        const element = result.getTemplateElement();
        if (compatibleShadyCSSVersion) {
            window.ShadyCSS.prepareTemplateDom(element, scopeName);
        }
        template = new _template_js__WEBPACK_IMPORTED_MODULE_5__["Template"](result, element);
        templateCache.keyString.set(key, template);
    }
    templateCache.stringsArray.set(result.strings, template);
    return template;
};
const TEMPLATE_TYPES = ['html', 'svg'];
/**
 * Removes all style elements from Templates for the given scopeName.
 */
const removeStylesFromLitTemplates = (scopeName) => {
    TEMPLATE_TYPES.forEach((type) => {
        const templates = _template_factory_js__WEBPACK_IMPORTED_MODULE_3__["templateCaches"].get(getTemplateCacheKey(type, scopeName));
        if (templates !== undefined) {
            templates.keyString.forEach((template) => {
                const { element: { content } } = template;
                // IE 11 doesn't support the iterable param Set constructor
                const styles = new Set();
                Array.from(content.querySelectorAll('style')).forEach((s) => {
                    styles.add(s);
                });
                Object(_modify_template_js__WEBPACK_IMPORTED_MODULE_1__["removeNodesFromTemplate"])(template, styles);
            });
        }
    });
};
const shadyRenderSet = new Set();
/**
 * For the given scope name, ensures that ShadyCSS style scoping is performed.
 * This is done just once per scope name so the fragment and template cannot
 * be modified.
 * (1) extracts styles from the rendered fragment and hands them to ShadyCSS
 * to be scoped and appended to the document
 * (2) removes style elements from all lit-html Templates for this scope name.
 *
 * Note, <style> elements can only be placed into templates for the
 * initial rendering of the scope. If <style> elements are included in templates
 * dynamically rendered to the scope (after the first scope render), they will
 * not be scoped and the <style> will be left in the template and rendered
 * output.
 */
const prepareTemplateStyles = (scopeName, renderedDOM, template) => {
    shadyRenderSet.add(scopeName);
    // If `renderedDOM` is stamped from a Template, then we need to edit that
    // Template's underlying template element. Otherwise, we create one here
    // to give to ShadyCSS, which still requires one while scoping.
    const templateElement = !!template ? template.element : document.createElement('template');
    // Move styles out of rendered DOM and store.
    const styles = renderedDOM.querySelectorAll('style');
    const { length } = styles;
    // If there are no styles, skip unnecessary work
    if (length === 0) {
        // Ensure prepareTemplateStyles is called to support adding
        // styles via `prepareAdoptedCssText` since that requires that
        // `prepareTemplateStyles` is called.
        //
        // ShadyCSS will only update styles containing @apply in the template
        // given to `prepareTemplateStyles`. If no lit Template was given,
        // ShadyCSS will not be able to update uses of @apply in any relevant
        // template. However, this is not a problem because we only create the
        // template for the purpose of supporting `prepareAdoptedCssText`,
        // which doesn't support @apply at all.
        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
        return;
    }
    const condensedStyle = document.createElement('style');
    // Collect styles into a single style. This helps us make sure ShadyCSS
    // manipulations will not prevent us from being able to fix up template
    // part indices.
    // NOTE: collecting styles is inefficient for browsers but ShadyCSS
    // currently does this anyway. When it does not, this should be changed.
    for (let i = 0; i < length; i++) {
        const style = styles[i];
        style.parentNode.removeChild(style);
        condensedStyle.textContent += style.textContent;
    }
    // Remove styles from nested templates in this scope.
    removeStylesFromLitTemplates(scopeName);
    // And then put the condensed style into the "root" template passed in as
    // `template`.
    const content = templateElement.content;
    if (!!template) {
        Object(_modify_template_js__WEBPACK_IMPORTED_MODULE_1__["insertNodeIntoTemplate"])(template, condensedStyle, content.firstChild);
    }
    else {
        content.insertBefore(condensedStyle, content.firstChild);
    }
    // Note, it's important that ShadyCSS gets the template that `lit-html`
    // will actually render so that it can update the style inside when
    // needed (e.g. @apply native Shadow DOM case).
    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
    const style = content.querySelector('style');
    if (window.ShadyCSS.nativeShadow && style !== null) {
        // When in native Shadow DOM, ensure the style created by ShadyCSS is
        // included in initially rendered output (`renderedDOM`).
        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);
    }
    else if (!!template) {
        // When no style is left in the template, parts will be broken as a
        // result. To fix this, we put back the style node ShadyCSS removed
        // and then tell lit to remove that node from the template.
        // There can be no style in the template in 2 cases (1) when Shady DOM
        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM
        // is in use ShadyCSS removes the style if it contains no content.
        // NOTE, ShadyCSS creates its own style so we can safely add/remove
        // `condensedStyle` here.
        content.insertBefore(condensedStyle, content.firstChild);
        const removes = new Set();
        removes.add(condensedStyle);
        Object(_modify_template_js__WEBPACK_IMPORTED_MODULE_1__["removeNodesFromTemplate"])(template, removes);
    }
};
/**
 * Extension to the standard `render` method which supports rendering
 * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)
 * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used
 * or when the webcomponentsjs
 * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.
 *
 * Adds a `scopeName` option which is used to scope element DOM and stylesheets
 * when native ShadowDOM is unavailable. The `scopeName` will be added to
 * the class attribute of all rendered DOM. In addition, any style elements will
 * be automatically re-written with this `scopeName` selector and moved out
 * of the rendered DOM and into the document `<head>`.
 *
 * It is common to use this render method in conjunction with a custom element
 * which renders a shadowRoot. When this is done, typically the element's
 * `localName` should be used as the `scopeName`.
 *
 * In addition to DOM scoping, ShadyCSS also supports a basic shim for css
 * custom properties (needed only on older browsers like IE11) and a shim for
 * a deprecated feature called `@apply` that supports applying a set of css
 * custom properties to a given location.
 *
 * Usage considerations:
 *
 * * Part values in `<style>` elements are only applied the first time a given
 * `scopeName` renders. Subsequent changes to parts in style elements will have
 * no effect. Because of this, parts in style elements should only be used for
 * values that will never change, for example parts that set scope-wide theme
 * values or parts which render shared style elements.
 *
 * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a
 * custom element's `constructor` is not supported. Instead rendering should
 * either done asynchronously, for example at microtask timing (for example
 * `Promise.resolve()`), or be deferred until the first time the element's
 * `connectedCallback` runs.
 *
 * Usage considerations when using shimmed custom properties or `@apply`:
 *
 * * Whenever any dynamic changes are made which affect
 * css custom properties, `ShadyCSS.styleElement(element)` must be called
 * to update the element. There are two cases when this is needed:
 * (1) the element is connected to a new parent, (2) a class is added to the
 * element that causes it to match different custom properties.
 * To address the first case when rendering a custom element, `styleElement`
 * should be called in the element's `connectedCallback`.
 *
 * * Shimmed custom properties may only be defined either for an entire
 * shadowRoot (for example, in a `:host` rule) or via a rule that directly
 * matches an element with a shadowRoot. In other words, instead of flowing from
 * parent to child as do native css custom properties, shimmed custom properties
 * flow only from shadowRoots to nested shadowRoots.
 *
 * * When using `@apply` mixing css shorthand property names with
 * non-shorthand names (for example `border` and `border-width`) is not
 * supported.
 */
const render = (result, container, options) => {
    if (!options || typeof options !== 'object' || !options.scopeName) {
        throw new Error('The `scopeName` option is required.');
    }
    const scopeName = options.scopeName;
    const hasRendered = _render_js__WEBPACK_IMPORTED_MODULE_2__["parts"].has(container);
    const needsScoping = compatibleShadyCSSVersion &&
        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&
        !!container.host;
    // Handle first render to a scope specially...
    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);
    // On first scope render, render into a fragment; this cannot be a single
    // fragment that is reused since nested renders can occur synchronously.
    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;
    Object(_render_js__WEBPACK_IMPORTED_MODULE_2__["render"])(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));
    // When performing first scope render,
    // (1) We've rendered into a fragment so that there's a chance to
    // `prepareTemplateStyles` before sub-elements hit the DOM
    // (which might cause them to render based on a common pattern of
    // rendering in a custom element's `connectedCallback`);
    // (2) Scope the template with ShadyCSS one time only for this scope.
    // (3) Render the fragment into the container and make sure the
    // container knows its `part` is the one we just rendered. This ensures
    // DOM will be re-used on subsequent renders.
    if (firstScopeRender) {
        const part = _render_js__WEBPACK_IMPORTED_MODULE_2__["parts"].get(renderContainer);
        _render_js__WEBPACK_IMPORTED_MODULE_2__["parts"].delete(renderContainer);
        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)
        // that should apply to `renderContainer` even if the rendered value is
        // not a TemplateInstance. However, it will only insert scoped styles
        // into the document if `prepareTemplateStyles` has already been called
        // for the given scope name.
        const template = part.value instanceof _template_instance_js__WEBPACK_IMPORTED_MODULE_4__["TemplateInstance"] ?
            part.value.template :
            undefined;
        prepareTemplateStyles(scopeName, renderContainer, template);
        Object(_dom_js__WEBPACK_IMPORTED_MODULE_0__["removeNodes"])(container, container.firstChild);
        container.appendChild(renderContainer);
        _render_js__WEBPACK_IMPORTED_MODULE_2__["parts"].set(container, part);
    }
    // After elements have hit the DOM, update styling if this is the
    // initial render to this container.
    // This is needed whenever dynamic changes are made so it would be
    // safest to do every render; however, this would regress performance
    // so we leave it up to the user to call `ShadyCSS.styleElement`
    // for dynamic changes.
    if (!hasRendered && needsScoping) {
        window.ShadyCSS.styleElement(container.host);
    }
};


/***/ }),

/***/ "../../node_modules/lit-html/lib/template-factory.js":
/*!***********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-html/lib/template-factory.js ***!
  \***********************************************************************************************/
/*! exports provided: templateFactory, templateCaches */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "templateFactory", function() { return templateFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "templateCaches", function() { return templateCaches; });
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./template.js */ "../../node_modules/lit-html/lib/template.js");
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * The default TemplateFactory which caches Templates keyed on
 * result.type and result.strings.
 */
function templateFactory(result) {
    let templateCache = templateCaches.get(result.type);
    if (templateCache === undefined) {
        templateCache = {
            stringsArray: new WeakMap(),
            keyString: new Map()
        };
        templateCaches.set(result.type, templateCache);
    }
    let template = templateCache.stringsArray.get(result.strings);
    if (template !== undefined) {
        return template;
    }
    // If the TemplateStringsArray is new, generate a key from the strings
    // This key is shared between all templates with identical content
    const key = result.strings.join(_template_js__WEBPACK_IMPORTED_MODULE_0__["marker"]);
    // Check if we already have a Template for this key
    template = templateCache.keyString.get(key);
    if (template === undefined) {
        // If we have not seen this key before, create a new Template
        template = new _template_js__WEBPACK_IMPORTED_MODULE_0__["Template"](result, result.getTemplateElement());
        // Cache the Template for this key
        templateCache.keyString.set(key, template);
    }
    // Cache all future queries for this TemplateStringsArray
    templateCache.stringsArray.set(result.strings, template);
    return template;
}
const templateCaches = new Map();


/***/ }),

/***/ "../../node_modules/lit-html/lib/template-instance.js":
/*!************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-html/lib/template-instance.js ***!
  \************************************************************************************************/
/*! exports provided: TemplateInstance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplateInstance", function() { return TemplateInstance; });
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom.js */ "../../node_modules/lit-html/lib/dom.js");
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./template.js */ "../../node_modules/lit-html/lib/template.js");
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @module lit-html
 */


/**
 * An instance of a `Template` that can be attached to the DOM and updated
 * with new values.
 */
class TemplateInstance {
    constructor(template, processor, options) {
        this.__parts = [];
        this.template = template;
        this.processor = processor;
        this.options = options;
    }
    update(values) {
        let i = 0;
        for (const part of this.__parts) {
            if (part !== undefined) {
                part.setValue(values[i]);
            }
            i++;
        }
        for (const part of this.__parts) {
            if (part !== undefined) {
                part.commit();
            }
        }
    }
    _clone() {
        // There are a number of steps in the lifecycle of a template instance's
        // DOM fragment:
        //  1. Clone - create the instance fragment
        //  2. Adopt - adopt into the main document
        //  3. Process - find part markers and create parts
        //  4. Upgrade - upgrade custom elements
        //  5. Update - set node, attribute, property, etc., values
        //  6. Connect - connect to the document. Optional and outside of this
        //     method.
        //
        // We have a few constraints on the ordering of these steps:
        //  * We need to upgrade before updating, so that property values will pass
        //    through any property setters.
        //  * We would like to process before upgrading so that we're sure that the
        //    cloned fragment is inert and not disturbed by self-modifying DOM.
        //  * We want custom elements to upgrade even in disconnected fragments.
        //
        // Given these constraints, with full custom elements support we would
        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect
        //
        // But Safari does not implement CustomElementRegistry#upgrade, so we
        // can not implement that order and still have upgrade-before-update and
        // upgrade disconnected fragments. So we instead sacrifice the
        // process-before-upgrade constraint, since in Custom Elements v1 elements
        // must not modify their light DOM in the constructor. We still have issues
        // when co-existing with CEv0 elements like Polymer 1, and with polyfills
        // that don't strictly adhere to the no-modification rule because shadow
        // DOM, which may be created in the constructor, is emulated by being placed
        // in the light DOM.
        //
        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,
        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade
        // in one step.
        //
        // The Custom Elements v1 polyfill supports upgrade(), so the order when
        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,
        // Connect.
        const fragment = _dom_js__WEBPACK_IMPORTED_MODULE_0__["isCEPolyfill"] ?
            this.template.element.content.cloneNode(true) :
            document.importNode(this.template.element.content, true);
        const stack = [];
        const parts = this.template.parts;
        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
        let partIndex = 0;
        let nodeIndex = 0;
        let part;
        let node = walker.nextNode();
        // Loop through all the nodes and parts of a template
        while (partIndex < parts.length) {
            part = parts[partIndex];
            if (!Object(_template_js__WEBPACK_IMPORTED_MODULE_1__["isTemplatePartActive"])(part)) {
                this.__parts.push(undefined);
                partIndex++;
                continue;
            }
            // Progress the tree walker until we find our next part's node.
            // Note that multiple parts may share the same node (attribute parts
            // on a single element), so this loop may not run at all.
            while (nodeIndex < part.index) {
                nodeIndex++;
                if (node.nodeName === 'TEMPLATE') {
                    stack.push(node);
                    walker.currentNode = node.content;
                }
                if ((node = walker.nextNode()) === null) {
                    // We've exhausted the content inside a nested template element.
                    // Because we still have parts (the outer for-loop), we know:
                    // - There is a template in the stack
                    // - The walker will find a nextNode outside the template
                    walker.currentNode = stack.pop();
                    node = walker.nextNode();
                }
            }
            // We've arrived at our part's node.
            if (part.type === 'node') {
                const part = this.processor.handleTextExpression(this.options);
                part.insertAfterNode(node.previousSibling);
                this.__parts.push(part);
            }
            else {
                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));
            }
            partIndex++;
        }
        if (_dom_js__WEBPACK_IMPORTED_MODULE_0__["isCEPolyfill"]) {
            document.adoptNode(fragment);
            customElements.upgrade(fragment);
        }
        return fragment;
    }
}


/***/ }),

/***/ "../../node_modules/lit-html/lib/template-result.js":
/*!**********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-html/lib/template-result.js ***!
  \**********************************************************************************************/
/*! exports provided: TemplateResult, SVGTemplateResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplateResult", function() { return TemplateResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SVGTemplateResult", function() { return SVGTemplateResult; });
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom.js */ "../../node_modules/lit-html/lib/dom.js");
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./template.js */ "../../node_modules/lit-html/lib/template.js");
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @module lit-html
 */


const commentMarker = ` ${_template_js__WEBPACK_IMPORTED_MODULE_1__["marker"]} `;
/**
 * The return type of `html`, which holds a Template and the values from
 * interpolated expressions.
 */
class TemplateResult {
    constructor(strings, values, type, processor) {
        this.strings = strings;
        this.values = values;
        this.type = type;
        this.processor = processor;
    }
    /**
     * Returns a string of HTML used to create a `<template>` element.
     */
    getHTML() {
        const l = this.strings.length - 1;
        let html = '';
        let isCommentBinding = false;
        for (let i = 0; i < l; i++) {
            const s = this.strings[i];
            // For each binding we want to determine the kind of marker to insert
            // into the template source before it's parsed by the browser's HTML
            // parser. The marker type is based on whether the expression is in an
            // attribute, text, or comment position.
            //   * For node-position bindings we insert a comment with the marker
            //     sentinel as its text content, like <!--{{lit-guid}}-->.
            //   * For attribute bindings we insert just the marker sentinel for the
            //     first binding, so that we support unquoted attribute bindings.
            //     Subsequent bindings can use a comment marker because multi-binding
            //     attributes must be quoted.
            //   * For comment bindings we insert just the marker sentinel so we don't
            //     close the comment.
            //
            // The following code scans the template source, but is *not* an HTML
            // parser. We don't need to track the tree structure of the HTML, only
            // whether a binding is inside a comment, and if not, if it appears to be
            // the first binding in an attribute.
            const commentOpen = s.lastIndexOf('<!--');
            // We're in comment position if we have a comment open with no following
            // comment close. Because <-- can appear in an attribute value there can
            // be false positives.
            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&
                s.indexOf('-->', commentOpen + 1) === -1;
            // Check to see if we have an attribute-like sequence preceding the
            // expression. This can match "name=value" like structures in text,
            // comments, and attribute values, so there can be false-positives.
            const attributeMatch = _template_js__WEBPACK_IMPORTED_MODULE_1__["lastAttributeNameRegex"].exec(s);
            if (attributeMatch === null) {
                // We're only in this branch if we don't have a attribute-like
                // preceding sequence. For comments, this guards against unusual
                // attribute values like <div foo="<!--${'bar'}">. Cases like
                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch
                // below.
                html += s + (isCommentBinding ? commentMarker : _template_js__WEBPACK_IMPORTED_MODULE_1__["nodeMarker"]);
            }
            else {
                // For attributes we use just a marker sentinel, and also append a
                // $lit$ suffix to the name to opt-out of attribute-specific parsing
                // that IE and Edge do for style and certain SVG attributes.
                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +
                    attributeMatch[2] + _template_js__WEBPACK_IMPORTED_MODULE_1__["boundAttributeSuffix"] + attributeMatch[3] +
                    _template_js__WEBPACK_IMPORTED_MODULE_1__["marker"];
            }
        }
        html += this.strings[l];
        return html;
    }
    getTemplateElement() {
        const template = document.createElement('template');
        template.innerHTML = this.getHTML();
        return template;
    }
}
/**
 * A TemplateResult for SVG fragments.
 *
 * This class wraps HTML in an `<svg>` tag in order to parse its contents in the
 * SVG namespace, then modifies the template to remove the `<svg>` tag so that
 * clones only container the original fragment.
 */
class SVGTemplateResult extends TemplateResult {
    getHTML() {
        return `<svg>${super.getHTML()}</svg>`;
    }
    getTemplateElement() {
        const template = super.getTemplateElement();
        const content = template.content;
        const svgElement = content.firstChild;
        content.removeChild(svgElement);
        Object(_dom_js__WEBPACK_IMPORTED_MODULE_0__["reparentNodes"])(content, svgElement.firstChild);
        return template;
    }
}


/***/ }),

/***/ "../../node_modules/lit-html/lib/template.js":
/*!***************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-html/lib/template.js ***!
  \***************************************************************************************/
/*! exports provided: marker, nodeMarker, markerRegex, boundAttributeSuffix, Template, isTemplatePartActive, createMarker, lastAttributeNameRegex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "marker", function() { return marker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nodeMarker", function() { return nodeMarker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "markerRegex", function() { return markerRegex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "boundAttributeSuffix", function() { return boundAttributeSuffix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Template", function() { return Template; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTemplatePartActive", function() { return isTemplatePartActive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createMarker", function() { return createMarker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lastAttributeNameRegex", function() { return lastAttributeNameRegex; });
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * An expression marker with embedded unique key to avoid collision with
 * possible text in templates.
 */
const marker = `{{lit-${String(Math.random()).slice(2)}}}`;
/**
 * An expression marker used text-positions, multi-binding attributes, and
 * attributes with markup-like text values.
 */
const nodeMarker = `<!--${marker}-->`;
const markerRegex = new RegExp(`${marker}|${nodeMarker}`);
/**
 * Suffix appended to all bound attribute names.
 */
const boundAttributeSuffix = '$lit$';
/**
 * An updatable Template that tracks the location of dynamic parts.
 */
class Template {
    constructor(result, element) {
        this.parts = [];
        this.element = element;
        const nodesToRemove = [];
        const stack = [];
        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
        // Keeps track of the last index associated with a part. We try to delete
        // unnecessary nodes, but we never want to associate two different parts
        // to the same index. They must have a constant node between.
        let lastPartIndex = 0;
        let index = -1;
        let partIndex = 0;
        const { strings, values: { length } } = result;
        while (partIndex < length) {
            const node = walker.nextNode();
            if (node === null) {
                // We've exhausted the content inside a nested template element.
                // Because we still have parts (the outer for-loop), we know:
                // - There is a template in the stack
                // - The walker will find a nextNode outside the template
                walker.currentNode = stack.pop();
                continue;
            }
            index++;
            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {
                if (node.hasAttributes()) {
                    const attributes = node.attributes;
                    const { length } = attributes;
                    // Per
                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,
                    // attributes are not guaranteed to be returned in document order.
                    // In particular, Edge/IE can return them out of order, so we cannot
                    // assume a correspondence between part index and attribute index.
                    let count = 0;
                    for (let i = 0; i < length; i++) {
                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {
                            count++;
                        }
                    }
                    while (count-- > 0) {
                        // Get the template literal section leading up to the first
                        // expression in this attribute
                        const stringForPart = strings[partIndex];
                        // Find the attribute name
                        const name = lastAttributeNameRegex.exec(stringForPart)[2];
                        // Find the corresponding attribute
                        // All bound attributes have had a suffix added in
                        // TemplateResult#getHTML to opt out of special attribute
                        // handling. To look up the attribute value we also need to add
                        // the suffix.
                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;
                        const attributeValue = node.getAttribute(attributeLookupName);
                        node.removeAttribute(attributeLookupName);
                        const statics = attributeValue.split(markerRegex);
                        this.parts.push({ type: 'attribute', index, name, strings: statics });
                        partIndex += statics.length - 1;
                    }
                }
                if (node.tagName === 'TEMPLATE') {
                    stack.push(node);
                    walker.currentNode = node.content;
                }
            }
            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {
                const data = node.data;
                if (data.indexOf(marker) >= 0) {
                    const parent = node.parentNode;
                    const strings = data.split(markerRegex);
                    const lastIndex = strings.length - 1;
                    // Generate a new text node for each literal section
                    // These nodes are also used as the markers for node parts
                    for (let i = 0; i < lastIndex; i++) {
                        let insert;
                        let s = strings[i];
                        if (s === '') {
                            insert = createMarker();
                        }
                        else {
                            const match = lastAttributeNameRegex.exec(s);
                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {
                                s = s.slice(0, match.index) + match[1] +
                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];
                            }
                            insert = document.createTextNode(s);
                        }
                        parent.insertBefore(insert, node);
                        this.parts.push({ type: 'node', index: ++index });
                    }
                    // If there's no text, we must insert a comment to mark our place.
                    // Else, we can trust it will stick around after cloning.
                    if (strings[lastIndex] === '') {
                        parent.insertBefore(createMarker(), node);
                        nodesToRemove.push(node);
                    }
                    else {
                        node.data = strings[lastIndex];
                    }
                    // We have a part for each match found
                    partIndex += lastIndex;
                }
            }
            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {
                if (node.data === marker) {
                    const parent = node.parentNode;
                    // Add a new marker node to be the startNode of the Part if any of
                    // the following are true:
                    //  * We don't have a previousSibling
                    //  * The previousSibling is already the start of a previous part
                    if (node.previousSibling === null || index === lastPartIndex) {
                        index++;
                        parent.insertBefore(createMarker(), node);
                    }
                    lastPartIndex = index;
                    this.parts.push({ type: 'node', index });
                    // If we don't have a nextSibling, keep this node so we have an end.
                    // Else, we can remove it to save future costs.
                    if (node.nextSibling === null) {
                        node.data = '';
                    }
                    else {
                        nodesToRemove.push(node);
                        index--;
                    }
                    partIndex++;
                }
                else {
                    let i = -1;
                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {
                        // Comment node has a binding marker inside, make an inactive part
                        // The binding won't work, but subsequent bindings will
                        // TODO (justinfagnani): consider whether it's even worth it to
                        // make bindings in comments work
                        this.parts.push({ type: 'node', index: -1 });
                        partIndex++;
                    }
                }
            }
        }
        // Remove text binding nodes after the walk to not disturb the TreeWalker
        for (const n of nodesToRemove) {
            n.parentNode.removeChild(n);
        }
    }
}
const endsWith = (str, suffix) => {
    const index = str.length - suffix.length;
    return index >= 0 && str.slice(index) === suffix;
};
const isTemplatePartActive = (part) => part.index !== -1;
// Allows `document.createComment('')` to be renamed for a
// small manual size-savings.
const createMarker = () => document.createComment('');
/**
 * This regex extracts the attribute name preceding an attribute-position
 * expression. It does this by matching the syntax allowed for attributes
 * against the string literal directly preceding the expression, assuming that
 * the expression is in an attribute-value position.
 *
 * See attributes in the HTML spec:
 * https://www.w3.org/TR/html5/syntax.html#elements-attributes
 *
 * " \x09\x0a\x0c\x0d" are HTML space characters:
 * https://www.w3.org/TR/html5/infrastructure.html#space-characters
 *
 * "\0-\x1F\x7F-\x9F" are Unicode control characters, which includes every
 * space character except " ".
 *
 * So an attribute is:
 *  * The name: any character except a control character, space character, ('),
 *    ("), ">", "=", or "/"
 *  * Followed by zero or more space characters
 *  * Followed by "="
 *  * Followed by zero or more space characters
 *  * Followed by:
 *    * Any character except space, ('), ("), "<", ">", "=", (`), or
 *    * (") then any non-("), or
 *    * (') then any non-(')
 */
const lastAttributeNameRegex = 
// eslint-disable-next-line no-control-regex
/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;


/***/ }),

/***/ "../../node_modules/lit-html/lit-html.js":
/*!***********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/lit-html/lit-html.js ***!
  \***********************************************************************************/
/*! exports provided: DefaultTemplateProcessor, defaultTemplateProcessor, directive, isDirective, removeNodes, reparentNodes, noChange, nothing, AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart, parts, render, templateCaches, templateFactory, TemplateInstance, SVGTemplateResult, TemplateResult, createMarker, isTemplatePartActive, Template, html, svg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "html", function() { return html; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "svg", function() { return svg; });
/* harmony import */ var _lib_default_template_processor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/default-template-processor.js */ "../../node_modules/lit-html/lib/default-template-processor.js");
/* harmony import */ var _lib_template_result_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/template-result.js */ "../../node_modules/lit-html/lib/template-result.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultTemplateProcessor", function() { return _lib_default_template_processor_js__WEBPACK_IMPORTED_MODULE_0__["DefaultTemplateProcessor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultTemplateProcessor", function() { return _lib_default_template_processor_js__WEBPACK_IMPORTED_MODULE_0__["defaultTemplateProcessor"]; });

/* harmony import */ var _lib_directive_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/directive.js */ "../../node_modules/lit-html/lib/directive.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "directive", function() { return _lib_directive_js__WEBPACK_IMPORTED_MODULE_2__["directive"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isDirective", function() { return _lib_directive_js__WEBPACK_IMPORTED_MODULE_2__["isDirective"]; });

/* harmony import */ var _lib_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/dom.js */ "../../node_modules/lit-html/lib/dom.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "removeNodes", function() { return _lib_dom_js__WEBPACK_IMPORTED_MODULE_3__["removeNodes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reparentNodes", function() { return _lib_dom_js__WEBPACK_IMPORTED_MODULE_3__["reparentNodes"]; });

/* harmony import */ var _lib_part_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/part.js */ "../../node_modules/lit-html/lib/part.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "noChange", function() { return _lib_part_js__WEBPACK_IMPORTED_MODULE_4__["noChange"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "nothing", function() { return _lib_part_js__WEBPACK_IMPORTED_MODULE_4__["nothing"]; });

/* harmony import */ var _lib_parts_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/parts.js */ "../../node_modules/lit-html/lib/parts.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AttributeCommitter", function() { return _lib_parts_js__WEBPACK_IMPORTED_MODULE_5__["AttributeCommitter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AttributePart", function() { return _lib_parts_js__WEBPACK_IMPORTED_MODULE_5__["AttributePart"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BooleanAttributePart", function() { return _lib_parts_js__WEBPACK_IMPORTED_MODULE_5__["BooleanAttributePart"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EventPart", function() { return _lib_parts_js__WEBPACK_IMPORTED_MODULE_5__["EventPart"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isIterable", function() { return _lib_parts_js__WEBPACK_IMPORTED_MODULE_5__["isIterable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isPrimitive", function() { return _lib_parts_js__WEBPACK_IMPORTED_MODULE_5__["isPrimitive"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NodePart", function() { return _lib_parts_js__WEBPACK_IMPORTED_MODULE_5__["NodePart"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyCommitter", function() { return _lib_parts_js__WEBPACK_IMPORTED_MODULE_5__["PropertyCommitter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyPart", function() { return _lib_parts_js__WEBPACK_IMPORTED_MODULE_5__["PropertyPart"]; });

/* harmony import */ var _lib_render_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/render.js */ "../../node_modules/lit-html/lib/render.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parts", function() { return _lib_render_js__WEBPACK_IMPORTED_MODULE_6__["parts"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _lib_render_js__WEBPACK_IMPORTED_MODULE_6__["render"]; });

/* harmony import */ var _lib_template_factory_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/template-factory.js */ "../../node_modules/lit-html/lib/template-factory.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "templateCaches", function() { return _lib_template_factory_js__WEBPACK_IMPORTED_MODULE_7__["templateCaches"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "templateFactory", function() { return _lib_template_factory_js__WEBPACK_IMPORTED_MODULE_7__["templateFactory"]; });

/* harmony import */ var _lib_template_instance_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/template-instance.js */ "../../node_modules/lit-html/lib/template-instance.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TemplateInstance", function() { return _lib_template_instance_js__WEBPACK_IMPORTED_MODULE_8__["TemplateInstance"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SVGTemplateResult", function() { return _lib_template_result_js__WEBPACK_IMPORTED_MODULE_1__["SVGTemplateResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TemplateResult", function() { return _lib_template_result_js__WEBPACK_IMPORTED_MODULE_1__["TemplateResult"]; });

/* harmony import */ var _lib_template_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/template.js */ "../../node_modules/lit-html/lib/template.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createMarker", function() { return _lib_template_js__WEBPACK_IMPORTED_MODULE_9__["createMarker"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isTemplatePartActive", function() { return _lib_template_js__WEBPACK_IMPORTED_MODULE_9__["isTemplatePartActive"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Template", function() { return _lib_template_js__WEBPACK_IMPORTED_MODULE_9__["Template"]; });

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 *
 * Main lit-html module.
 *
 * Main exports:
 *
 * -  [[html]]
 * -  [[svg]]
 * -  [[render]]
 *
 * @module lit-html
 * @preferred
 */
/**
 * Do not remove this comment; it keeps typedoc from misplacing the module
 * docs.
 */




// TODO(justinfagnani): remove line when we get NodePart moving methods








// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for lit-html usage.
// TODO(justinfagnani): inject version number at build time
if (typeof window !== 'undefined') {
    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.2.1');
}
/**
 * Interprets a template literal as an HTML template that can efficiently
 * render to and update a container.
 */
const html = (strings, ...values) => new _lib_template_result_js__WEBPACK_IMPORTED_MODULE_1__["TemplateResult"](strings, values, 'html', _lib_default_template_processor_js__WEBPACK_IMPORTED_MODULE_0__["defaultTemplateProcessor"]);
/**
 * Interprets a template literal as an SVG template that can efficiently
 * render to and update a container.
 */
const svg = (strings, ...values) => new _lib_template_result_js__WEBPACK_IMPORTED_MODULE_1__["SVGTemplateResult"](strings, values, 'svg', _lib_default_template_processor_js__WEBPACK_IMPORTED_MODULE_0__["defaultTemplateProcessor"]);


/***/ }),

/***/ "../../node_modules/object-assign/index.js":
/*!*************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/object-assign/index.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),

/***/ "../../node_modules/quad-indices/index.js":
/*!************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/quad-indices/index.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dtype = __webpack_require__(/*! dtype */ "../../node_modules/dtype/index.js")
var anArray = __webpack_require__(/*! an-array */ "../../node_modules/an-array/index.js")
var isBuffer = __webpack_require__(/*! is-buffer */ "../../node_modules/is-buffer/index.js")

var CW = [0, 2, 3]
var CCW = [2, 1, 3]

module.exports = function createQuadElements(array, opt) {
    //if user didn't specify an output array
    if (!array || !(anArray(array) || isBuffer(array))) {
        opt = array || {}
        array = null
    }

    if (typeof opt === 'number') //backwards-compatible
        opt = { count: opt }
    else
        opt = opt || {}

    var type = typeof opt.type === 'string' ? opt.type : 'uint16'
    var count = typeof opt.count === 'number' ? opt.count : 1
    var start = (opt.start || 0) 

    var dir = opt.clockwise !== false ? CW : CCW,
        a = dir[0], 
        b = dir[1],
        c = dir[2]

    var numIndices = count * 6

    var indices = array || new (dtype(type))(numIndices)
    for (var i = 0, j = 0; i < numIndices; i += 6, j += 4) {
        var x = i + start
        indices[x + 0] = j + 0
        indices[x + 1] = j + 1
        indices[x + 2] = j + 2
        indices[x + 3] = j + a
        indices[x + 4] = j + b
        indices[x + 5] = j + c
    }
    return indices
}

/***/ }),

/***/ "../../node_modules/resolve-pathname/esm/resolve-pathname.js":
/*!*******************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/resolve-pathname/esm/resolve-pathname.js ***!
  \*******************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
}

// About 1.5x faster than the two-arg version of Array#splice()
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
}

// This implementation is based heavily on node's url.parse
function resolvePathname(to, from) {
  if (from === undefined) from = '';

  var toParts = (to && to.split('/')) || [];
  var fromParts = (from && from.split('/')) || [];

  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';

  var hasTrailingSlash;
  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;
  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');

  if (
    mustEndAbs &&
    fromParts[0] !== '' &&
    (!fromParts[0] || !isAbsolute(fromParts[0]))
  )
    fromParts.unshift('');

  var result = fromParts.join('/');

  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (resolvePathname);


/***/ }),

/***/ "../../node_modules/three-bmfont-text/index.js":
/*!*****************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/three-bmfont-text/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var createLayout = __webpack_require__(/*! layout-bmfont-text */ "../../node_modules/layout-bmfont-text/index.js")
var inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")
var createIndices = __webpack_require__(/*! quad-indices */ "../../node_modules/quad-indices/index.js")
var buffer = __webpack_require__(/*! three-buffer-vertex-data */ "../../node_modules/three-buffer-vertex-data/index.js")
var assign = __webpack_require__(/*! object-assign */ "../../node_modules/object-assign/index.js")

var vertices = __webpack_require__(/*! ./lib/vertices */ "../../node_modules/three-bmfont-text/lib/vertices.js")
var utils = __webpack_require__(/*! ./lib/utils */ "../../node_modules/three-bmfont-text/lib/utils.js")

var Base = THREE.BufferGeometry

module.exports = function createTextGeometry (opt) {
  return new TextGeometry(opt)
}

function TextGeometry (opt) {
  Base.call(this)

  if (typeof opt === 'string') {
    opt = { text: opt }
  }

  // use these as default values for any subsequent
  // calls to update()
  this._opt = assign({}, opt)

  // also do an initial setup...
  if (opt) this.update(opt)
}

inherits(TextGeometry, Base)

TextGeometry.prototype.update = function (opt) {
  if (typeof opt === 'string') {
    opt = { text: opt }
  }

  // use constructor defaults
  opt = assign({}, this._opt, opt)

  if (!opt.font) {
    throw new TypeError('must specify a { font } in options')
  }

  this.layout = createLayout(opt)

  // get vec2 texcoords
  var flipY = opt.flipY !== false

  // the desired BMFont data
  var font = opt.font

  // determine texture size from font file
  var texWidth = font.common.scaleW
  var texHeight = font.common.scaleH

  // get visible glyphs
  var glyphs = this.layout.glyphs.filter(function (glyph) {
    var bitmap = glyph.data
    return bitmap.width * bitmap.height > 0
  })

  // provide visible glyphs for convenience
  this.visibleGlyphs = glyphs

  // get common vertex data
  var positions = vertices.positions(glyphs)
  var uvs = vertices.uvs(glyphs, texWidth, texHeight, flipY)
  var indices = createIndices({
    clockwise: true,
    type: 'uint16',
    count: glyphs.length
  })

  // update vertex data
  buffer.index(this, indices, 1, 'uint16')
  buffer.attr(this, 'position', positions, 2)
  buffer.attr(this, 'uv', uvs, 2)

  // update multipage data
  if (!opt.multipage && 'page' in this.attributes) {
    // disable multipage rendering
    this.removeAttribute('page')
  } else if (opt.multipage) {
    var pages = vertices.pages(glyphs)
    // enable multipage rendering
    buffer.attr(this, 'page', pages, 1)
  }
}

TextGeometry.prototype.computeBoundingSphere = function () {
  if (this.boundingSphere === null) {
    this.boundingSphere = new THREE.Sphere()
  }

  var positions = this.attributes.position.array
  var itemSize = this.attributes.position.itemSize
  if (!positions || !itemSize || positions.length < 2) {
    this.boundingSphere.radius = 0
    this.boundingSphere.center.set(0, 0, 0)
    return
  }
  utils.computeSphere(positions, this.boundingSphere)
  if (isNaN(this.boundingSphere.radius)) {
    console.error('THREE.BufferGeometry.computeBoundingSphere(): ' +
      'Computed radius is NaN. The ' +
      '"position" attribute is likely to have NaN values.')
  }
}

TextGeometry.prototype.computeBoundingBox = function () {
  if (this.boundingBox === null) {
    this.boundingBox = new THREE.Box3()
  }

  var bbox = this.boundingBox
  var positions = this.attributes.position.array
  var itemSize = this.attributes.position.itemSize
  if (!positions || !itemSize || positions.length < 2) {
    bbox.makeEmpty()
    return
  }
  utils.computeBox(positions, bbox)
}


/***/ }),

/***/ "../../node_modules/three-bmfont-text/lib/utils.js":
/*!*********************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/three-bmfont-text/lib/utils.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var itemSize = 2
var box = { min: [0, 0], max: [0, 0] }

function bounds (positions) {
  var count = positions.length / itemSize
  box.min[0] = positions[0]
  box.min[1] = positions[1]
  box.max[0] = positions[0]
  box.max[1] = positions[1]

  for (var i = 0; i < count; i++) {
    var x = positions[i * itemSize + 0]
    var y = positions[i * itemSize + 1]
    box.min[0] = Math.min(x, box.min[0])
    box.min[1] = Math.min(y, box.min[1])
    box.max[0] = Math.max(x, box.max[0])
    box.max[1] = Math.max(y, box.max[1])
  }
}

module.exports.computeBox = function (positions, output) {
  bounds(positions)
  output.min.set(box.min[0], box.min[1], 0)
  output.max.set(box.max[0], box.max[1], 0)
}

module.exports.computeSphere = function (positions, output) {
  bounds(positions)
  var minX = box.min[0]
  var minY = box.min[1]
  var maxX = box.max[0]
  var maxY = box.max[1]
  var width = maxX - minX
  var height = maxY - minY
  var length = Math.sqrt(width * width + height * height)
  output.center.set(minX + width / 2, minY + height / 2, 0)
  output.radius = length / 2
}


/***/ }),

/***/ "../../node_modules/three-bmfont-text/lib/vertices.js":
/*!************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/three-bmfont-text/lib/vertices.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports.pages = function pages (glyphs) {
  var pages = new Float32Array(glyphs.length * 4 * 1)
  var i = 0
  glyphs.forEach(function (glyph) {
    var id = glyph.data.page || 0
    pages[i++] = id
    pages[i++] = id
    pages[i++] = id
    pages[i++] = id
  })
  return pages
}

module.exports.uvs = function uvs (glyphs, texWidth, texHeight, flipY) {
  var uvs = new Float32Array(glyphs.length * 4 * 2)
  var i = 0
  glyphs.forEach(function (glyph) {
    var bitmap = glyph.data
    var bw = (bitmap.x + bitmap.width)
    var bh = (bitmap.y + bitmap.height)

    // top left position
    var u0 = bitmap.x / texWidth
    var v1 = bitmap.y / texHeight
    var u1 = bw / texWidth
    var v0 = bh / texHeight

    if (flipY) {
      v1 = (texHeight - bitmap.y) / texHeight
      v0 = (texHeight - bh) / texHeight
    }

    // BL
    uvs[i++] = u0
    uvs[i++] = v1
    // TL
    uvs[i++] = u0
    uvs[i++] = v0
    // TR
    uvs[i++] = u1
    uvs[i++] = v0
    // BR
    uvs[i++] = u1
    uvs[i++] = v1
  })
  return uvs
}

module.exports.positions = function positions (glyphs) {
  var positions = new Float32Array(glyphs.length * 4 * 2)
  var i = 0
  glyphs.forEach(function (glyph) {
    var bitmap = glyph.data

    // bottom left position
    var x = glyph.position[0] + bitmap.xoffset
    var y = glyph.position[1] + bitmap.yoffset

    // quad size
    var w = bitmap.width
    var h = bitmap.height

    // BL
    positions[i++] = x
    positions[i++] = y
    // TL
    positions[i++] = x
    positions[i++] = y + h
    // TR
    positions[i++] = x + w
    positions[i++] = y + h
    // BR
    positions[i++] = x + w
    positions[i++] = y
  })
  return positions
}


/***/ }),

/***/ "../../node_modules/three-bmfont-text/shaders/msdf.js":
/*!************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/three-bmfont-text/shaders/msdf.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assign = __webpack_require__(/*! object-assign */ "../../node_modules/object-assign/index.js");

module.exports = function createMSDFShader (opt) {
  opt = opt || {};
  var opacity = typeof opt.opacity === 'number' ? opt.opacity : 1;
  var alphaTest = typeof opt.alphaTest === 'number' ? opt.alphaTest : 0.0001;
  var precision = opt.precision || 'highp';
  var color = opt.color;
  var map = opt.map;
  var negate = typeof opt.negate === 'boolean' ? opt.negate : true;

  // remove to satisfy r73
  delete opt.map;
  delete opt.color;
  delete opt.precision;
  delete opt.opacity;
  delete opt.negate;

  return assign({
    uniforms: {
      opacity: { type: 'f', value: opacity },
      map: { type: 't', value: map || new THREE.Texture() },
      color: { type: 'c', value: new THREE.Color(color) }
    },
    vertexShader: [
      'attribute vec2 uv;',
      'attribute vec4 position;',
      'uniform mat4 projectionMatrix;',
      'uniform mat4 modelViewMatrix;',
      'varying vec2 vUv;',
      'void main() {',
      'vUv = uv;',
      'gl_Position = projectionMatrix * modelViewMatrix * position;',
      '}'
    ].join('\n'),
    fragmentShader: [
      '#ifdef GL_OES_standard_derivatives',
      '#extension GL_OES_standard_derivatives : enable',
      '#endif',
      'precision ' + precision + ' float;',
      'uniform float opacity;',
      'uniform vec3 color;',
      'uniform sampler2D map;',
      'varying vec2 vUv;',

      'float median(float r, float g, float b) {',
      '  return max(min(r, g), min(max(r, g), b));',
      '}',

      'void main() {',
      '  vec3 sample = ' + (negate ? '1.0 - ' : '') + 'texture2D(map, vUv).rgb;',
      '  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;',
      '  float alpha = clamp(sigDist/fwidth(sigDist) + 0.5, 0.0, 1.0);',
      '  gl_FragColor = vec4(color.xyz, alpha * opacity);',
      alphaTest === 0
        ? ''
        : '  if (gl_FragColor.a < ' + alphaTest + ') discard;',
      '}'
    ].join('\n')
  }, opt);
};


/***/ }),

/***/ "../../node_modules/three-buffer-vertex-data/index.js":
/*!************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/three-buffer-vertex-data/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var flatten = __webpack_require__(/*! flatten-vertex-data */ "../../node_modules/flatten-vertex-data/index.js")
var warned = false;

module.exports.attr = setAttribute
module.exports.index = setIndex

function setIndex (geometry, data, itemSize, dtype) {
  if (typeof itemSize !== 'number') itemSize = 1
  if (typeof dtype !== 'string') dtype = 'uint16'

  var isR69 = !geometry.index && typeof geometry.setIndex !== 'function'
  var attrib = isR69 ? geometry.getAttribute('index') : geometry.index
  var newAttrib = updateAttribute(attrib, data, itemSize, dtype)
  if (newAttrib) {
    if (isR69) geometry.addAttribute('index', newAttrib)
    else geometry.index = newAttrib
  }
}

function setAttribute (geometry, key, data, itemSize, dtype) {
  if (typeof itemSize !== 'number') itemSize = 3
  if (typeof dtype !== 'string') dtype = 'float32'
  if (Array.isArray(data) &&
    Array.isArray(data[0]) &&
    data[0].length !== itemSize) {
    throw new Error('Nested vertex array has unexpected size; expected ' +
      itemSize + ' but found ' + data[0].length)
  }

  var attrib = geometry.getAttribute(key)
  var newAttrib = updateAttribute(attrib, data, itemSize, dtype)
  if (newAttrib) {
    geometry.addAttribute(key, newAttrib)
  }
}

function updateAttribute (attrib, data, itemSize, dtype) {
  data = data || []
  if (!attrib || rebuildAttribute(attrib, data, itemSize)) {
    // create a new array with desired type
    data = flatten(data, dtype)

    var needsNewBuffer = attrib && typeof attrib.setArray !== 'function'
    if (!attrib || needsNewBuffer) {
      // We are on an old version of ThreeJS which can't
      // support growing / shrinking buffers, so we need
      // to build a new buffer
      if (needsNewBuffer && !warned) {
        warned = true
        console.warn([
          'A WebGL buffer is being updated with a new size or itemSize, ',
          'however this version of ThreeJS only supports fixed-size buffers.',
          '\nThe old buffer may still be kept in memory.\n',
          'To avoid memory leaks, it is recommended that you dispose ',
          'your geometries and create new ones, or update to ThreeJS r82 or newer.\n',
          'See here for discussion:\n',
          'https://github.com/mrdoob/three.js/pull/9631'
        ].join(''))
      }

      // Build a new attribute
      attrib = new THREE.BufferAttribute(data, itemSize);
    }

    attrib.itemSize = itemSize
    attrib.needsUpdate = true

    // New versions of ThreeJS suggest using setArray
    // to change the data. It will use bufferData internally,
    // so you can change the array size without any issues
    if (typeof attrib.setArray === 'function') {
      attrib.setArray(data)
    }

    return attrib
  } else {
    // copy data into the existing array
    flatten(data, attrib.array)
    attrib.needsUpdate = true
    return null
  }
}

// Test whether the attribute needs to be re-created,
// returns false if we can re-use it as-is.
function rebuildAttribute (attrib, data, itemSize) {
  if (attrib.itemSize !== itemSize) return true
  if (!attrib.array) return true
  var attribLength = attrib.array.length
  if (Array.isArray(data) && Array.isArray(data[0])) {
    // [ [ x, y, z ] ]
    return attribLength !== data.length * itemSize
  } else {
    // [ x, y, z ]
    return attribLength !== data.length
  }
  return false
}


/***/ }),

/***/ "../../node_modules/three/examples/js/loaders/DRACOLoader.js":
/*!*******************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/three/examples/js/loaders/DRACOLoader.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * @author Don McCurdy / https://www.donmccurdy.com
 */

THREE.DRACOLoader = function ( manager ) {

	this.manager = manager || THREE.DefaultLoadingManager;

	this.path = '';
	this.crossOrigin = 'anonymous';

	this.decoderPath = '';
	this.decoderConfig = {};
	this.decoderBinary = null;
	this.decoderPending = null;

	this.workerLimit = 4;
	this.workerPool = [];
	this.workerNextTaskID = 1;
	this.workerSourceURL = '';

	this.defaultAttributeIDs = {
		position: 'POSITION',
		normal: 'NORMAL',
		color: 'COLOR',
		uv: 'TEX_COORD'
	};
	this.defaultAttributeTypes = {
		position: 'Float32Array',
		normal: 'Float32Array',
		color: 'Float32Array',
		uv: 'Float32Array'
	};

};

THREE.DRACOLoader.prototype = {

	constructor: THREE.DRACOLoader,

	setPath: function ( path ) {

		this.path = path;

		return this;

	},

	setCrossOrigin: function ( crossOrigin ) {

		this.crossOrigin = crossOrigin;

		return this;

	},

	setDecoderPath: function ( path ) {

		this.decoderPath = path;

		return this;

	},

	setDecoderConfig: function ( config ) {

		this.decoderConfig = config;

		return this;

	},

	setWorkerLimit: function ( workerLimit ) {

		this.workerLimit = workerLimit;

		return this;

	},

	/** @deprecated */
	setVerbosity: function () {

		console.warn( 'THREE.DRACOLoader: The .setVerbosity() method has been removed.' );

	},

	/** @deprecated */
	setDrawMode: function () {

		console.warn( 'THREE.DRACOLoader: The .setDrawMode() method has been removed.' );

	},

	/** @deprecated */
	setSkipDequantization: function () {

		console.warn( 'THREE.DRACOLoader: The .setSkipDequantization() method has been removed.' );

	},

	load: function ( url, onLoad, onProgress, onError ) {

		var loader = new THREE.FileLoader( this.manager );

		loader.setPath( this.path );
		loader.setResponseType( 'arraybuffer' );

		if ( this.crossOrigin === 'use-credentials' ) {

			loader.setWithCredentials( true );

		}

		loader.load( url, ( buffer ) => {

			var taskConfig = {
				attributeIDs: this.defaultAttributeIDs,
				attributeTypes: this.defaultAttributeTypes
			};

			this.decodeGeometry( buffer, taskConfig )
				.then( onLoad )
				.catch( onError );

		}, onProgress, onError );

	},

	/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */
	decodeDracoFile: function ( buffer, callback, attributeIDs, attributeTypes ) {

		var taskConfig = {
			attributeIDs: attributeIDs || this.defaultAttributeIDs,
			attributeTypes: attributeTypes || this.defaultAttributeTypes
		};

		this.decodeGeometry( buffer, taskConfig ).then( callback );

	},

	decodeGeometry: function ( buffer, taskConfig ) {

		var worker;
		var taskID = this.workerNextTaskID ++;
		var taskCost = buffer.byteLength;

		// TODO: For backward-compatibility, support 'attributeTypes' objects containing
		// references (rather than names) to typed array constructors. These must be
		// serialized before sending them to the worker.
		for ( var attribute in taskConfig.attributeTypes ) {

			var type = taskConfig.attributeTypes[ attribute ];

			if ( type.BYTES_PER_ELEMENT !== undefined ) {

				taskConfig.attributeTypes[ attribute ] = type.name;

			}

		}

		// Obtain a worker and assign a task, and construct a geometry instance
		// when the task completes.
		var geometryPending = this._getWorker( taskID, taskCost )
			.then( ( _worker ) => {

				worker = _worker;

				return new Promise( ( resolve, reject ) => {

					worker._callbacks[ taskID ] = { resolve, reject };

					worker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );

					// this.debug();

				} );

			} )
			.then( ( message ) => this._createGeometry( message.geometry ) );

		// Remove task from the task list.
		geometryPending
			.finally( () => {

				if ( worker && taskID ) {

					this._releaseTask( worker, taskID );

					// this.debug();

				}

			} );

		return geometryPending;

	},

	_createGeometry: function ( geometryData ) {

		var geometry = new THREE.BufferGeometry();

		if ( geometryData.index ) {

			geometry.setIndex( new THREE.BufferAttribute( geometryData.index.array, 1 ) );

		}

		for ( var i = 0; i < geometryData.attributes.length; i++ ) {

			var attribute = geometryData.attributes[ i ];
			var name = attribute.name;
			var array = attribute.array;
			var itemSize = attribute.itemSize;

			geometry.addAttribute( name, new THREE.BufferAttribute( array, itemSize ) );

		}

		return geometry;

	},

	_loadLibrary: function ( url, responseType ) {

		var loader = new THREE.FileLoader( this.manager );
		loader.setPath( this.decoderPath );
		loader.setResponseType( responseType );

		return new Promise( ( resolve, reject ) => {

			loader.load( url, resolve, undefined, reject );

		} );

	},

	_initDecoder: function () {

		if ( this.decoderPending ) return this.decoderPending;

		var useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';
		var librariesPending = [];

		if ( useJS ) {

			librariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );

		} else {

			librariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );
			librariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );

		}

		this.decoderPending = Promise.all( librariesPending )
			.then( ( libraries ) => {

				var jsContent = libraries[ 0 ];

				if ( ! useJS ) {

					this.decoderConfig.wasmBinary = libraries[ 1 ];

				}

				var fn = THREE.DRACOLoader.DRACOWorker.toString();

				var body = [
					'/* draco decoder */',
					jsContent,
					'',
					'/* worker */',
					fn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )
				].join( '\n' );

				this.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );

			} );

		return this.decoderPending;

	},

	_getWorker: function ( taskID, taskCost ) {

		return this._initDecoder().then( () => {

			if ( this.workerPool.length < this.workerLimit ) {

				var worker = new Worker( this.workerSourceURL );

				worker._callbacks = {};
				worker._taskCosts = {};
				worker._taskLoad = 0;

				worker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );

				worker.onmessage = function ( e ) {

					var message = e.data;

					switch ( message.type ) {

						case 'decode':
							worker._callbacks[ message.id ].resolve( message );
							break;

						case 'error':
							worker._callbacks[ message.id ].reject( message );
							break;

						default:
							console.error( 'THREE.DRACOLoader: Unexpected message, "' + message.type + '"' );

					}

				};

				this.workerPool.push( worker );

			} else {

				this.workerPool.sort( function ( a, b ) {

					return a._taskLoad > b._taskLoad ? - 1 : 1;

				} );

			}

			var worker = this.workerPool[ this.workerPool.length - 1 ];
			worker._taskCosts[ taskID ] = taskCost;
			worker._taskLoad += taskCost;
			return worker;

		} );

	},

	_releaseTask: function ( worker, taskID ) {

		worker._taskLoad -= worker._taskCosts[ taskID ];
		delete worker._callbacks[ taskID ];
		delete worker._taskCosts[ taskID ];

	},

	debug: function () {

		console.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );

	},

	dispose: function () {

		for ( var i = 0; i < this.workerPool.length; ++ i ) {

			this.workerPool[ i ].terminate();

		}

		this.workerPool.length = 0;

		return this;

	}
};

/* WEB WORKER */

THREE.DRACOLoader.DRACOWorker = function () {

	var decoderConfig;
	var decoderPending;

	onmessage = function ( e ) {

		var message = e.data;

		switch ( message.type ) {

			case 'init':
				decoderConfig = message.decoderConfig;
				decoderPending = new Promise( function ( resolve, reject ) {

					decoderConfig.onModuleLoaded = function ( draco ) {

						// Module is Promise-like. Wrap before resolving to avoid loop.
						resolve( { draco: draco } );

					};

					DracoDecoderModule( decoderConfig );

				} );
				break;

			case 'decode':
				var buffer = message.buffer;
				var taskConfig = message.taskConfig;
				decoderPending.then( ( module ) => {

					var draco = module.draco;
					var decoder = new draco.Decoder();
					var decoderBuffer = new draco.DecoderBuffer();
					decoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );

					try {

						var geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );

						var buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );

						if ( geometry.index ) buffers.push( geometry.index.array.buffer );

						self.postMessage( { type: 'decode', id: message.id, geometry }, buffers );

					} catch ( error ) {

						console.error( error );

						self.postMessage( { type: 'error', id: message.id, error: error.message } );

					} finally {

						draco.destroy( decoderBuffer );
						draco.destroy( decoder );

					}

				} );
				break;

		}

	};

	function decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {

		var attributeIDs = taskConfig.attributeIDs;
		var attributeTypes = taskConfig.attributeTypes;

		var dracoGeometry;
		var decodingStatus;

		var geometryType = decoder.GetEncodedGeometryType( decoderBuffer );

		if ( geometryType === draco.TRIANGULAR_MESH ) {

			dracoGeometry = new draco.Mesh();
			decodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );

		} else if ( geometryType === draco.POINT_CLOUD ) {

			dracoGeometry = new draco.PointCloud();
			decodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );

		} else {

			throw new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );

		}

		if ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {

			throw new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );

		}

		var geometry = { index: null, attributes: [] };

		var numPoints = dracoGeometry.num_points();
		var numAttributes = dracoGeometry.num_attributes();

		// Add attributes of user specified unique id.
		for (var attributeName in attributeIDs) {

			var attributeType = self[ attributeTypes[ attributeName ] ];
			var attributeId = attributeIDs[ attributeName ];
			var attribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeId );

			geometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );

		}

		// Add index.
		if ( geometryType === draco.TRIANGULAR_MESH ) {

			// Generate mesh faces.
			var numFaces = dracoGeometry.num_faces();
			var numIndices = numFaces * 3;
			var index = new Uint32Array( numIndices );
			var indexArray = new draco.DracoInt32Array();

			for ( var i = 0; i < numFaces; ++ i ) {

				decoder.GetFaceFromMesh( dracoGeometry, i, indexArray );

				for ( var j = 0; j < 3; ++ j ) {

					index[ i * 3 + j ] = indexArray.GetValue( j );

				}

			}

			geometry.index = { array: index, itemSize: 1 };

			draco.destroy( indexArray );

		}

		draco.destroy( dracoGeometry );

		return geometry;

	};

	function decodeAttribute ( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {

		var numComponents = attribute.num_components();
		var numPoints = dracoGeometry.num_points();
		var numValues = numPoints * numComponents;
		var dracoArray;

		var array;

		switch ( attributeType ) {

			case Float32Array:
				dracoArray = new draco.DracoFloat32Array();
				decoder.GetAttributeFloatForAllPoints( dracoGeometry, attribute, dracoArray );
				array = new Float32Array( numValues );
				break;

			case Int8Array:
				dracoArray = new draco.DracoInt8Array();
				decoder.GetAttributeInt8ForAllPoints( dracoGeometry, attribute, dracoArray  );
				array = new Int8Array( numValues );
				break;

			case Int16Array:
				dracoArray = new draco.DracoInt16Array();
				decoder.GetAttributeInt16ForAllPoints( dracoGeometry, attribute, dracoArray );
				array = new Int16Array( numValues );
				break;

			case Int32Array:
				dracoArray = new draco.DracoInt32Array();
				decoder.GetAttributeInt32ForAllPoints( dracoGeometry, attribute, dracoArray );
				array = new Int32Array( numValues );
				break;

			case Uint8Array:
				dracoArray = new draco.DracoUInt8Array();
				decoder.GetAttributeUInt8ForAllPoints( dracoGeometry, attribute, dracoArray );
				array = new Uint8Array( numValues );
				break;

			case Uint16Array:
				dracoArray = new draco.DracoUInt16Array();
				decoder.GetAttributeUInt16ForAllPoints( dracoGeometry, attribute, dracoArray );
				array = new Uint16Array( numValues );
				break;

			case Uint32Array:
				dracoArray = new draco.DracoUInt32Array();
				decoder.GetAttributeUInt32ForAllPoints( dracoGeometry, attribute, dracoArray );
				array = new Uint32Array( numValues );
				break;

			default:
				throw new Error( 'THREE.DRACOLoader: Unexpected attribute type.' );

		}

		for ( var i = 0; i < numValues; i++ ) {

			array[ i ] = dracoArray.GetValue( i );

		}

		draco.destroy( dracoArray );

		return {
			name: attributeName,
			array: array,
			itemSize: numComponents
		};

	};

};

/** Deprecated static methods */

/** @deprecated */
THREE.DRACOLoader.setDecoderPath = function () {

	console.warn( 'THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.' );

};

/** @deprecated */
THREE.DRACOLoader.setDecoderConfig = function () {

	console.warn( 'THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.' );

};

/** @deprecated */
THREE.DRACOLoader.releaseDecoderModule = function () {

	console.warn( 'THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.' );

};

/** @deprecated */
THREE.DRACOLoader.getDecoderModule = function () {

	console.warn( 'THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.' );

};


/***/ }),

/***/ "../../node_modules/three/examples/js/loaders/GLTFLoader.js":
/*!******************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/three/examples/js/loaders/GLTFLoader.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * @author Rich Tibbett / https://github.com/richtr
 * @author mrdoob / http://mrdoob.com/
 * @author Tony Parisi / http://www.tonyparisi.com/
 * @author Takahiro / https://github.com/takahirox
 * @author Don McCurdy / https://www.donmccurdy.com
 */

THREE.GLTFLoader = ( function () {

	function GLTFLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
		this.dracoLoader = null;
		this.ddsLoader = null;

	}

	GLTFLoader.prototype = {

		constructor: GLTFLoader,

		crossOrigin: 'anonymous',

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var resourcePath;

			if ( this.resourcePath !== undefined ) {

				resourcePath = this.resourcePath;

			} else if ( this.path !== undefined ) {

				resourcePath = this.path;

			} else {

				resourcePath = THREE.LoaderUtils.extractUrlBase( url );

			}

			// Tells the LoadingManager to track an extra item, which resolves after
			// the model is fully loaded. This means the count of items loaded will
			// be incorrect, but ensures manager.onLoad() does not fire early.
			scope.manager.itemStart( url );

			var _onError = function ( e ) {

				if ( onError ) {

					onError( e );

				} else {

					console.error( e );

				}

				scope.manager.itemError( url );
				scope.manager.itemEnd( url );

			};

			var loader = new THREE.FileLoader( scope.manager );

			loader.setPath( this.path );
			loader.setResponseType( 'arraybuffer' );

			if ( scope.crossOrigin === 'use-credentials' ) {

				loader.setWithCredentials( true );

			}

			loader.load( url, function ( data ) {

				try {

					scope.parse( data, resourcePath, function ( gltf ) {

						onLoad( gltf );

						scope.manager.itemEnd( url );

					}, _onError );

				} catch ( e ) {

					_onError( e );

				}

			}, onProgress, _onError );

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		},

		setResourcePath: function ( value ) {

			this.resourcePath = value;
			return this;

		},

		setDRACOLoader: function ( dracoLoader ) {

			this.dracoLoader = dracoLoader;
			return this;

		},

		setDDSLoader: function ( ddsLoader ) {

			this.ddsLoader = ddsLoader;
			return this;

		},

		parse: function ( data, path, onLoad, onError ) {

			var content;
			var extensions = {};

			if ( typeof data === 'string' ) {

				content = data;

			} else {

				var magic = THREE.LoaderUtils.decodeText( new Uint8Array( data, 0, 4 ) );

				if ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {

					try {

						extensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );

					} catch ( error ) {

						if ( onError ) onError( error );
						return;

					}

					content = extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content;

				} else {

					content = THREE.LoaderUtils.decodeText( new Uint8Array( data ) );

				}

			}

			var json = JSON.parse( content );

			if ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {

				if ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported. Use LegacyGLTFLoader instead.' ) );
				return;

			}

			if ( json.extensionsUsed ) {

				for ( var i = 0; i < json.extensionsUsed.length; ++ i ) {

					var extensionName = json.extensionsUsed[ i ];
					var extensionsRequired = json.extensionsRequired || [];

					switch ( extensionName ) {

						case EXTENSIONS.KHR_LIGHTS_PUNCTUAL:
							extensions[ extensionName ] = new GLTFLightsExtension( json );
							break;

						case EXTENSIONS.KHR_MATERIALS_UNLIT:
							extensions[ extensionName ] = new GLTFMaterialsUnlitExtension();
							break;

						case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:
							extensions[ extensionName ] = new GLTFMaterialsPbrSpecularGlossinessExtension();
							break;

						case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:
							extensions[ extensionName ] = new GLTFDracoMeshCompressionExtension( json, this.dracoLoader );
							break;

						case EXTENSIONS.MSFT_TEXTURE_DDS:
							extensions[ EXTENSIONS.MSFT_TEXTURE_DDS ] = new GLTFTextureDDSExtension( this.ddsLoader );
							break;

						case EXTENSIONS.KHR_TEXTURE_TRANSFORM:
							extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] = new GLTFTextureTransformExtension();
							break;

						default:

							if ( extensionsRequired.indexOf( extensionName ) >= 0 ) {

								console.warn( 'THREE.GLTFLoader: Unknown extension "' + extensionName + '".' );

							}

					}

				}

			}

			var parser = new GLTFParser( json, extensions, {

				path: path || this.resourcePath || '',
				crossOrigin: this.crossOrigin,
				manager: this.manager

			} );

			parser.parse( onLoad, onError );

		}

	};

	/* GLTFREGISTRY */

	function GLTFRegistry() {

		var objects = {};

		return	{

			get: function ( key ) {

				return objects[ key ];

			},

			add: function ( key, object ) {

				objects[ key ] = object;

			},

			remove: function ( key ) {

				delete objects[ key ];

			},

			removeAll: function () {

				objects = {};

			}

		};

	}

	/*********************************/
	/********** EXTENSIONS ***********/
	/*********************************/

	var EXTENSIONS = {
		KHR_BINARY_GLTF: 'KHR_binary_glTF',
		KHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',
		KHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',
		KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',
		KHR_MATERIALS_UNLIT: 'KHR_materials_unlit',
		KHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',
		MSFT_TEXTURE_DDS: 'MSFT_texture_dds'
	};

	/**
	 * DDS Texture Extension
	 *
	 * Specification:
	 * https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_texture_dds
	 *
	 */
	function GLTFTextureDDSExtension( ddsLoader ) {

		if ( ! ddsLoader ) {

			throw new Error( 'THREE.GLTFLoader: Attempting to load .dds texture without importing THREE.DDSLoader' );

		}

		this.name = EXTENSIONS.MSFT_TEXTURE_DDS;
		this.ddsLoader = ddsLoader;

	}

	/**
	 * Lights Extension
	 *
	 * Specification: PENDING
	 */
	function GLTFLightsExtension( json ) {

		this.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;

		var extension = ( json.extensions && json.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ] ) || {};
		this.lightDefs = extension.lights || [];

	}

	GLTFLightsExtension.prototype.loadLight = function ( lightIndex ) {

		var lightDef = this.lightDefs[ lightIndex ];
		var lightNode;

		var color = new THREE.Color( 0xffffff );
		if ( lightDef.color !== undefined ) color.fromArray( lightDef.color );

		var range = lightDef.range !== undefined ? lightDef.range : 0;

		switch ( lightDef.type ) {

			case 'directional':
				lightNode = new THREE.DirectionalLight( color );
				lightNode.target.position.set( 0, 0, - 1 );
				lightNode.add( lightNode.target );
				break;

			case 'point':
				lightNode = new THREE.PointLight( color );
				lightNode.distance = range;
				break;

			case 'spot':
				lightNode = new THREE.SpotLight( color );
				lightNode.distance = range;
				// Handle spotlight properties.
				lightDef.spot = lightDef.spot || {};
				lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;
				lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;
				lightNode.angle = lightDef.spot.outerConeAngle;
				lightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;
				lightNode.target.position.set( 0, 0, - 1 );
				lightNode.add( lightNode.target );
				break;

			default:
				throw new Error( 'THREE.GLTFLoader: Unexpected light type, "' + lightDef.type + '".' );

		}

		// Some lights (e.g. spot) default to a position other than the origin. Reset the position
		// here, because node-level parsing will only override position if explicitly specified.
		lightNode.position.set( 0, 0, 0 );

		lightNode.decay = 2;

		if ( lightDef.intensity !== undefined ) lightNode.intensity = lightDef.intensity;

		lightNode.name = lightDef.name || ( 'light_' + lightIndex );

		return Promise.resolve( lightNode );

	};

	/**
	 * Unlit Materials Extension (pending)
	 *
	 * PR: https://github.com/KhronosGroup/glTF/pull/1163
	 */
	function GLTFMaterialsUnlitExtension() {

		this.name = EXTENSIONS.KHR_MATERIALS_UNLIT;

	}

	GLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {

		return THREE.MeshBasicMaterial;

	};

	GLTFMaterialsUnlitExtension.prototype.extendParams = function ( materialParams, materialDef, parser ) {

		var pending = [];

		materialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );
		materialParams.opacity = 1.0;

		var metallicRoughness = materialDef.pbrMetallicRoughness;

		if ( metallicRoughness ) {

			if ( Array.isArray( metallicRoughness.baseColorFactor ) ) {

				var array = metallicRoughness.baseColorFactor;

				materialParams.color.fromArray( array );
				materialParams.opacity = array[ 3 ];

			}

			if ( metallicRoughness.baseColorTexture !== undefined ) {

				pending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );

			}

		}

		return Promise.all( pending );

	};

	/* BINARY EXTENSION */
	var BINARY_EXTENSION_HEADER_MAGIC = 'glTF';
	var BINARY_EXTENSION_HEADER_LENGTH = 12;
	var BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };

	function GLTFBinaryExtension( data ) {

		this.name = EXTENSIONS.KHR_BINARY_GLTF;
		this.content = null;
		this.body = null;

		var headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );

		this.header = {
			magic: THREE.LoaderUtils.decodeText( new Uint8Array( data.slice( 0, 4 ) ) ),
			version: headerView.getUint32( 4, true ),
			length: headerView.getUint32( 8, true )
		};

		if ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {

			throw new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );

		} else if ( this.header.version < 2.0 ) {

			throw new Error( 'THREE.GLTFLoader: Legacy binary file detected. Use LegacyGLTFLoader instead.' );

		}

		var chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );
		var chunkIndex = 0;

		while ( chunkIndex < chunkView.byteLength ) {

			var chunkLength = chunkView.getUint32( chunkIndex, true );
			chunkIndex += 4;

			var chunkType = chunkView.getUint32( chunkIndex, true );
			chunkIndex += 4;

			if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {

				var contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );
				this.content = THREE.LoaderUtils.decodeText( contentArray );

			} else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {

				var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;
				this.body = data.slice( byteOffset, byteOffset + chunkLength );

			}

			// Clients must ignore chunks with unknown types.

			chunkIndex += chunkLength;

		}

		if ( this.content === null ) {

			throw new Error( 'THREE.GLTFLoader: JSON content not found.' );

		}

	}

	/**
	 * DRACO Mesh Compression Extension
	 *
	 * Specification: https://github.com/KhronosGroup/glTF/pull/874
	 */
	function GLTFDracoMeshCompressionExtension( json, dracoLoader ) {

		if ( ! dracoLoader ) {

			throw new Error( 'THREE.GLTFLoader: No DRACOLoader instance provided.' );

		}

		this.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;
		this.json = json;
		this.dracoLoader = dracoLoader;

	}

	GLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function ( primitive, parser ) {

		var json = this.json;
		var dracoLoader = this.dracoLoader;
		var bufferViewIndex = primitive.extensions[ this.name ].bufferView;
		var gltfAttributeMap = primitive.extensions[ this.name ].attributes;
		var threeAttributeMap = {};
		var attributeNormalizedMap = {};
		var attributeTypeMap = {};

		for ( var attributeName in gltfAttributeMap ) {

			var threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();

			threeAttributeMap[ threeAttributeName ] = gltfAttributeMap[ attributeName ];

		}

		for ( attributeName in primitive.attributes ) {

			var threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();

			if ( gltfAttributeMap[ attributeName ] !== undefined ) {

				var accessorDef = json.accessors[ primitive.attributes[ attributeName ] ];
				var componentType = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];

				attributeTypeMap[ threeAttributeName ] = componentType;
				attributeNormalizedMap[ threeAttributeName ] = accessorDef.normalized === true;

			}

		}

		return parser.getDependency( 'bufferView', bufferViewIndex ).then( function ( bufferView ) {

			return new Promise( function ( resolve ) {

				dracoLoader.decodeDracoFile( bufferView, function ( geometry ) {

					for ( var attributeName in geometry.attributes ) {

						var attribute = geometry.attributes[ attributeName ];
						var normalized = attributeNormalizedMap[ attributeName ];

						if ( normalized !== undefined ) attribute.normalized = normalized;

					}

					resolve( geometry );

				}, threeAttributeMap, attributeTypeMap );

			} );

		} );

	};

	/**
	 * Texture Transform Extension
	 *
	 * Specification:
	 */
	function GLTFTextureTransformExtension() {

		this.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;

	}

	GLTFTextureTransformExtension.prototype.extendTexture = function ( texture, transform ) {

		texture = texture.clone();

		if ( transform.offset !== undefined ) {

			texture.offset.fromArray( transform.offset );

		}

		if ( transform.rotation !== undefined ) {

			texture.rotation = transform.rotation;

		}

		if ( transform.scale !== undefined ) {

			texture.repeat.fromArray( transform.scale );

		}

		if ( transform.texCoord !== undefined ) {

			console.warn( 'THREE.GLTFLoader: Custom UV sets in "' + this.name + '" extension not yet supported.' );

		}

		texture.needsUpdate = true;

		return texture;

	};

	/**
	 * Specular-Glossiness Extension
	 *
	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness
	 */
	function GLTFMaterialsPbrSpecularGlossinessExtension() {

		return {

			name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,

			specularGlossinessParams: [
				'color',
				'map',
				'lightMap',
				'lightMapIntensity',
				'aoMap',
				'aoMapIntensity',
				'emissive',
				'emissiveIntensity',
				'emissiveMap',
				'bumpMap',
				'bumpScale',
				'normalMap',
				'displacementMap',
				'displacementScale',
				'displacementBias',
				'specularMap',
				'specular',
				'glossinessMap',
				'glossiness',
				'alphaMap',
				'envMap',
				'envMapIntensity',
				'refractionRatio',
			],

			getMaterialType: function () {

				return THREE.ShaderMaterial;

			},

			extendParams: function ( materialParams, materialDef, parser ) {

				var pbrSpecularGlossiness = materialDef.extensions[ this.name ];

				var shader = THREE.ShaderLib[ 'standard' ];

				var uniforms = THREE.UniformsUtils.clone( shader.uniforms );

				var specularMapParsFragmentChunk = [
					'#ifdef USE_SPECULARMAP',
					'	uniform sampler2D specularMap;',
					'#endif'
				].join( '\n' );

				var glossinessMapParsFragmentChunk = [
					'#ifdef USE_GLOSSINESSMAP',
					'	uniform sampler2D glossinessMap;',
					'#endif'
				].join( '\n' );

				var specularMapFragmentChunk = [
					'vec3 specularFactor = specular;',
					'#ifdef USE_SPECULARMAP',
					'	vec4 texelSpecular = texture2D( specularMap, vUv );',
					'	texelSpecular = sRGBToLinear( texelSpecular );',
					'	// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',
					'	specularFactor *= texelSpecular.rgb;',
					'#endif'
				].join( '\n' );

				var glossinessMapFragmentChunk = [
					'float glossinessFactor = glossiness;',
					'#ifdef USE_GLOSSINESSMAP',
					'	vec4 texelGlossiness = texture2D( glossinessMap, vUv );',
					'	// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',
					'	glossinessFactor *= texelGlossiness.a;',
					'#endif'
				].join( '\n' );

				var lightPhysicalFragmentChunk = [
					'PhysicalMaterial material;',
					'material.diffuseColor = diffuseColor.rgb;',
					'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );',
					'material.specularColor = specularFactor.rgb;',
				].join( '\n' );

				var fragmentShader = shader.fragmentShader
					.replace( 'uniform float roughness;', 'uniform vec3 specular;' )
					.replace( 'uniform float metalness;', 'uniform float glossiness;' )
					.replace( '#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk )
					.replace( '#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk )
					.replace( '#include <roughnessmap_fragment>', specularMapFragmentChunk )
					.replace( '#include <metalnessmap_fragment>', glossinessMapFragmentChunk )
					.replace( '#include <lights_physical_fragment>', lightPhysicalFragmentChunk );

				delete uniforms.roughness;
				delete uniforms.metalness;
				delete uniforms.roughnessMap;
				delete uniforms.metalnessMap;

				uniforms.specular = { value: new THREE.Color().setHex( 0x111111 ) };
				uniforms.glossiness = { value: 0.5 };
				uniforms.specularMap = { value: null };
				uniforms.glossinessMap = { value: null };

				materialParams.vertexShader = shader.vertexShader;
				materialParams.fragmentShader = fragmentShader;
				materialParams.uniforms = uniforms;
				materialParams.defines = { 'STANDARD': '' }

				materialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );
				materialParams.opacity = 1.0;

				var pending = [];

				if ( Array.isArray( pbrSpecularGlossiness.diffuseFactor ) ) {

					var array = pbrSpecularGlossiness.diffuseFactor;

					materialParams.color.fromArray( array );
					materialParams.opacity = array[ 3 ];

				}

				if ( pbrSpecularGlossiness.diffuseTexture !== undefined ) {

					pending.push( parser.assignTexture( materialParams, 'map', pbrSpecularGlossiness.diffuseTexture ) );

				}

				materialParams.emissive = new THREE.Color( 0.0, 0.0, 0.0 );
				materialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;
				materialParams.specular = new THREE.Color( 1.0, 1.0, 1.0 );

				if ( Array.isArray( pbrSpecularGlossiness.specularFactor ) ) {

					materialParams.specular.fromArray( pbrSpecularGlossiness.specularFactor );

				}

				if ( pbrSpecularGlossiness.specularGlossinessTexture !== undefined ) {

					var specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;
					pending.push( parser.assignTexture( materialParams, 'glossinessMap', specGlossMapDef ) );
					pending.push( parser.assignTexture( materialParams, 'specularMap', specGlossMapDef ) );

				}

				return Promise.all( pending );

			},

			createMaterial: function ( params ) {

				// setup material properties based on MeshStandardMaterial for Specular-Glossiness

				var material = new THREE.ShaderMaterial( {
					defines: params.defines,
					vertexShader: params.vertexShader,
					fragmentShader: params.fragmentShader,
					uniforms: params.uniforms,
					fog: true,
					lights: true,
					opacity: params.opacity,
					transparent: params.transparent
				} );

				material.isGLTFSpecularGlossinessMaterial = true;

				material.color = params.color;

				material.map = params.map === undefined ? null : params.map;

				material.lightMap = null;
				material.lightMapIntensity = 1.0;

				material.aoMap = params.aoMap === undefined ? null : params.aoMap;
				material.aoMapIntensity = 1.0;

				material.emissive = params.emissive;
				material.emissiveIntensity = 1.0;
				material.emissiveMap = params.emissiveMap === undefined ? null : params.emissiveMap;

				material.bumpMap = params.bumpMap === undefined ? null : params.bumpMap;
				material.bumpScale = 1;

				material.normalMap = params.normalMap === undefined ? null : params.normalMap;

				if ( params.normalScale ) material.normalScale = params.normalScale;

				material.displacementMap = null;
				material.displacementScale = 1;
				material.displacementBias = 0;

				material.specularMap = params.specularMap === undefined ? null : params.specularMap;
				material.specular = params.specular;

				material.glossinessMap = params.glossinessMap === undefined ? null : params.glossinessMap;
				material.glossiness = params.glossiness;

				material.alphaMap = null;

				material.envMap = params.envMap === undefined ? null : params.envMap;
				material.envMapIntensity = 1.0;

				material.refractionRatio = 0.98;

				material.extensions.derivatives = true;

				return material;

			},

			/**
			 * Clones a GLTFSpecularGlossinessMaterial instance. The ShaderMaterial.copy() method can
			 * copy only properties it knows about or inherits, and misses many properties that would
			 * normally be defined by MeshStandardMaterial.
			 *
			 * This method allows GLTFSpecularGlossinessMaterials to be cloned in the process of
			 * loading a glTF model, but cloning later (e.g. by the user) would require these changes
			 * AND also updating `.onBeforeRender` on the parent mesh.
			 *
			 * @param  {THREE.ShaderMaterial} source
			 * @return {THREE.ShaderMaterial}
			 */
			cloneMaterial: function ( source ) {

				var target = source.clone();

				target.isGLTFSpecularGlossinessMaterial = true;

				var params = this.specularGlossinessParams;

				for ( var i = 0, il = params.length; i < il; i ++ ) {

					var value = source[ params[ i ] ];
					target[ params[ i ] ] = ( value && value.isColor ) ? value.clone() : value;

				}

				return target;

			},

			// Here's based on refreshUniformsCommon() and refreshUniformsStandard() in WebGLRenderer.
			refreshUniforms: function ( renderer, scene, camera, geometry, material ) {

				if ( material.isGLTFSpecularGlossinessMaterial !== true ) {

					return;

				}

				var uniforms = material.uniforms;
				var defines = material.defines;

				uniforms.opacity.value = material.opacity;

				uniforms.diffuse.value.copy( material.color );
				uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

				uniforms.map.value = material.map;
				uniforms.specularMap.value = material.specularMap;
				uniforms.alphaMap.value = material.alphaMap;

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;

				// uv repeat and offset setting priorities
				// 1. color map
				// 2. specular map
				// 3. normal map
				// 4. bump map
				// 5. alpha map
				// 6. emissive map

				var uvScaleMap;

				if ( material.map ) {

					uvScaleMap = material.map;

				} else if ( material.specularMap ) {

					uvScaleMap = material.specularMap;

				} else if ( material.displacementMap ) {

					uvScaleMap = material.displacementMap;

				} else if ( material.normalMap ) {

					uvScaleMap = material.normalMap;

				} else if ( material.bumpMap ) {

					uvScaleMap = material.bumpMap;

				} else if ( material.glossinessMap ) {

					uvScaleMap = material.glossinessMap;

				} else if ( material.alphaMap ) {

					uvScaleMap = material.alphaMap;

				} else if ( material.emissiveMap ) {

					uvScaleMap = material.emissiveMap;

				}

				if ( uvScaleMap !== undefined ) {

					// backwards compatibility
					if ( uvScaleMap.isWebGLRenderTarget ) {

						uvScaleMap = uvScaleMap.texture;

					}

					if ( uvScaleMap.matrixAutoUpdate === true ) {

						uvScaleMap.updateMatrix();

					}

					uniforms.uvTransform.value.copy( uvScaleMap.matrix );

				}

				if ( material.envMap ) {

					uniforms.envMap.value = material.envMap;
					uniforms.envMapIntensity.value = material.envMapIntensity;

					// don't flip CubeTexture envMaps, flip everything else:
					//  WebGLRenderTargetCube will be flipped for backwards compatibility
					//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
					// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
					uniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;

					uniforms.reflectivity.value = material.reflectivity;
					uniforms.refractionRatio.value = material.refractionRatio;

					uniforms.maxMipLevel.value = renderer.properties.get( material.envMap ).__maxMipLevel;

				}

				uniforms.specular.value.copy( material.specular );
				uniforms.glossiness.value = material.glossiness;

				uniforms.glossinessMap.value = material.glossinessMap;

				uniforms.emissiveMap.value = material.emissiveMap;
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.normalMap.value = material.normalMap;

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

				if ( uniforms.glossinessMap.value !== null && defines.USE_GLOSSINESSMAP === undefined ) {

					defines.USE_GLOSSINESSMAP = '';
					// set USE_ROUGHNESSMAP to enable vUv
					defines.USE_ROUGHNESSMAP = '';

				}

				if ( uniforms.glossinessMap.value === null && defines.USE_GLOSSINESSMAP !== undefined ) {

					delete defines.USE_GLOSSINESSMAP;
					delete defines.USE_ROUGHNESSMAP;

				}

			}

		};

	}

	/*********************************/
	/********** INTERPOLATION ********/
	/*********************************/

	// Spline Interpolation
	// Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation
	function GLTFCubicSplineInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		THREE.Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	GLTFCubicSplineInterpolant.prototype = Object.create( THREE.Interpolant.prototype );
	GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;

	GLTFCubicSplineInterpolant.prototype.copySampleValue_ = function ( index ) {

		// Copies a sample value to the result buffer. See description of glTF
		// CUBICSPLINE values layout in interpolate_() function below.

		var result = this.resultBuffer,
			values = this.sampleValues,
			valueSize = this.valueSize,
			offset = index * valueSize * 3 + valueSize;

		for ( var i = 0; i !== valueSize; i ++ ) {

			result[ i ] = values[ offset + i ];

		}

		return result;

	};

	GLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;

	GLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;

	GLTFCubicSplineInterpolant.prototype.interpolate_ = function ( i1, t0, t, t1 ) {

		var result = this.resultBuffer;
		var values = this.sampleValues;
		var stride = this.valueSize;

		var stride2 = stride * 2;
		var stride3 = stride * 3;

		var td = t1 - t0;

		var p = ( t - t0 ) / td;
		var pp = p * p;
		var ppp = pp * p;

		var offset1 = i1 * stride3;
		var offset0 = offset1 - stride3;

		var s2 = - 2 * ppp + 3 * pp;
		var s3 = ppp - pp;
		var s0 = 1 - s2;
		var s1 = s3 - pp + p;

		// Layout of keyframe output values for CUBICSPLINE animations:
		//   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]
		for ( var i = 0; i !== stride; i ++ ) {

			var p0 = values[ offset0 + i + stride ]; // splineVertex_k
			var m0 = values[ offset0 + i + stride2 ] * td; // outTangent_k * (t_k+1 - t_k)
			var p1 = values[ offset1 + i + stride ]; // splineVertex_k+1
			var m1 = values[ offset1 + i ] * td; // inTangent_k+1 * (t_k+1 - t_k)

			result[ i ] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;

		}

		return result;

	};

	/*********************************/
	/********** INTERNALS ************/
	/*********************************/

	/* CONSTANTS */

	var WEBGL_CONSTANTS = {
		FLOAT: 5126,
		//FLOAT_MAT2: 35674,
		FLOAT_MAT3: 35675,
		FLOAT_MAT4: 35676,
		FLOAT_VEC2: 35664,
		FLOAT_VEC3: 35665,
		FLOAT_VEC4: 35666,
		LINEAR: 9729,
		REPEAT: 10497,
		SAMPLER_2D: 35678,
		POINTS: 0,
		LINES: 1,
		LINE_LOOP: 2,
		LINE_STRIP: 3,
		TRIANGLES: 4,
		TRIANGLE_STRIP: 5,
		TRIANGLE_FAN: 6,
		UNSIGNED_BYTE: 5121,
		UNSIGNED_SHORT: 5123
	};

	var WEBGL_COMPONENT_TYPES = {
		5120: Int8Array,
		5121: Uint8Array,
		5122: Int16Array,
		5123: Uint16Array,
		5125: Uint32Array,
		5126: Float32Array
	};

	var WEBGL_FILTERS = {
		9728: THREE.NearestFilter,
		9729: THREE.LinearFilter,
		9984: THREE.NearestMipmapNearestFilter,
		9985: THREE.LinearMipmapNearestFilter,
		9986: THREE.NearestMipmapLinearFilter,
		9987: THREE.LinearMipmapLinearFilter
	};

	var WEBGL_WRAPPINGS = {
		33071: THREE.ClampToEdgeWrapping,
		33648: THREE.MirroredRepeatWrapping,
		10497: THREE.RepeatWrapping
	};

	var WEBGL_TYPE_SIZES = {
		'SCALAR': 1,
		'VEC2': 2,
		'VEC3': 3,
		'VEC4': 4,
		'MAT2': 4,
		'MAT3': 9,
		'MAT4': 16
	};

	var ATTRIBUTES = {
		POSITION: 'position',
		NORMAL: 'normal',
		TANGENT: 'tangent',
		TEXCOORD_0: 'uv',
		TEXCOORD_1: 'uv2',
		COLOR_0: 'color',
		WEIGHTS_0: 'skinWeight',
		JOINTS_0: 'skinIndex',
	};

	var PATH_PROPERTIES = {
		scale: 'scale',
		translation: 'position',
		rotation: 'quaternion',
		weights: 'morphTargetInfluences'
	};

	var INTERPOLATION = {
		CUBICSPLINE: undefined, // We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each
		                        // keyframe track will be initialized with a default interpolation type, then modified.
		LINEAR: THREE.InterpolateLinear,
		STEP: THREE.InterpolateDiscrete
	};

	var ALPHA_MODES = {
		OPAQUE: 'OPAQUE',
		MASK: 'MASK',
		BLEND: 'BLEND'
	};

	var MIME_TYPE_FORMATS = {
		'image/png': THREE.RGBAFormat,
		'image/jpeg': THREE.RGBFormat
	};

	/* UTILITY FUNCTIONS */

	function resolveURL( url, path ) {

		// Invalid URL
		if ( typeof url !== 'string' || url === '' ) return '';
		
		// Host Relative URL
		if ( /^https?:\/\//i.test( path ) && /^\//.test( url ) ) {

			path = path.replace( /(^https?:\/\/[^\/]+).*/i , '$1' );

		}

		// Absolute URL http://,https://,//
		if ( /^(https?:)?\/\//i.test( url ) ) return url;

		// Data URI
		if ( /^data:.*,.*$/i.test( url ) ) return url;

		// Blob URL
		if ( /^blob:.*$/i.test( url ) ) return url;

		// Relative URL
		return path + url;

	}

	var defaultMaterial;

	/**
	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material
	 */
	function createDefaultMaterial() {

		defaultMaterial = defaultMaterial || new THREE.MeshStandardMaterial( {
			color: 0xFFFFFF,
			emissive: 0x000000,
			metalness: 1,
			roughness: 1,
			transparent: false,
			depthTest: true,
			side: THREE.FrontSide
		} );

		return defaultMaterial;

	}

	function addUnknownExtensionsToUserData( knownExtensions, object, objectDef ) {

		// Add unknown glTF extensions to an object's userData.

		for ( var name in objectDef.extensions ) {

			if ( knownExtensions[ name ] === undefined ) {

				object.userData.gltfExtensions = object.userData.gltfExtensions || {};
				object.userData.gltfExtensions[ name ] = objectDef.extensions[ name ];

			}

		}

	}

	/**
	 * @param {THREE.Object3D|THREE.Material|THREE.BufferGeometry} object
	 * @param {GLTF.definition} gltfDef
	 */
	function assignExtrasToUserData( object, gltfDef ) {

		if ( gltfDef.extras !== undefined ) {

			if ( typeof gltfDef.extras === 'object' ) {

				Object.assign( object.userData, gltfDef.extras );

			} else {

				console.warn( 'THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras );

			}

		}

	}

	/**
	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets
	 *
	 * @param {THREE.BufferGeometry} geometry
	 * @param {Array<GLTF.Target>} targets
	 * @param {GLTFParser} parser
	 * @return {Promise<THREE.BufferGeometry>}
	 */
	function addMorphTargets( geometry, targets, parser ) {

		var hasMorphPosition = false;
		var hasMorphNormal = false;

		for ( var i = 0, il = targets.length; i < il; i ++ ) {

			var target = targets[ i ];

			if ( target.POSITION !== undefined ) hasMorphPosition = true;
			if ( target.NORMAL !== undefined ) hasMorphNormal = true;

			if ( hasMorphPosition && hasMorphNormal ) break;

		}

		if ( ! hasMorphPosition && ! hasMorphNormal ) return Promise.resolve( geometry );

		var pendingPositionAccessors = [];
		var pendingNormalAccessors = [];

		for ( var i = 0, il = targets.length; i < il; i ++ ) {

			var target = targets[ i ];

			if ( hasMorphPosition ) {

				var pendingAccessor = target.POSITION !== undefined
					? parser.getDependency( 'accessor', target.POSITION )
					: geometry.attributes.position;

				pendingPositionAccessors.push( pendingAccessor );

			}

			if ( hasMorphNormal ) {

				var pendingAccessor = target.NORMAL !== undefined
					? parser.getDependency( 'accessor', target.NORMAL )
					: geometry.attributes.normal;

				pendingNormalAccessors.push( pendingAccessor );

			}

		}

		return Promise.all( [
			Promise.all( pendingPositionAccessors ),
			Promise.all( pendingNormalAccessors )
		] ).then( function ( accessors ) {

			var morphPositions = accessors[ 0 ];
			var morphNormals = accessors[ 1 ];

			// Clone morph target accessors before modifying them.

			for ( var i = 0, il = morphPositions.length; i < il; i ++ ) {

				if ( geometry.attributes.position === morphPositions[ i ] ) continue;

				morphPositions[ i ] = cloneBufferAttribute( morphPositions[ i ] );

			}

			for ( var i = 0, il = morphNormals.length; i < il; i ++ ) {

				if ( geometry.attributes.normal === morphNormals[ i ] ) continue;

				morphNormals[ i ] = cloneBufferAttribute( morphNormals[ i ] );

			}

			for ( var i = 0, il = targets.length; i < il; i ++ ) {

				var target = targets[ i ];
				var attributeName = 'morphTarget' + i;

				if ( hasMorphPosition ) {

					// Three.js morph position is absolute value. The formula is
					//   basePosition
					//     + weight0 * ( morphPosition0 - basePosition )
					//     + weight1 * ( morphPosition1 - basePosition )
					//     ...
					// while the glTF one is relative
					//   basePosition
					//     + weight0 * glTFmorphPosition0
					//     + weight1 * glTFmorphPosition1
					//     ...
					// then we need to convert from relative to absolute here.

					if ( target.POSITION !== undefined ) {

						var positionAttribute = morphPositions[ i ];
						positionAttribute.name = attributeName;

						var position = geometry.attributes.position;

						for ( var j = 0, jl = positionAttribute.count; j < jl; j ++ ) {

							positionAttribute.setXYZ(
								j,
								positionAttribute.getX( j ) + position.getX( j ),
								positionAttribute.getY( j ) + position.getY( j ),
								positionAttribute.getZ( j ) + position.getZ( j )
							);

						}

					}

				}

				if ( hasMorphNormal ) {

					// see target.POSITION's comment

					if ( target.NORMAL !== undefined ) {

						var normalAttribute = morphNormals[ i ];
						normalAttribute.name = attributeName;

						var normal = geometry.attributes.normal;

						for ( var j = 0, jl = normalAttribute.count; j < jl; j ++ ) {

							normalAttribute.setXYZ(
								j,
								normalAttribute.getX( j ) + normal.getX( j ),
								normalAttribute.getY( j ) + normal.getY( j ),
								normalAttribute.getZ( j ) + normal.getZ( j )
							);

						}

					}

				}

			}

			if ( hasMorphPosition ) geometry.morphAttributes.position = morphPositions;
			if ( hasMorphNormal ) geometry.morphAttributes.normal = morphNormals;

			return geometry;

		} );

	}

	/**
	 * @param {THREE.Mesh} mesh
	 * @param {GLTF.Mesh} meshDef
	 */
	function updateMorphTargets( mesh, meshDef ) {

		mesh.updateMorphTargets();

		if ( meshDef.weights !== undefined ) {

			for ( var i = 0, il = meshDef.weights.length; i < il; i ++ ) {

				mesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];

			}

		}

		// .extras has user-defined data, so check that .extras.targetNames is an array.
		if ( meshDef.extras && Array.isArray( meshDef.extras.targetNames ) ) {

			var targetNames = meshDef.extras.targetNames;

			if ( mesh.morphTargetInfluences.length === targetNames.length ) {

				mesh.morphTargetDictionary = {};

				for ( var i = 0, il = targetNames.length; i < il; i ++ ) {

					mesh.morphTargetDictionary[ targetNames[ i ] ] = i;

				}

			} else {

				console.warn( 'THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.' );

			}

		}

	}

	function createPrimitiveKey( primitiveDef ) {

		var dracoExtension = primitiveDef.extensions && primitiveDef.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ];
		var geometryKey;

		if ( dracoExtension ) {

			geometryKey = 'draco:' + dracoExtension.bufferView
				+ ':' + dracoExtension.indices
				+ ':' + createAttributesKey( dracoExtension.attributes );

		} else {

			geometryKey = primitiveDef.indices + ':' + createAttributesKey( primitiveDef.attributes ) + ':' + primitiveDef.mode;

		}

		return geometryKey;

	}

	function createAttributesKey( attributes ) {

		var attributesKey = '';

		var keys = Object.keys( attributes ).sort();

		for ( var i = 0, il = keys.length; i < il; i ++ ) {

			attributesKey += keys[ i ] + ':' + attributes[ keys[ i ] ] + ';';

		}

		return attributesKey;

	}

	function cloneBufferAttribute( attribute ) {

		if ( attribute.isInterleavedBufferAttribute ) {

			var count = attribute.count;
			var itemSize = attribute.itemSize;
			var array = attribute.array.slice( 0, count * itemSize );

			for ( var i = 0, j = 0; i < count; ++ i ) {

				array[ j ++ ] = attribute.getX( i );
				if ( itemSize >= 2 ) array[ j ++ ] = attribute.getY( i );
				if ( itemSize >= 3 ) array[ j ++ ] = attribute.getZ( i );
				if ( itemSize >= 4 ) array[ j ++ ] = attribute.getW( i );

			}

			return new THREE.BufferAttribute( array, itemSize, attribute.normalized );

		}

		return attribute.clone();

	}

	/* GLTF PARSER */

	function GLTFParser( json, extensions, options ) {

		this.json = json || {};
		this.extensions = extensions || {};
		this.options = options || {};

		// loader object cache
		this.cache = new GLTFRegistry();

		// BufferGeometry caching
		this.primitiveCache = {};

		this.textureLoader = new THREE.TextureLoader( this.options.manager );
		this.textureLoader.setCrossOrigin( this.options.crossOrigin );

		this.fileLoader = new THREE.FileLoader( this.options.manager );
		this.fileLoader.setResponseType( 'arraybuffer' );

		if ( this.options.crossOrigin === 'use-credentials' ) {

			this.fileLoader.setWithCredentials( true );

		}

	}

	GLTFParser.prototype.parse = function ( onLoad, onError ) {

		var parser = this;
		var json = this.json;
		var extensions = this.extensions;

		// Clear the loader cache
		this.cache.removeAll();

		// Mark the special nodes/meshes in json for efficient parse
		this.markDefs();

		Promise.all( [

			this.getDependencies( 'scene' ),
			this.getDependencies( 'animation' ),
			this.getDependencies( 'camera' ),

		] ).then( function ( dependencies ) {

			var result = {
				scene: dependencies[ 0 ][ json.scene || 0 ],
				scenes: dependencies[ 0 ],
				animations: dependencies[ 1 ],
				cameras: dependencies[ 2 ],
				asset: json.asset,
				parser: parser,
				userData: {}
			};

			addUnknownExtensionsToUserData( extensions, result, json );

			assignExtrasToUserData( result, json );

			onLoad( result );

		} ).catch( onError );

	};

	/**
	 * Marks the special nodes/meshes in json for efficient parse.
	 */
	GLTFParser.prototype.markDefs = function () {

		var nodeDefs = this.json.nodes || [];
		var skinDefs = this.json.skins || [];
		var meshDefs = this.json.meshes || [];

		var meshReferences = {};
		var meshUses = {};

		// Nothing in the node definition indicates whether it is a Bone or an
		// Object3D. Use the skins' joint references to mark bones.
		for ( var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {

			var joints = skinDefs[ skinIndex ].joints;

			for ( var i = 0, il = joints.length; i < il; i ++ ) {

				nodeDefs[ joints[ i ] ].isBone = true;

			}

		}

		// Meshes can (and should) be reused by multiple nodes in a glTF asset. To
		// avoid having more than one THREE.Mesh with the same name, count
		// references and rename instances below.
		//
		// Example: CesiumMilkTruck sample model reuses "Wheel" meshes.
		for ( var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {

			var nodeDef = nodeDefs[ nodeIndex ];

			if ( nodeDef.mesh !== undefined ) {

				if ( meshReferences[ nodeDef.mesh ] === undefined ) {

					meshReferences[ nodeDef.mesh ] = meshUses[ nodeDef.mesh ] = 0;

				}

				meshReferences[ nodeDef.mesh ] ++;

				// Nothing in the mesh definition indicates whether it is
				// a SkinnedMesh or Mesh. Use the node's mesh reference
				// to mark SkinnedMesh if node has skin.
				if ( nodeDef.skin !== undefined ) {

					meshDefs[ nodeDef.mesh ].isSkinnedMesh = true;

				}

			}

		}

		this.json.meshReferences = meshReferences;
		this.json.meshUses = meshUses;

	};

	/**
	 * Requests the specified dependency asynchronously, with caching.
	 * @param {string} type
	 * @param {number} index
	 * @return {Promise<THREE.Object3D|THREE.Material|THREE.Texture|THREE.AnimationClip|ArrayBuffer|Object>}
	 */
	GLTFParser.prototype.getDependency = function ( type, index ) {

		var cacheKey = type + ':' + index;
		var dependency = this.cache.get( cacheKey );

		if ( ! dependency ) {

			switch ( type ) {

				case 'scene':
					dependency = this.loadScene( index );
					break;

				case 'node':
					dependency = this.loadNode( index );
					break;

				case 'mesh':
					dependency = this.loadMesh( index );
					break;

				case 'accessor':
					dependency = this.loadAccessor( index );
					break;

				case 'bufferView':
					dependency = this.loadBufferView( index );
					break;

				case 'buffer':
					dependency = this.loadBuffer( index );
					break;

				case 'material':
					dependency = this.loadMaterial( index );
					break;

				case 'texture':
					dependency = this.loadTexture( index );
					break;

				case 'skin':
					dependency = this.loadSkin( index );
					break;

				case 'animation':
					dependency = this.loadAnimation( index );
					break;

				case 'camera':
					dependency = this.loadCamera( index );
					break;

				case 'light':
					dependency = this.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].loadLight( index );
					break;

				default:
					throw new Error( 'Unknown type: ' + type );

			}

			this.cache.add( cacheKey, dependency );

		}

		return dependency;

	};

	/**
	 * Requests all dependencies of the specified type asynchronously, with caching.
	 * @param {string} type
	 * @return {Promise<Array<Object>>}
	 */
	GLTFParser.prototype.getDependencies = function ( type ) {

		var dependencies = this.cache.get( type );

		if ( ! dependencies ) {

			var parser = this;
			var defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];

			dependencies = Promise.all( defs.map( function ( def, index ) {

				return parser.getDependency( type, index );

			} ) );

			this.cache.add( type, dependencies );

		}

		return dependencies;

	};

	/**
	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views
	 * @param {number} bufferIndex
	 * @return {Promise<ArrayBuffer>}
	 */
	GLTFParser.prototype.loadBuffer = function ( bufferIndex ) {

		var bufferDef = this.json.buffers[ bufferIndex ];
		var loader = this.fileLoader;

		if ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {

			throw new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );

		}

		// If present, GLB container is required to be the first buffer.
		if ( bufferDef.uri === undefined && bufferIndex === 0 ) {

			return Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );

		}

		var options = this.options;

		return new Promise( function ( resolve, reject ) {

			loader.load( resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {

				reject( new Error( 'THREE.GLTFLoader: Failed to load buffer "' + bufferDef.uri + '".' ) );

			} );

		} );

	};

	/**
	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views
	 * @param {number} bufferViewIndex
	 * @return {Promise<ArrayBuffer>}
	 */
	GLTFParser.prototype.loadBufferView = function ( bufferViewIndex ) {

		var bufferViewDef = this.json.bufferViews[ bufferViewIndex ];

		return this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {

			var byteLength = bufferViewDef.byteLength || 0;
			var byteOffset = bufferViewDef.byteOffset || 0;
			return buffer.slice( byteOffset, byteOffset + byteLength );

		} );

	};

	/**
	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors
	 * @param {number} accessorIndex
	 * @return {Promise<THREE.BufferAttribute|THREE.InterleavedBufferAttribute>}
	 */
	GLTFParser.prototype.loadAccessor = function ( accessorIndex ) {

		var parser = this;
		var json = this.json;

		var accessorDef = this.json.accessors[ accessorIndex ];

		if ( accessorDef.bufferView === undefined && accessorDef.sparse === undefined ) {

			// Ignore empty accessors, which may be used to declare runtime
			// information about attributes coming from another source (e.g. Draco
			// compression extension).
			return Promise.resolve( null );

		}

		var pendingBufferViews = [];

		if ( accessorDef.bufferView !== undefined ) {

			pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );

		} else {

			pendingBufferViews.push( null );

		}

		if ( accessorDef.sparse !== undefined ) {

			pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );
			pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );

		}

		return Promise.all( pendingBufferViews ).then( function ( bufferViews ) {

			var bufferView = bufferViews[ 0 ];

			var itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];
			var TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];

			// For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.
			var elementBytes = TypedArray.BYTES_PER_ELEMENT;
			var itemBytes = elementBytes * itemSize;
			var byteOffset = accessorDef.byteOffset || 0;
			var byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[ accessorDef.bufferView ].byteStride : undefined;
			var normalized = accessorDef.normalized === true;
			var array, bufferAttribute;

			// The buffer is not interleaved if the stride is the item size in bytes.
			if ( byteStride && byteStride !== itemBytes ) {

				// Each "slice" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer
				// This makes sure that IBA.count reflects accessor.count properly
				var ibSlice = Math.floor( byteOffset / byteStride );
				var ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;
				var ib = parser.cache.get( ibCacheKey );

				if ( ! ib ) {

					array = new TypedArray( bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes );

					// Integer parameters to IB/IBA are in array elements, not bytes.
					ib = new THREE.InterleavedBuffer( array, byteStride / elementBytes );

					parser.cache.add( ibCacheKey, ib );

				}

				bufferAttribute = new THREE.InterleavedBufferAttribute( ib, itemSize, (byteOffset % byteStride) / elementBytes, normalized );

			} else {

				if ( bufferView === null ) {

					array = new TypedArray( accessorDef.count * itemSize );

				} else {

					array = new TypedArray( bufferView, byteOffset, accessorDef.count * itemSize );

				}

				bufferAttribute = new THREE.BufferAttribute( array, itemSize, normalized );

			}

			// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors
			if ( accessorDef.sparse !== undefined ) {

				var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;
				var TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];

				var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;
				var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;

				var sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );
				var sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );

				if ( bufferView !== null ) {

					// Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.
					bufferAttribute.setArray( bufferAttribute.array.slice() );

				}

				for ( var i = 0, il = sparseIndices.length; i < il; i ++ ) {

					var index = sparseIndices[ i ];

					bufferAttribute.setX( index, sparseValues[ i * itemSize ] );
					if ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );
					if ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );
					if ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );
					if ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );

				}

			}

			return bufferAttribute;

		} );

	};

	/**
	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures
	 * @param {number} textureIndex
	 * @return {Promise<THREE.Texture>}
	 */
	GLTFParser.prototype.loadTexture = function ( textureIndex ) {

		var parser = this;
		var json = this.json;
		var options = this.options;
		var textureLoader = this.textureLoader;

		var URL = window.URL || window.webkitURL;

		var textureDef = json.textures[ textureIndex ];

		var textureExtensions = textureDef.extensions || {};

		var source;

		if ( textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ] ) {

			source = json.images[ textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].source ];

		} else {

			source = json.images[ textureDef.source ];

		}

		var sourceURI = source.uri;
		var isObjectURL = false;

		if ( source.bufferView !== undefined ) {

			// Load binary image data from bufferView, if provided.

			sourceURI = parser.getDependency( 'bufferView', source.bufferView ).then( function ( bufferView ) {

				isObjectURL = true;
				var blob = new Blob( [ bufferView ], { type: source.mimeType } );
				sourceURI = URL.createObjectURL( blob );
				return sourceURI;

			} );

		}

		return Promise.resolve( sourceURI ).then( function ( sourceURI ) {

			// Load Texture resource.

			var loader = THREE.Loader.Handlers.get( sourceURI );

			if ( ! loader ) {

				loader = textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ]
					? parser.extensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].ddsLoader
					: textureLoader;

			}

			return new Promise( function ( resolve, reject ) {

				loader.load( resolveURL( sourceURI, options.path ), resolve, undefined, reject );

			} );

		} ).then( function ( texture ) {

			// Clean up resources and configure Texture.

			if ( isObjectURL === true ) {

				URL.revokeObjectURL( sourceURI );

			}

			texture.flipY = false;

			if ( textureDef.name !== undefined ) texture.name = textureDef.name;

			// Ignore unknown mime types, like DDS files.
			if ( source.mimeType in MIME_TYPE_FORMATS ) {

				texture.format = MIME_TYPE_FORMATS[ source.mimeType ];

			}

			var samplers = json.samplers || {};
			var sampler = samplers[ textureDef.sampler ] || {};

			texture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || THREE.LinearFilter;
			texture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || THREE.LinearMipmapLinearFilter;
			texture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || THREE.RepeatWrapping;
			texture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || THREE.RepeatWrapping;

			return texture;

		} );

	};

	/**
	 * Asynchronously assigns a texture to the given material parameters.
	 * @param {Object} materialParams
	 * @param {string} mapName
	 * @param {Object} mapDef
	 * @return {Promise}
	 */
	GLTFParser.prototype.assignTexture = function ( materialParams, mapName, mapDef ) {

		var parser = this;

		return this.getDependency( 'texture', mapDef.index ).then( function ( texture ) {

			if ( ! texture.isCompressedTexture ) {

				switch ( mapName ) {

					case 'aoMap':
					case 'emissiveMap':
					case 'metalnessMap':
					case 'normalMap':
					case 'roughnessMap':
						texture.format = THREE.RGBFormat;
						break;

				}

			}

			if ( parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] ) {

				var transform = mapDef.extensions !== undefined ? mapDef.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] : undefined;

				if ( transform ) {

					texture = parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ].extendTexture( texture, transform );

				}

			}

			materialParams[ mapName ] = texture;

		} );

	};

	/**
	 * Assigns final material to a Mesh, Line, or Points instance. The instance
	 * already has a material (generated from the glTF material options alone)
	 * but reuse of the same glTF material may require multiple threejs materials
	 * to accomodate different primitive types, defines, etc. New materials will
	 * be created if necessary, and reused from a cache.
	 * @param  {THREE.Object3D} mesh Mesh, Line, or Points instance.
	 */
	GLTFParser.prototype.assignFinalMaterial = function ( mesh ) {

		var geometry = mesh.geometry;
		var material = mesh.material;
		var extensions = this.extensions;

		var useVertexTangents = geometry.attributes.tangent !== undefined;
		var useVertexColors = geometry.attributes.color !== undefined;
		var useFlatShading = geometry.attributes.normal === undefined;
		var useSkinning = mesh.isSkinnedMesh === true;
		var useMorphTargets = Object.keys( geometry.morphAttributes ).length > 0;
		var useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;

		if ( mesh.isPoints ) {

			var cacheKey = 'PointsMaterial:' + material.uuid;

			var pointsMaterial = this.cache.get( cacheKey );

			if ( ! pointsMaterial ) {

				pointsMaterial = new THREE.PointsMaterial();
				THREE.Material.prototype.copy.call( pointsMaterial, material );
				pointsMaterial.color.copy( material.color );
				pointsMaterial.map = material.map;
				pointsMaterial.lights = false; // PointsMaterial doesn't support lights yet
				pointsMaterial.sizeAttenuation = false; // glTF spec says points should be 1px

				this.cache.add( cacheKey, pointsMaterial );

			}

			material = pointsMaterial;

		} else if ( mesh.isLine ) {

			var cacheKey = 'LineBasicMaterial:' + material.uuid;

			var lineMaterial = this.cache.get( cacheKey );

			if ( ! lineMaterial ) {

				lineMaterial = new THREE.LineBasicMaterial();
				THREE.Material.prototype.copy.call( lineMaterial, material );
				lineMaterial.color.copy( material.color );
				lineMaterial.lights = false; // LineBasicMaterial doesn't support lights yet

				this.cache.add( cacheKey, lineMaterial );

			}

			material = lineMaterial;

		}

		// Clone the material if it will be modified
		if ( useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets ) {

			var cacheKey = 'ClonedMaterial:' + material.uuid + ':';

			if ( material.isGLTFSpecularGlossinessMaterial ) cacheKey += 'specular-glossiness:';
			if ( useSkinning ) cacheKey += 'skinning:';
			if ( useVertexTangents ) cacheKey += 'vertex-tangents:';
			if ( useVertexColors ) cacheKey += 'vertex-colors:';
			if ( useFlatShading ) cacheKey += 'flat-shading:';
			if ( useMorphTargets ) cacheKey += 'morph-targets:';
			if ( useMorphNormals ) cacheKey += 'morph-normals:';

			var cachedMaterial = this.cache.get( cacheKey );

			if ( ! cachedMaterial ) {

				cachedMaterial = material.isGLTFSpecularGlossinessMaterial
					? extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].cloneMaterial( material )
					: material.clone();

				if ( useSkinning ) cachedMaterial.skinning = true;
				if ( useVertexTangents ) cachedMaterial.vertexTangents = true;
				if ( useVertexColors ) cachedMaterial.vertexColors = THREE.VertexColors;
				if ( useFlatShading ) cachedMaterial.flatShading = true;
				if ( useMorphTargets ) cachedMaterial.morphTargets = true;
				if ( useMorphNormals ) cachedMaterial.morphNormals = true;

				this.cache.add( cacheKey, cachedMaterial );

			}

			material = cachedMaterial;

		}

		// workarounds for mesh and geometry

		if ( material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined ) {

			console.log( 'THREE.GLTFLoader: Duplicating UVs to support aoMap.' );
			geometry.addAttribute( 'uv2', new THREE.BufferAttribute( geometry.attributes.uv.array, 2 ) );

		}

		if ( material.isGLTFSpecularGlossinessMaterial ) {

			// for GLTFSpecularGlossinessMaterial(ShaderMaterial) uniforms runtime update
			mesh.onBeforeRender = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].refreshUniforms;

		}

		mesh.material = material;

	};

	/**
	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials
	 * @param {number} materialIndex
	 * @return {Promise<THREE.Material>}
	 */
	GLTFParser.prototype.loadMaterial = function ( materialIndex ) {

		var parser = this;
		var json = this.json;
		var extensions = this.extensions;
		var materialDef = json.materials[ materialIndex ];

		var materialType;
		var materialParams = {};
		var materialExtensions = materialDef.extensions || {};

		var pending = [];

		if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] ) {

			var sgExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];
			materialType = sgExtension.getMaterialType();
			pending.push( sgExtension.extendParams( materialParams, materialDef, parser ) );

		} else if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ] ) {

			var kmuExtension = extensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ];
			materialType = kmuExtension.getMaterialType();
			pending.push( kmuExtension.extendParams( materialParams, materialDef, parser ) );

		} else {

			// Specification:
			// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material

			materialType = THREE.MeshStandardMaterial;

			var metallicRoughness = materialDef.pbrMetallicRoughness || {};

			materialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );
			materialParams.opacity = 1.0;

			if ( Array.isArray( metallicRoughness.baseColorFactor ) ) {

				var array = metallicRoughness.baseColorFactor;

				materialParams.color.fromArray( array );
				materialParams.opacity = array[ 3 ];

			}

			if ( metallicRoughness.baseColorTexture !== undefined ) {

				pending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );

			}

			materialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;
			materialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;

			if ( metallicRoughness.metallicRoughnessTexture !== undefined ) {

				pending.push( parser.assignTexture( materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture ) );
				pending.push( parser.assignTexture( materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture ) );

			}

		}

		if ( materialDef.doubleSided === true ) {

			materialParams.side = THREE.DoubleSide;

		}

		var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;

		if ( alphaMode === ALPHA_MODES.BLEND ) {

			materialParams.transparent = true;

		} else {

			materialParams.transparent = false;

			if ( alphaMode === ALPHA_MODES.MASK ) {

				materialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;

			}

		}

		if ( materialDef.normalTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {

			pending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture ) );

			materialParams.normalScale = new THREE.Vector2( 1, 1 );

			if ( materialDef.normalTexture.scale !== undefined ) {

				materialParams.normalScale.set( materialDef.normalTexture.scale, materialDef.normalTexture.scale );

			}

		}

		if ( materialDef.occlusionTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {

			pending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture ) );

			if ( materialDef.occlusionTexture.strength !== undefined ) {

				materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;

			}

		}

		if ( materialDef.emissiveFactor !== undefined && materialType !== THREE.MeshBasicMaterial ) {

			materialParams.emissive = new THREE.Color().fromArray( materialDef.emissiveFactor );

		}

		if ( materialDef.emissiveTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {

			pending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture ) );

		}

		return Promise.all( pending ).then( function () {

			var material;

			if ( materialType === THREE.ShaderMaterial ) {

				material = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].createMaterial( materialParams );

			} else {

				material = new materialType( materialParams );

			}

			if ( materialDef.name !== undefined ) material.name = materialDef.name;

			// baseColorTexture, emissiveTexture, and specularGlossinessTexture use sRGB encoding.
			if ( material.map ) material.map.encoding = THREE.sRGBEncoding;
			if ( material.emissiveMap ) material.emissiveMap.encoding = THREE.sRGBEncoding;
			if ( material.specularMap ) material.specularMap.encoding = THREE.sRGBEncoding;

			assignExtrasToUserData( material, materialDef );

			if ( materialDef.extensions ) addUnknownExtensionsToUserData( extensions, material, materialDef );

			return material;

		} );

	};

	/**
	 * @param {THREE.BufferGeometry} geometry
	 * @param {GLTF.Primitive} primitiveDef
	 * @param {GLTFParser} parser
	 * @return {Promise<THREE.BufferGeometry>}
	 */
	function addPrimitiveAttributes( geometry, primitiveDef, parser ) {

		var attributes = primitiveDef.attributes;

		var pending = [];

		function assignAttributeAccessor( accessorIndex, attributeName ) {

			return parser.getDependency( 'accessor', accessorIndex )
				.then( function ( accessor ) {

					geometry.addAttribute( attributeName, accessor );

				} );

		}

		for ( var gltfAttributeName in attributes ) {

			var threeAttributeName = ATTRIBUTES[ gltfAttributeName ] || gltfAttributeName.toLowerCase();

			// Skip attributes already provided by e.g. Draco extension.
			if ( threeAttributeName in geometry.attributes ) continue;

			pending.push( assignAttributeAccessor( attributes[ gltfAttributeName ], threeAttributeName ) );

		}

		if ( primitiveDef.indices !== undefined && ! geometry.index ) {

			var accessor = parser.getDependency( 'accessor', primitiveDef.indices ).then( function ( accessor ) {

				geometry.setIndex( accessor );

			} );

			pending.push( accessor );

		}

		assignExtrasToUserData( geometry, primitiveDef );

		return Promise.all( pending ).then( function () {

			return primitiveDef.targets !== undefined
				? addMorphTargets( geometry, primitiveDef.targets, parser )
				: geometry;

		} );

	}

	/**
	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry
	 *
	 * Creates BufferGeometries from primitives.
	 *
	 * @param {Array<GLTF.Primitive>} primitives
	 * @return {Promise<Array<THREE.BufferGeometry>>}
	 */
	GLTFParser.prototype.loadGeometries = function ( primitives ) {

		var parser = this;
		var extensions = this.extensions;
		var cache = this.primitiveCache;

		function createDracoPrimitive( primitive ) {

			return extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ]
				.decodePrimitive( primitive, parser )
				.then( function ( geometry ) {

					return addPrimitiveAttributes( geometry, primitive, parser );

				} );

		}

		var pending = [];

		for ( var i = 0, il = primitives.length; i < il; i ++ ) {

			var primitive = primitives[ i ];
			var cacheKey = createPrimitiveKey( primitive );

			// See if we've already created this geometry
			var cached = cache[ cacheKey ];

			if ( cached ) {

				// Use the cached geometry if it exists
				pending.push( cached.promise );

			} else {

				var geometryPromise;

				if ( primitive.extensions && primitive.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ] ) {

					// Use DRACO geometry if available
					geometryPromise = createDracoPrimitive( primitive );

				} else {

					// Otherwise create a new geometry
					geometryPromise = addPrimitiveAttributes( new THREE.BufferGeometry(), primitive, parser );

				}

				// Cache this geometry
				cache[ cacheKey ] = { primitive: primitive, promise: geometryPromise };

				pending.push( geometryPromise );

			}

		}

		return Promise.all( pending );

	};

	/**
	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes
	 * @param {number} meshIndex
	 * @return {Promise<THREE.Group|THREE.Mesh|THREE.SkinnedMesh>}
	 */
	GLTFParser.prototype.loadMesh = function ( meshIndex ) {

		var parser = this;
		var json = this.json;

		var meshDef = json.meshes[ meshIndex ];
		var primitives = meshDef.primitives;

		var pending = [];

		for ( var i = 0, il = primitives.length; i < il; i ++ ) {

			var material = primitives[ i ].material === undefined
				? createDefaultMaterial()
				: this.getDependency( 'material', primitives[ i ].material );

			pending.push( material );

		}

		return Promise.all( pending ).then( function ( originalMaterials ) {

			return parser.loadGeometries( primitives ).then( function ( geometries ) {

				var meshes = [];

				for ( var i = 0, il = geometries.length; i < il; i ++ ) {

					var geometry = geometries[ i ];
					var primitive = primitives[ i ];

					// 1. create Mesh

					var mesh;

					var material = originalMaterials[ i ];

					if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||
						primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||
						primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||
						primitive.mode === undefined ) {

						// .isSkinnedMesh isn't in glTF spec. See .markDefs()
						mesh = meshDef.isSkinnedMesh === true
							? new THREE.SkinnedMesh( geometry, material )
							: new THREE.Mesh( geometry, material );

						if ( mesh.isSkinnedMesh === true && ! mesh.geometry.attributes.skinWeight.normalized ) {

							// we normalize floating point skin weight array to fix malformed assets (see #15319)
							// it's important to skip this for non-float32 data since normalizeSkinWeights assumes non-normalized inputs
							mesh.normalizeSkinWeights();

						}

						if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {

							mesh.drawMode = THREE.TriangleStripDrawMode;

						} else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {

							mesh.drawMode = THREE.TriangleFanDrawMode;

						}

					} else if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {

						mesh = new THREE.LineSegments( geometry, material );

					} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {

						mesh = new THREE.Line( geometry, material );

					} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {

						mesh = new THREE.LineLoop( geometry, material );

					} else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {

						mesh = new THREE.Points( geometry, material );

					} else {

						throw new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );

					}

					if ( Object.keys( mesh.geometry.morphAttributes ).length > 0 ) {

						updateMorphTargets( mesh, meshDef );

					}

					mesh.name = meshDef.name || ( 'mesh_' + meshIndex );

					if ( geometries.length > 1 ) mesh.name += '_' + i;

					assignExtrasToUserData( mesh, meshDef );

					parser.assignFinalMaterial( mesh );

					meshes.push( mesh );

				}

				if ( meshes.length === 1 ) {

					return meshes[ 0 ];

				}

				var group = new THREE.Group();

				for ( var i = 0, il = meshes.length; i < il; i ++ ) {

					group.add( meshes[ i ] );

				}

				return group;

			} );

		} );

	};

	/**
	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras
	 * @param {number} cameraIndex
	 * @return {Promise<THREE.Camera>}
	 */
	GLTFParser.prototype.loadCamera = function ( cameraIndex ) {

		var camera;
		var cameraDef = this.json.cameras[ cameraIndex ];
		var params = cameraDef[ cameraDef.type ];

		if ( ! params ) {

			console.warn( 'THREE.GLTFLoader: Missing camera parameters.' );
			return;

		}

		if ( cameraDef.type === 'perspective' ) {

			camera = new THREE.PerspectiveCamera( THREE.Math.radToDeg( params.yfov ), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6 );

		} else if ( cameraDef.type === 'orthographic' ) {

			camera = new THREE.OrthographicCamera( params.xmag / - 2, params.xmag / 2, params.ymag / 2, params.ymag / - 2, params.znear, params.zfar );

		}

		if ( cameraDef.name !== undefined ) camera.name = cameraDef.name;

		assignExtrasToUserData( camera, cameraDef );

		return Promise.resolve( camera );

	};

	/**
	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins
	 * @param {number} skinIndex
	 * @return {Promise<Object>}
	 */
	GLTFParser.prototype.loadSkin = function ( skinIndex ) {

		var skinDef = this.json.skins[ skinIndex ];

		var skinEntry = { joints: skinDef.joints };

		if ( skinDef.inverseBindMatrices === undefined ) {

			return Promise.resolve( skinEntry );

		}

		return this.getDependency( 'accessor', skinDef.inverseBindMatrices ).then( function ( accessor ) {

			skinEntry.inverseBindMatrices = accessor;

			return skinEntry;

		} );

	};

	/**
	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations
	 * @param {number} animationIndex
	 * @return {Promise<THREE.AnimationClip>}
	 */
	GLTFParser.prototype.loadAnimation = function ( animationIndex ) {

		var json = this.json;

		var animationDef = json.animations[ animationIndex ];

		var pendingNodes = [];
		var pendingInputAccessors = [];
		var pendingOutputAccessors = [];
		var pendingSamplers = [];
		var pendingTargets = [];

		for ( var i = 0, il = animationDef.channels.length; i < il; i ++ ) {

			var channel = animationDef.channels[ i ];
			var sampler = animationDef.samplers[ channel.sampler ];
			var target = channel.target;
			var name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.
			var input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;
			var output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;

			pendingNodes.push( this.getDependency( 'node', name ) );
			pendingInputAccessors.push( this.getDependency( 'accessor', input ) );
			pendingOutputAccessors.push( this.getDependency( 'accessor', output ) );
			pendingSamplers.push( sampler );
			pendingTargets.push( target );

		}

		return Promise.all( [

			Promise.all( pendingNodes ),
			Promise.all( pendingInputAccessors ),
			Promise.all( pendingOutputAccessors ),
			Promise.all( pendingSamplers ),
			Promise.all( pendingTargets )

		] ).then( function ( dependencies ) {

			var nodes = dependencies[ 0 ];
			var inputAccessors = dependencies[ 1 ];
			var outputAccessors = dependencies[ 2 ];
			var samplers = dependencies[ 3 ];
			var targets = dependencies[ 4 ];

			var tracks = [];

			for ( var i = 0, il = nodes.length; i < il; i ++ ) {

				var node = nodes[ i ];
				var inputAccessor = inputAccessors[ i ];
				var outputAccessor = outputAccessors[ i ];
				var sampler = samplers[ i ];
				var target = targets[ i ];

				if ( node === undefined ) continue;

				node.updateMatrix();
				node.matrixAutoUpdate = true;

				var TypedKeyframeTrack;

				switch ( PATH_PROPERTIES[ target.path ] ) {

					case PATH_PROPERTIES.weights:

						TypedKeyframeTrack = THREE.NumberKeyframeTrack;
						break;

					case PATH_PROPERTIES.rotation:

						TypedKeyframeTrack = THREE.QuaternionKeyframeTrack;
						break;

					case PATH_PROPERTIES.position:
					case PATH_PROPERTIES.scale:
					default:

						TypedKeyframeTrack = THREE.VectorKeyframeTrack;
						break;

				}

				var targetName = node.name ? node.name : node.uuid;

				var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : THREE.InterpolateLinear;

				var targetNames = [];

				if ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {

					// Node may be a THREE.Group (glTF mesh with several primitives) or a THREE.Mesh.
					node.traverse( function ( object ) {

						if ( object.isMesh === true && object.morphTargetInfluences ) {

							targetNames.push( object.name ? object.name : object.uuid );

						}

					} );

				} else {

					targetNames.push( targetName );

				}

				var outputArray = outputAccessor.array;

				if ( outputAccessor.normalized ) {

					var scale;

					if ( outputArray.constructor === Int8Array ) {

						scale = 1 / 127;

					} else if ( outputArray.constructor === Uint8Array ) {

						scale = 1 / 255;

					} else if ( outputArray.constructor == Int16Array ) {

						scale = 1 / 32767;

					} else if ( outputArray.constructor === Uint16Array ) {

						scale = 1 / 65535;

					} else {

						throw new Error( 'THREE.GLTFLoader: Unsupported output accessor component type.' );

					}

					var scaled = new Float32Array( outputArray.length );

					for ( var j = 0, jl = outputArray.length; j < jl; j ++ ) {

						scaled[ j ] = outputArray[ j ] * scale;

					}

					outputArray = scaled;

				}

				for ( var j = 0, jl = targetNames.length; j < jl; j ++ ) {

					var track = new TypedKeyframeTrack(
						targetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],
						inputAccessor.array,
						outputArray,
						interpolation
					);

					// Override interpolation with custom factory method.
					if ( sampler.interpolation === 'CUBICSPLINE' ) {

						track.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline( result ) {

							// A CUBICSPLINE keyframe in glTF has three output values for each input value,
							// representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()
							// must be divided by three to get the interpolant's sampleSize argument.

							return new GLTFCubicSplineInterpolant( this.times, this.values, this.getValueSize() / 3, result );

						};

						// Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.
						track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;

					}

					tracks.push( track );

				}

			}

			var name = animationDef.name !== undefined ? animationDef.name : 'animation_' + animationIndex;

			return new THREE.AnimationClip( name, undefined, tracks );

		} );

	};

	/**
	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy
	 * @param {number} nodeIndex
	 * @return {Promise<THREE.Object3D>}
	 */
	GLTFParser.prototype.loadNode = function ( nodeIndex ) {

		var json = this.json;
		var extensions = this.extensions;
		var parser = this;

		var meshReferences = json.meshReferences;
		var meshUses = json.meshUses;

		var nodeDef = json.nodes[ nodeIndex ];

		return ( function () {

			var pending = [];

			if ( nodeDef.mesh !== undefined ) {

				pending.push( parser.getDependency( 'mesh', nodeDef.mesh ).then( function ( mesh ) {

					var node;

					if ( meshReferences[ nodeDef.mesh ] > 1 ) {

						var instanceNum = meshUses[ nodeDef.mesh ] ++;

						node = mesh.clone();
						node.name += '_instance_' + instanceNum;

						// onBeforeRender copy for Specular-Glossiness
						node.onBeforeRender = mesh.onBeforeRender;

						for ( var i = 0, il = node.children.length; i < il; i ++ ) {

							node.children[ i ].name += '_instance_' + instanceNum;
							node.children[ i ].onBeforeRender = mesh.children[ i ].onBeforeRender;

						}

					} else {

						node = mesh;

					}

					// if weights are provided on the node, override weights on the mesh.
					if ( nodeDef.weights !== undefined ) {

						node.traverse( function ( o ) {

							if ( ! o.isMesh ) return;

							for ( var i = 0, il = nodeDef.weights.length; i < il; i ++ ) {

								o.morphTargetInfluences[ i ] = nodeDef.weights[ i ];

							}

						} );

					}

					return node;

				} ) );

			}

			if ( nodeDef.camera !== undefined ) {

				pending.push( parser.getDependency( 'camera', nodeDef.camera ) );

			}

			if ( nodeDef.extensions
				&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ]
				&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light !== undefined ) {

				pending.push( parser.getDependency( 'light', nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light ) );

			}

			return Promise.all( pending );

		}() ).then( function ( objects ) {

			var node;

			// .isBone isn't in glTF spec. See .markDefs
			if ( nodeDef.isBone === true ) {

				node = new THREE.Bone();

			} else if ( objects.length > 1 ) {

				node = new THREE.Group();

			} else if ( objects.length === 1 ) {

				node = objects[ 0 ];

			} else {

				node = new THREE.Object3D();

			}

			if ( node !== objects[ 0 ] ) {

				for ( var i = 0, il = objects.length; i < il; i ++ ) {

					node.add( objects[ i ] );

				}

			}

			if ( nodeDef.name !== undefined ) {

				node.userData.name = nodeDef.name;
				node.name = THREE.PropertyBinding.sanitizeNodeName( nodeDef.name );

			}

			assignExtrasToUserData( node, nodeDef );

			if ( nodeDef.extensions ) addUnknownExtensionsToUserData( extensions, node, nodeDef );

			if ( nodeDef.matrix !== undefined ) {

				var matrix = new THREE.Matrix4();
				matrix.fromArray( nodeDef.matrix );
				node.applyMatrix( matrix );

			} else {

				if ( nodeDef.translation !== undefined ) {

					node.position.fromArray( nodeDef.translation );

				}

				if ( nodeDef.rotation !== undefined ) {

					node.quaternion.fromArray( nodeDef.rotation );

				}

				if ( nodeDef.scale !== undefined ) {

					node.scale.fromArray( nodeDef.scale );

				}

			}

			return node;

		} );

	};

	/**
	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes
	 * @param {number} sceneIndex
	 * @return {Promise<THREE.Scene>}
	 */
	GLTFParser.prototype.loadScene = function () {

		// scene node hierachy builder

		function buildNodeHierachy( nodeId, parentObject, json, parser ) {

			var nodeDef = json.nodes[ nodeId ];

			return parser.getDependency( 'node', nodeId ).then( function ( node ) {

				if ( nodeDef.skin === undefined ) return node;

				// build skeleton here as well

				var skinEntry;

				return parser.getDependency( 'skin', nodeDef.skin ).then( function ( skin ) {

					skinEntry = skin;

					var pendingJoints = [];

					for ( var i = 0, il = skinEntry.joints.length; i < il; i ++ ) {

						pendingJoints.push( parser.getDependency( 'node', skinEntry.joints[ i ] ) );

					}

					return Promise.all( pendingJoints );

				} ).then( function ( jointNodes ) {

					node.traverse( function ( mesh ) {

						if ( ! mesh.isMesh ) return;

						var bones = [];
						var boneInverses = [];

						for ( var j = 0, jl = jointNodes.length; j < jl; j ++ ) {

							var jointNode = jointNodes[ j ];

							if ( jointNode ) {

								bones.push( jointNode );

								var mat = new THREE.Matrix4();

								if ( skinEntry.inverseBindMatrices !== undefined ) {

									mat.fromArray( skinEntry.inverseBindMatrices.array, j * 16 );

								}

								boneInverses.push( mat );

							} else {

								console.warn( 'THREE.GLTFLoader: Joint "%s" could not be found.', skinEntry.joints[ j ] );

							}

						}

						mesh.bind( new THREE.Skeleton( bones, boneInverses ), mesh.matrixWorld );

					} );

					return node;

				} );

			} ).then( function ( node ) {

				// build node hierachy

				parentObject.add( node );

				var pending = [];

				if ( nodeDef.children ) {

					var children = nodeDef.children;

					for ( var i = 0, il = children.length; i < il; i ++ ) {

						var child = children[ i ];
						pending.push( buildNodeHierachy( child, node, json, parser ) );

					}

				}

				return Promise.all( pending );

			} );

		}

		return function loadScene( sceneIndex ) {

			var json = this.json;
			var extensions = this.extensions;
			var sceneDef = this.json.scenes[ sceneIndex ];
			var parser = this;

			var scene = new THREE.Scene();
			if ( sceneDef.name !== undefined ) scene.name = sceneDef.name;

			assignExtrasToUserData( scene, sceneDef );

			if ( sceneDef.extensions ) addUnknownExtensionsToUserData( extensions, scene, sceneDef );

			var nodeIds = sceneDef.nodes || [];

			var pending = [];

			for ( var i = 0, il = nodeIds.length; i < il; i ++ ) {

				pending.push( buildNodeHierachy( nodeIds[ i ], scene, json, parser ) );

			}

			return Promise.all( pending ).then( function () {

				return scene;

			} );

		};

	}();

	return GLTFLoader;

} )();


/***/ }),

/***/ "../../node_modules/three/examples/js/loaders/OBJLoader.js":
/*!*****************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/three/examples/js/loaders/OBJLoader.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.OBJLoader = ( function () {

	// o object_name | g group_name
	var object_pattern = /^[og]\s*(.+)?/;
	// mtllib file_reference
	var material_library_pattern = /^mtllib /;
	// usemtl material_name
	var material_use_pattern = /^usemtl /;

	function ParserState() {

		var state = {
			objects: [],
			object: {},

			vertices: [],
			normals: [],
			colors: [],
			uvs: [],

			materialLibraries: [],

			startObject: function ( name, fromDeclaration ) {

				// If the current object (initial from reset) is not from a g/o declaration in the parsed
				// file. We need to use it for the first parsed g/o to keep things in sync.
				if ( this.object && this.object.fromDeclaration === false ) {

					this.object.name = name;
					this.object.fromDeclaration = ( fromDeclaration !== false );
					return;

				}

				var previousMaterial = ( this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined );

				if ( this.object && typeof this.object._finalize === 'function' ) {

					this.object._finalize( true );

				}

				this.object = {
					name: name || '',
					fromDeclaration: ( fromDeclaration !== false ),

					geometry: {
						vertices: [],
						normals: [],
						colors: [],
						uvs: []
					},
					materials: [],
					smooth: true,

					startMaterial: function ( name, libraries ) {

						var previous = this._finalize( false );

						// New usemtl declaration overwrites an inherited material, except if faces were declared
						// after the material, then it must be preserved for proper MultiMaterial continuation.
						if ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {

							this.materials.splice( previous.index, 1 );

						}

						var material = {
							index: this.materials.length,
							name: name || '',
							mtllib: ( Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '' ),
							smooth: ( previous !== undefined ? previous.smooth : this.smooth ),
							groupStart: ( previous !== undefined ? previous.groupEnd : 0 ),
							groupEnd: - 1,
							groupCount: - 1,
							inherited: false,

							clone: function ( index ) {

								var cloned = {
									index: ( typeof index === 'number' ? index : this.index ),
									name: this.name,
									mtllib: this.mtllib,
									smooth: this.smooth,
									groupStart: 0,
									groupEnd: - 1,
									groupCount: - 1,
									inherited: false
								};
								cloned.clone = this.clone.bind( cloned );
								return cloned;

							}
						};

						this.materials.push( material );

						return material;

					},

					currentMaterial: function () {

						if ( this.materials.length > 0 ) {

							return this.materials[ this.materials.length - 1 ];

						}

						return undefined;

					},

					_finalize: function ( end ) {

						var lastMultiMaterial = this.currentMaterial();
						if ( lastMultiMaterial && lastMultiMaterial.groupEnd === - 1 ) {

							lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;
							lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;
							lastMultiMaterial.inherited = false;

						}

						// Ignore objects tail materials if no face declarations followed them before a new o/g started.
						if ( end && this.materials.length > 1 ) {

							for ( var mi = this.materials.length - 1; mi >= 0; mi -- ) {

								if ( this.materials[ mi ].groupCount <= 0 ) {

									this.materials.splice( mi, 1 );

								}

							}

						}

						// Guarantee at least one empty material, this makes the creation later more straight forward.
						if ( end && this.materials.length === 0 ) {

							this.materials.push( {
								name: '',
								smooth: this.smooth
							} );

						}

						return lastMultiMaterial;

					}
				};

				// Inherit previous objects material.
				// Spec tells us that a declared material must be set to all objects until a new material is declared.
				// If a usemtl declaration is encountered while this new object is being parsed, it will
				// overwrite the inherited material. Exception being that there was already face declarations
				// to the inherited material, then it will be preserved for proper MultiMaterial continuation.

				if ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function' ) {

					var declared = previousMaterial.clone( 0 );
					declared.inherited = true;
					this.object.materials.push( declared );

				}

				this.objects.push( this.object );

			},

			finalize: function () {

				if ( this.object && typeof this.object._finalize === 'function' ) {

					this.object._finalize( true );

				}

			},

			parseVertexIndex: function ( value, len ) {

				var index = parseInt( value, 10 );
				return ( index >= 0 ? index - 1 : index + len / 3 ) * 3;

			},

			parseNormalIndex: function ( value, len ) {

				var index = parseInt( value, 10 );
				return ( index >= 0 ? index - 1 : index + len / 3 ) * 3;

			},

			parseUVIndex: function ( value, len ) {

				var index = parseInt( value, 10 );
				return ( index >= 0 ? index - 1 : index + len / 2 ) * 2;

			},

			addVertex: function ( a, b, c ) {

				var src = this.vertices;
				var dst = this.object.geometry.vertices;

				dst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );
				dst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );
				dst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );

			},

			addVertexPoint: function ( a ) {

				var src = this.vertices;
				var dst = this.object.geometry.vertices;

				dst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );

			},

			addVertexLine: function ( a ) {

				var src = this.vertices;
				var dst = this.object.geometry.vertices;

				dst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );

			},

			addNormal: function ( a, b, c ) {

				var src = this.normals;
				var dst = this.object.geometry.normals;

				dst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );
				dst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );
				dst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );

			},

			addColor: function ( a, b, c ) {

				var src = this.colors;
				var dst = this.object.geometry.colors;

				dst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );
				dst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );
				dst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );

			},

			addUV: function ( a, b, c ) {

				var src = this.uvs;
				var dst = this.object.geometry.uvs;

				dst.push( src[ a + 0 ], src[ a + 1 ] );
				dst.push( src[ b + 0 ], src[ b + 1 ] );
				dst.push( src[ c + 0 ], src[ c + 1 ] );

			},

			addUVLine: function ( a ) {

				var src = this.uvs;
				var dst = this.object.geometry.uvs;

				dst.push( src[ a + 0 ], src[ a + 1 ] );

			},

			addFace: function ( a, b, c, ua, ub, uc, na, nb, nc ) {

				var vLen = this.vertices.length;

				var ia = this.parseVertexIndex( a, vLen );
				var ib = this.parseVertexIndex( b, vLen );
				var ic = this.parseVertexIndex( c, vLen );

				this.addVertex( ia, ib, ic );

				if ( ua !== undefined && ua !== '' ) {

					var uvLen = this.uvs.length;
					ia = this.parseUVIndex( ua, uvLen );
					ib = this.parseUVIndex( ub, uvLen );
					ic = this.parseUVIndex( uc, uvLen );
					this.addUV( ia, ib, ic );

				}

				if ( na !== undefined && na !== '' ) {

					// Normals are many times the same. If so, skip function call and parseInt.
					var nLen = this.normals.length;
					ia = this.parseNormalIndex( na, nLen );

					ib = na === nb ? ia : this.parseNormalIndex( nb, nLen );
					ic = na === nc ? ia : this.parseNormalIndex( nc, nLen );

					this.addNormal( ia, ib, ic );

				}

				if ( this.colors.length > 0 ) {

					this.addColor( ia, ib, ic );

				}

			},

			addPointGeometry: function ( vertices ) {

				this.object.geometry.type = 'Points';

				var vLen = this.vertices.length;

				for ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {

					this.addVertexPoint( this.parseVertexIndex( vertices[ vi ], vLen ) );

				}

			},

			addLineGeometry: function ( vertices, uvs ) {

				this.object.geometry.type = 'Line';

				var vLen = this.vertices.length;
				var uvLen = this.uvs.length;

				for ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {

					this.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );

				}

				for ( var uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {

					this.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );

				}

			}

		};

		state.startObject( '', false );

		return state;

	}

	//

	function OBJLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		this.materials = null;

	}

	OBJLoader.prototype = {

		constructor: OBJLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new THREE.FileLoader( scope.manager );
			loader.setPath( this.path );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( text ) );

			}, onProgress, onError );

		},

		setPath: function ( value ) {

			this.path = value;

			return this;

		},

		setMaterials: function ( materials ) {

			this.materials = materials;

			return this;

		},

		parse: function ( text ) {

			console.time( 'OBJLoader' );

			var state = new ParserState();

			if ( text.indexOf( '\r\n' ) !== - 1 ) {

				// This is faster than String.split with regex that splits on both
				text = text.replace( /\r\n/g, '\n' );

			}

			if ( text.indexOf( '\\\n' ) !== - 1 ) {

				// join lines separated by a line continuation character (\)
				text = text.replace( /\\\n/g, '' );

			}

			var lines = text.split( '\n' );
			var line = '', lineFirstChar = '';
			var lineLength = 0;
			var result = [];

			// Faster to just trim left side of the line. Use if available.
			var trimLeft = ( typeof ''.trimLeft === 'function' );

			for ( var i = 0, l = lines.length; i < l; i ++ ) {

				line = lines[ i ];

				line = trimLeft ? line.trimLeft() : line.trim();

				lineLength = line.length;

				if ( lineLength === 0 ) continue;

				lineFirstChar = line.charAt( 0 );

				// @todo invoke passed in handler if any
				if ( lineFirstChar === '#' ) continue;

				if ( lineFirstChar === 'v' ) {

					var data = line.split( /\s+/ );

					switch ( data[ 0 ] ) {

						case 'v':
							state.vertices.push(
								parseFloat( data[ 1 ] ),
								parseFloat( data[ 2 ] ),
								parseFloat( data[ 3 ] )
							);
							if ( data.length >= 7 ) {

								state.colors.push(
									parseFloat( data[ 4 ] ),
									parseFloat( data[ 5 ] ),
									parseFloat( data[ 6 ] )

								);

							}
							break;
						case 'vn':
							state.normals.push(
								parseFloat( data[ 1 ] ),
								parseFloat( data[ 2 ] ),
								parseFloat( data[ 3 ] )
							);
							break;
						case 'vt':
							state.uvs.push(
								parseFloat( data[ 1 ] ),
								parseFloat( data[ 2 ] )
							);
							break;

					}

				} else if ( lineFirstChar === 'f' ) {

					var lineData = line.substr( 1 ).trim();
					var vertexData = lineData.split( /\s+/ );
					var faceVertices = [];

					// Parse the face vertex data into an easy to work with format

					for ( var j = 0, jl = vertexData.length; j < jl; j ++ ) {

						var vertex = vertexData[ j ];

						if ( vertex.length > 0 ) {

							var vertexParts = vertex.split( '/' );
							faceVertices.push( vertexParts );

						}

					}

					// Draw an edge between the first vertex and all subsequent vertices to form an n-gon

					var v1 = faceVertices[ 0 ];

					for ( var j = 1, jl = faceVertices.length - 1; j < jl; j ++ ) {

						var v2 = faceVertices[ j ];
						var v3 = faceVertices[ j + 1 ];

						state.addFace(
							v1[ 0 ], v2[ 0 ], v3[ 0 ],
							v1[ 1 ], v2[ 1 ], v3[ 1 ],
							v1[ 2 ], v2[ 2 ], v3[ 2 ]
						);

					}

				} else if ( lineFirstChar === 'l' ) {

					var lineParts = line.substring( 1 ).trim().split( " " );
					var lineVertices = [], lineUVs = [];

					if ( line.indexOf( "/" ) === - 1 ) {

						lineVertices = lineParts;

					} else {

						for ( var li = 0, llen = lineParts.length; li < llen; li ++ ) {

							var parts = lineParts[ li ].split( "/" );

							if ( parts[ 0 ] !== "" ) lineVertices.push( parts[ 0 ] );
							if ( parts[ 1 ] !== "" ) lineUVs.push( parts[ 1 ] );

						}

					}
					state.addLineGeometry( lineVertices, lineUVs );

				} else if ( lineFirstChar === 'p' ) {

					var lineData = line.substr( 1 ).trim();
					var pointData = lineData.split( " " );

					state.addPointGeometry( pointData );

				} else if ( ( result = object_pattern.exec( line ) ) !== null ) {

					// o object_name
					// or
					// g group_name

					// WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869
					// var name = result[ 0 ].substr( 1 ).trim();
					var name = ( " " + result[ 0 ].substr( 1 ).trim() ).substr( 1 );

					state.startObject( name );

				} else if ( material_use_pattern.test( line ) ) {

					// material

					state.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );

				} else if ( material_library_pattern.test( line ) ) {

					// mtl file

					state.materialLibraries.push( line.substring( 7 ).trim() );

				} else if ( lineFirstChar === 's' ) {

					result = line.split( ' ' );

					// smooth shading

					// @todo Handle files that have varying smooth values for a set of faces inside one geometry,
					// but does not define a usemtl for each face set.
					// This should be detected and a dummy material created (later MultiMaterial and geometry groups).
					// This requires some care to not create extra material on each smooth value for "normal" obj files.
					// where explicit usemtl defines geometry groups.
					// Example asset: examples/models/obj/cerberus/Cerberus.obj

					/*
					 * http://paulbourke.net/dataformats/obj/
					 * or
					 * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf
					 *
					 * From chapter "Grouping" Syntax explanation "s group_number":
					 * "group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.
					 * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form
					 * surfaces, smoothing groups are either turned on or off; there is no difference between values greater
					 * than 0."
					 */
					if ( result.length > 1 ) {

						var value = result[ 1 ].trim().toLowerCase();
						state.object.smooth = ( value !== '0' && value !== 'off' );

					} else {

						// ZBrush can produce "s" lines #11707
						state.object.smooth = true;

					}
					var material = state.object.currentMaterial();
					if ( material ) material.smooth = state.object.smooth;

				} else {

					// Handle null terminated files without exception
					if ( line === '\0' ) continue;

					throw new Error( 'THREE.OBJLoader: Unexpected line: "' + line + '"' );

				}

			}

			state.finalize();

			var container = new THREE.Group();
			container.materialLibraries = [].concat( state.materialLibraries );

			for ( var i = 0, l = state.objects.length; i < l; i ++ ) {

				var object = state.objects[ i ];
				var geometry = object.geometry;
				var materials = object.materials;
				var isLine = ( geometry.type === 'Line' );
				var isPoints = ( geometry.type === 'Points' );
				var hasVertexColors = false;

				// Skip o/g line declarations that did not follow with any faces
				if ( geometry.vertices.length === 0 ) continue;

				var buffergeometry = new THREE.BufferGeometry();

				buffergeometry.addAttribute( 'position', new THREE.Float32BufferAttribute( geometry.vertices, 3 ) );

				if ( geometry.normals.length > 0 ) {

					buffergeometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( geometry.normals, 3 ) );

				} else {

					buffergeometry.computeVertexNormals();

				}

				if ( geometry.colors.length > 0 ) {

					hasVertexColors = true;
					buffergeometry.addAttribute( 'color', new THREE.Float32BufferAttribute( geometry.colors, 3 ) );

				}

				if ( geometry.uvs.length > 0 ) {

					buffergeometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( geometry.uvs, 2 ) );

				}

				// Create materials

				var createdMaterials = [];

				for ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {

					var sourceMaterial = materials[ mi ];
					var material = undefined;

					if ( this.materials !== null ) {

						material = this.materials.create( sourceMaterial.name );

						// mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.
						if ( isLine && material && ! ( material instanceof THREE.LineBasicMaterial ) ) {

							var materialLine = new THREE.LineBasicMaterial();
							THREE.Material.prototype.copy.call( materialLine, material );
							materialLine.color.copy( material.color );
							materialLine.lights = false;
							material = materialLine;

						} else if ( isPoints && material && ! ( material instanceof THREE.PointsMaterial ) ) {

							var materialPoints = new THREE.PointsMaterial( { size: 10, sizeAttenuation: false } );
							THREE.Material.prototype.copy.call( materialPoints, material );
							materialPoints.color.copy( material.color );
							materialPoints.map = material.map;
							materialPoints.lights = false;
							material = materialPoints;

						}

					}

					if ( ! material ) {

						if ( isLine ) {

							material = new THREE.LineBasicMaterial();

						} else if ( isPoints ) {

							material = new THREE.PointsMaterial( { size: 1, sizeAttenuation: false } );

						} else {

							material = new THREE.MeshPhongMaterial();

						}

						material.name = sourceMaterial.name;

					}

					material.flatShading = sourceMaterial.smooth ? false : true;
					material.vertexColors = hasVertexColors ? THREE.VertexColors : THREE.NoColors;

					createdMaterials.push( material );

				}

				// Create mesh

				var mesh;

				if ( createdMaterials.length > 1 ) {

					for ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {

						var sourceMaterial = materials[ mi ];
						buffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );

					}

					if ( isLine ) {

						mesh = new THREE.LineSegments( buffergeometry, createdMaterials );

					} else if ( isPoints ) {

						mesh = new THREE.Points( buffergeometry, createdMaterials );

					} else {

						mesh = new THREE.Mesh( buffergeometry, createdMaterials );

					}

				} else {

					if ( isLine ) {

						mesh = new THREE.LineSegments( buffergeometry, createdMaterials[ 0 ] );

					} else if ( isPoints ) {

						mesh = new THREE.Points( buffergeometry, createdMaterials[ 0 ] );

					} else {

						mesh = new THREE.Mesh( buffergeometry, createdMaterials[ 0 ] );

					}

				}

				mesh.name = object.name;

				container.add( mesh );

			}

			console.timeEnd( 'OBJLoader' );

			return container;

		}

	};

	return OBJLoader;

} )();


/***/ }),

/***/ "../../node_modules/three/examples/js/loaders/PLYLoader.js":
/*!*****************************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/three/examples/js/loaders/PLYLoader.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * @author Wei Meng / http://about.me/menway
 *
 * Description: A THREE loader for PLY ASCII files (known as the Polygon
 * File Format or the Stanford Triangle Format).
 *
 * Limitations: ASCII decoding assumes file is UTF-8.
 *
 * Usage:
 *	var loader = new THREE.PLYLoader();
 *	loader.load('./models/ply/ascii/dolphins.ply', function (geometry) {
 *
 *		scene.add( new THREE.Mesh( geometry ) );
 *
 *	} );
 *
 * If the PLY file uses non standard property names, they can be mapped while
 * loading. For example, the following maps the properties
 * “diffuse_(red|green|blue)” in the file to standard color names.
 *
 * loader.setPropertyNameMapping( {
 *	diffuse_red: 'red',
 *	diffuse_green: 'green',
 *	diffuse_blue: 'blue'
 * } );
 *
 */


THREE.PLYLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	this.propertyNameMapping = {};

};

THREE.PLYLoader.prototype = {

	constructor: THREE.PLYLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new THREE.FileLoader( this.manager );
		loader.setPath( this.path );
		loader.setResponseType( 'arraybuffer' );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( text ) );

		}, onProgress, onError );

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	},

	setPropertyNameMapping: function ( mapping ) {

		this.propertyNameMapping = mapping;

	},

	parse: function ( data ) {

		function parseHeader( data ) {

			var patternHeader = /ply([\s\S]*)end_header\r?\n/;
			var headerText = '';
			var headerLength = 0;
			var result = patternHeader.exec( data );

			if ( result !== null ) {

				headerText = result[ 1 ];
				headerLength = result[ 0 ].length;

			}

			var header = {
				comments: [],
				elements: [],
				headerLength: headerLength
			};

			var lines = headerText.split( '\n' );
			var currentElement;
			var lineType, lineValues;

			function make_ply_element_property( propertValues, propertyNameMapping ) {

				var property = { type: propertValues[ 0 ] };

				if ( property.type === 'list' ) {

					property.name = propertValues[ 3 ];
					property.countType = propertValues[ 1 ];
					property.itemType = propertValues[ 2 ];

				} else {

					property.name = propertValues[ 1 ];

				}

				if ( property.name in propertyNameMapping ) {

					property.name = propertyNameMapping[ property.name ];

				}

				return property;

			}

			for ( var i = 0; i < lines.length; i ++ ) {

				var line = lines[ i ];
				line = line.trim();

				if ( line === '' ) continue;

				lineValues = line.split( /\s+/ );
				lineType = lineValues.shift();
				line = lineValues.join( ' ' );

				switch ( lineType ) {

					case 'format':

						header.format = lineValues[ 0 ];
						header.version = lineValues[ 1 ];

						break;

					case 'comment':

						header.comments.push( line );

						break;

					case 'element':

						if ( currentElement !== undefined ) {

							header.elements.push( currentElement );

						}

						currentElement = {};
						currentElement.name = lineValues[ 0 ];
						currentElement.count = parseInt( lineValues[ 1 ] );
						currentElement.properties = [];

						break;

					case 'property':

						currentElement.properties.push( make_ply_element_property( lineValues, scope.propertyNameMapping ) );

						break;


					default:

						console.log( 'unhandled', lineType, lineValues );

				}

			}

			if ( currentElement !== undefined ) {

				header.elements.push( currentElement );

			}

			return header;

		}

		function parseASCIINumber( n, type ) {

			switch ( type ) {

				case 'char': case 'uchar': case 'short': case 'ushort': case 'int': case 'uint':
				case 'int8': case 'uint8': case 'int16': case 'uint16': case 'int32': case 'uint32':

					return parseInt( n );

				case 'float': case 'double': case 'float32': case 'float64':

					return parseFloat( n );

			}

		}

		function parseASCIIElement( properties, line ) {

			var values = line.split( /\s+/ );

			var element = {};

			for ( var i = 0; i < properties.length; i ++ ) {

				if ( properties[ i ].type === 'list' ) {

					var list = [];
					var n = parseASCIINumber( values.shift(), properties[ i ].countType );

					for ( var j = 0; j < n; j ++ ) {

						list.push( parseASCIINumber( values.shift(), properties[ i ].itemType ) );

					}

					element[ properties[ i ].name ] = list;

				} else {

					element[ properties[ i ].name ] = parseASCIINumber( values.shift(), properties[ i ].type );

				}

			}

			return element;

		}

		function parseASCII( data, header ) {

			// PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)

			var buffer = {
				indices: [],
				vertices: [],
				normals: [],
				uvs: [],
				faceVertexUvs: [],
				colors: []
			};

			var result;

			var patternBody = /end_header\s([\s\S]*)$/;
			var body = '';
			if ( ( result = patternBody.exec( data ) ) !== null ) {

				body = result[ 1 ];

			}

			var lines = body.split( '\n' );
			var currentElement = 0;
			var currentElementCount = 0;

			for ( var i = 0; i < lines.length; i ++ ) {

				var line = lines[ i ];
				line = line.trim();
				if ( line === '' ) {

					continue;

				}

				if ( currentElementCount >= header.elements[ currentElement ].count ) {

					currentElement ++;
					currentElementCount = 0;

				}

				var element = parseASCIIElement( header.elements[ currentElement ].properties, line );

				handleElement( buffer, header.elements[ currentElement ].name, element );

				currentElementCount ++;

			}

			return postProcess( buffer );

		}

		function postProcess( buffer ) {

			var geometry = new THREE.BufferGeometry();

			// mandatory buffer data

			if ( buffer.indices.length > 0 ) {

				geometry.setIndex( buffer.indices );

			}

			geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( buffer.vertices, 3 ) );

			// optional buffer data

			if ( buffer.normals.length > 0 ) {

				geometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( buffer.normals, 3 ) );

			}

			if ( buffer.uvs.length > 0 ) {

				geometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( buffer.uvs, 2 ) );

			}

			if ( buffer.colors.length > 0 ) {

				geometry.addAttribute( 'color', new THREE.Float32BufferAttribute( buffer.colors, 3 ) );

			}

			if ( buffer.faceVertexUvs.length > 0 ) {

				geometry = geometry.toNonIndexed();
				geometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( buffer.faceVertexUvs, 2 ) );

			}

			geometry.computeBoundingSphere();

			return geometry;

		}

		function handleElement( buffer, elementName, element ) {

			if ( elementName === 'vertex' ) {

				buffer.vertices.push( element.x, element.y, element.z );

				if ( 'nx' in element && 'ny' in element && 'nz' in element ) {

					buffer.normals.push( element.nx, element.ny, element.nz );

				}

				if ( 's' in element && 't' in element ) {

					buffer.uvs.push( element.s, element.t );

				}

				if ( 'red' in element && 'green' in element && 'blue' in element ) {

					buffer.colors.push( element.red / 255.0, element.green / 255.0, element.blue / 255.0 );

				}

			} else if ( elementName === 'face' ) {

				var vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338
				var texcoord = element.texcoord;

				if ( vertex_indices.length === 3 ) {

					buffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 2 ] );

					if ( texcoord && texcoord.length === 6 ) {

						buffer.faceVertexUvs.push( texcoord[ 0 ], texcoord[ 1 ] );
						buffer.faceVertexUvs.push( texcoord[ 2 ], texcoord[ 3 ] );
						buffer.faceVertexUvs.push( texcoord[ 4 ], texcoord[ 5 ] );

					}

				} else if ( vertex_indices.length === 4 ) {

					buffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 3 ] );
					buffer.indices.push( vertex_indices[ 1 ], vertex_indices[ 2 ], vertex_indices[ 3 ] );

				}

			}

		}

		function binaryRead( dataview, at, type, little_endian ) {

			switch ( type ) {

				// corespondences for non-specific length types here match rply:
				case 'int8':		case 'char':	 return [ dataview.getInt8( at ), 1 ];
				case 'uint8':		case 'uchar':	 return [ dataview.getUint8( at ), 1 ];
				case 'int16':		case 'short':	 return [ dataview.getInt16( at, little_endian ), 2 ];
				case 'uint16':	case 'ushort': return [ dataview.getUint16( at, little_endian ), 2 ];
				case 'int32':		case 'int':		 return [ dataview.getInt32( at, little_endian ), 4 ];
				case 'uint32':	case 'uint':	 return [ dataview.getUint32( at, little_endian ), 4 ];
				case 'float32': case 'float':	 return [ dataview.getFloat32( at, little_endian ), 4 ];
				case 'float64': case 'double': return [ dataview.getFloat64( at, little_endian ), 8 ];

			}

		}

		function binaryReadElement( dataview, at, properties, little_endian ) {

			var element = {};
			var result, read = 0;

			for ( var i = 0; i < properties.length; i ++ ) {

				if ( properties[ i ].type === 'list' ) {

					var list = [];

					result = binaryRead( dataview, at + read, properties[ i ].countType, little_endian );
					var n = result[ 0 ];
					read += result[ 1 ];

					for ( var j = 0; j < n; j ++ ) {

						result = binaryRead( dataview, at + read, properties[ i ].itemType, little_endian );
						list.push( result[ 0 ] );
						read += result[ 1 ];

					}

					element[ properties[ i ].name ] = list;

				} else {

					result = binaryRead( dataview, at + read, properties[ i ].type, little_endian );
					element[ properties[ i ].name ] = result[ 0 ];
					read += result[ 1 ];

				}

			}

			return [ element, read ];

		}

		function parseBinary( data, header ) {

			var buffer = {
				indices: [],
				vertices: [],
				normals: [],
				uvs: [],
				faceVertexUvs: [],
				colors: []
			};

			var little_endian = ( header.format === 'binary_little_endian' );
			var body = new DataView( data, header.headerLength );
			var result, loc = 0;

			for ( var currentElement = 0; currentElement < header.elements.length; currentElement ++ ) {

				for ( var currentElementCount = 0; currentElementCount < header.elements[ currentElement ].count; currentElementCount ++ ) {

					result = binaryReadElement( body, loc, header.elements[ currentElement ].properties, little_endian );
					loc += result[ 1 ];
					var element = result[ 0 ];

					handleElement( buffer, header.elements[ currentElement ].name, element );

				}

			}

			return postProcess( buffer );

		}

		//

		var geometry;
		var scope = this;

		if ( data instanceof ArrayBuffer ) {

			var text = THREE.LoaderUtils.decodeText( new Uint8Array( data ) );
			var header = parseHeader( text );

			geometry = header.format === 'ascii' ? parseASCII( text, header ) : parseBinary( data, header );

		} else {

			geometry = parseASCII( data, parseHeader( data ) );

		}

		return geometry;

	}

};


/***/ }),

/***/ "../../node_modules/uri-js/dist/es5/uri.all.js":
/*!*****************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/uri-js/dist/es5/uri.all.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/** @license URI.js v4.2.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
(function (global, factory) {
	 true ? factory(exports) :
	undefined;
}(this, (function (exports) { 'use strict';

function merge() {
    for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
        sets[_key] = arguments[_key];
    }

    if (sets.length > 1) {
        sets[0] = sets[0].slice(0, -1);
        var xl = sets.length - 1;
        for (var x = 1; x < xl; ++x) {
            sets[x] = sets[x].slice(1, -1);
        }
        sets[xl] = sets[xl].slice(1);
        return sets.join('');
    } else {
        return sets[0];
    }
}
function subexp(str) {
    return "(?:" + str + ")";
}
function typeOf(o) {
    return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
}
function toUpperCase(str) {
    return str.toUpperCase();
}
function toArray(obj) {
    return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
}
function assign(target, source) {
    var obj = target;
    if (source) {
        for (var key in source) {
            obj[key] = source[key];
        }
    }
    return obj;
}

function buildExps(isIRI) {
    var ALPHA$$ = "[A-Za-z]",
        CR$ = "[\\x0D]",
        DIGIT$$ = "[0-9]",
        DQUOTE$$ = "[\\x22]",
        HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),
        //case-insensitive
    LF$$ = "[\\x0A]",
        SP$$ = "[\\x20]",
        PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)),
        //expanded
    GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
        SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
        RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
        UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]",
        //subset, excludes bidi control characters
    IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
        //subset
    UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$),
        SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"),
        USERINFO$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*"),
        DEC_OCTET$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("[1-9]" + DIGIT$$) + "|" + DIGIT$$),
        DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),
        //relaxed parsing rules
    IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
        H16$ = subexp(HEXDIG$$ + "{1,4}"),
        LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
        IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),
        //                           6( h16 ":" ) ls32
    IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),
        //                      "::" 5( h16 ":" ) ls32
    IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),
        //[               h16 ] "::" 4( h16 ":" ) ls32
    IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$),
        //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
    IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$),
        //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
    IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),
        //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
    IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),
        //[ *4( h16 ":" ) h16 ] "::"              ls32
    IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),
        //[ *5( h16 ":" ) h16 ] "::"              h16
    IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
        //[ *6( h16 ":" ) h16 ] "::"
    IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
        ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+"),
        //RFC 6874
    IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$),
        //RFC 6874
    IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + ZONEID$),
        //RFC 6874, with relaxed parsing rules
    IPVFUTURE$ = subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+"),
        IP_LITERAL$ = subexp("\\[" + subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"),
        //RFC 6874
    REG_NAME$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*"),
        HOST$ = subexp(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")" + "|" + REG_NAME$),
        PORT$ = subexp(DIGIT$$ + "*"),
        AUTHORITY$ = subexp(subexp(USERINFO$ + "@") + "?" + HOST$ + subexp("\\:" + PORT$) + "?"),
        PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]")),
        SEGMENT$ = subexp(PCHAR$ + "*"),
        SEGMENT_NZ$ = subexp(PCHAR$ + "+"),
        SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+"),
        PATH_ABEMPTY$ = subexp(subexp("\\/" + SEGMENT$) + "*"),
        PATH_ABSOLUTE$ = subexp("\\/" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"),
        //simplified
    PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),
        //simplified
    PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),
        //simplified
    PATH_EMPTY$ = "(?!" + PCHAR$ + ")",
        PATH$ = subexp(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
        QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*"),
        FRAGMENT$ = subexp(subexp(PCHAR$ + "|[\\/\\?]") + "*"),
        HIER_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
        URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"),
        RELATIVE_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$),
        RELATIVE$ = subexp(RELATIVE_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"),
        URI_REFERENCE$ = subexp(URI$ + "|" + RELATIVE$),
        ABSOLUTE_URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?"),
        GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
        RELATIVE_REF$ = "^(){0}" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
        ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?$",
        SAMEDOC_REF$ = "^" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
        AUTHORITY_REF$ = "^" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?$";
    return {
        NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
        NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
        NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
        ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        UNRESERVED: new RegExp(UNRESERVED$$, "g"),
        OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
        PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
        IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
        IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules
    };
}
var URI_PROTOCOL = buildExps(false);

var IRI_PROTOCOL = buildExps(true);

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();













var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

/** Highest positive signed 32-bit float value */

var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

/** Bootstring parameters */
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter = '-'; // '\x2D'

/** Regular expressions */
var regexPunycode = /^xn--/;
var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

/** Error messages */
var errors = {
	'overflow': 'Overflow: input needs wider integers to process',
	'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
	'invalid-input': 'Invalid input'
};

/** Convenience shortcuts */
var baseMinusTMin = base - tMin;
var floor = Math.floor;
var stringFromCharCode = String.fromCharCode;

/*--------------------------------------------------------------------------*/

/**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */
function error$1(type) {
	throw new RangeError(errors[type]);
}

/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */
function map(array, fn) {
	var result = [];
	var length = array.length;
	while (length--) {
		result[length] = fn(array[length]);
	}
	return result;
}

/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {Array} A new string of characters returned by the callback
 * function.
 */
function mapDomain(string, fn) {
	var parts = string.split('@');
	var result = '';
	if (parts.length > 1) {
		// In email addresses, only the domain name should be punycoded. Leave
		// the local part (i.e. everything up to `@`) intact.
		result = parts[0] + '@';
		string = parts[1];
	}
	// Avoid `split(regex)` for IE8 compatibility. See #17.
	string = string.replace(regexSeparators, '\x2E');
	var labels = string.split('.');
	var encoded = map(labels, fn).join('.');
	return result + encoded;
}

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */
function ucs2decode(string) {
	var output = [];
	var counter = 0;
	var length = string.length;
	while (counter < length) {
		var value = string.charCodeAt(counter++);
		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
			// It's a high surrogate, and there is a next character.
			var extra = string.charCodeAt(counter++);
			if ((extra & 0xFC00) == 0xDC00) {
				// Low surrogate.
				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
			} else {
				// It's an unmatched surrogate; only append this code unit, in case the
				// next code unit is the high surrogate of a surrogate pair.
				output.push(value);
				counter--;
			}
		} else {
			output.push(value);
		}
	}
	return output;
}

/**
 * Creates a string based on an array of numeric code points.
 * @see `punycode.ucs2.decode`
 * @memberOf punycode.ucs2
 * @name encode
 * @param {Array} codePoints The array of numeric code points.
 * @returns {String} The new Unicode string (UCS-2).
 */
var ucs2encode = function ucs2encode(array) {
	return String.fromCodePoint.apply(String, toConsumableArray(array));
};

/**
 * Converts a basic code point into a digit/integer.
 * @see `digitToBasic()`
 * @private
 * @param {Number} codePoint The basic numeric code point value.
 * @returns {Number} The numeric value of a basic code point (for use in
 * representing integers) in the range `0` to `base - 1`, or `base` if
 * the code point does not represent a value.
 */
var basicToDigit = function basicToDigit(codePoint) {
	if (codePoint - 0x30 < 0x0A) {
		return codePoint - 0x16;
	}
	if (codePoint - 0x41 < 0x1A) {
		return codePoint - 0x41;
	}
	if (codePoint - 0x61 < 0x1A) {
		return codePoint - 0x61;
	}
	return base;
};

/**
 * Converts a digit/integer into a basic code point.
 * @see `basicToDigit()`
 * @private
 * @param {Number} digit The numeric value of a basic code point.
 * @returns {Number} The basic code point whose value (when used for
 * representing integers) is `digit`, which needs to be in the range
 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
 * used; else, the lowercase form is used. The behavior is undefined
 * if `flag` is non-zero and `digit` has no uppercase form.
 */
var digitToBasic = function digitToBasic(digit, flag) {
	//  0..25 map to ASCII a..z or A..Z
	// 26..35 map to ASCII 0..9
	return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 * @private
 */
var adapt = function adapt(delta, numPoints, firstTime) {
	var k = 0;
	delta = firstTime ? floor(delta / damp) : delta >> 1;
	delta += floor(delta / numPoints);
	for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
		delta = floor(delta / baseMinusTMin);
	}
	return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
 * symbols.
 * @memberOf punycode
 * @param {String} input The Punycode string of ASCII-only symbols.
 * @returns {String} The resulting string of Unicode symbols.
 */
var decode = function decode(input) {
	// Don't use UCS-2.
	var output = [];
	var inputLength = input.length;
	var i = 0;
	var n = initialN;
	var bias = initialBias;

	// Handle the basic code points: let `basic` be the number of input code
	// points before the last delimiter, or `0` if there is none, then copy
	// the first basic code points to the output.

	var basic = input.lastIndexOf(delimiter);
	if (basic < 0) {
		basic = 0;
	}

	for (var j = 0; j < basic; ++j) {
		// if it's not a basic code point
		if (input.charCodeAt(j) >= 0x80) {
			error$1('not-basic');
		}
		output.push(input.charCodeAt(j));
	}

	// Main decoding loop: start just after the last delimiter if any basic code
	// points were copied; start at the beginning otherwise.

	for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

		// `index` is the index of the next character to be consumed.
		// Decode a generalized variable-length integer into `delta`,
		// which gets added to `i`. The overflow checking is easier
		// if we increase `i` as we go, then subtract off its starting
		// value at the end to obtain `delta`.
		var oldi = i;
		for (var w = 1, k = base;; /* no condition */k += base) {

			if (index >= inputLength) {
				error$1('invalid-input');
			}

			var digit = basicToDigit(input.charCodeAt(index++));

			if (digit >= base || digit > floor((maxInt - i) / w)) {
				error$1('overflow');
			}

			i += digit * w;
			var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

			if (digit < t) {
				break;
			}

			var baseMinusT = base - t;
			if (w > floor(maxInt / baseMinusT)) {
				error$1('overflow');
			}

			w *= baseMinusT;
		}

		var out = output.length + 1;
		bias = adapt(i - oldi, out, oldi == 0);

		// `i` was supposed to wrap around from `out` to `0`,
		// incrementing `n` each time, so we'll fix that now:
		if (floor(i / out) > maxInt - n) {
			error$1('overflow');
		}

		n += floor(i / out);
		i %= out;

		// Insert `n` at position `i` of the output.
		output.splice(i++, 0, n);
	}

	return String.fromCodePoint.apply(String, output);
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 * @memberOf punycode
 * @param {String} input The string of Unicode symbols.
 * @returns {String} The resulting Punycode string of ASCII-only symbols.
 */
var encode = function encode(input) {
	var output = [];

	// Convert the input in UCS-2 to an array of Unicode code points.
	input = ucs2decode(input);

	// Cache the length.
	var inputLength = input.length;

	// Initialize the state.
	var n = initialN;
	var delta = 0;
	var bias = initialBias;

	// Handle the basic code points.
	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var _currentValue2 = _step.value;

			if (_currentValue2 < 0x80) {
				output.push(stringFromCharCode(_currentValue2));
			}
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	var basicLength = output.length;
	var handledCPCount = basicLength;

	// `handledCPCount` is the number of code points that have been handled;
	// `basicLength` is the number of basic code points.

	// Finish the basic string with a delimiter unless it's empty.
	if (basicLength) {
		output.push(delimiter);
	}

	// Main encoding loop:
	while (handledCPCount < inputLength) {

		// All non-basic code points < n have been handled already. Find the next
		// larger one:
		var m = maxInt;
		var _iteratorNormalCompletion2 = true;
		var _didIteratorError2 = false;
		var _iteratorError2 = undefined;

		try {
			for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
				var currentValue = _step2.value;

				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow.
		} catch (err) {
			_didIteratorError2 = true;
			_iteratorError2 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion2 && _iterator2.return) {
					_iterator2.return();
				}
			} finally {
				if (_didIteratorError2) {
					throw _iteratorError2;
				}
			}
		}

		var handledCPCountPlusOne = handledCPCount + 1;
		if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
			error$1('overflow');
		}

		delta += (m - n) * handledCPCountPlusOne;
		n = m;

		var _iteratorNormalCompletion3 = true;
		var _didIteratorError3 = false;
		var _iteratorError3 = undefined;

		try {
			for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
				var _currentValue = _step3.value;

				if (_currentValue < n && ++delta > maxInt) {
					error$1('overflow');
				}
				if (_currentValue == n) {
					// Represent delta as a generalized variable-length integer.
					var q = delta;
					for (var k = base;; /* no condition */k += base) {
						var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
						if (q < t) {
							break;
						}
						var qMinusT = q - t;
						var baseMinusT = base - t;
						output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}
		} catch (err) {
			_didIteratorError3 = true;
			_iteratorError3 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion3 && _iterator3.return) {
					_iterator3.return();
				}
			} finally {
				if (_didIteratorError3) {
					throw _iteratorError3;
				}
			}
		}

		++delta;
		++n;
	}
	return output.join('');
};

/**
 * Converts a Punycode string representing a domain name or an email address
 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
 * it doesn't matter if you call it on a string that has already been
 * converted to Unicode.
 * @memberOf punycode
 * @param {String} input The Punycoded domain name or email address to
 * convert to Unicode.
 * @returns {String} The Unicode representation of the given Punycode
 * string.
 */
var toUnicode = function toUnicode(input) {
	return mapDomain(input, function (string) {
		return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
	});
};

/**
 * Converts a Unicode string representing a domain name or an email address to
 * Punycode. Only the non-ASCII parts of the domain name will be converted,
 * i.e. it doesn't matter if you call it with a domain that's already in
 * ASCII.
 * @memberOf punycode
 * @param {String} input The domain name or email address to convert, as a
 * Unicode string.
 * @returns {String} The Punycode representation of the given domain name or
 * email address.
 */
var toASCII = function toASCII(input) {
	return mapDomain(input, function (string) {
		return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
	});
};

/*--------------------------------------------------------------------------*/

/** Define the public API */
var punycode = {
	/**
  * A string representing the current Punycode.js version number.
  * @memberOf punycode
  * @type String
  */
	'version': '2.1.0',
	/**
  * An object of methods to convert from JavaScript's internal character
  * representation (UCS-2) to Unicode code points, and back.
  * @see <https://mathiasbynens.be/notes/javascript-encoding>
  * @memberOf punycode
  * @type Object
  */
	'ucs2': {
		'decode': ucs2decode,
		'encode': ucs2encode
	},
	'decode': decode,
	'encode': encode,
	'toASCII': toASCII,
	'toUnicode': toUnicode
};

/**
 * URI.js
 *
 * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
 * @see http://github.com/garycourt/uri-js
 */
/**
 * Copyright 2011 Gary Court. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice, this list of
 *       conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list
 *       of conditions and the following disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 * or implied, of Gary Court.
 */
var SCHEMES = {};
function pctEncChar(chr) {
    var c = chr.charCodeAt(0);
    var e = void 0;
    if (c < 16) e = "%0" + c.toString(16).toUpperCase();else if (c < 128) e = "%" + c.toString(16).toUpperCase();else if (c < 2048) e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();else e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
    return e;
}
function pctDecChars(str) {
    var newStr = "";
    var i = 0;
    var il = str.length;
    while (i < il) {
        var c = parseInt(str.substr(i + 1, 2), 16);
        if (c < 128) {
            newStr += String.fromCharCode(c);
            i += 3;
        } else if (c >= 194 && c < 224) {
            if (il - i >= 6) {
                var c2 = parseInt(str.substr(i + 4, 2), 16);
                newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
            } else {
                newStr += str.substr(i, 6);
            }
            i += 6;
        } else if (c >= 224) {
            if (il - i >= 9) {
                var _c = parseInt(str.substr(i + 4, 2), 16);
                var c3 = parseInt(str.substr(i + 7, 2), 16);
                newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
            } else {
                newStr += str.substr(i, 9);
            }
            i += 9;
        } else {
            newStr += str.substr(i, 3);
            i += 3;
        }
    }
    return newStr;
}
function _normalizeComponentEncoding(components, protocol) {
    function decodeUnreserved(str) {
        var decStr = pctDecChars(str);
        return !decStr.match(protocol.UNRESERVED) ? str : decStr;
    }
    if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
    if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    return components;
}

function _stripLeadingZeros(str) {
    return str.replace(/^0*(.*)/, "$1") || "0";
}
function _normalizeIPv4(host, protocol) {
    var matches = host.match(protocol.IPV4ADDRESS) || [];

    var _matches = slicedToArray(matches, 2),
        address = _matches[1];

    if (address) {
        return address.split(".").map(_stripLeadingZeros).join(".");
    } else {
        return host;
    }
}
function _normalizeIPv6(host, protocol) {
    var matches = host.match(protocol.IPV6ADDRESS) || [];

    var _matches2 = slicedToArray(matches, 3),
        address = _matches2[1],
        zone = _matches2[2];

    if (address) {
        var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),
            _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
            last = _address$toLowerCase$2[0],
            first = _address$toLowerCase$2[1];

        var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
        var lastFields = last.split(":").map(_stripLeadingZeros);
        var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
        var fieldCount = isLastFieldIPv4Address ? 7 : 8;
        var lastFieldsStart = lastFields.length - fieldCount;
        var fields = Array(fieldCount);
        for (var x = 0; x < fieldCount; ++x) {
            fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
        }
        if (isLastFieldIPv4Address) {
            fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
        }
        var allZeroFields = fields.reduce(function (acc, field, index) {
            if (!field || field === "0") {
                var lastLongest = acc[acc.length - 1];
                if (lastLongest && lastLongest.index + lastLongest.length === index) {
                    lastLongest.length++;
                } else {
                    acc.push({ index: index, length: 1 });
                }
            }
            return acc;
        }, []);
        var longestZeroFields = allZeroFields.sort(function (a, b) {
            return b.length - a.length;
        })[0];
        var newHost = void 0;
        if (longestZeroFields && longestZeroFields.length > 1) {
            var newFirst = fields.slice(0, longestZeroFields.index);
            var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
            newHost = newFirst.join(":") + "::" + newLast.join(":");
        } else {
            newHost = fields.join(":");
        }
        if (zone) {
            newHost += "%" + zone;
        }
        return newHost;
    } else {
        return host;
    }
}
var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;
function parse(uriString) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var components = {};
    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
    if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
    var matches = uriString.match(URI_PARSE);
    if (matches) {
        if (NO_MATCH_IS_UNDEFINED) {
            //store each component
            components.scheme = matches[1];
            components.userinfo = matches[3];
            components.host = matches[4];
            components.port = parseInt(matches[5], 10);
            components.path = matches[6] || "";
            components.query = matches[7];
            components.fragment = matches[8];
            //fix port number
            if (isNaN(components.port)) {
                components.port = matches[5];
            }
        } else {
            //IE FIX for improper RegExp matching
            //store each component
            components.scheme = matches[1] || undefined;
            components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
            components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
            components.port = parseInt(matches[5], 10);
            components.path = matches[6] || "";
            components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
            components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined;
            //fix port number
            if (isNaN(components.port)) {
                components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
            }
        }
        if (components.host) {
            //normalize IP hosts
            components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
        }
        //determine reference type
        if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
            components.reference = "same-document";
        } else if (components.scheme === undefined) {
            components.reference = "relative";
        } else if (components.fragment === undefined) {
            components.reference = "absolute";
        } else {
            components.reference = "uri";
        }
        //check for reference errors
        if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
            components.error = components.error || "URI is not a " + options.reference + " reference.";
        }
        //find scheme handler
        var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
        //check if scheme can't handle IRIs
        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
            //if host component is a domain name
            if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
                //convert Unicode IDN -> ASCII IDN
                try {
                    components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
                } catch (e) {
                    components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
                }
            }
            //convert IRI -> URI
            _normalizeComponentEncoding(components, URI_PROTOCOL);
        } else {
            //normalize encodings
            _normalizeComponentEncoding(components, protocol);
        }
        //perform scheme specific parsing
        if (schemeHandler && schemeHandler.parse) {
            schemeHandler.parse(components, options);
        }
    } else {
        components.error = components.error || "URI can not be parsed.";
    }
    return components;
}

function _recomposeAuthority(components, options) {
    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
    var uriTokens = [];
    if (components.userinfo !== undefined) {
        uriTokens.push(components.userinfo);
        uriTokens.push("@");
    }
    if (components.host !== undefined) {
        //normalize IP hosts, add brackets and escape zone separator for IPv6
        uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
            return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
        }));
    }
    if (typeof components.port === "number") {
        uriTokens.push(":");
        uriTokens.push(components.port.toString(10));
    }
    return uriTokens.length ? uriTokens.join("") : undefined;
}

var RDS1 = /^\.\.?\//;
var RDS2 = /^\/\.(\/|$)/;
var RDS3 = /^\/\.\.(\/|$)/;
var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
function removeDotSegments(input) {
    var output = [];
    while (input.length) {
        if (input.match(RDS1)) {
            input = input.replace(RDS1, "");
        } else if (input.match(RDS2)) {
            input = input.replace(RDS2, "/");
        } else if (input.match(RDS3)) {
            input = input.replace(RDS3, "/");
            output.pop();
        } else if (input === "." || input === "..") {
            input = "";
        } else {
            var im = input.match(RDS5);
            if (im) {
                var s = im[0];
                input = input.slice(s.length);
                output.push(s);
            } else {
                throw new Error("Unexpected dot segment condition");
            }
        }
    }
    return output.join("");
}

function serialize(components) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
    var uriTokens = [];
    //find scheme handler
    var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
    //perform scheme specific serialization
    if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
    if (components.host) {
        //if host component is an IPv6 address
        if (protocol.IPV6ADDRESS.test(components.host)) {}
        //TODO: normalize IPv6 address as per RFC 5952

        //if host component is a domain name
        else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
                //convert IDN via punycode
                try {
                    components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
                } catch (e) {
                    components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                }
            }
    }
    //normalize encoding
    _normalizeComponentEncoding(components, protocol);
    if (options.reference !== "suffix" && components.scheme) {
        uriTokens.push(components.scheme);
        uriTokens.push(":");
    }
    var authority = _recomposeAuthority(components, options);
    if (authority !== undefined) {
        if (options.reference !== "suffix") {
            uriTokens.push("//");
        }
        uriTokens.push(authority);
        if (components.path && components.path.charAt(0) !== "/") {
            uriTokens.push("/");
        }
    }
    if (components.path !== undefined) {
        var s = components.path;
        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
            s = removeDotSegments(s);
        }
        if (authority === undefined) {
            s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
        }
        uriTokens.push(s);
    }
    if (components.query !== undefined) {
        uriTokens.push("?");
        uriTokens.push(components.query);
    }
    if (components.fragment !== undefined) {
        uriTokens.push("#");
        uriTokens.push(components.fragment);
    }
    return uriTokens.join(""); //merge tokens into a string
}

function resolveComponents(base, relative) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var skipNormalization = arguments[3];

    var target = {};
    if (!skipNormalization) {
        base = parse(serialize(base, options), options); //normalize base components
        relative = parse(serialize(relative, options), options); //normalize relative components
    }
    options = options || {};
    if (!options.tolerant && relative.scheme) {
        target.scheme = relative.scheme;
        //target.authority = relative.authority;
        target.userinfo = relative.userinfo;
        target.host = relative.host;
        target.port = relative.port;
        target.path = removeDotSegments(relative.path || "");
        target.query = relative.query;
    } else {
        if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
            //target.authority = relative.authority;
            target.userinfo = relative.userinfo;
            target.host = relative.host;
            target.port = relative.port;
            target.path = removeDotSegments(relative.path || "");
            target.query = relative.query;
        } else {
            if (!relative.path) {
                target.path = base.path;
                if (relative.query !== undefined) {
                    target.query = relative.query;
                } else {
                    target.query = base.query;
                }
            } else {
                if (relative.path.charAt(0) === "/") {
                    target.path = removeDotSegments(relative.path);
                } else {
                    if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
                        target.path = "/" + relative.path;
                    } else if (!base.path) {
                        target.path = relative.path;
                    } else {
                        target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
                    }
                    target.path = removeDotSegments(target.path);
                }
                target.query = relative.query;
            }
            //target.authority = base.authority;
            target.userinfo = base.userinfo;
            target.host = base.host;
            target.port = base.port;
        }
        target.scheme = base.scheme;
    }
    target.fragment = relative.fragment;
    return target;
}

function resolve(baseURI, relativeURI, options) {
    var schemelessOptions = assign({ scheme: 'null' }, options);
    return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
}

function normalize(uri, options) {
    if (typeof uri === "string") {
        uri = serialize(parse(uri, options), options);
    } else if (typeOf(uri) === "object") {
        uri = parse(serialize(uri, options), options);
    }
    return uri;
}

function equal(uriA, uriB, options) {
    if (typeof uriA === "string") {
        uriA = serialize(parse(uriA, options), options);
    } else if (typeOf(uriA) === "object") {
        uriA = serialize(uriA, options);
    }
    if (typeof uriB === "string") {
        uriB = serialize(parse(uriB, options), options);
    } else if (typeOf(uriB) === "object") {
        uriB = serialize(uriB, options);
    }
    return uriA === uriB;
}

function escapeComponent(str, options) {
    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
}

function unescapeComponent(str, options) {
    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
}

var handler = {
    scheme: "http",
    domainHost: true,
    parse: function parse(components, options) {
        //report missing host
        if (!components.host) {
            components.error = components.error || "HTTP URIs must have a host.";
        }
        return components;
    },
    serialize: function serialize(components, options) {
        //normalize the default port
        if (components.port === (String(components.scheme).toLowerCase() !== "https" ? 80 : 443) || components.port === "") {
            components.port = undefined;
        }
        //normalize the empty path
        if (!components.path) {
            components.path = "/";
        }
        //NOTE: We do not parse query strings for HTTP URIs
        //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
        //and not the HTTP spec.
        return components;
    }
};

var handler$1 = {
    scheme: "https",
    domainHost: handler.domainHost,
    parse: handler.parse,
    serialize: handler.serialize
};

var O = {};
var isIRI = true;
//RFC 3986
var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + (isIRI ? "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" : "") + "]";
var HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive
var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)); //expanded
//RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
//const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
//const WSP$$ = "[\\x20\\x09]";
//const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
//const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
//const VCHAR$$ = "[\\x21-\\x7E]";
//const WSP$$ = "[\\x20\\x09]";
//const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
//const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
//const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
//const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');
var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
var UNRESERVED = new RegExp(UNRESERVED$$, "g");
var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
var NOT_HFVALUE = NOT_HFNAME;
function decodeUnreserved(str) {
    var decStr = pctDecChars(str);
    return !decStr.match(UNRESERVED) ? str : decStr;
}
var handler$2 = {
    scheme: "mailto",
    parse: function parse$$1(components, options) {
        var mailtoComponents = components;
        var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
        mailtoComponents.path = undefined;
        if (mailtoComponents.query) {
            var unknownHeaders = false;
            var headers = {};
            var hfields = mailtoComponents.query.split("&");
            for (var x = 0, xl = hfields.length; x < xl; ++x) {
                var hfield = hfields[x].split("=");
                switch (hfield[0]) {
                    case "to":
                        var toAddrs = hfield[1].split(",");
                        for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                            to.push(toAddrs[_x]);
                        }
                        break;
                    case "subject":
                        mailtoComponents.subject = unescapeComponent(hfield[1], options);
                        break;
                    case "body":
                        mailtoComponents.body = unescapeComponent(hfield[1], options);
                        break;
                    default:
                        unknownHeaders = true;
                        headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                        break;
                }
            }
            if (unknownHeaders) mailtoComponents.headers = headers;
        }
        mailtoComponents.query = undefined;
        for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
            var addr = to[_x2].split("@");
            addr[0] = unescapeComponent(addr[0]);
            if (!options.unicodeSupport) {
                //convert Unicode IDN -> ASCII IDN
                try {
                    addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
                } catch (e) {
                    mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
                }
            } else {
                addr[1] = unescapeComponent(addr[1], options).toLowerCase();
            }
            to[_x2] = addr.join("@");
        }
        return mailtoComponents;
    },
    serialize: function serialize$$1(mailtoComponents, options) {
        var components = mailtoComponents;
        var to = toArray(mailtoComponents.to);
        if (to) {
            for (var x = 0, xl = to.length; x < xl; ++x) {
                var toAddr = String(to[x]);
                var atIdx = toAddr.lastIndexOf("@");
                var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
                var domain = toAddr.slice(atIdx + 1);
                //convert IDN via punycode
                try {
                    domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
                } catch (e) {
                    components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                }
                to[x] = localPart + "@" + domain;
            }
            components.path = to.join(",");
        }
        var headers = mailtoComponents.headers = mailtoComponents.headers || {};
        if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
        if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
        var fields = [];
        for (var name in headers) {
            if (headers[name] !== O[name]) {
                fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
            }
        }
        if (fields.length) {
            components.query = fields.join("&");
        }
        return components;
    }
};

var URN_PARSE = /^([^\:]+)\:(.*)/;
//RFC 2141
var handler$3 = {
    scheme: "urn",
    parse: function parse$$1(components, options) {
        var matches = components.path && components.path.match(URN_PARSE);
        var urnComponents = components;
        if (matches) {
            var scheme = options.scheme || urnComponents.scheme || "urn";
            var nid = matches[1].toLowerCase();
            var nss = matches[2];
            var urnScheme = scheme + ":" + (options.nid || nid);
            var schemeHandler = SCHEMES[urnScheme];
            urnComponents.nid = nid;
            urnComponents.nss = nss;
            urnComponents.path = undefined;
            if (schemeHandler) {
                urnComponents = schemeHandler.parse(urnComponents, options);
            }
        } else {
            urnComponents.error = urnComponents.error || "URN can not be parsed.";
        }
        return urnComponents;
    },
    serialize: function serialize$$1(urnComponents, options) {
        var scheme = options.scheme || urnComponents.scheme || "urn";
        var nid = urnComponents.nid;
        var urnScheme = scheme + ":" + (options.nid || nid);
        var schemeHandler = SCHEMES[urnScheme];
        if (schemeHandler) {
            urnComponents = schemeHandler.serialize(urnComponents, options);
        }
        var uriComponents = urnComponents;
        var nss = urnComponents.nss;
        uriComponents.path = (nid || options.nid) + ":" + nss;
        return uriComponents;
    }
};

var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
//RFC 4122
var handler$4 = {
    scheme: "urn:uuid",
    parse: function parse(urnComponents, options) {
        var uuidComponents = urnComponents;
        uuidComponents.uuid = uuidComponents.nss;
        uuidComponents.nss = undefined;
        if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
            uuidComponents.error = uuidComponents.error || "UUID is not valid.";
        }
        return uuidComponents;
    },
    serialize: function serialize(uuidComponents, options) {
        var urnComponents = uuidComponents;
        //normalize UUID
        urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
        return urnComponents;
    }
};

SCHEMES[handler.scheme] = handler;
SCHEMES[handler$1.scheme] = handler$1;
SCHEMES[handler$2.scheme] = handler$2;
SCHEMES[handler$3.scheme] = handler$3;
SCHEMES[handler$4.scheme] = handler$4;

exports.SCHEMES = SCHEMES;
exports.pctEncChar = pctEncChar;
exports.pctDecChars = pctDecChars;
exports.parse = parse;
exports.removeDotSegments = removeDotSegments;
exports.serialize = serialize;
exports.resolveComponents = resolveComponents;
exports.resolve = resolve;
exports.normalize = normalize;
exports.equal = equal;
exports.escapeComponent = escapeComponent;
exports.unescapeComponent = unescapeComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));


/***/ }),

/***/ "../../node_modules/word-wrapper/index.js":
/*!************************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/word-wrapper/index.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var newline = /\n/
var newlineChar = '\n'
var whitespace = /\s/

module.exports = function(text, opt) {
    var lines = module.exports.lines(text, opt)
    return lines.map(function(line) {
        return text.substring(line.start, line.end)
    }).join('\n')
}

module.exports.lines = function wordwrap(text, opt) {
    opt = opt||{}

    //zero width results in nothing visible
    if (opt.width === 0 && opt.mode !== 'nowrap') 
        return []

    text = text||''
    var width = typeof opt.width === 'number' ? opt.width : Number.MAX_VALUE
    var start = Math.max(0, opt.start||0)
    var end = typeof opt.end === 'number' ? opt.end : text.length
    var mode = opt.mode

    var measure = opt.measure || monospace
    if (mode === 'pre')
        return pre(measure, text, start, end, width)
    else
        return greedy(measure, text, start, end, width, mode)
}

function idxOf(text, chr, start, end) {
    var idx = text.indexOf(chr, start)
    if (idx === -1 || idx > end)
        return end
    return idx
}

function isWhitespace(chr) {
    return whitespace.test(chr)
}

function pre(measure, text, start, end, width) {
    var lines = []
    var lineStart = start
    for (var i=start; i<end && i<text.length; i++) {
        var chr = text.charAt(i)
        var isNewline = newline.test(chr)

        //If we've reached a newline, then step down a line
        //Or if we've reached the EOF
        if (isNewline || i===end-1) {
            var lineEnd = isNewline ? i : i+1
            var measured = measure(text, lineStart, lineEnd, width)
            lines.push(measured)
            
            lineStart = i+1
        }
    }
    return lines
}

function greedy(measure, text, start, end, width, mode) {
    //A greedy word wrapper based on LibGDX algorithm
    //https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java
    var lines = []

    var testWidth = width
    //if 'nowrap' is specified, we only wrap on newline chars
    if (mode === 'nowrap')
        testWidth = Number.MAX_VALUE

    while (start < end && start < text.length) {
        //get next newline position
        var newLine = idxOf(text, newlineChar, start, end)

        //eat whitespace at start of line
        while (start < newLine) {
            if (!isWhitespace( text.charAt(start) ))
                break
            start++
        }

        //determine visible # of glyphs for the available width
        var measured = measure(text, start, newLine, testWidth)

        var lineEnd = start + (measured.end-measured.start)
        var nextStart = lineEnd + newlineChar.length

        //if we had to cut the line before the next newline...
        if (lineEnd < newLine) {
            //find char to break on
            while (lineEnd > start) {
                if (isWhitespace(text.charAt(lineEnd)))
                    break
                lineEnd--
            }
            if (lineEnd === start) {
                if (nextStart > start + newlineChar.length) nextStart--
                lineEnd = nextStart // If no characters to break, show all.
            } else {
                nextStart = lineEnd
                //eat whitespace at end of line
                while (lineEnd > start) {
                    if (!isWhitespace(text.charAt(lineEnd - newlineChar.length)))
                        break
                    lineEnd--
                }
            }
        }
        if (lineEnd >= start) {
            var result = measure(text, start, lineEnd, testWidth)
            lines.push(result)
        }
        start = nextStart
    }
    return lines
}

//determines the visible number of glyphs within a given width
function monospace(text, start, end, width) {
    var glyphs = Math.min(width, end-start)
    return {
        start: start,
        end: start+glyphs
    }
}

/***/ }),

/***/ "../../node_modules/xtend/immutable.js":
/*!*********************************************************************************!*\
  !*** /home/runner/work/dpo-voyager/dpo-voyager/node_modules/xtend/immutable.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}


/***/ }),

/***/ "./annotations/AnnotationFactory.ts":
/*!******************************************!*\
  !*** ./annotations/AnnotationFactory.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
////////////////////////////////////////////////////////////////////////////////
class AnnotationFactory {
    static registerType(type) {
        if (this.types[type.typeName]) {
            throw new Error(`Annotation type '${type.typeName}' already registered.`);
        }
        this.types[type.typeName] = type;
    }
    static registerDefaultType(type) {
        this.defaultType = type;
    }
    static get typeNames() {
        return [this.defaultTypeName, ...Object.keys(this.types).sort()];
    }
    static get defaultTypeName() {
        return this.defaultType.typeName;
    }
    static getType(typeName) {
        const type = this.types[typeName] || this.defaultType;
        if (!type) {
            throw new Error(`type '${typeName}' not registered and no default type set.`);
        }
        return type;
    }
    static createInstance(annotation, typeName) {
        typeName = typeName || annotation.data.style;
        return new (this.getType(typeName))(annotation);
    }
}
exports.default = AnnotationFactory;
AnnotationFactory.types = {};
AnnotationFactory.defaultType = null;


/***/ }),

/***/ "./annotations/AnnotationSprite.ts":
/*!*****************************************!*\
  !*** ./annotations/AnnotationSprite.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const HTMLSprite_1 = __webpack_require__(/*! @ff/three/HTMLSprite */ "../../libs/ff-three/source/HTMLSprite.ts");
exports.html = HTMLSprite_1.html;
const Annotation_1 = __webpack_require__(/*! ../models/Annotation */ "./models/Annotation.ts");
exports.Annotation = Annotation_1.default;
////////////////////////////////////////////////////////////////////////////////
const _vec3up = new THREE.Vector3(0, 1, 0);
const _vec3dir = new THREE.Vector3();
/**
 * Defines the visual appearance of an annotation.
 * An annotation consists of a 3D (WebGL) part and a 2D (HTML) part.
 *
 * ### Events
 * - *"click"* Emitted if the user clicks on the annotation.
 * - *"link"* Emitted if the user activates a link on the annotation.
 */
class AnnotationSprite extends HTMLSprite_1.default {
    constructor(annotation) {
        super();
        this.annotation = annotation;
        this.matrixAutoUpdate = false;
    }
    /**
     * Returns the type name of this annotation object.
     * @returns {string}
     */
    get typeName() {
        return this.constructor.typeName;
    }
    update() {
        super.update();
        const annotation = this.annotation.data;
        this.position.fromArray(annotation.position);
        _vec3dir.fromArray(annotation.direction).normalize();
        this.quaternion.setFromUnitVectors(_vec3up, _vec3dir);
        this.updateMatrix();
    }
    emitClickEvent() {
        const event = { type: "click", annotation: this.annotation, sprite: this };
        this.dispatchEvent(event);
    }
    emitLinkEvent(link) {
        const event = { type: "link", annotation: this.annotation, sprite: this, link };
        this.dispatchEvent(event);
    }
}
exports.default = AnnotationSprite;
AnnotationSprite.typeName = "Annotation";
////////////////////////////////////////////////////////////////////////////////
class AnnotationElement extends HTMLSprite_1.SpriteElement {
    constructor(sprite) {
        super();
        this.sprite = sprite;
        //this.onClick = this.onClick.bind(this);
        this.discardEvent = this.discardEvent.bind(this);
        this.addEventListener("pointerdown", this.discardEvent);
        this.addEventListener("pointermove", this.discardEvent);
        this.addEventListener("pointerup", this.discardEvent);
        this.addEventListener("pointercancel", this.discardEvent);
        this.addEventListener("click", this.discardEvent);
    }
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-annotation");
    }
    discardEvent(event) {
        event.stopPropagation();
    }
}
exports.AnnotationElement = AnnotationElement;


/***/ }),

/***/ "./annotations/CircleSprite.ts":
/*!*************************************!*\
  !*** ./annotations/CircleSprite.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const createTextGeometry = __webpack_require__(/*! three-bmfont-text */ "../../node_modules/three-bmfont-text/index.js");
const createTextShader = __webpack_require__(/*! three-bmfont-text/shaders/msdf */ "../../node_modules/three-bmfont-text/shaders/msdf.js");
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
__webpack_require__(/*! @ff/ui/Button */ "../../libs/ff-ui/source/Button.ts");
const GPUPicker_1 = __webpack_require__(/*! @ff/three/GPUPicker */ "../../libs/ff-three/source/GPUPicker.ts");
const FontReader_1 = __webpack_require__(/*! client/io/FontReader */ "./io/FontReader.ts");
const AnnotationSprite_1 = __webpack_require__(/*! ./AnnotationSprite */ "./annotations/AnnotationSprite.ts");
const AnnotationFactory_1 = __webpack_require__(/*! ./AnnotationFactory */ "./annotations/AnnotationFactory.ts");
////////////////////////////////////////////////////////////////////////////////
// TODO: Temporary until the framework has centralized font management
const _fontReader = new FontReader_1.default(new THREE.LoadingManager());
const _vec3a = new THREE.Vector3();
const _vec3b = new THREE.Vector3();
const _quat1 = new THREE.Quaternion();
const _mat4 = new THREE.Matrix4();
class CircleSprite extends AnnotationSprite_1.default {
    constructor(annotation) {
        super(annotation);
        this.offset = new THREE.Group();
        this.offset.matrixAutoUpdate = false;
        this.add(this.offset);
        this.ringGeometry = new THREE.RingBufferGeometry(0.45, 0.5, 32);
        this.ringMaterialA = new THREE.MeshBasicMaterial();
        this.ringMaterialB = new THREE.MeshBasicMaterial({
            depthFunc: THREE.GreaterDepth,
            depthWrite: false,
            opacity: CircleSprite.behindOpacity,
            transparent: true
        });
        this.ringMesh = new THREE.Mesh(this.ringGeometry, this.ringMaterialA);
        const ringMeshB = new THREE.Mesh(this.ringGeometry, this.ringMaterialB);
        const innerCircle = new THREE.Mesh(new THREE.CircleBufferGeometry(0.45, 32), new THREE.MeshBasicMaterial({ color: 0, opacity: 0.65, transparent: true }));
        innerCircle.matrixAutoUpdate = false;
        innerCircle.position.set(0, 0, 0.005);
        innerCircle.updateMatrix();
        this.anchorMesh = new THREE.Mesh(new THREE.BufferGeometry(), new THREE.MeshBasicMaterial());
        this.anchorMesh.frustumCulled = false;
        this.offset.add(this.anchorMesh, this.ringMesh, ringMeshB, innerCircle);
        this.markerGeometry = null;
        this.markerA = null;
        this.markerB = null;
        _fontReader.load("fonts/Roboto-Bold").then(font => {
            this.markerMaterialA = new THREE.RawShaderMaterial(createTextShader({
                map: font.texture,
                transparent: true,
                color: 0xffffff,
            }));
            this.markerMaterialB = new THREE.RawShaderMaterial(createTextShader({
                map: font.texture,
                transparent: true,
                opacity: CircleSprite.behindOpacity,
                color: 0xffffff,
                depthFunc: THREE.GreaterDepth,
                depthWrite: false
            }));
            this.markerGeometry = createTextGeometry({ font: font.descriptor });
            this.markerA = new THREE.Mesh(this.markerGeometry, this.markerMaterialA);
            this.markerA.matrixAutoUpdate = false;
            this.markerB = new THREE.Mesh(this.markerGeometry, this.markerMaterialB);
            this.markerB.matrixAutoUpdate = false;
            // we're async here, register marker for picking manually
            GPUPicker_1.default.add(this.markerA, false);
            GPUPicker_1.default.add(this.markerB, false);
            this.offset.add(this.markerA, this.markerB);
            this.update();
        });
        this.update();
    }
    update() {
        const annotation = this.annotation.data;
        const c = annotation.color;
        this.ringMaterialA.color.setRGB(c[0], c[1], c[2]);
        this.ringMaterialB.color.setRGB(c[0], c[1], c[2]);
        //this.anchorMesh.position.set(0, 0, annotation.scale * 0.1);
        if (this.markerA) {
            const length = annotation.marker.length;
            const scale = length > 1 ? 0.013 : 0.016;
            const geometry = this.markerGeometry;
            geometry.update(annotation.marker);
            geometry.computeBoundingBox();
            geometry.boundingBox.getCenter(_vec3a);
            this.markerA.position.set(-scale * (_vec3a.x + 1), scale * _vec3a.y, 0.01);
            this.markerA.scale.set(scale, -scale, -1);
            this.markerA.updateMatrix();
            this.markerB.position.set(-scale * (_vec3a.x + 1), scale * _vec3a.y, 0.01);
            this.markerB.scale.set(scale, -scale, -1);
            this.markerB.updateMatrix();
        }
        super.update();
    }
    renderHTMLElement(element, container, camera) {
        const annotation = this.annotation.data;
        // billboard rotation
        _mat4.copy(camera.matrixWorldInverse);
        _mat4.multiply(this.matrixWorld);
        _mat4.decompose(_vec3a, _quat1, _vec3b);
        this.offset.quaternion.copy(_quat1.inverse());
        // scale annotation with respect to camera distance
        const vpHeight = container.offsetHeight + 250;
        const vpScale = annotation.scale * 55 / vpHeight;
        let scaleFactor = 1;
        if (camera.isPerspectiveCamera) {
            const distZ = -_vec3a.set(0, 0, 0).applyMatrix4(_mat4).z;
            const theta = camera.fov * THREE.Math.DEG2RAD * 0.5;
            scaleFactor = Math.tan(theta) * distZ * vpScale;
        }
        else {
            scaleFactor = camera.size * 0.5 * vpScale;
        }
        this.offset.scale.setScalar(scaleFactor);
        this.offset.position.set(0, (annotation.offset + 1) * scaleFactor * 0.5, 0);
        this.offset.updateMatrix();
        if (annotation.expanded) {
            // calculate screen position of HTML sprite element
            _vec3a.set(0, 0, 0).applyMatrix4(this.anchorMesh.modelViewMatrix).applyMatrix4(camera.projectionMatrix);
            _vec3b.set(0.6, 0.5, 0).applyMatrix4(this.anchorMesh.modelViewMatrix).applyMatrix4(camera.projectionMatrix);
            const centerX = (_vec3a.x + 1) * 0.5 * container.clientWidth;
            const centerY = (1 - _vec3a.y) * 0.5 * container.clientHeight;
            const offsetX = (_vec3b.x + 1) * 0.5 * container.clientWidth - centerX;
            const offsetY = (1 - _vec3b.y) * 0.5 * container.clientHeight - centerY;
            let x = centerX + offsetX;
            let y = centerY + offsetY;
            element.classList.remove("sv-align-right", "sv-align-bottom");
            if (x + element.offsetWidth >= container.offsetWidth) {
                x = centerX - offsetX;
                element.classList.add("sv-align-right");
            }
            if (y + element.offsetHeight >= container.offsetHeight) {
                y = centerY - offsetY;
                element.classList.add("sv-align-bottom");
            }
            element.setPosition(x, y);
        }
    }
    createHTMLElement() {
        return new CircleAnnotation(this);
    }
    updateHTMLElement(element) {
        element.setVisible(this.visible);
        element.requestUpdate();
    }
}
exports.default = CircleSprite;
CircleSprite.typeName = "Circle";
CircleSprite.behindOpacity = 0.2;
AnnotationFactory_1.default.registerType(CircleSprite);
////////////////////////////////////////////////////////////////////////////////
let CircleAnnotation = class CircleAnnotation extends AnnotationSprite_1.AnnotationElement {
    constructor(sprite) {
        super(sprite);
    }
    setVisible(visible) {
        // element is visible only if the annotation is in expanded state
        super.setVisible(visible && this.sprite.annotation.data.expanded);
    }
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-circle-annotation");
    }
    render() {
        const annotation = this.sprite.annotation.data;
        return CustomElement_1.html `<div class="sv-title">${annotation.title}</div>
            <p>${annotation.lead}</p>
            ${annotation.articleId ? CustomElement_1.html `<ff-button inline text="Read more..." icon="document" @click=${this.onClickArticle}></ff-button>` : null}`;
    }
    onClickArticle(event) {
        event.stopPropagation();
        this.sprite.emitLinkEvent(this.sprite.annotation.data.articleId);
    }
};
CircleAnnotation = __decorate([
    CustomElement_1.customElement("sv-circle-annotation")
], CircleAnnotation);


/***/ }),

/***/ "./annotations/ExtendedSprite.ts":
/*!***************************************!*\
  !*** ./annotations/ExtendedSprite.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const math_1 = __webpack_require__(/*! @ff/core/math */ "../../libs/ff-core/source/math.ts");
const Color_1 = __webpack_require__(/*! @ff/core/Color */ "../../libs/ff-core/source/Color.ts");
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
__webpack_require__(/*! @ff/ui/Button */ "../../libs/ff-ui/source/Button.ts");
const AnnotationSprite_1 = __webpack_require__(/*! ./AnnotationSprite */ "./annotations/AnnotationSprite.ts");
const AnnotationFactory_1 = __webpack_require__(/*! ./AnnotationFactory */ "./annotations/AnnotationFactory.ts");
////////////////////////////////////////////////////////////////////////////////
const _quadrantClasses = ["sv-q0", "sv-q1", "sv-q2", "sv-q3"];
const _color = new Color_1.default();
const _offset = new THREE.Vector3(0, 1, 0);
class ExtendedSprite extends AnnotationSprite_1.default {
    constructor(annotation) {
        super(annotation);
        this.quadrant = -1;
        const geometry = new THREE.Geometry();
        geometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 1, 0));
        const material = new THREE.LineBasicMaterial({ color: "#009cde", transparent: true });
        this.stemLine = new THREE.Line(geometry, material);
        this.stemLine.frustumCulled = false;
        this.stemLine.matrixAutoUpdate = false;
        this.add(this.stemLine);
        this.update();
    }
    update() {
        const annotation = this.annotation.data;
        this.stemLine.scale.setScalar(annotation.scale);
        this.stemLine.position.y = annotation.offset;
        this.stemLine.updateMatrix();
        const material = this.stemLine.material;
        material.color.fromArray(annotation.color);
        super.update();
    }
    renderHTMLElement(element, container, camera) {
        super.renderHTMLElement(element, container, camera, this.stemLine, _offset);
        const angleOpacity = math_1.default.scaleLimit(this.viewAngle * math_1.default.RAD2DEG, 90, 100, 1, 0);
        const opacity = this.annotation.data.visible ? angleOpacity : 0;
        this.stemLine.material["opacity"] = opacity;
        element.setOpacity(opacity);
        // update quadrant/orientation
        if (this.orientationQuadrant !== this.quadrant) {
            element.classList.remove(_quadrantClasses[this.quadrant]);
            element.classList.add(_quadrantClasses[this.orientationQuadrant]);
            this.quadrant = this.orientationQuadrant;
        }
    }
    createHTMLElement() {
        return new ExtendedAnnotation(this);
    }
}
exports.default = ExtendedSprite;
ExtendedSprite.typeName = "Extended";
AnnotationFactory_1.default.registerType(ExtendedSprite);
////////////////////////////////////////////////////////////////////////////////
let ExtendedAnnotation = class ExtendedAnnotation extends AnnotationSprite_1.AnnotationElement {
    constructor(sprite) {
        super(sprite);
        this.handler = 0;
        this.isExpanded = undefined;
        this.onClickTitle = this.onClickTitle.bind(this);
        this.onClickArticle = this.onClickArticle.bind(this);
        this.titleElement = this.appendElement("div");
        this.titleElement.classList.add("sv-title");
        this.titleElement.addEventListener("click", this.onClickTitle);
        this.wrapperElement = this.appendElement("div");
        this.contentElement = this.createElement("div", null, this.wrapperElement);
        this.contentElement.classList.add("sv-content");
    }
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-extended-annotation");
    }
    update(changedProperties) {
        super.update(changedProperties);
        const annotation = this.sprite.annotation.data;
        // update title
        this.titleElement.innerText = annotation.title;
        // update content
        const contentTemplate = CustomElement_1.html `<p>${annotation.lead}</p>
            ${annotation.articleId ? CustomElement_1.html `<ff-button inline text="Read more..." icon="document" @click=${this.onClickArticle}></ff-button>` : null}`;
        CustomElement_1.render(contentTemplate, this.contentElement);
        // update color
        _color.fromArray(annotation.color);
        this.style.borderColor = _color.toString();
        // update expanded/collapsed
        if (this.isExpanded !== annotation.expanded) {
            this.isExpanded = annotation.expanded;
            window.clearTimeout(this.handler);
            if (this.isExpanded) {
                this.classList.add("sv-expanded");
                this.contentElement.style.display = "inherit";
                this.contentElement.style.height = this.contentElement.scrollHeight + "px";
            }
            else {
                this.classList.remove("sv-expanded");
                this.contentElement.style.height = "0";
                this.handler = window.setTimeout(() => this.contentElement.style.display = "none", 300);
            }
        }
    }
    onClickTitle(event) {
        event.stopPropagation();
        this.sprite.emitClickEvent();
    }
    onClickArticle(event) {
        event.stopPropagation();
        this.sprite.emitLinkEvent(this.sprite.annotation.data.articleId);
    }
};
ExtendedAnnotation = __decorate([
    CustomElement_1.customElement("sv-extended-annotation")
], ExtendedAnnotation);


/***/ }),

/***/ "./annotations/StandardSprite.ts":
/*!***************************************!*\
  !*** ./annotations/StandardSprite.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const math_1 = __webpack_require__(/*! @ff/core/math */ "../../libs/ff-core/source/math.ts");
const Color_1 = __webpack_require__(/*! @ff/core/Color */ "../../libs/ff-core/source/Color.ts");
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
__webpack_require__(/*! @ff/ui/Button */ "../../libs/ff-ui/source/Button.ts");
const AnnotationSprite_1 = __webpack_require__(/*! ./AnnotationSprite */ "./annotations/AnnotationSprite.ts");
const AnnotationFactory_1 = __webpack_require__(/*! ./AnnotationFactory */ "./annotations/AnnotationFactory.ts");
////////////////////////////////////////////////////////////////////////////////
const _quadrantClasses = ["sv-q0", "sv-q1", "sv-q2", "sv-q3"];
const _color = new Color_1.default();
const _offset = new THREE.Vector3(0, 1, 0);
class StandardSprite extends AnnotationSprite_1.default {
    constructor(annotation) {
        super(annotation);
        this.quadrant = -1;
        const geometry = new THREE.Geometry();
        geometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 1, 0));
        const material = new THREE.LineBasicMaterial({ color: "#009cde", transparent: true });
        this.stemLine = new THREE.Line(geometry, material);
        this.stemLine.frustumCulled = false;
        this.stemLine.matrixAutoUpdate = false;
        this.add(this.stemLine);
        this.update();
    }
    update() {
        const annotation = this.annotation.data;
        this.stemLine.scale.setScalar(annotation.scale);
        this.stemLine.position.y = annotation.offset;
        this.stemLine.updateMatrix();
        const material = this.stemLine.material;
        material.color.fromArray(annotation.color);
        super.update();
    }
    renderHTMLElement(element, container, camera) {
        super.renderHTMLElement(element, container, camera, this.stemLine, _offset);
        const angleOpacity = math_1.default.scaleLimit(this.viewAngle * math_1.default.RAD2DEG, 90, 100, 1, 0);
        const opacity = this.annotation.data.visible ? angleOpacity : 0;
        this.stemLine.material["opacity"] = opacity;
        element.setOpacity(opacity);
        // update quadrant/orientation
        if (this.orientationQuadrant !== this.quadrant) {
            element.classList.remove(_quadrantClasses[this.quadrant]);
            element.classList.add(_quadrantClasses[this.orientationQuadrant]);
            this.quadrant = this.orientationQuadrant;
        }
    }
    createHTMLElement() {
        return new StandardAnnotation(this);
    }
}
exports.default = StandardSprite;
StandardSprite.typeName = "Standard";
AnnotationFactory_1.default.registerDefaultType(StandardSprite);
////////////////////////////////////////////////////////////////////////////////
let StandardAnnotation = class StandardAnnotation extends AnnotationSprite_1.AnnotationElement {
    constructor(sprite) {
        super(sprite);
        this.onClickTitle = this.onClickTitle.bind(this);
        this.titleElement = this.appendElement("div");
        this.titleElement.classList.add("sv-title");
        this.titleElement.addEventListener("click", this.onClickTitle);
    }
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-standard-annotation");
    }
    update(changedProperties) {
        super.update(changedProperties);
        const annotation = this.sprite.annotation.data;
        this.titleElement.innerText = annotation.title;
        _color.fromArray(annotation.color);
        this.style.borderColor = _color.toString();
    }
    onClickTitle(event) {
        event.stopPropagation();
        this.sprite.emitClickEvent();
    }
};
StandardAnnotation = __decorate([
    CustomElement_1.customElement("sv-standard-annotation")
], StandardAnnotation);


/***/ }),

/***/ "./applications/ExplorerApplication.ts":
/*!*********************************************!*\
  !*** ./applications/ExplorerApplication.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const parseUrlParameter_1 = __webpack_require__(/*! @ff/browser/parseUrlParameter */ "../../libs/ff-browser/source/parseUrlParameter.ts");
const Commander_1 = __webpack_require__(/*! @ff/core/Commander */ "../../libs/ff-core/source/Commander.ts");
const TypeRegistry_1 = __webpack_require__(/*! @ff/core/TypeRegistry */ "../../libs/ff-core/source/TypeRegistry.ts");
const Notification_1 = __webpack_require__(/*! @ff/ui/Notification */ "../../libs/ff-ui/source/Notification.ts");
const System_1 = __webpack_require__(/*! @ff/graph/System */ "../../libs/ff-graph/source/System.ts");
const coreTypes_1 = __webpack_require__(/*! ./coreTypes */ "./applications/coreTypes.ts");
const explorerTypes_1 = __webpack_require__(/*! ./explorerTypes */ "./applications/explorerTypes.ts");
const documentTemplate = __webpack_require__(/*! client/templates/default.svx.json */ "./templates/default.svx.json");
const CVDocumentProvider_1 = __webpack_require__(/*! ../components/CVDocumentProvider */ "./components/CVDocumentProvider.ts");
const CVAssetManager_1 = __webpack_require__(/*! ../components/CVAssetManager */ "./components/CVAssetManager.ts");
const CVAssetReader_1 = __webpack_require__(/*! ../components/CVAssetReader */ "./components/CVAssetReader.ts");
const CVAnalytics_1 = __webpack_require__(/*! ../components/CVAnalytics */ "./components/CVAnalytics.ts");
const NVEngine_1 = __webpack_require__(/*! ../nodes/NVEngine */ "./nodes/NVEngine.ts");
const NVDocuments_1 = __webpack_require__(/*! ../nodes/NVDocuments */ "./nodes/NVDocuments.ts");
const NVTools_1 = __webpack_require__(/*! ../nodes/NVTools */ "./nodes/NVTools.ts");
const MainView_1 = __webpack_require__(/*! ../ui/explorer/MainView */ "./ui/explorer/MainView.ts");
const model_1 = __webpack_require__(/*! client/schema/model */ "./schema/model.ts");
/**
 * Voyager Explorer main application.
 */
class ExplorerApplication {
    constructor(parent, props, embedded) {
        this.props = props || {};
        console.log(ExplorerApplication.splashMessage);
        // register components
        const registry = new TypeRegistry_1.default();
        registry.add(coreTypes_1.default);
        registry.add(explorerTypes_1.default);
        this.commander = new Commander_1.default();
        const system = this.system = new System_1.default(registry);
        const engine = system.graph.createCustomNode(NVEngine_1.default);
        system.graph.createCustomNode(NVTools_1.default);
        system.graph.createCustomNode(NVDocuments_1.default);
        // start timing load
        this.analytics.startTimer();
        if (parent) {
            // create a view and attach to parent
            new MainView_1.default(this).appendTo(parent);
        }
        if (!embedded) {
            // initialize default document
            this.documentProvider.createDocument(documentTemplate);
            this.evaluateProps();
        }
        // start rendering
        engine.pulse.start();
    }
    get assetManager() {
        return this.system.getMainComponent(CVAssetManager_1.default);
    }
    get assetReader() {
        return this.system.getMainComponent(CVAssetReader_1.default);
    }
    get documentProvider() {
        return this.system.getMainComponent(CVDocumentProvider_1.default);
    }
    get analytics() {
        return this.system.getMainComponent(CVAnalytics_1.default);
    }
    setBaseUrl(url) {
        this.assetManager.baseUrl = url;
    }
    loadDocument(documentPath, merge, quality) {
        const dq = model_1.EDerivativeQuality[quality];
        return this.assetReader.getJSON(documentPath)
            .then(data => {
            merge = merge === undefined ? !data.lights && !data.cameras : merge;
            return this.documentProvider.amendDocument(data, documentPath, merge);
        })
            .then(document => {
            if (isFinite(dq)) {
                document.setup.viewer.ins.quality.setValue(dq);
            }
            return document;
        });
    }
    loadModel(modelPath, quality) {
        return this.documentProvider.appendModel(modelPath, quality);
    }
    loadGeometry(geoPath, colorMapPath, occlusionMapPath, normalMapPath, quality) {
        return this.documentProvider.appendGeometry(geoPath, colorMapPath, occlusionMapPath, normalMapPath, quality);
    }
    evaluateProps() {
        const props = this.props;
        const manager = this.assetManager;
        props.root = props.root || parseUrlParameter_1.default("root") || parseUrlParameter_1.default("r");
        props.document = props.document || parseUrlParameter_1.default("document") || parseUrlParameter_1.default("d");
        props.model = props.model || parseUrlParameter_1.default("model") || parseUrlParameter_1.default("m");
        props.geometry = props.geometry || parseUrlParameter_1.default("geometry") || parseUrlParameter_1.default("g");
        props.texture = props.texture || parseUrlParameter_1.default("texture") || parseUrlParameter_1.default("t");
        props.occlusion = props.occlusion || parseUrlParameter_1.default("occlusion") || parseUrlParameter_1.default("o");
        props.normals = props.normals || parseUrlParameter_1.default("normals") || parseUrlParameter_1.default("n");
        props.quality = props.quality || parseUrlParameter_1.default("quality") || parseUrlParameter_1.default("q");
        const url = props.root || props.document || props.model || props.geometry;
        this.setBaseUrl(new URL(url || ".", window.location).href);
        if (props.document) {
            // first loading priority: document
            props.document = props.root ? props.document : manager.getAssetName(props.document);
            this.loadDocument(props.document, undefined, props.quality)
                .catch(error => Notification_1.default.show(`Failed to load document: ${error.message}`, "error"));
        }
        else if (props.model) {
            // second loading priority: model
            props.model = props.root ? props.model : manager.getAssetName(props.model);
            this.loadModel(props.model, props.quality);
        }
        else if (props.geometry) {
            // third loading priority: geometry (plus optional color texture)
            props.geometry = props.root ? props.geometry : manager.getAssetName(props.geometry);
            props.texture = props.root ? props.texture : manager.getAssetName(props.texture);
            props.occlusion = props.root ? props.occlusion : manager.getAssetName(props.occlusion);
            props.normals = props.root ? props.normals : manager.getAssetName(props.normals);
            this.loadGeometry(props.geometry, props.texture, props.occlusion, props.normals, props.quality);
        }
        else {
            // if nothing else specified, try to read "document.svx.json" from the current folder
            this.loadDocument("document.svx.json", undefined).catch(() => { });
        }
    }
}
exports.default = ExplorerApplication;
ExplorerApplication.splashMessage = `
  _________       .__  __  .__                        .__                ________ ________   
 /   _____/ _____ |__|/  |_|  |__   __________   ____ |__|____    ____   \\_____  \\\\______ \\  
 \\_____  \\ /     \\|  \\   __\\  |  \\ /  ___/  _ \\ /    \\|  \\__  \\  /    \\    _(__  < |    |  \\ 
 /        \\  Y Y  \\  ||  | |   Y  \\\\___ (  <_> )   |  \\  |/ __ \\|   |  \\  /       \\|    \`   \\
/_______  /__|_|  /__||__| |___|  /____  >____/|___|  /__(____  /___|  / /______  /_______  /
        \\/      \\/              \\/     \\/           \\/        \\/     \\/         \\/        \\/ 
    
Voyager - 3D Explorer and Tool Suite
3D Foundation Project
(c) 2019 Smithsonian Institution

https://3d.si.edu
https://github.com/smithsonian/dpo-voyager

-----------------------------------------------------
Version: ${"Voyager Explorer v0.8.1.1-17-g4752d2e  DEV"}
-----------------------------------------------------
    `;
window["VoyagerExplorer"] = ExplorerApplication;


/***/ }),

/***/ "./applications/coreTypes.ts":
/*!***********************************!*\
  !*** ./applications/coreTypes.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// LIBRARY COMPONENTS //////////////////////////////////////////////////////////
const CGraph_1 = __webpack_require__(/*! @ff/graph/components/CGraph */ "../../libs/ff-graph/source/components/CGraph.ts");
const CPulse_1 = __webpack_require__(/*! @ff/graph/components/CPulse */ "../../libs/ff-graph/source/components/CPulse.ts");
const CComponentProvider_1 = __webpack_require__(/*! @ff/graph/components/CComponentProvider */ "../../libs/ff-graph/source/components/CComponentProvider.ts");
const CNodeProvider_1 = __webpack_require__(/*! @ff/graph/components/CNodeProvider */ "../../libs/ff-graph/source/components/CNodeProvider.ts");
const CTweenMachine_1 = __webpack_require__(/*! @ff/graph/components/CTweenMachine */ "../../libs/ff-graph/source/components/CTweenMachine.ts");
const CRenderer_1 = __webpack_require__(/*! @ff/scene/components/CRenderer */ "../../libs/ff-scene/source/components/CRenderer.ts");
const CFullscreen_1 = __webpack_require__(/*! @ff/scene/components/CFullscreen */ "../../libs/ff-scene/source/components/CFullscreen.ts");
const CPickSelection_1 = __webpack_require__(/*! @ff/scene/components/CPickSelection */ "../../libs/ff-scene/source/components/CPickSelection.ts");
const CScene_1 = __webpack_require__(/*! @ff/scene/components/CScene */ "../../libs/ff-scene/source/components/CScene.ts");
// LIBRARY NODES ///////////////////////////////////////////////////////////////
const Node_1 = __webpack_require__(/*! @ff/graph/Node */ "../../libs/ff-graph/source/Node.ts");
// PROJECT COMPONENTS //////////////////////////////////////////////////////////
const CVAnalytics_1 = __webpack_require__(/*! ../components/CVAnalytics */ "./components/CVAnalytics.ts");
const CVAssetManager_1 = __webpack_require__(/*! ../components/CVAssetManager */ "./components/CVAssetManager.ts");
const CVAssetReader_1 = __webpack_require__(/*! ../components/CVAssetReader */ "./components/CVAssetReader.ts");
const CVDocument_1 = __webpack_require__(/*! ../components/CVDocument */ "./components/CVDocument.ts");
const CVDocumentProvider_1 = __webpack_require__(/*! ../components/CVDocumentProvider */ "./components/CVDocumentProvider.ts");
const CVScene_1 = __webpack_require__(/*! ../components/CVScene */ "./components/CVScene.ts");
const CVSetup_1 = __webpack_require__(/*! ../components/CVSetup */ "./components/CVSetup.ts");
const CVNode_1 = __webpack_require__(/*! ../components/CVNode */ "./components/CVNode.ts");
const CVMeta_1 = __webpack_require__(/*! ../components/CVMeta */ "./components/CVMeta.ts");
const CVModel2_1 = __webpack_require__(/*! ../components/CVModel2 */ "./components/CVModel2.ts");
const CVAnnotations_1 = __webpack_require__(/*! ../components/CVAnnotations */ "./components/CVAnnotations.ts");
const CVAnnotationView_1 = __webpack_require__(/*! ../components/CVAnnotationView */ "./components/CVAnnotationView.ts");
const CVCamera_1 = __webpack_require__(/*! ../components/CVCamera */ "./components/CVCamera.ts");
const CVDirectionalLight_1 = __webpack_require__(/*! ../components/CVDirectionalLight */ "./components/CVDirectionalLight.ts");
const CVPointLight_1 = __webpack_require__(/*! ../components/CVPointLight */ "./components/CVPointLight.ts");
const CVSpotLight_1 = __webpack_require__(/*! ../components/CVSpotLight */ "./components/CVSpotLight.ts");
const CVInterface_1 = __webpack_require__(/*! ../components/CVInterface */ "./components/CVInterface.ts");
const CVViewer_1 = __webpack_require__(/*! ../components/CVViewer */ "./components/CVViewer.ts");
const CVReader_1 = __webpack_require__(/*! ../components/CVReader */ "./components/CVReader.ts");
const CVOrbitNavigation_1 = __webpack_require__(/*! ../components/CVOrbitNavigation */ "./components/CVOrbitNavigation.ts");
const CVBackground_1 = __webpack_require__(/*! ../components/CVBackground */ "./components/CVBackground.ts");
const CVFloor_1 = __webpack_require__(/*! ../components/CVFloor */ "./components/CVFloor.ts");
const CVGrid_1 = __webpack_require__(/*! ../components/CVGrid */ "./components/CVGrid.ts");
const CVTape_1 = __webpack_require__(/*! ../components/CVTape */ "./components/CVTape.ts");
const CVSlicer_1 = __webpack_require__(/*! ../components/CVSlicer */ "./components/CVSlicer.ts");
const CVTours_1 = __webpack_require__(/*! ../components/CVTours */ "./components/CVTours.ts");
const CVSnapshots_1 = __webpack_require__(/*! ../components/CVSnapshots */ "./components/CVSnapshots.ts");
// PROJECT NODES ///////////////////////////////////////////////////////////////
const NVEngine_1 = __webpack_require__(/*! ../nodes/NVEngine */ "./nodes/NVEngine.ts");
const NVDocuments_1 = __webpack_require__(/*! ../nodes/NVDocuments */ "./nodes/NVDocuments.ts");
const NVScene_1 = __webpack_require__(/*! ../nodes/NVScene */ "./nodes/NVScene.ts");
const NVNode_1 = __webpack_require__(/*! ../nodes/NVNode */ "./nodes/NVNode.ts");
////////////////////////////////////////////////////////////////////////////////
const types = [
    CGraph_1.default,
    CPulse_1.default,
    CComponentProvider_1.default,
    CNodeProvider_1.default,
    CTweenMachine_1.default,
    CRenderer_1.default,
    CFullscreen_1.default,
    CPickSelection_1.default,
    CScene_1.default,
    Node_1.default,
    CVAnalytics_1.default,
    CVAssetManager_1.default,
    CVAssetReader_1.default,
    CVDocument_1.default,
    CVDocumentProvider_1.default,
    CVScene_1.default,
    CVSetup_1.default,
    CVNode_1.default,
    CVMeta_1.default,
    CVModel2_1.default,
    CVAnnotations_1.default,
    CVAnnotationView_1.default,
    CVCamera_1.default,
    CVDirectionalLight_1.default,
    CVPointLight_1.default,
    CVSpotLight_1.default,
    CVInterface_1.default,
    CVViewer_1.default,
    CVReader_1.default,
    CVOrbitNavigation_1.default,
    CVBackground_1.default,
    CVFloor_1.default,
    CVGrid_1.default,
    CVTape_1.default,
    CVSlicer_1.default,
    CVTours_1.default,
    CVSnapshots_1.default,
    NVEngine_1.default,
    NVDocuments_1.default,
    NVScene_1.default,
    NVNode_1.default,
];
exports.default = types;


/***/ }),

/***/ "./applications/explorerTypes.ts":
/*!***************************************!*\
  !*** ./applications/explorerTypes.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CVNodeProvider_1 = __webpack_require__(/*! ../components/CVNodeProvider */ "./components/CVNodeProvider.ts");
const CVToolProvider_1 = __webpack_require__(/*! ../components/CVToolProvider */ "./components/CVToolProvider.ts");
const CVViewTool_1 = __webpack_require__(/*! ../components/CVViewTool */ "./components/CVViewTool.ts");
const CVRenderTool_1 = __webpack_require__(/*! ../components/CVRenderTool */ "./components/CVRenderTool.ts");
const CVEnvironmentTool_1 = __webpack_require__(/*! ../components/CVEnvironmentTool */ "./components/CVEnvironmentTool.ts");
const CVLightTool_1 = __webpack_require__(/*! ../components/CVLightTool */ "./components/CVLightTool.ts");
const CVTapeTool_1 = __webpack_require__(/*! ../components/CVTapeTool */ "./components/CVTapeTool.ts");
const CVSliceTool_1 = __webpack_require__(/*! ../components/CVSliceTool */ "./components/CVSliceTool.ts");
const NVTools_1 = __webpack_require__(/*! ../nodes/NVTools */ "./nodes/NVTools.ts");
////////////////////////////////////////////////////////////////////////////////
const types = [
    CVNodeProvider_1.default,
    CVToolProvider_1.default,
    CVViewTool_1.default,
    CVRenderTool_1.default,
    CVEnvironmentTool_1.default,
    CVLightTool_1.default,
    CVTapeTool_1.default,
    CVSliceTool_1.default,
    NVTools_1.default,
];
exports.default = types;


/***/ }),

/***/ "./components/CVAnalytics.ts":
/*!***********************************!*\
  !*** ./components/CVAnalytics.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
////////////////////////////////////////////////////////////////////////////////
class CVAnalytics extends Component_1.default {
    constructor() {
        super(...arguments);
        this._title = "Untitled";
        this._timerStart = 0;
    }
    startTimer() {
        if (this._timerStart === 0)
            this._timerStart = Date.now();
    }
    resetTimer() {
        this._timerStart = 0;
    }
    getTimerTime() {
        return this._timerStart > 0 ? Date.now() - this._timerStart : 0;
    }
    setTitle(title) {
        this._title = title;
    }
    sendProperty(property, value) {
        if ( true && value !== undefined) {
            console.log("GA Event %s %s", property, value.toString());
        }
        // track custom event
        if (typeof ga === "function" && false) {
            const text = value !== undefined ? value.toString() : undefined;
            ga("send", "event", this._title, property, text);
        }
    }
}
exports.default = CVAnalytics;
CVAnalytics.typeName = "CVAnalytics";
CVAnalytics.text = "Analytics";
CVAnalytics.icon = "";
CVAnalytics.isSystemSingleton = true;


/***/ }),

/***/ "./components/CVAnnotationView.ts":
/*!****************************************!*\
  !*** ./components/CVAnnotationView.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const HTMLSpriteGroup_1 = __webpack_require__(/*! @ff/three/HTMLSpriteGroup */ "../../libs/ff-three/source/HTMLSpriteGroup.ts");
const CObject3D_1 = __webpack_require__(/*! @ff/scene/components/CObject3D */ "../../libs/ff-scene/source/components/CObject3D.ts");
const CVModel2_1 = __webpack_require__(/*! ./CVModel2 */ "./components/CVModel2.ts");
const CVMeta_1 = __webpack_require__(/*! ./CVMeta */ "./components/CVMeta.ts");
const CVReader_1 = __webpack_require__(/*! ./CVReader */ "./components/CVReader.ts");
const Annotation_1 = __webpack_require__(/*! ../models/Annotation */ "./models/Annotation.ts");
exports.Annotation = Annotation_1.default;
const AnnotationFactory_1 = __webpack_require__(/*! ../annotations/AnnotationFactory */ "./annotations/AnnotationFactory.ts");
__webpack_require__(/*! ../annotations/StandardSprite */ "./annotations/StandardSprite.ts");
__webpack_require__(/*! ../annotations/ExtendedSprite */ "./annotations/ExtendedSprite.ts");
__webpack_require__(/*! ../annotations/CircleSprite */ "./annotations/CircleSprite.ts");
class CVAnnotationView extends CObject3D_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CVAnnotationView.ins);
        this._activeAnnotation = null;
        this._annotations = {};
        this._viewports = new Set();
        this._sprites = {};
        this.addEvents("active-annotation", "group");
        this.onSpriteClick = this.onSpriteClick.bind(this);
        this.onSpriteLink = this.onSpriteLink.bind(this);
        this.on("pointer-up", this.onPointerUp, this);
        this.system.on("pointer-up", this.onSystemPointerUp, this);
        this.object3D = new HTMLSpriteGroup_1.default();
    }
    get model() {
        return this.getComponent(CVModel2_1.default);
    }
    get meta() {
        return this.getComponent(CVMeta_1.default, true);
    }
    get reader() {
        return this.getGraphComponent(CVReader_1.default, true);
    }
    get articles() {
        const meta = this.meta;
        return meta ? meta.articles : null;
    }
    get activeAnnotation() {
        return this._activeAnnotation;
    }
    set activeAnnotation(annotation) {
        if (annotation !== this._activeAnnotation) {
            const previous = this._activeAnnotation;
            if (previous) {
                previous.set("expanded", false);
                this.updateSprite(previous);
            }
            this._activeAnnotation = annotation;
            if (annotation) {
                annotation.set("expanded", true);
                this.updateSprite(annotation);
            }
            const ins = this.ins;
            ins.marker.setValue(annotation ? annotation.data.marker : "", true);
            ins.title.setValue(annotation ? annotation.data.title : "", true);
            ins.lead.setValue(annotation ? annotation.data.lead : "", true);
            ins.tags.setValue(annotation ? annotation.data.tags.join(", ") : "", true);
            ins.style.setOption(annotation ? annotation.data.style : AnnotationFactory_1.default.defaultTypeName, true);
            ins.scale.setValue(annotation ? annotation.data.scale : 1, true);
            ins.offset.setValue(annotation ? annotation.data.offset : 0, true);
            ins.tilt.setValue(annotation ? annotation.data.tilt : 0, true);
            ins.azimuth.setValue(annotation ? annotation.data.azimuth : 0, true);
            ins.color.setValue(annotation ? annotation.data.color.slice() : [1, 1, 1], true);
            const articles = this.articles;
            if (articles) {
                const names = articles.items.map(article => article.data.title);
                names.unshift("(none)");
                ins.article.setOptions(names);
                const article = annotation ? articles.getById(annotation.data.articleId) : null;
                ins.article.setValue(article ? articles.getIndexOf(article) + 1 : 0, true);
            }
            else {
                ins.article.setOptions(["(none)"]);
                ins.article.setValue(0);
            }
            ins.image.setValue(annotation ? annotation.data.imageUri : "", true);
            this.emit({ type: "annotation-update", annotation });
        }
    }
    setActiveAnnotationById(id) {
        this.activeAnnotation = this._annotations[id];
    }
    update(context) {
        super.update(context);
        const ins = this.ins;
        const object3D = this.object3D;
        const annotation = this.activeAnnotation;
        if (ins.unitScale.changed) {
            object3D.scale.setScalar(ins.unitScale.value);
            object3D.updateMatrix();
        }
        if (ins.activeTags.changed) {
            const activeTags = ins.activeTags.value.split(",").map(tag => tag.trim()).filter(tag => tag);
            for (const key in this._annotations) {
                const annotation = this._annotations[key];
                const tags = annotation.data.tags;
                let visible = tags.length === 0; // annotation is visible by default if no tags
                activeTags.forEach(tag => {
                    if (tags.indexOf(tag) >= 0) {
                        visible = true;
                    }
                });
                annotation.set("visible", visible);
                this.updateSprite(annotation);
            }
        }
        if (annotation) {
            if (ins.marker.changed) {
                annotation.set("marker", ins.marker.value);
            }
            if (ins.title.changed) {
                annotation.set("title", ins.title.value);
            }
            if (ins.lead.changed) {
                annotation.set("lead", ins.lead.value);
            }
            if (ins.tags.changed) {
                annotation.set("tags", ins.tags.value.split(",").map(tag => tag.trim()).filter(tag => tag));
                this.emit({ type: "tag-update" });
            }
            if (ins.style.changed) {
                annotation.set("style", ins.style.getOptionText());
                this.createSprite(annotation);
            }
            if (ins.scale.changed) {
                annotation.set("scale", ins.scale.value);
            }
            if (ins.offset.changed) {
                annotation.set("offset", ins.offset.value);
            }
            if (ins.tilt.changed) {
                annotation.set("tilt", ins.tilt.value);
            }
            if (ins.azimuth.changed) {
                annotation.set("azimuth", ins.azimuth.value);
            }
            if (ins.color.changed) {
                annotation.set("color", ins.color.value.slice());
            }
            if (ins.image.changed) {
                annotation.set("imageUri", ins.image.value);
            }
            if (ins.article.changed) {
                const articles = this.articles;
                const article = articles && articles.getAt(ins.article.getValidatedValue() - 1);
                annotation.set("articleId", article ? article.id : "");
            }
            this.updateSprite(annotation);
            this.emit({ type: "annotation-update", annotation });
        }
        return true;
    }
    tock() {
        // if updated, render a second frame to properly update annotation sprites
        if (this.updated) {
            return true;
        }
    }
    postRender(context) {
        const viewport = context.viewport;
        if (!this._viewports.has(viewport)) {
            viewport.on("dispose", this.onViewportDispose, this);
            this._viewports.add(viewport);
        }
        const spriteGroup = this.object3D;
        spriteGroup.render(viewport.overlay, context.camera);
    }
    dispose() {
        this.object3D.dispose();
        this.off("pointer-up", this.onPointerUp, this);
        this.system.off("pointer-up", this.onSystemPointerUp, this);
        this._viewports.forEach(viewport => viewport.off("dispose", this.onViewportDispose, this));
        this._viewports.clear();
        super.dispose();
    }
    getAnnotations() {
        return Object.keys(this._annotations).map(key => this._annotations[key]);
    }
    // getAnnotationById(id: string)
    // {
    //     return this._annotations[id];
    // }
    addAnnotation(annotation) {
        this._annotations[annotation.id] = annotation;
        this.createSprite(annotation);
        this.changed = true;
    }
    removeAnnotation(annotation) {
        const keys = Object.keys(this._annotations);
        delete this._annotations[annotation.id];
        this.removeSprite(annotation);
        if (annotation === this.activeAnnotation) {
            // select next annotation as active annotation
            const index = Math.min(keys.indexOf(annotation.id) + 1, keys.length - 1);
            this.activeAnnotation = index < 0 ? null : this._annotations[keys[index]];
        }
        this.changed = true;
    }
    updateAnnotation(annotation) {
        //this.updateSprite(annotation);
        this.changed = true;
    }
    toJSON() {
        const json = super.toJSON();
        const data = this.toData();
        if (data) {
            json.data = data;
        }
        return json;
    }
    fromJSON(json) {
        if (json.data) {
            this.fromData(json.data);
        }
    }
    toData() {
        const keys = Object.keys(this._annotations);
        if (keys.length === 0) {
            return null;
        }
        return keys.map(key => this._annotations[key].toJSON());
    }
    fromData(data) {
        data.forEach(annotationJson => this.addAnnotation(new Annotation_1.default(annotationJson)));
        this.emit({ type: "tag-update" });
    }
    onPointerUp(event) {
        if (event.isDragging) {
            return;
        }
        let target = event.object3D;
        while (target && !target.isHTMLSprite) {
            target = target.parent;
        }
        const annotation = target && target.annotation;
        if (annotation) {
            if (true) {
                console.log(`CVAnnotationView.onPointerUp - title: ${annotation.data.title}, marker: ${annotation.data.marker}, id: ${annotation.id}`);
            }
            // click on annotation: activate annotation
            this.emit({ type: "click", sprite: target, annotation });
            event.stopPropagation = true;
        }
    }
    onSystemPointerUp(event) {
        // click on model/background: deactivate active annotation
        if (!event.isDragging) {
            this.emit({ type: "click", sprite: null, annotation: null });
        }
    }
    onViewportDispose(event) {
        const group = this.object3D;
        group.disposeHTMLElements(event.viewport.overlay);
    }
    onSpriteClick(event) {
        this.emit(event);
    }
    onSpriteLink(event) {
        const reader = this.reader;
        if (reader) {
            this.reader.ins.articleId.setValue(event.annotation.data.articleId);
            this.reader.ins.enabled.setValue(true);
        }
    }
    createSprite(annotation) {
        this.removeSprite(annotation);
        const sprite = AnnotationFactory_1.default.createInstance(annotation);
        sprite.addEventListener("click", this.onSpriteClick);
        sprite.addEventListener("link", this.onSpriteLink);
        this._sprites[annotation.id] = sprite;
        this.object3D.add(sprite);
        this.registerPickableObject3D(sprite, true);
    }
    removeSprite(annotation) {
        const sprite = this._sprites[annotation.id];
        if (sprite) {
            sprite.removeEventListener("click", this.onSpriteClick);
            sprite.removeEventListener("link", this.onSpriteLink);
            sprite.dispose();
            this._sprites[annotation.id] = undefined;
            this.object3D.remove(sprite);
            this.unregisterPickableObject3D(sprite, true);
        }
    }
    updateSprite(annotation) {
        const sprite = this._sprites[annotation.id];
        if (sprite) {
            sprite.update();
        }
    }
}
exports.default = CVAnnotationView;
CVAnnotationView.typeName = "CVAnnotationView";
CVAnnotationView.ins = {
    unitScale: Component_1.types.Number("Transform.UnitScale", { preset: 1, precision: 5 }),
    activeTags: Component_1.types.String("Tags.Active"),
    title: Component_1.types.String("Annotation.Title"),
    lead: Component_1.types.String("Annotation.Lead"),
    marker: Component_1.types.String("Annotation.Marker"),
    tags: Component_1.types.String("Annotation.Tags"),
    style: Component_1.types.Option("Annotation.Style", AnnotationFactory_1.default.typeNames),
    scale: Component_1.types.Scale("Annotation.Scale", { preset: 1, precision: 3 }),
    offset: Component_1.types.Number("Annotation.Offset", { preset: 0, precision: 3 }),
    article: Component_1.types.Option("Annotation.Article", []),
    image: Component_1.types.String("Annotation.Image"),
    tilt: Component_1.types.Number("Annotation.Tilt"),
    azimuth: Component_1.types.Number("Annotation.Azimuth"),
    color: Component_1.types.ColorRGB("Annotation.Color"),
};


/***/ }),

/***/ "./components/CVAnnotations.ts":
/*!*************************************!*\
  !*** ./components/CVAnnotations.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CVModel2_1 = __webpack_require__(/*! ./CVModel2 */ "./components/CVModel2.ts");
////////////////////////////////////////////////////////////////////////////////
class CVAnnotations extends Component_1.default {
    constructor() {
        super(...arguments);
        this.ins = this.addInputs(CVAnnotations.ins);
    }
    get model() {
        return this.getComponent(CVModel2_1.default);
    }
    update(context) {
        return true;
    }
}
exports.default = CVAnnotations;
CVAnnotations.typeName = "CVAnnotations";
CVAnnotations.ins = {};


/***/ }),

/***/ "./components/CVAssetManager.ts":
/*!**************************************!*\
  !*** ./components/CVAssetManager.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
////////////////////////////////////////////////////////////////////////////////
/**
 * Component containing a THREE.LoadingManager and services to convert
 * asset paths to URLs and vice versa.
 *
 * Outputs indicate whether the loading manager is busy.
 */
class CVAssetManager extends Component_1.default {
    constructor() {
        super(...arguments);
        this.ins = this.addInputs(CVAssetManager.ins);
        this.outs = this.addOutputs(CVAssetManager.outs);
        this._loadingManager = new AssetLoadingManager(this);
        this._baseUrl = window.location.href;
        this._initialLoad = false;
    }
    get loadingManager() {
        return this._loadingManager;
    }
    get baseUrl() {
        return this._baseUrl;
    }
    set baseUrl(url) {
        this._baseUrl = new URL(url, window.location.href).href;
    }
    get initialLoad() {
        return this._initialLoad;
    }
    set initialLoad(value) {
        this._initialLoad = value;
    }
    getAssetName(pathOrUrl) {
        return pathOrUrl.split("/").pop();
    }
    getAssetUrl(assetPath) {
        return new URL(assetPath, this._baseUrl).href;
    }
    getAssetPath(url) {
        const baseUrl = this._baseUrl;
        const index = url.indexOf(baseUrl);
        if (index >= 0) {
            return url.substr(index + baseUrl.length);
        }
        return url;
    }
    getAssetBasePath(pathOrUrl) {
        const parts = this.getAssetPath(pathOrUrl).split("/");
        parts.pop();
        const basePath = parts.join("/");
        return basePath ? basePath + "/" : basePath;
    }
    getRelativeAssetPath(assetPathOrUrl, basePathOrUrl) {
        const assetUrl = this.getAssetUrl(assetPathOrUrl);
        const baseUrl = this.getAssetUrl(basePathOrUrl);
        const index = assetUrl.indexOf(baseUrl);
        if (index >= 0) {
            return assetUrl.substr(index + baseUrl.length);
        }
        return this.getAssetPath(assetUrl);
    }
    create() {
        super.create();
        //this.outs.baseUrl.setValue(window.location.href);
    }
    update() {
        const { ins, outs } = this;
        if (ins.busy.changed) {
            const isBusy = ins.busy.value || this._loadingManager.isBusy;
            outs.busy.setValue(isBusy);
            if (!isBusy) {
                outs.completed.set();
            }
        }
        // if (ins.baseUrl.changed) {
        //     try {
        //         outs.baseUrl.setValue(new URL(ins.baseUrl.value, window.location.href).href);
        //     }
        //     catch {
        //         outs.baseUrl.setValue(window.location.href);
        //     }
        // }
        return true;
    }
}
exports.default = CVAssetManager;
CVAssetManager.typeName = "CVAssetManager";
CVAssetManager.text = "AssetManager";
CVAssetManager.icon = "";
CVAssetManager.isSystemSingleton = true;
CVAssetManager.ins = {
    busy: Component_1.types.Boolean("State.Busy"),
};
CVAssetManager.outs = {
    busy: Component_1.types.Boolean("State.Busy"),
    completed: Component_1.types.Event("State.Completed"),
};
////////////////////////////////////////////////////////////////////////////////
class AssetLoadingManager extends THREE.LoadingManager {
    constructor(manager) {
        super();
        this._manager = manager;
        this._isBusy = false;
        this.onStart = this.onLoadingStart.bind(this);
        this.onProgress = this.onLoadingProgress.bind(this);
        this.onLoad = this.onLoadingCompleted.bind(this);
        this.onError = this.onLoadingError.bind(this);
    }
    get isBusy() {
        return this._isBusy;
    }
    onLoadingStart() {
        if (true) {
            console.log("Loading files...");
        }
        // trigger update
        this._isBusy = true;
        this._manager.ins.busy.set();
    }
    onLoadingProgress(url, itemsLoaded, itemsTotal) {
        if (true) {
            console.log(`Loaded ${itemsLoaded} of ${itemsTotal} files: ${url}`);
        }
    }
    onLoadingCompleted() {
        if (true) {
            console.log("Loading completed");
        }
        // trigger update
        this._isBusy = false;
        this._manager.ins.busy.set();
    }
    onLoadingError() {
        if (true) {
            console.error(`Loading error`);
        }
        // trigger update
        this._isBusy = false;
        this._manager.ins.busy.set();
    }
}


/***/ }),

/***/ "./components/CVAssetReader.ts":
/*!*************************************!*\
  !*** ./components/CVAssetReader.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fetch_1 = __webpack_require__(/*! @ff/browser/fetch */ "../../libs/ff-browser/source/fetch.ts");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const JSONReader_1 = __webpack_require__(/*! ../io/JSONReader */ "./io/JSONReader.ts");
const ModelReader_1 = __webpack_require__(/*! ../io/ModelReader */ "./io/ModelReader.ts");
const GeometryReader_1 = __webpack_require__(/*! ../io/GeometryReader */ "./io/GeometryReader.ts");
const TextureReader_1 = __webpack_require__(/*! ../io/TextureReader */ "./io/TextureReader.ts");
const FontReader_1 = __webpack_require__(/*! ../io/FontReader */ "./io/FontReader.ts");
const CVAssetManager_1 = __webpack_require__(/*! ./CVAssetManager */ "./components/CVAssetManager.ts");
////////////////////////////////////////////////////////////////////////////////
class CVAssetReader extends Component_1.default {
    constructor(node, id) {
        super(node, id);
        const loadingManager = this.assetManager.loadingManager;
        this.jsonLoader = new JSONReader_1.default(loadingManager);
        this.modelLoader = new ModelReader_1.default(loadingManager);
        this.geometryLoader = new GeometryReader_1.default(loadingManager);
        this.textureLoader = new TextureReader_1.default(loadingManager);
        this.fontReader = new FontReader_1.default(loadingManager);
    }
    get assetManager() {
        return this.getMainComponent(CVAssetManager_1.default);
    }
    getJSON(assetPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.assetManager.getAssetUrl(assetPath);
            return this.jsonLoader.get(url);
        });
    }
    getText(assetPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.assetManager.getAssetUrl(assetPath);
            return fetch_1.default.text(url, "GET");
        });
    }
    getModel(assetPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.assetManager.getAssetUrl(assetPath);
            return this.modelLoader.get(url);
        });
    }
    getGeometry(assetPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.assetManager.getAssetUrl(assetPath);
            return this.geometryLoader.get(url);
        });
    }
    getTexture(assetPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.assetManager.getAssetUrl(assetPath);
            return this.textureLoader.get(url);
        });
    }
    getFont(assetPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.assetManager.getAssetUrl(assetPath);
            return this.fontReader.load(url);
        });
    }
}
exports.default = CVAssetReader;
CVAssetReader.typeName = "CVAssetReader";
CVAssetReader.text = "AssetReader";
CVAssetReader.icon = "";
CVAssetReader.isSystemSingleton = true;


/***/ }),

/***/ "./components/CVBackground.ts":
/*!************************************!*\
  !*** ./components/CVBackground.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CBackground_1 = __webpack_require__(/*! @ff/scene/components/CBackground */ "../../libs/ff-scene/source/components/CBackground.ts");
////////////////////////////////////////////////////////////////////////////////
class CVBackground extends CBackground_1.default {
    get settingProperties() {
        return [
            this.ins.style,
            this.ins.color0,
            this.ins.color1,
        ];
    }
    get snapshotProperties() {
        return [
            this.ins.color0,
            this.ins.color1,
        ];
    }
    fromData(data) {
        this.ins.copyValues({
            style: CBackground_1.EBackgroundStyle[data.style] || CBackground_1.EBackgroundStyle.Solid,
            color0: data.color0 || [0.2, 0.25, 0.3],
            color1: data.color1 || [0.01, 0.03, 0.05],
        });
    }
    toData() {
        const ins = this.ins;
        return {
            style: CBackground_1.EBackgroundStyle[ins.style.value],
            color0: ins.color0.cloneValue(),
            color1: ins.color1.cloneValue(),
        };
    }
}
exports.default = CVBackground;
CVBackground.typeName = "CVBackground";


/***/ }),

/***/ "./components/CVCamera.ts":
/*!********************************!*\
  !*** ./components/CVCamera.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CCamera_1 = __webpack_require__(/*! @ff/scene/components/CCamera */ "../../libs/ff-scene/source/components/CCamera.ts");
////////////////////////////////////////////////////////////////////////////////
class CVCamera extends CCamera_1.default {
    get settingProperties() {
        return [
            this.ins.projection,
            this.ins.fov,
            this.ins.size,
            this.ins.near,
            this.ins.far,
        ];
    }
    fromDocument(document, node) {
        if (!isFinite(node.camera)) {
            throw new Error("camera property missing in node");
        }
        const data = document.cameras[node.camera];
        if (data.type === "perspective") {
            this.ins.copyValues({
                projection: CCamera_1.EProjection.Perspective,
                fov: data.perspective.yfov,
                near: data.perspective.znear,
                far: data.perspective.zfar
            });
        }
        else {
            this.ins.copyValues({
                projection: CCamera_1.EProjection.Orthographic,
                size: data.orthographic.ymag,
                near: data.orthographic.znear,
                far: data.orthographic.zfar
            });
        }
        return node.camera;
    }
    toDocument(document, node) {
        const ins = this.ins;
        const data = {};
        if (ins.projection.getValidatedValue() === CCamera_1.EProjection.Perspective) {
            data.type = "perspective";
            data.perspective = {
                yfov: ins.fov.value,
                znear: ins.near.value,
                zfar: ins.far.value
            };
        }
        else {
            data.type = "orthographic";
            data.orthographic = {
                ymag: ins.size.value,
                znear: ins.near.value,
                zfar: ins.far.value
            };
        }
        document.cameras = document.cameras || [];
        const cameraIndex = document.cameras.length;
        document.cameras.push(data);
        return cameraIndex;
    }
}
exports.default = CVCamera;
CVCamera.typeName = "CVCamera";
CVCamera.text = "Camera";
CVCamera.icon = "video";


/***/ }),

/***/ "./components/CVDirectionalLight.ts":
/*!******************************************!*\
  !*** ./components/CVDirectionalLight.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CDirectionalLight_1 = __webpack_require__(/*! @ff/scene/components/CDirectionalLight */ "../../libs/ff-scene/source/components/CDirectionalLight.ts");
const CLight_1 = __webpack_require__(/*! @ff/scene/components/CLight */ "../../libs/ff-scene/source/components/CLight.ts");
////////////////////////////////////////////////////////////////////////////////
class CVDirectionalLight extends CDirectionalLight_1.default {
    get settingProperties() {
        return [
            this.ins.color,
            this.ins.intensity,
            this.ins.shadowEnabled,
            this.ins.shadowSize,
            this.ins.shadowResolution,
            this.ins.shadowBlur,
        ];
    }
    get snapshotProperties() {
        return [
            this.ins.color,
            this.ins.intensity,
        ];
    }
    fromDocument(document, node) {
        if (!isFinite(node.light)) {
            throw new Error("light property missing in node");
        }
        const data = document.lights[node.light];
        const ins = this.ins;
        if (data.type !== "directional") {
            throw new Error("light type mismatch: not a directional light");
        }
        ins.copyValues({
            color: data.color !== undefined ? data.color : ins.color.schema.preset,
            intensity: data.intensity !== undefined ? data.intensity : ins.intensity.schema.preset,
            position: ins.position.schema.preset,
            target: ins.target.schema.preset,
            shadowEnabled: data.shadowEnabled || false,
            shadowSize: data.shadowSize !== undefined ? data.shadowSize : ins.shadowSize.schema.preset,
            shadowResolution: data.shadowResolution !== undefined ? CLight_1.EShadowMapResolution[data.shadowResolution] || 0 : ins.shadowResolution.schema.preset,
            shadowBlur: data.shadowBlur !== undefined ? data.shadowBlur : ins.shadowBlur.schema.preset,
        });
        return node.light;
    }
    toDocument(document, node) {
        const ins = this.ins;
        const data = {
            color: ins.color.cloneValue(),
            intensity: ins.intensity.value
        };
        data.type = "directional";
        if (ins.shadowEnabled.value) {
            data.shadowEnabled = true;
            if (!ins.shadowSize.isDefault()) {
                data.shadowSize = ins.shadowSize.value;
            }
            if (!ins.shadowBlur.isDefault()) {
                data.shadowBlur = ins.shadowBlur.value;
            }
            if (!ins.shadowResolution.isDefault()) {
                data.shadowResolution = CLight_1.EShadowMapResolution[ins.shadowResolution.value];
            }
        }
        document.lights = document.lights || [];
        const lightIndex = document.lights.length;
        document.lights.push(data);
        return lightIndex;
    }
}
exports.default = CVDirectionalLight;
CVDirectionalLight.typeName = "CVDirectionalLight";
CVDirectionalLight.text = "Directional Light";
CVDirectionalLight.icon = "bulb";


/***/ }),

/***/ "./components/CVDocument.ts":
/*!**********************************!*\
  !*** ./components/CVDocument.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const download_1 = __webpack_require__(/*! @ff/browser/download */ "../../libs/ff-browser/source/download.ts");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CRenderGraph_1 = __webpack_require__(/*! @ff/scene/components/CRenderGraph */ "../../libs/ff-scene/source/components/CRenderGraph.ts");
const DocumentValidator_1 = __webpack_require__(/*! ../io/DocumentValidator */ "./io/DocumentValidator.ts");
const NVNode_1 = __webpack_require__(/*! ../nodes/NVNode */ "./nodes/NVNode.ts");
const NVScene_1 = __webpack_require__(/*! ../nodes/NVScene */ "./nodes/NVScene.ts");
const CVMeta_1 = __webpack_require__(/*! ./CVMeta */ "./components/CVMeta.ts");
const CVSetup_1 = __webpack_require__(/*! ./CVSetup */ "./components/CVSetup.ts");
const CVAssetManager_1 = __webpack_require__(/*! ./CVAssetManager */ "./components/CVAssetManager.ts");
const CVAnalytics_1 = __webpack_require__(/*! client/components/CVAnalytics */ "./components/CVAnalytics.ts");
/**
 * A Voyager document is a special kind of graph. Its inner graph has a standard structure, and it can
 * be serialized to and from an IDocument structure which is compatible with a glTF document.
 */
class CVDocument extends CRenderGraph_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CVDocument.ins);
        this.outs = this.addOutputs(CVDocument.outs);
        // create root scene node with features component
        this.innerGraph.createCustomNode(NVScene_1.default);
        // document is inactive and hidden, unless it becomes the active document
        this.ins.active.setValue(false);
        this.ins.visible.setValue(false);
    }
    get root() {
        return this.innerNodes.get(NVScene_1.default);
    }
    get setup() {
        return this.innerComponents.get(CVSetup_1.default);
    }
    get assetPath() {
        return this.outs.assetPath.value;
    }
    get assetBaseName() {
        let name = this.assetPath;
        const index = name.indexOf(".svx.json");
        if (index >= 0) {
            name = name.substr(0, index);
        }
        return name;
    }
    get analytics() {
        return this.getMainComponent(CVAnalytics_1.default);
    }
    create() {
        super.create();
        this.innerGraph.components.on(CVMeta_1.default, this.onMetaComponent, this);
    }
    dispose() {
        this.innerGraph.components.off(CVMeta_1.default, this.onMetaComponent, this);
        super.dispose();
    }
    update(context) {
        super.update(context);
        const { ins, outs } = this;
        if (ins.dumpJson.changed) {
            const json = this.deflateDocument();
            console.log("-------------------- VOYAGER DOCUMENT --------------------");
            console.log(JSON.stringify(json, (key, value) => typeof value === "number" ? parseFloat(value.toFixed(5)) : value, 2));
        }
        if (ins.dumpTree.changed) {
            console.log("-------------------- VOYAGER DOCUMENT --------------------");
            this.dump();
        }
        if (ins.download.changed) {
            const fileName = outs.assetPath.value.split("/").pop() || "voyager-document.json";
            download_1.default.json(this.deflateDocument(), fileName);
        }
        return true;
    }
    clearNodeTree() {
        const children = this.root.transform.children.slice();
        children.forEach(child => child.node.dispose());
    }
    /**
     * Loads the document from the given document data. The data is validated first.
     * If a parent node/scene is given, the data is attached to the given parent.
     * @param documentData The document data to be loaded.
     * @param assetPath The path to the document asset to be loaded.
     * @param mergeParent If true or a scene or node, appends to the root or the given scene/node.
     */
    openDocument(documentData, assetPath, mergeParent) {
        if (true) {
            console.log("CVDocument.openDocument - assetPath: %s, mergeParent: %s", assetPath, mergeParent);
        }
        if (!CVDocument.validator.validate(documentData)) {
            throw new Error("document schema validation failed");
        }
        if (!mergeParent) {
            this.clearNodeTree();
        }
        // listen to load events on scene meta component
        this.onMetaComponent({ type: "CVMeta", object: this.root.meta, add: true, remove: false });
        let parent = (typeof mergeParent === "object" ? mergeParent : this.root);
        if (parent.graph !== this.innerGraph) {
            throw new Error("invalid parent node");
        }
        const pathMap = new Map();
        if (parent instanceof NVScene_1.default) {
            parent.fromDocument(documentData, documentData.scene, pathMap);
        }
        else {
            // if we append to a node, skip the document's root scene and append the scene's child nodes
            const rootIndices = documentData.scenes[documentData.scene].nodes;
            rootIndices.forEach(rootIndex => {
                const rootNode = this.innerGraph.createCustomNode(NVNode_1.default);
                parent.transform.addChild(rootNode.transform);
                rootNode.fromDocument(documentData, rootIndex, pathMap);
            });
        }
        //pathMap.forEach((comp, path) => console.log("CVDocument - pathMap: %s - '%s'", path, comp.displayName));
        if (assetPath) {
            this.outs.assetPath.setValue(assetPath);
            this.name = this.getMainComponent(CVAssetManager_1.default).getAssetName(assetPath);
        }
    }
    appendModel(assetPath, quality, parent) {
        if (parent && parent.graph !== this.innerGraph) {
            throw new Error("invalid parent node");
        }
        if (this.isEmpty()) {
            throw new Error("empty document, can't append model");
        }
        parent = parent || this.root;
        const modelNode = this.innerGraph.createCustomNode(NVNode_1.default);
        parent.transform.addChild(modelNode.transform);
        modelNode.createModel();
        const model = modelNode.model;
        model.derivatives.createModelAsset(assetPath, quality);
    }
    appendGeometry(geoPath, colorMapPath, occlusionMapPath, normalMapPath, quality, parent) {
        if (parent && parent.graph !== this.innerGraph) {
            throw new Error("invalid parent node");
        }
        if (this.isEmpty()) {
            throw new Error("empty document, can't append geometry");
        }
        parent = parent || this.root;
        const modelNode = this.innerGraph.createCustomNode(NVNode_1.default);
        parent.transform.addChild(modelNode.transform);
        modelNode.createModel();
        const model = modelNode.model;
        model.derivatives.createMeshAsset(geoPath, colorMapPath, occlusionMapPath, normalMapPath, quality);
    }
    deflateDocument(components) {
        if (this.isEmpty()) {
            throw new Error("empty document, can't serialize");
        }
        const document = {
            asset: {
                type: CVDocument.mimeType,
                version: CVDocument.version,
                generator: "Voyager",
                copyright: "(c) Smithsonian Institution. All rights reserved."
            },
            scene: 0,
            scenes: [],
        };
        const pathMap = new Map();
        document.scene = this.root.toDocument(document, pathMap, components);
        //pathMap.forEach((path, comp) => console.log("CVDocument - pathMap: %s - '%s'", path, comp.displayName));
        return document;
    }
    onMetaComponent(event) {
        const meta = event.object;
        const propTitle = this.outs.title;
        if (event.add && !propTitle.value) {
            meta.once("load", () => {
                const title = meta.collection.get("title") || "";
                propTitle.setValue(title);
                this.analytics.setTitle(title);
            });
        }
    }
}
exports.default = CVDocument;
CVDocument.typeName = "CVDocument";
CVDocument.mimeType = "application/si-dpo-3d.document+json";
CVDocument.version = "1.0";
CVDocument.validator = new DocumentValidator_1.default();
CVDocument.ins = {
    dumpJson: Component_1.types.Event("Document.DumpJSON"),
    dumpTree: Component_1.types.Event("Document.DumpTree"),
    download: Component_1.types.Event("Document.Download"),
};
CVDocument.outs = {
    assetPath: Component_1.types.AssetPath("Asset.Path", { preset: "document.svx.json" }),
    title: Component_1.types.String("Document.Title"),
};


/***/ }),

/***/ "./components/CVDocumentObserver.ts":
/*!******************************************!*\
  !*** ./components/CVDocumentObserver.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CVDocumentProvider_1 = __webpack_require__(/*! ./CVDocumentProvider */ "./components/CVDocumentProvider.ts");
////////////////////////////////////////////////////////////////////////////////
/**
 * Inherit from this class to observe changes of the currently active document.
 * Call startObserving() to begin receiving change events. Override onActiveDocument() to react on active document changes.
 */
class CVDocumentObserver extends Component_1.default {
    constructor() {
        super(...arguments);
        this.activeDocument = null;
    }
    get documentProvider() {
        return this.getGraphComponent(CVDocumentProvider_1.default);
    }
    /**
     * Starts observing changes of the active document. Must be called explicitly by descendant classes
     * in order to start observation.
     */
    startObserving() {
        const provider = this.documentProvider;
        provider.on("active-component", this.onActiveDocumentEvent, this);
        if (provider.activeComponent) {
            this.activeDocument = provider.activeComponent;
            this.onActiveDocument(null, provider.activeComponent);
        }
    }
    /**
     * Stops observing changes of the active node.
     */
    stopObserving() {
        const provider = this.documentProvider;
        provider.off("active-component", this.onActiveDocumentEvent, this);
        if (provider.activeComponent) {
            this.activeDocument = null;
            this.onActiveDocument(provider.activeComponent, null);
        }
    }
    /**
     * Called after the active document has changed. Override to react on the change.
     * @param previous The previous active document.
     * @param next The next active document.
     */
    onActiveDocument(previous, next) {
    }
    onActiveDocumentEvent(event) {
        this.activeDocument = event.next;
        this.onActiveDocument(event.previous, event.next);
    }
}
exports.default = CVDocumentObserver;
CVDocumentObserver.typeName = "CVDocumentObserver";


/***/ }),

/***/ "./components/CVDocumentProvider.ts":
/*!******************************************!*\
  !*** ./components/CVDocumentProvider.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CComponentProvider_1 = __webpack_require__(/*! @ff/graph/components/CComponentProvider */ "../../libs/ff-graph/source/components/CComponentProvider.ts");
const CVDocument_1 = __webpack_require__(/*! ./CVDocument */ "./components/CVDocument.ts");
class CVDocumentProvider extends CComponentProvider_1.default {
    constructor(node, id) {
        super(node, id);
        this.outs = this.addOutputs(CVDocumentProvider.outs);
        this.scope = CComponentProvider_1.EComponentScope.Node;
    }
    createDocument(data, path) {
        const document = this.node.createComponent(CVDocument_1.default);
        this.activeComponent = document;
        if (data) {
            document.openDocument(data, path);
        }
        return document;
    }
    amendDocument(data, path, merge) {
        const document = this.activeComponent;
        if (!document) {
            throw new Error("no active document, can't amend");
        }
        document.openDocument(data, path, merge);
        return document;
    }
    appendModel(modelPath, quality) {
        const document = this.activeComponent;
        if (!document) {
            throw new Error("no active document, can't append model");
        }
        document.appendModel(modelPath, quality);
        return document;
    }
    appendGeometry(geoPath, colorMapPath, occlusionMapPath, normalMapPath, quality) {
        const document = this.activeComponent;
        if (!document) {
            throw new Error("no active document, can't append geometry");
        }
        document.appendGeometry(geoPath, colorMapPath, occlusionMapPath, normalMapPath, quality);
        return document;
    }
    removeActiveDocument() {
        const document = this.activeComponent;
        if (document) {
            document.dispose();
        }
    }
    activateComponent(document) {
        document.ins.visible.setValue(true);
        document.ins.active.setValue(true);
    }
    deactivateComponent(document) {
        document.ins.visible.setValue(false);
        document.ins.active.setValue(false);
    }
    onActiveComponent(previous, next) {
        this.outs.activeDocument.setValue(next);
    }
    onScopedComponents() {
        this.outs.changedDocuments.set();
    }
}
exports.default = CVDocumentProvider;
CVDocumentProvider.typeName = "CVDocumentProvider";
CVDocumentProvider.componentType = CVDocument_1.default;
CVDocumentProvider.outs = {
    activeDocument: Component_1.types.Object("Documents.Active", CVDocument_1.default),
    changedDocuments: Component_1.types.Event("Documents.Changed"),
};


/***/ }),

/***/ "./components/CVEnvironmentTool.ts":
/*!*****************************************!*\
  !*** ./components/CVEnvironmentTool.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CVTool_1 = __webpack_require__(/*! ./CVTool */ "./components/CVTool.ts");
const CBackground_1 = __webpack_require__(/*! @ff/scene/components/CBackground */ "../../libs/ff-scene/source/components/CBackground.ts");
////////////////////////////////////////////////////////////////////////////////
class CVEnvironmentTool extends CVTool_1.default {
    createView() {
        return new EnvironmentToolView(this);
    }
}
exports.default = CVEnvironmentTool;
CVEnvironmentTool.typeName = "CVEnvironmentTool";
CVEnvironmentTool.text = "Environment";
CVEnvironmentTool.icon = "environment";
////////////////////////////////////////////////////////////////////////////////
let EnvironmentToolView = class EnvironmentToolView extends CVTool_1.ToolView {
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-group", "sv-environment-tool-view");
    }
    render() {
        const tool = this.tool;
        if (!this.activeDocument) {
            return CVTool_1.html `No active document`;
        }
        const setup = this.activeDocument.setup;
        const grid = setup.grid;
        const floor = setup.floor;
        const background = setup.background;
        const options = ["Solid", "Linear", "Radial"];
        const style = background.ins.style.getValidatedValue();
        const isSolid = style === CBackground_1.EBackgroundStyle.Solid;
        const isLinear = style === CBackground_1.EBackgroundStyle.LinearGradient;
        //let name0 = isSolid ? " " : (isLinear ? "Top" : "Inner");
        //let name1 = isSolid ? "" : (isLinear ? "Btm" : "Outer");
        return CVTool_1.html `<div class="sv-section"><ff-button class="sv-section-lead" transparent icon=${tool.icon}></ff-button>
            <div class="sv-tool-controls">
                <sv-property-options .property=${background.ins.style} .options=${options} name="Background"></sv-property-options>
                <sv-property-color class="sv-nogap" .property=${background.ins.color0} name=" "></sv-property-color>
                ${!isSolid ? CVTool_1.html `<sv-property-color class="sv-nogap" .property=${background.ins.color1} name=" "></sv-property-color>` : null}
                <sv-property-boolean .property=${grid.ins.visible} name="Grid"></sv-property-boolean>
                <sv-property-color class="sv-nogap" .property=${grid.ins.color} name=" "></sv-property-color>
                <sv-property-boolean .property=${floor.ins.visible} name="Floor"></sv-property-boolean>
                <sv-property-color class="sv-nogap" .property=${floor.ins.color} name=" "></sv-property-color>
            </div>
        </div>`;
    }
    onActiveDocument(previous, next) {
        if (previous) {
            const background = previous.setup.background;
            background.ins.style.off("value", this.onUpdate, this);
        }
        if (next) {
            const background = next.setup.background;
            background.ins.style.on("value", this.onUpdate, this);
        }
        this.requestUpdate();
    }
};
EnvironmentToolView = __decorate([
    CVTool_1.customElement("sv-environment-tool-view")
], EnvironmentToolView);
exports.EnvironmentToolView = EnvironmentToolView;


/***/ }),

/***/ "./components/CVFloor.ts":
/*!*******************************!*\
  !*** ./components/CVFloor.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CFloor_1 = __webpack_require__(/*! @ff/scene/components/CFloor */ "../../libs/ff-scene/source/components/CFloor.ts");
////////////////////////////////////////////////////////////////////////////////
class CVFloor extends CFloor_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins.visible.setValue(false);
        this.ins.receiveShadow.setValue(true);
        // make sure floor is rendered behind other transparent scene objects
        this.floor.renderOrder = -1;
    }
    get settingProperties() {
        return [
            this.ins.visible,
            this.ins.position,
            this.ins.radius,
            this.ins.color,
            this.ins.opacity,
            this.ins.receiveShadow,
        ];
    }
    get snapshotProperties() {
        return [
            this.ins.opacity,
        ];
    }
    fromData(data) {
        data = data || {};
        this.ins.copyValues({
            visible: !!data.visible,
            position: data.position || [0, -25, 0],
            radius: data.size !== undefined ? data.size : 50,
            color: data.color || [0.6, 0.75, 0.8],
            opacity: data.opacity !== undefined ? data.opacity : 0.5,
            receiveShadow: !!data.receiveShadow,
        });
    }
    toData() {
        const ins = this.ins;
        return {
            visible: ins.visible.value,
            position: ins.position.cloneValue(),
            size: ins.radius.value,
            color: ins.color.cloneValue(),
            opacity: ins.opacity.value,
            receiveShadow: ins.receiveShadow.value,
        };
    }
}
exports.default = CVFloor;
CVFloor.typeName = "CVFloor";
CVFloor.text = "Floor";
CVFloor.icon = "";


/***/ }),

/***/ "./components/CVGrid.ts":
/*!******************************!*\
  !*** ./components/CVGrid.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const Grid_1 = __webpack_require__(/*! @ff/three/Grid */ "../../libs/ff-three/source/Grid.ts");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CObject3D_1 = __webpack_require__(/*! @ff/scene/components/CObject3D */ "../../libs/ff-scene/source/components/CObject3D.ts");
const common_1 = __webpack_require__(/*! client/schema/common */ "./schema/common.ts");
const CVScene_1 = __webpack_require__(/*! ./CVScene */ "./components/CVScene.ts");
////////////////////////////////////////////////////////////////////////////////
const _vec3a = new THREE.Vector3();
const _vec3b = new THREE.Vector3();
const _matRotationOffset = new THREE.Matrix4().makeRotationX(Math.PI * 0.5);
const _matIdentity = new THREE.Matrix4();
class CVGrid extends CObject3D_1.default {
    constructor() {
        super(...arguments);
        this.ins = this.addInputs(CVGrid.gridIns);
        this.outs = this.addOutputs(CVGrid.gridOuts);
        this._lastViewport = null;
        this._gridProps = {
            size: 20,
            mainDivisions: 2,
            subDivisions: 10,
            mainColor: new THREE.Color(0.5, 0.7, 0.8),
            subColor: new THREE.Color(0.25, 0.35, 0.4)
        };
    }
    get settingProperties() {
        return [
            this.ins.visible,
            this.ins.color,
            this.ins.opacity,
        ];
    }
    get snapshotProperties() {
        return [
            this.ins.opacity,
        ];
    }
    get grid() {
        return this.object3D;
    }
    create() {
        this.ins.pickable.setValue(false);
        this.ins.visible.setValue(false);
        super.create();
    }
    activate() {
        const scene = this.getGraphComponent(CVScene_1.default);
        scene.outs.boundingBox.linkTo(this.ins.boundingBox);
    }
    update() {
        const ins = this.ins;
        if (ins.color.changed || ins.boundingBox.changed) {
            const props = this._gridProps;
            if (ins.color.changed) {
                const mainColor = props.mainColor;
                const subColor = props.subColor;
                mainColor.fromArray(ins.color.value);
                subColor.r = mainColor.r * 0.5;
                subColor.g = mainColor.g * 0.5;
                subColor.b = mainColor.b * 0.5;
            }
            if (ins.boundingBox.changed) {
                const scene = this.getGraphComponent(CVScene_1.default);
                const box = scene.outs.boundingBox.value;
                const units = scene.ins.units.value;
                box.getSize(_vec3a);
                let size = Math.max(_vec3a.x, _vec3a.y, _vec3a.z);
                let f = 1;
                while (size / f > 5) {
                    f = f * 10;
                }
                size = Math.ceil(size / f) * f * 2;
                if (true) {
                    console.log("CVGrid.update - grid size = %s %s", size, common_1.EUnitType[units]);
                }
                props.size = size;
                this.outs.size.setValue(size);
                this.outs.units.setValue(units);
                props.mainDivisions = size / f;
                props.subDivisions = 10;
                _vec3b.set(0, box.min.y, 0);
            }
            if (!this.object3D) {
                this.object3D = new Grid_1.default(props);
            }
            else {
                this.grid.update(props);
            }
            if (ins.boundingBox.changed) {
                this.grid.position.copy(_vec3b);
                this.grid.updateMatrix();
            }
        }
        if (ins.visible.changed) {
            this.grid.visible = ins.visible.value;
        }
        if (ins.opacity.changed) {
            this.grid.opacity = ins.opacity.value;
        }
        return true;
    }
    preRender(context) {
        const viewport = context.viewport;
        const gridObject = this.object3D;
        if (viewport !== this._lastViewport) {
            this._lastViewport = viewport;
            const vpCamera = context.viewport.camera;
            if (vpCamera) {
                gridObject.matrix.extractRotation(vpCamera.matrixWorld).multiply(_matRotationOffset);
            }
            else {
                gridObject.matrix.extractRotation(_matIdentity);
            }
            gridObject.updateMatrixWorld(true);
        }
    }
    postRender(context) {
        this.object3D.matrix.extractRotation(_matIdentity);
    }
    fromData(data) {
        data = data || {};
        this.ins.copyValues({
            visible: !!data.visible,
            color: data.color || [0.5, 0.7, 0.8],
        });
    }
    toData() {
        const ins = this.ins;
        return {
            visible: ins.visible.cloneValue(),
            color: ins.color.cloneValue(),
        };
    }
}
exports.default = CVGrid;
CVGrid.typeName = "CVGrid";
CVGrid.text = "Grid";
CVGrid.icon = "";
CVGrid.gridIns = {
    color: Component_1.types.ColorRGB("Grid.Color", [0.5, 0.7, 0.8]),
    opacity: Component_1.types.Percent("Grid.Opacity", 1.0),
    boundingBox: Component_1.types.Object("Scene.BoundingBox", THREE.Box3),
};
CVGrid.gridOuts = {
    size: Component_1.types.Number("Size"),
    units: Component_1.types.Enum("Units", common_1.EUnitType),
};


/***/ }),

/***/ "./components/CVInterface.ts":
/*!***********************************!*\
  !*** ./components/CVInterface.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
////////////////////////////////////////////////////////////////////////////////
class CVInterface extends Component_1.default {
    constructor() {
        super(...arguments);
        this.ins = this.addInputs(CVInterface.ins);
        this.outs = this.addOutputs(CVInterface.outs);
    }
    update(context) {
        return true;
    }
    fromData(data) {
        data = data || {};
        this.ins.setValues({
            visible: data.visible !== undefined ? data.visible : true,
            logo: data.logo !== undefined ? data.logo : true,
            menu: data.menu !== undefined ? data.menu : true,
            tools: data.tools !== undefined ? data.tools : true
        });
    }
    toData() {
        const ins = this.ins;
        return {
            visible: ins.visible.value,
            logo: ins.logo.value,
            menu: ins.menu.value,
            tools: ins.tools.value
        };
    }
}
exports.default = CVInterface;
CVInterface.typeName = "CVInterface";
CVInterface.ins = {
    visible: Component_1.types.Boolean("Interface.Visible", true),
    logo: Component_1.types.Boolean("Interface.Logo", true),
    menu: Component_1.types.Boolean("Interface.Menu", true),
    tools: Component_1.types.Boolean("Interface.Tools", true),
};
CVInterface.outs = {
    documentTitle: Component_1.types.String("Document.Title"),
};


/***/ }),

/***/ "./components/CVLight.ts":
/*!*******************************!*\
  !*** ./components/CVLight.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CLight_1 = __webpack_require__(/*! @ff/scene/components/CLight */ "../../libs/ff-scene/source/components/CLight.ts");
exports.CLight = CLight_1.default;


/***/ }),

/***/ "./components/CVLightTool.ts":
/*!***********************************!*\
  !*** ./components/CVLightTool.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CLight_1 = __webpack_require__(/*! @ff/scene/components/CLight */ "../../libs/ff-scene/source/components/CLight.ts");
__webpack_require__(/*! ../ui/PropertyBoolean */ "./ui/PropertyBoolean.ts");
__webpack_require__(/*! ../ui/PropertyOptions */ "./ui/PropertyOptions.ts");
__webpack_require__(/*! ../ui/PropertySlider */ "./ui/PropertySlider.ts");
__webpack_require__(/*! ../ui/PropertyColor */ "./ui/PropertyColor.ts");
const CVTool_1 = __webpack_require__(/*! ./CVTool */ "./components/CVTool.ts");
////////////////////////////////////////////////////////////////////////////////
class CVLightTool extends CVTool_1.default {
    constructor() {
        super(...arguments);
        this.lights = [];
        this.ins = this.addInputs(CVLightTool.ins);
        this.outs = this.addOutputs(CVLightTool.outs);
    }
    update(context) {
        this.outs.light.setValue(this.lights[this.ins.light.getValidatedValue()]);
        return true;
    }
    createView() {
        return new LightToolView(this);
    }
    onActiveDocument(previous, next) {
        this.lights = next ? next.getInnerComponents(CLight_1.default) : [];
        this.ins.light.setOptions(this.lights.map(light => light.node.name));
        this.outs.light.setValue(this.lights[0]);
        super.onActiveDocument(previous, next);
    }
}
exports.default = CVLightTool;
CVLightTool.typeName = "CVLightTool";
CVLightTool.text = "Lights";
CVLightTool.icon = "bulb";
CVLightTool.ins = {
    light: CVTool_1.types.Option("Tool.Light", []),
};
CVLightTool.outs = {
    light: CVTool_1.types.Object("Tool.SelectedLight", CLight_1.default),
};
////////////////////////////////////////////////////////////////////////////////
let LightToolView = class LightToolView extends CVTool_1.ToolView {
    constructor() {
        super(...arguments);
        this.lights = null;
    }
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-group", "sv-light-tool-view");
    }
    connected() {
        super.connected();
        this.tool.outs.light.on("value", this.onUpdate, this);
    }
    disconnected() {
        this.tool.outs.light.off("value", this.onUpdate, this);
        super.disconnected();
    }
    render() {
        const tool = this.tool;
        const lights = tool.lights;
        const document = this.activeDocument;
        if (!lights || !document) {
            return CVTool_1.html `No editable lights in this scene.`;
        }
        const activeLight = tool.outs.light.value;
        const navigation = document.setup.navigation;
        const lightDetails = activeLight ? CVTool_1.html `<div class="sv-section">
            <ff-button class="sv-section-lead" transparent icon="cog"></ff-button>
            <div class="sv-tool-controls">
                <!-- <sv-property-boolean .property=${activeLight.ins.visible} name="Switch"></sv-property-boolean> -->
                <sv-property-slider .property=${activeLight.ins.intensity} name="Intensity" min="0" max="2"></sv-property-slider>
                <sv-property-color .property=${activeLight.ins.color} name="Color"></sv-property-color>
            </div>
        </div>` : null;
        return CVTool_1.html `${lightDetails}<div class="sv-section"><ff-button class="sv-section-lead" transparent icon=${tool.icon}></ff-button>
            <div class="sv-tool-controls">
                <!-- <sv-property-boolean .property=${navigation.ins.lightsFollowCamera} name="Follow Camera"></sv-property-boolean> -->
                <sv-property-options .property=${tool.ins.light} name="Select Scene Light"></sv-property-options>
            </div>
        </div>`;
    }
    onActiveDocument(previous, next) {
        if (previous) {
            previous.setup.navigation.ins.lightsFollowCamera.off("value", this.onUpdate, this);
        }
        if (next) {
            next.setup.navigation.ins.lightsFollowCamera.on("value", this.onUpdate, this);
        }
        this.requestUpdate();
    }
};
LightToolView = __decorate([
    CVTool_1.customElement("sv-light-tool-view")
], LightToolView);
exports.LightToolView = LightToolView;


/***/ }),

/***/ "./components/CVMeta.ts":
/*!******************************!*\
  !*** ./components/CVMeta.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const OrderedCollection_1 = __webpack_require__(/*! @ff/core/OrderedCollection */ "../../libs/ff-core/source/OrderedCollection.ts");
const UnorderedCollection_1 = __webpack_require__(/*! @ff/core/UnorderedCollection */ "../../libs/ff-core/source/UnorderedCollection.ts");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const Article_1 = __webpack_require__(/*! ../models/Article */ "./models/Article.ts");
class CVMeta extends Component_1.default {
    constructor() {
        super(...arguments);
        this.collection = new UnorderedCollection_1.default();
        this.process = new UnorderedCollection_1.default();
        this.images = new UnorderedCollection_1.default();
        this.articles = new OrderedCollection_1.default();
        this.leadArticle = null;
        this.notes = [];
    }
    fromDocument(document, node) {
        if (!isFinite(node.meta)) {
            throw new Error("info property missing in node");
        }
        const data = document.metas[node.meta];
        if (data.collection) {
            this.collection.dictionary = data.collection;
        }
        if (data.process) {
            this.process.dictionary = data.process;
        }
        if (data.images) {
            const imageDict = {};
            data.images.forEach(image => imageDict[image.quality] = image);
            this.images.dictionary = imageDict;
        }
        if (data.articles) {
            this.articles.items = data.articles.map(article => Article_1.default.fromJSON(article));
            if (data.leadArticle !== undefined) {
                this.leadArticle = this.articles.getAt(data.leadArticle);
            }
        }
        this.emit("load");
        return node.meta;
    }
    toDocument(document, node) {
        let data = null;
        if (this.collection.length > 0) {
            data = {
                collection: this.collection.dictionary,
            };
        }
        if (this.process.length > 0) {
            data = data || {};
            data.process = this.process.dictionary;
        }
        if (this.images.length > 0) {
            data = data || {};
            data.images = this.images.items;
        }
        if (this.articles.length > 0) {
            data = data || {};
            const articles = this.articles.items;
            data.articles = articles.map(article => article.toJSON());
            if (this.leadArticle) {
                data.leadArticle = articles.indexOf(this.leadArticle);
            }
        }
        if (data) {
            document.metas = document.metas || [];
            const metaIndex = document.metas.length;
            document.metas.push(data);
            return metaIndex;
        }
    }
}
exports.default = CVMeta;
CVMeta.typeName = "CVMeta";
CVMeta.text = "Meta";
CVMeta.icon = "document";


/***/ }),

/***/ "./components/CVModel2.ts":
/*!********************************!*\
  !*** ./components/CVModel2.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const Notification_1 = __webpack_require__(/*! @ff/ui/Notification */ "../../libs/ff-ui/source/Notification.ts");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CObject3D_1 = __webpack_require__(/*! @ff/scene/components/CObject3D */ "../../libs/ff-scene/source/components/CObject3D.ts");
const helpers = __webpack_require__(/*! @ff/three/helpers */ "../../libs/ff-three/source/helpers.ts");
const model_1 = __webpack_require__(/*! client/schema/model */ "./schema/model.ts");
const unitScaleFactor_1 = __webpack_require__(/*! ../utils/unitScaleFactor */ "./utils/unitScaleFactor.ts");
const UberPBRMaterial_1 = __webpack_require__(/*! ../shaders/UberPBRMaterial */ "./shaders/UberPBRMaterial.ts");
const DerivativeList_1 = __webpack_require__(/*! ../models/DerivativeList */ "./models/DerivativeList.ts");
const CVAnnotationView_1 = __webpack_require__(/*! ./CVAnnotationView */ "./components/CVAnnotationView.ts");
const CVAssetManager_1 = __webpack_require__(/*! ./CVAssetManager */ "./components/CVAssetManager.ts");
const CVAssetReader_1 = __webpack_require__(/*! ./CVAssetReader */ "./components/CVAssetReader.ts");
const CRenderer_1 = __webpack_require__(/*! @ff/scene/components/CRenderer */ "../../libs/ff-scene/source/components/CRenderer.ts");
////////////////////////////////////////////////////////////////////////////////
const _vec3a = new THREE.Vector3();
const _vec3b = new THREE.Vector3();
const _quat = new THREE.Quaternion();
const _box = new THREE.Box3();
/**
 * Graph component rendering a model or model part.
 *
 * ### Events
 * - *"bounding-box"* - emitted after the model's bounding box changed
 */
class CVModel2 extends CObject3D_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CVModel2.ins);
        this.outs = this.addOutputs(CVModel2.outs);
        this._derivatives = new DerivativeList_1.default();
        this._activeDerivative = null;
        this._visible = true;
        this._boxFrame = null;
        this._localBoundingBox = new THREE.Box3();
        this.object3D = new THREE.Group();
    }
    get settingProperties() {
        return [
            this.ins.visible,
            this.ins.quality,
            this.ins.localUnits,
            this.ins.tags,
            this.ins.renderOrder,
            this.ins.shader,
            this.ins.override,
            this.ins.color,
            this.ins.opacity,
            this.ins.hiddenOpacity,
            this.ins.roughness,
            this.ins.metalness,
            this.ins.occlusion,
        ];
    }
    get derivatives() {
        return this._derivatives;
    }
    get activeDerivative() {
        return this._activeDerivative;
    }
    get localBoundingBox() {
        return this._localBoundingBox;
    }
    get assetManager() {
        return this.getMainComponent(CVAssetManager_1.default);
    }
    get assetReader() {
        return this.getMainComponent(CVAssetReader_1.default);
    }
    get renderer() {
        return this.getMainComponent(CRenderer_1.default);
    }
    create() {
        super.create();
        // link units with annotation view
        const av = this.node.createComponent(CVAnnotationView_1.default);
        av.ins.unitScale.linkFrom(this.outs.unitScale);
        // set quality based on max texture size
        const maxTextureSize = this.renderer.outs.maxTextureSize.value;
        if (maxTextureSize < 2048) {
            this.ins.quality.setValue(model_1.EDerivativeQuality.Low);
        }
        else if (maxTextureSize < 4096) {
            this.ins.quality.setValue(model_1.EDerivativeQuality.Medium);
        }
        else {
            this.ins.quality.setValue(model_1.EDerivativeQuality.High);
        }
    }
    update() {
        const ins = this.ins;
        if (ins.tags.changed || ins.activeTags.changed || ins.visible.changed) {
            let visible = ins.visible.value;
            if (visible) {
                // determine visibility based on whether a tag of this model is selected
                const tags = ins.tags.value.split(",").map(tag => tag.trim()).filter(tag => tag);
                const activeTags = ins.activeTags.value.split(",").map(tag => tag.trim()).filter(tag => tag);
                visible = !tags.length;
                activeTags.forEach(activeTag => {
                    if (tags.indexOf(activeTag) >= 0) {
                        visible = true;
                    }
                });
            }
            const overrideActive = this.ins.override.value;
            this._visible = visible;
            if (visible) {
                this.object3D.visible = true;
                if (overrideActive) {
                    this.updateMaterial();
                }
            }
            else if (ins.visible.value && overrideActive && this.ins.hiddenOpacity.value > 0) {
                this.object3D.visible = true;
                this.updateMaterial();
            }
            else {
                this.object3D.visible = false;
            }
        }
        if (ins.tags.changed) {
            this.emit({ type: "tag-update" });
        }
        if (!this.activeDerivative && ins.autoLoad.changed && ins.autoLoad.value) {
            this.autoLoad(ins.quality.value);
        }
        else if (ins.quality.changed) {
            const derivative = this.derivatives.select(model_1.EDerivativeUsage.Web3D, ins.quality.value);
            if (derivative && derivative !== this.activeDerivative) {
                this.loadDerivative(derivative)
                    .catch(error => {
                    console.warn("Model.update - failed to load derivative");
                    console.warn(error);
                });
            }
        }
        if (ins.renderOrder.changed) {
            this.updateRenderOrder(this.object3D, ins.renderOrder.value);
        }
        if (ins.localUnits.changed || ins.globalUnits.changed) {
            this.updateUnitScale();
        }
        if (ins.shader.changed) {
            this.updateShader();
        }
        if (ins.override.value && ins.shader.value === UberPBRMaterial_1.EShaderMode.Default && (ins.override.changed ||
            ins.color.changed || ins.opacity.changed ||
            ins.roughness.changed || ins.metalness.changed || ins.occlusion.changed)) {
            this.updateMaterial();
        }
        if (ins.center.changed) {
            this.center();
        }
        if (ins.position.changed || ins.rotation.changed) {
            this.updateMatrixFromProps();
        }
        if (ins.dumpDerivatives.changed) {
            console.log(this.derivatives.toString(true));
        }
        return true;
    }
    dispose() {
        this.derivatives.clear();
        this._activeDerivative = null;
        super.dispose();
    }
    center() {
        const object3D = this.object3D;
        const position = this.ins.position;
        // remove position and scaling, but preserve rotation
        object3D.matrix.decompose(_vec3a, _quat, _vec3b);
        object3D.matrix.makeRotationFromQuaternion(_quat);
        // compute local bounding box and set position offset
        _box.makeEmpty();
        helpers.computeLocalBoundingBox(object3D, _box, object3D.parent);
        _box.getCenter(_vec3a);
        _vec3a.multiplyScalar(-1).toArray(position.value);
        // trigger matrix update
        position.set();
    }
    setFromMatrix(matrix) {
        const ins = this.ins;
        matrix.decompose(_vec3a, _quat, _vec3b);
        _vec3a.multiplyScalar(1 / this.outs.unitScale.value).toArray(ins.position.value);
        ins.position.set();
        helpers.quaternionToDegrees(_quat, CVModel2.rotationOrder, ins.rotation.value);
        ins.rotation.set();
    }
    fromDocument(document, node) {
        const { ins, outs } = this;
        if (!isFinite(node.model)) {
            throw new Error("model property missing in node");
        }
        const data = document.models[node.model];
        const units = model_1.EUnitType[data.units || "cm"];
        ins.localUnits.setValue(isFinite(units) ? units : model_1.EUnitType.cm);
        ins.visible.setValue(data.visible !== undefined ? data.visible : true);
        ins.tags.setValue(data.tags || "");
        ins.renderOrder.setValue(data.renderOrder !== undefined ? data.renderOrder : 0);
        ins.position.reset();
        ins.rotation.reset();
        if (data.translation) {
            ins.position.copyValue(data.translation);
        }
        if (data.rotation) {
            _quat.fromArray(data.rotation);
            helpers.quaternionToDegrees(_quat, CVModel2.rotationOrder, ins.rotation.value);
            ins.rotation.set();
        }
        if (data.boundingBox) {
            const boundingBox = this._localBoundingBox;
            boundingBox.min.fromArray(data.boundingBox.min);
            boundingBox.max.fromArray(data.boundingBox.max);
            this._boxFrame = new THREE.Box3Helper(boundingBox, "#009cde");
            this.addObject3D(this._boxFrame);
            outs.updated.set();
        }
        if (data.derivatives) {
            this.derivatives.fromJSON(data.derivatives);
        }
        if (data.material) {
            const material = data.material;
            ins.copyValues({
                override: true,
                color: material.color || ins.color.schema.preset,
                opacity: material.opacity !== undefined ? material.opacity : ins.opacity.schema.preset,
                hiddenOpacity: material.hiddenOpacity !== undefined ? material.hiddenOpacity : ins.hiddenOpacity.schema.preset,
                roughness: material.roughness !== undefined ? material.roughness : ins.roughness.schema.preset,
                metalness: material.metalness !== undefined ? material.metalness : ins.metalness.schema.preset,
                occlusion: material.occlusion !== undefined ? material.occlusion : ins.occlusion.schema.preset,
            });
        }
        if (data.annotations) {
            this.getComponent(CVAnnotationView_1.default).fromData(data.annotations);
        }
        // emit tag update event
        this.emit({ type: "tag-update" });
        // trigger automatic loading of derivatives if active
        this.ins.autoLoad.set();
        return node.model;
    }
    toDocument(document, node) {
        const data = {
            units: model_1.EUnitType[this.ins.localUnits.getValidatedValue()]
        };
        const ins = this.ins;
        if (!ins.visible.value) {
            data.visible = false;
        }
        if (ins.tags.value) {
            data.tags = ins.tags.value;
        }
        if (ins.renderOrder.value !== 0) {
            data.renderOrder = ins.renderOrder.value;
        }
        const position = ins.position.value;
        if (position[0] !== 0 || position[1] !== 0 || position[2] !== 0) {
            data.translation = ins.position.value;
        }
        const rotation = ins.rotation.value;
        if (rotation[0] !== 0 || rotation[1] !== 0 || rotation[2] !== 0) {
            helpers.degreesToQuaternion(rotation, CVModel2.rotationOrder, _quat);
            data.rotation = _quat.toArray();
        }
        if (ins.override.value) {
            data.material = {
                color: ins.color.value,
                opacity: ins.opacity.value,
                hiddenOpacity: ins.hiddenOpacity.value,
                roughness: ins.roughness.value,
                metalness: ins.metalness.value,
                occlusion: ins.occlusion.value,
            };
        }
        data.boundingBox = {
            min: this._localBoundingBox.min.toArray(),
            max: this._localBoundingBox.max.toArray()
        };
        data.derivatives = this.derivatives.toJSON();
        const annotations = this.getComponent(CVAnnotationView_1.default).toData();
        if (annotations && annotations.length > 0) {
            data.annotations = annotations;
        }
        document.models = document.models || [];
        const modelIndex = document.models.length;
        document.models.push(data);
        return modelIndex;
    }
    updateShader() {
        const shader = this.ins.shader.getValidatedValue();
        this.object3D.traverse(object => {
            const material = object["material"];
            if (material && material.isUberPBRMaterial) {
                material.setShaderMode(shader);
            }
        });
    }
    updateMaterial() {
        const ins = this.ins;
        this.object3D.traverse(object => {
            const material = object["material"];
            if (material && material.isUberPBRMaterial) {
                material.aoMapMix.setScalar(ins.occlusion.value);
                material.color.fromArray(ins.color.value);
                material.opacity = this._visible ? ins.opacity.value : ins.hiddenOpacity.value;
                material.transparent = material.opacity < 1 || !!material.alphaMap;
                //material.depthWrite = material.opacity === 1;
                material.roughness = ins.roughness.value;
                material.metalness = ins.metalness.value;
            }
        });
    }
    updateUnitScale() {
        const fromUnits = this.ins.localUnits.getValidatedValue();
        const toUnits = this.ins.globalUnits.getValidatedValue();
        this.outs.unitScale.setValue(unitScaleFactor_1.default(fromUnits, toUnits));
        if (true) {
            console.log("Model.updateUnitScale, from: %s, to: %s", fromUnits, toUnits);
        }
        this.updateMatrixFromProps();
    }
    updateMatrixFromProps() {
        const ins = this.ins;
        const unitScale = this.outs.unitScale.value;
        const object3D = this.object3D;
        _vec3a.fromArray(ins.position.value).multiplyScalar(unitScale);
        helpers.degreesToQuaternion(ins.rotation.value, CVModel2.rotationOrder, _quat);
        _vec3b.setScalar(unitScale);
        object3D.matrix.compose(_vec3a, _quat, _vec3b);
        object3D.matrixWorldNeedsUpdate = true;
        this.outs.updated.set();
    }
    updateRenderOrder(model, value) {
        model.renderOrder = value;
        model.children.forEach(child => this.updateRenderOrder(child, value));
    }
    /**
     * Automatically loads derivatives up to the given quality.
     * First loads the lowest available quality (usually thumb), then
     * loads the desired quality level.
     * @param quality
     */
    autoLoad(quality) {
        const sequence = [];
        const lowestQualityDerivative = this.derivatives.select(model_1.EDerivativeUsage.Web3D, model_1.EDerivativeQuality.Thumb);
        if (lowestQualityDerivative) {
            sequence.push(lowestQualityDerivative);
        }
        const targetQualityDerivative = this.derivatives.select(model_1.EDerivativeUsage.Web3D, quality);
        if (targetQualityDerivative && targetQualityDerivative !== lowestQualityDerivative) {
            sequence.push(targetQualityDerivative);
        }
        if (sequence.length === 0) {
            Notification_1.default.show(`No 3D derivatives available for '${this.displayName}'.`);
            return Promise.resolve();
        }
        // load sequence of derivatives one by one
        return sequence.reduce((promise, derivative) => {
            return promise.then(() => this.loadDerivative(derivative));
        }, Promise.resolve());
    }
    /**
     * Loads and displays the given derivative.
     * @param derivative
     */
    loadDerivative(derivative) {
        return derivative.load(this.assetReader)
            .then(() => {
            if (!derivative.model) {
                return;
            }
            if (this._activeDerivative) {
                this.removeObject3D(this._activeDerivative.model);
                this._activeDerivative.unload();
            }
            this._activeDerivative = derivative;
            this.addObject3D(derivative.model);
            if (this._boxFrame) {
                this.removeObject3D(this._boxFrame);
                this._boxFrame.geometry.dispose();
                this._boxFrame = null;
            }
            // update bounding box based on loaded derivative
            helpers.computeLocalBoundingBox(derivative.model, this._localBoundingBox);
            this.outs.updated.set();
            if (true) {
                // log bounding box to console
                const box = { min: this._localBoundingBox.min.toArray(), max: this._localBoundingBox.max.toArray() };
                console.log("CVModel.onLoad - bounding box: ", box);
            }
            // update loaded quality property
            this.outs.quality.setValue(derivative.data.quality);
            if (this.ins.override.value) {
                this.updateMaterial();
            }
            // make sure render order is correct
            if (this.ins.renderOrder.value !== 0)
                this.updateRenderOrder(this.object3D, this.ins.renderOrder.value);
            // set asset manager flag for initial model load
            if (!this.assetManager.initialLoad) {
                this.assetManager.initialLoad = true;
            }
        })
            .catch(error => Notification_1.default.show(`Failed to load model derivative: ${error.message}`));
    }
}
exports.default = CVModel2;
CVModel2.typeName = "CVModel2";
CVModel2.text = "Model";
CVModel2.icon = "cube";
CVModel2.rotationOrder = "ZYX";
CVModel2.ins = {
    globalUnits: Component_1.types.Enum("Model.GlobalUnits", model_1.EUnitType, model_1.EUnitType.cm),
    localUnits: Component_1.types.Enum("Model.LocalUnits", model_1.EUnitType, model_1.EUnitType.cm),
    quality: Component_1.types.Enum("Model.Quality", model_1.EDerivativeQuality, model_1.EDerivativeQuality.High),
    tags: Component_1.types.String("Model.Tags"),
    renderOrder: Component_1.types.Number("Model.RenderOrder", 0),
    activeTags: Component_1.types.String("Model.ActiveTags"),
    autoLoad: Component_1.types.Boolean("Model.AutoLoad", true),
    position: Component_1.types.Vector3("Model.Position"),
    rotation: Component_1.types.Vector3("Model.Rotation"),
    center: Component_1.types.Event("Model.Center"),
    shader: Component_1.types.Enum("Material.Shader", UberPBRMaterial_1.EShaderMode, UberPBRMaterial_1.EShaderMode.Default),
    override: Component_1.types.Boolean("Material.Override", false),
    color: Component_1.types.ColorRGB("Material.BaseColor"),
    opacity: Component_1.types.Percent("Material.Opacity", 1.0),
    hiddenOpacity: Component_1.types.Percent("Material.HiddenOpacity", 0.0),
    roughness: Component_1.types.Percent("Material.Roughness", 0.8),
    metalness: Component_1.types.Percent("Material.Metalness", 0.1),
    occlusion: Component_1.types.Percent("Material.Occlusion", 0.3),
    dumpDerivatives: Component_1.types.Event("Derivatives.Dump"),
};
CVModel2.outs = {
    unitScale: Component_1.types.Number("UnitScale", { preset: 1, precision: 5 }),
    quality: Component_1.types.Enum("LoadedQuality", model_1.EDerivativeQuality),
    updated: Component_1.types.Event("Updated"),
};


/***/ }),

/***/ "./components/CVNode.ts":
/*!******************************!*\
  !*** ./components/CVNode.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const CTransform_1 = __webpack_require__(/*! @ff/scene/components/CTransform */ "../../libs/ff-scene/source/components/CTransform.ts");
////////////////////////////////////////////////////////////////////////////////
const _vec3a = new THREE.Vector3();
const _vec3b = new THREE.Vector3();
const _mat4 = new THREE.Matrix4();
const _quat = new THREE.Quaternion();
const _euler = new THREE.Euler();
class CVNode extends CTransform_1.default {
    get settingProperties() {
        return [
            this.ins.position,
            this.ins.rotation,
            this.ins.scale,
        ];
    }
    get snapshotProperties() {
        return [
            this.ins.position,
            this.ins.rotation,
            this.ins.scale,
        ];
    }
    fromData(data) {
        const { position, rotation, order, scale } = this.ins;
        const orderTag = CTransform_1.ERotationOrder[order.getValidatedValue()];
        if (data.matrix) {
            _mat4.fromArray(data.matrix);
            _mat4.decompose(_vec3a, _quat, _vec3b);
            _vec3a.toArray(position.value);
            _euler.setFromQuaternion(_quat, orderTag);
            _euler.toVector3(_vec3a).multiplyScalar(THREE.Math.RAD2DEG).toArray(rotation.value);
            _vec3b.toArray(scale.value);
            position.set();
            rotation.set();
            scale.set();
        }
        else {
            if (data.translation) {
                position.setValue(data.translation.slice());
            }
            if (data.rotation) {
                _quat.fromArray(data.rotation);
                _euler.setFromQuaternion(_quat, orderTag);
                _euler.toVector3(_vec3a).multiplyScalar(THREE.Math.RAD2DEG).toArray(rotation.value);
                rotation.set();
            }
            if (data.scale) {
                scale.setValue(data.scale.slice());
            }
            // this updates the matrix from the PRS properties
            this.transform.changed = true;
        }
    }
    toData() {
        this.object3D.matrix.decompose(_vec3a, _quat, _vec3b);
        const data = {};
        if (_vec3a.x !== 0 || _vec3a.y !== 0 || _vec3a.z !== 0) {
            data.translation = _vec3a.toArray();
        }
        if (_quat.x !== 0 || _quat.y !== 0 || _quat.z !== 0 || _quat.w !== 1) {
            data.rotation = _quat.toArray();
        }
        if (_vec3b.x !== 1 || _vec3b.y !== 1 || _vec3b.z !== 1) {
            data.scale = _vec3b.toArray();
        }
        return data;
    }
}
exports.default = CVNode;
CVNode.typeName = "CVNode";
CVNode.text = "Transform";
CVNode.icon = "";


/***/ }),

/***/ "./components/CVNodeObserver.ts":
/*!**************************************!*\
  !*** ./components/CVNodeObserver.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CVNodeProvider_1 = __webpack_require__(/*! ./CVNodeProvider */ "./components/CVNodeProvider.ts");
const CVDocumentObserver_1 = __webpack_require__(/*! ./CVDocumentObserver */ "./components/CVDocumentObserver.ts");
////////////////////////////////////////////////////////////////////////////////
/**
 * Inherit from this class to observe changes of the currently active node and document.
 * Call startObserving() to begin receiving change events. Override onActiveNode() to react on active node changes.
 * Override onActiveDocument() to react on active document changes.
 */
class CVNodeObserver extends CVDocumentObserver_1.default {
    constructor() {
        super(...arguments);
        this.activeNode = null;
    }
    get nodeProvider() {
        return this.getGraphComponent(CVNodeProvider_1.default);
    }
    /**
     * Starts observing changes of the active node. Must be called explicitly by descendant classes
     * in order to start observation.
     */
    startObserving() {
        super.startObserving();
        const provider = this.nodeProvider;
        provider.on("active-node", this.onActiveNodeEvent, this);
        if (provider.activeNode) {
            this.activeNode = provider.activeNode;
            this.onActiveNode(null, provider.activeNode);
        }
    }
    /**
     * Stops observing changes of the active node.
     */
    stopObserving() {
        const provider = this.nodeProvider;
        provider.off("active-node", this.onActiveNodeEvent, this);
        // if a node is active,
        if (provider.activeNode) {
            this.activeNode = null;
            this.onActiveNode(provider.activeNode, null);
        }
        super.stopObserving();
    }
    /**
     * Called after the active node has changed. Override to react on the change.
     * @param previous The previous active node.
     * @param next The next active node.
     */
    onActiveNode(previous, next) {
    }
    onActiveNodeEvent(event) {
        this.activeNode = event.next;
        this.onActiveNode(event.previous, event.next);
    }
}
exports.default = CVNodeObserver;
CVNodeObserver.typeName = "CVNodeObserver";


/***/ }),

/***/ "./components/CVNodeProvider.ts":
/*!**************************************!*\
  !*** ./components/CVNodeProvider.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CNodeProvider_1 = __webpack_require__(/*! @ff/graph/components/CNodeProvider */ "../../libs/ff-graph/source/components/CNodeProvider.ts");
const NVNode_1 = __webpack_require__(/*! ../nodes/NVNode */ "./nodes/NVNode.ts");
const CVDocumentProvider_1 = __webpack_require__(/*! ./CVDocumentProvider */ "./components/CVDocumentProvider.ts");
class CVNodeProvider extends CNodeProvider_1.default {
    constructor(node, id) {
        super(node, id);
        this.outs = this.addOutputs(CVNodeProvider.outs);
        this.scope = CNodeProvider_1.ENodeScope.Graph;
    }
    get documentProvider() {
        return this.getComponent(CVDocumentProvider_1.default);
    }
    create() {
        super.create();
        this.documentProvider.on("active-component", this.onActiveDocument, this);
    }
    dispose() {
        this.documentProvider.off("active-component", this.onActiveDocument, this);
        super.dispose();
    }
    onActiveDocument(event) {
        this.scopedGraph = event.next;
    }
    onActiveNode(previous, next) {
        this.outs.activeNode.setValue(next);
        const selection = this.selection;
        if (next) {
            if (!selection.nodeContainsSelectedComponent(next)) {
                selection.selectNode(next);
            }
        }
        else if (previous) {
            selection.clearSelection();
        }
    }
    onScopedNodes() {
        this.outs.changedNodes.set();
    }
}
exports.default = CVNodeProvider;
CVNodeProvider.typeName = "CVNodeProvider";
CVNodeProvider.nodeType = NVNode_1.default;
CVNodeProvider.followComponentSelection = true;
CVNodeProvider.outs = {
    activeNode: Component_1.types.Object("Nodes.Active", NVNode_1.default),
    changedNodes: Component_1.types.Event("Nodes.Changed"),
};


/***/ }),

/***/ "./components/CVOrbitNavigation.ts":
/*!*****************************************!*\
  !*** ./components/CVOrbitNavigation.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const CObject3D_1 = __webpack_require__(/*! @ff/scene/components/CObject3D */ "../../libs/ff-scene/source/components/CObject3D.ts");
const CameraController_1 = __webpack_require__(/*! @ff/three/CameraController */ "../../libs/ff-three/source/CameraController.ts");
const CTransform_1 = __webpack_require__(/*! @ff/scene/components/CTransform */ "../../libs/ff-scene/source/components/CTransform.ts");
const UniversalCamera_1 = __webpack_require__(/*! @ff/three/UniversalCamera */ "../../libs/ff-three/source/UniversalCamera.ts");
exports.EProjection = UniversalCamera_1.EProjection;
const CVScene_1 = __webpack_require__(/*! ./CVScene */ "./components/CVScene.ts");
const CVAssetManager_1 = __webpack_require__(/*! ./CVAssetManager */ "./components/CVAssetManager.ts");
var EViewPreset;
(function (EViewPreset) {
    EViewPreset[EViewPreset["Left"] = 0] = "Left";
    EViewPreset[EViewPreset["Right"] = 1] = "Right";
    EViewPreset[EViewPreset["Top"] = 2] = "Top";
    EViewPreset[EViewPreset["Bottom"] = 3] = "Bottom";
    EViewPreset[EViewPreset["Front"] = 4] = "Front";
    EViewPreset[EViewPreset["Back"] = 5] = "Back";
    EViewPreset[EViewPreset["None"] = 6] = "None";
})(EViewPreset = exports.EViewPreset || (exports.EViewPreset = {}));
const _vec3 = new THREE.Vector3();
const _orientationPresets = [];
_orientationPresets[EViewPreset.Left] = [0, -90, 0];
_orientationPresets[EViewPreset.Right] = [0, 90, 0];
_orientationPresets[EViewPreset.Front] = [0, 0, 0];
_orientationPresets[EViewPreset.Back] = [0, 180, 0];
_orientationPresets[EViewPreset.Top] = [-90, 0, 0];
_orientationPresets[EViewPreset.Bottom] = [90, 0, 0];
const _replaceNull = function (vector, replacement) {
    for (let i = 0, n = vector.length; i < n; ++i) {
        vector[i] = vector[i] === null ? replacement : vector[i];
    }
    return vector;
};
/**
 * Voyager explorer orbit navigation.
 * Controls manipulation and parameters of the camera.
 */
class CVOrbitNavigation extends CObject3D_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CVOrbitNavigation.ins);
        this._controller = new CameraController_1.default();
        this._scene = null;
        this._modelBoundingBox = null;
        this._hasChanged = false;
        this._scene = this.scene;
    }
    get settingProperties() {
        return [
            this.ins.enabled,
            this.ins.orbit,
            this.ins.offset,
            this.ins.autoZoom,
            this.ins.autoRotation,
            this.ins.lightsFollowCamera,
            this.ins.minOrbit,
            this.ins.minOffset,
            this.ins.maxOrbit,
            this.ins.maxOffset,
        ];
    }
    get snapshotProperties() {
        return [
            this.ins.orbit,
            this.ins.offset,
        ];
    }
    get assetManager() {
        return this.getMainComponent(CVAssetManager_1.default);
    }
    create() {
        super.create();
        this.system.on(["pointer-down", "pointer-up", "pointer-move"], this.onPointer, this);
        this.system.on("wheel", this.onTrigger, this);
        this.assetManager.outs.completed.on("value", this.onLoadingCompleted, this);
    }
    dispose() {
        this.assetManager.outs.completed.off("value", this.onLoadingCompleted, this);
        this.system.off(["pointer-down", "pointer-up", "pointer-move"], this.onPointer, this);
        this.system.off("wheel", this.onTrigger, this);
        super.dispose();
    }
    update() {
        const ins = this.ins;
        const controller = this._controller;
        const cameraComponent = this._scene.activeCameraComponent;
        const camera = cameraComponent ? cameraComponent.camera : null;
        const { projection, preset, orbit, offset } = ins;
        // camera projection
        if (cameraComponent && projection.changed) {
            camera.setProjection(projection.getValidatedValue());
            cameraComponent.ins.projection.setValue(projection.value, true);
        }
        // camera preset
        if (preset.changed && preset.value !== EViewPreset.None) {
            orbit.setValue(_orientationPresets[preset.getValidatedValue()].slice());
        }
        // zoom extents
        if (camera && ins.zoomExtents.changed) {
            const scene = this.getGraphComponent(CVScene_1.default);
            this._modelBoundingBox = scene.outs.boundingBox.value;
            controller.zoomExtents(this._modelBoundingBox);
        }
        // include lights
        if (ins.lightsFollowCamera.changed) {
            const lightTransform = this.getLightTransform();
            if (lightTransform) {
                if (ins.lightsFollowCamera.value) {
                    lightTransform.ins.order.setValue(CTransform_1.ERotationOrder.ZXY);
                    lightTransform.ins.rotation.reset();
                    lightTransform.ins.rotation.linkFrom(orbit, 1, 1);
                }
                else {
                    lightTransform.ins.rotation.unlinkFrom(orbit, 1, 1);
                    lightTransform.ins.rotation.reset();
                }
            }
        }
        const { minOrbit, minOffset, maxOrbit, maxOffset } = ins;
        // orbit, offset and limits
        if (orbit.changed || offset.changed) {
            controller.orbit.fromArray(orbit.value);
            controller.offset.fromArray(offset.value);
        }
        if (minOrbit.changed || minOffset.changed || maxOrbit.changed || maxOffset.changed) {
            controller.minOrbit.fromArray(minOrbit.value);
            controller.minOffset.fromArray(minOffset.value);
            controller.maxOrbit.fromArray(maxOrbit.value);
            controller.maxOffset.fromArray(maxOffset.value);
        }
        return true;
    }
    tick() {
        const ins = this.ins;
        const cameraComponent = this._scene.activeCameraComponent;
        if (!ins.enabled.value || !cameraComponent) {
            return;
        }
        const controller = this._controller;
        controller.camera = cameraComponent.camera;
        const transform = cameraComponent.transform;
        const forceUpdate = this.changed;
        if (controller.updateCamera(transform.object3D, forceUpdate)) {
            controller.orbit.toArray(ins.orbit.value);
            ins.orbit.set(true);
            controller.offset.toArray(ins.offset.value);
            ins.offset.set(true);
            // if camera has moved, set preset to "None"
            if (ins.preset.value !== EViewPreset.None && !ins.preset.changed) {
                ins.preset.setValue(EViewPreset.None, true);
            }
            if (transform) {
                transform.setPropertiesFromMatrix();
            }
            else {
                cameraComponent.setPropertiesFromMatrix();
            }
            return true;
        }
        return false;
    }
    preRender(context) {
        if (this._modelBoundingBox) {
            context.viewport.zoomExtents(this._modelBoundingBox);
        }
    }
    tock() {
        this._modelBoundingBox = null;
        return false;
    }
    fromData(data) {
        data = data || {};
        const orbit = data.orbit || {
            orbit: [-25, -25, 0],
            offset: [0, 0, 100],
            minOrbit: [-90, -Infinity, -Infinity],
            minOffset: [-Infinity, -Infinity, 0.1],
            maxOrbit: [90, Infinity, Infinity],
            maxOffset: [Infinity, Infinity, Infinity],
        };
        this.ins.copyValues({
            enabled: !!data.enabled,
            autoZoom: !!data.autoZoom,
            autoRotation: !!data.autoRotation,
            lightsFollowCamera: !!data.lightsFollowCamera,
            orbit: orbit.orbit,
            offset: orbit.offset,
            minOrbit: _replaceNull(orbit.minOrbit, -Infinity),
            maxOrbit: _replaceNull(orbit.maxOrbit, Infinity),
            minOffset: _replaceNull(orbit.minOffset, -Infinity),
            maxOffset: _replaceNull(orbit.maxOffset, Infinity),
        });
    }
    toData() {
        const ins = this.ins;
        const data = {};
        data.enabled = ins.enabled.value;
        data.autoZoom = ins.autoZoom.value;
        data.autoRotation = ins.autoRotation.value;
        data.lightsFollowCamera = ins.lightsFollowCamera.value;
        data.type = "Orbit";
        data.orbit = {
            orbit: ins.orbit.cloneValue(),
            offset: ins.offset.cloneValue(),
            minOrbit: ins.minOrbit.cloneValue(),
            maxOrbit: ins.maxOrbit.cloneValue(),
            minOffset: ins.minOffset.cloneValue(),
            maxOffset: ins.maxOffset.cloneValue(),
        };
        return data;
    }
    getLightTransform() {
        const lights = this.graph.findNodeByName("Lights");
        return lights && lights.getComponent(CTransform_1.default, true);
    }
    onPointer(event) {
        const viewport = event.viewport;
        // if viewport has it's own camera, don't handle event here
        if (viewport.camera) {
            return;
        }
        if (this.ins.enabled.value && this._scene.activeCameraComponent) {
            this._controller.setViewportSize(viewport.width, viewport.height);
            this._controller.onPointer(event);
            event.stopPropagation = true;
        }
        this._hasChanged = true;
    }
    onTrigger(event) {
        const viewport = event.viewport;
        // if viewport has it's own camera, don't handle event here
        if (viewport.camera) {
            return;
        }
        if (this.ins.enabled.value && this._scene.activeCameraComponent) {
            this._controller.setViewportSize(viewport.width, viewport.height);
            this._controller.onTrigger(event);
            event.stopPropagation = true;
        }
        this._hasChanged = true;
    }
    onLoadingCompleted(isLoading) {
        if (this.ins.autoZoom.value && !this._hasChanged) {
            this.ins.zoomExtents.set();
        }
    }
}
exports.default = CVOrbitNavigation;
CVOrbitNavigation.typeName = "CVOrbitNavigation";
CVOrbitNavigation.text = "Orbit Navigation";
CVOrbitNavigation.icon = "";
CVOrbitNavigation.ins = {
    enabled: CObject3D_1.types.Boolean("Settings.Enabled", true),
    preset: CObject3D_1.types.Enum("Camera.ViewPreset", EViewPreset, EViewPreset.None),
    projection: CObject3D_1.types.Enum("Camera.Projection", UniversalCamera_1.EProjection, UniversalCamera_1.EProjection.Perspective),
    lightsFollowCamera: CObject3D_1.types.Boolean("Navigation.LightsFollowCam", true),
    autoRotation: CObject3D_1.types.Boolean("Navigation.AutoRotation", false),
    zoomExtents: CObject3D_1.types.Event("Settings.ZoomExtents"),
    autoZoom: CObject3D_1.types.Boolean("Settings.AutoZoom", true),
    orbit: CObject3D_1.types.Vector3("Current.Orbit", [-25, -25, 0]),
    offset: CObject3D_1.types.Vector3("Current.Offset", [0, 0, 100]),
    minOrbit: CObject3D_1.types.Vector3("Limits.Min.Orbit", [-90, -Infinity, -Infinity]),
    minOffset: CObject3D_1.types.Vector3("Limits.Min.Offset", [-Infinity, -Infinity, 0.1]),
    maxOrbit: CObject3D_1.types.Vector3("Limits.Max.Orbit", [90, Infinity, Infinity]),
    maxOffset: CObject3D_1.types.Vector3("Limits.Max.Offset", [Infinity, Infinity, Infinity]),
};


/***/ }),

/***/ "./components/CVPointLight.ts":
/*!************************************!*\
  !*** ./components/CVPointLight.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CPointLight_1 = __webpack_require__(/*! @ff/scene/components/CPointLight */ "../../libs/ff-scene/source/components/CPointLight.ts");
const CLight_1 = __webpack_require__(/*! @ff/scene/components/CLight */ "../../libs/ff-scene/source/components/CLight.ts");
////////////////////////////////////////////////////////////////////////////////
class CVPointLight extends CPointLight_1.default {
    get settingProperties() {
        return [
            this.ins.color,
            this.ins.intensity,
            this.ins.distance,
            this.ins.decay,
            this.ins.shadowEnabled,
            this.ins.shadowResolution,
            this.ins.shadowBlur,
        ];
    }
    get snapshotProperties() {
        return [
            this.ins.color,
            this.ins.intensity,
        ];
    }
    fromDocument(document, node) {
        if (!isFinite(node.light)) {
            throw new Error("light property missing in node");
        }
        const data = document.lights[node.light];
        const ins = this.ins;
        if (data.type !== "point") {
            throw new Error("light type mismatch: not a point light");
        }
        data.point = data.point || {};
        ins.copyValues({
            color: data.color !== undefined ? data.color : ins.color.schema.preset,
            intensity: data.intensity !== undefined ? data.intensity : ins.intensity.schema.preset,
            position: ins.position.schema.preset,
            distance: data.point.distance || ins.distance.schema.preset,
            decay: data.point.decay !== undefined ? data.point.decay : ins.decay.schema.preset,
            shadowEnabled: data.shadowEnabled || false,
            shadowResolution: data.shadowResolution !== undefined ? CLight_1.EShadowMapResolution[data.shadowResolution] || 1 : 1,
            shadowBlur: data.shadowBlur !== undefined ? data.shadowBlur : ins.shadowBlur.schema.preset,
        });
        return node.light;
    }
    toDocument(document, node) {
        const ins = this.ins;
        const data = {
            color: ins.color.cloneValue(),
            intensity: ins.intensity.value,
            point: {
                distance: ins.distance.value,
                decay: ins.decay.value,
            },
        };
        data.type = "point";
        if (ins.shadowEnabled.value) {
            data.shadowEnabled = true;
            if (!ins.shadowBlur.isDefault()) {
                data.shadowBlur = ins.shadowBlur.value;
            }
            if (!ins.shadowResolution.isDefault()) {
                data.shadowResolution = CLight_1.EShadowMapResolution[ins.shadowResolution.value];
            }
        }
        document.lights = document.lights || [];
        const lightIndex = document.lights.length;
        document.lights.push(data);
        return lightIndex;
    }
}
exports.default = CVPointLight;
CVPointLight.typeName = "CVPointLight";
CVPointLight.text = "Point Light";
CVPointLight.icon = "bulb";


/***/ }),

/***/ "./components/CVReader.ts":
/*!********************************!*\
  !*** ./components/CVReader.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const setup_1 = __webpack_require__(/*! client/schema/setup */ "./schema/setup.ts");
exports.EReaderPosition = setup_1.EReaderPosition;
const Article_1 = __webpack_require__(/*! ../models/Article */ "./models/Article.ts");
exports.Article = Article_1.default;
const NVNode_1 = __webpack_require__(/*! ../nodes/NVNode */ "./nodes/NVNode.ts");
const CVMeta_1 = __webpack_require__(/*! ./CVMeta */ "./components/CVMeta.ts");
const CVAssetManager_1 = __webpack_require__(/*! ./CVAssetManager */ "./components/CVAssetManager.ts");
const CVAssetReader_1 = __webpack_require__(/*! ./CVAssetReader */ "./components/CVAssetReader.ts");
const CVAnalytics_1 = __webpack_require__(/*! ./CVAnalytics */ "./components/CVAnalytics.ts");
class CVReader extends Component_1.default {
    constructor() {
        super(...arguments);
        this.ins = this.addInputs(CVReader.ins);
        this.outs = this.addOutputs(CVReader.outs);
    }
    get settingProperties() {
        return [
            this.ins.enabled,
            this.ins.position,
        ];
    }
    get snapshotProperties() {
        return [
            this.ins.enabled,
            this.ins.articleId,
        ];
    }
    get articles() {
        return Object.keys(this._articles).map(key => this._articles[key]);
    }
    get activeArticle() {
        return this.outs.article.value;
    }
    get assetManager() {
        return this.getMainComponent(CVAssetManager_1.default);
    }
    get assetReader() {
        return this.getMainComponent(CVAssetReader_1.default);
    }
    get analytics() {
        return this.getMainComponent(CVAnalytics_1.default);
    }
    create() {
        super.create();
        this.getGraphComponents(CVMeta_1.default).forEach(meta => meta.on("update", this.updateArticles, this));
        this.graph.components.on(CVMeta_1.default, this.onMetaComponent, this);
        this.updateArticles();
    }
    dispose() {
        this.graph.components.off(CVMeta_1.default, this.onMetaComponent, this);
        this.getGraphComponents(CVMeta_1.default).forEach(meta => meta.off("update", this.updateArticles, this));
        super.dispose();
    }
    update(context) {
        const ins = this.ins;
        const outs = this.outs;
        if (ins.enabled.changed) {
            //this.analytics.sendProperty("Reader.Enabled", ins.enabled.value);
        }
        if (ins.articleId.changed) {
            const entry = this._articles[ins.articleId.value] || null;
            const article = entry && entry.article;
            outs.node.setValue(entry && entry.node);
            outs.article.setValue(article);
            outs.content.setValue("");
            if (article) {
                this.readArticle(article);
                this.analytics.sendProperty("Reader.ArticleId", article.data.title);
            }
        }
        return true;
    }
    readArticle(article) {
        const outs = this.outs;
        const uri = article.data.uri;
        if (!uri) {
            outs.content.setValue(`<h2>Can't display article: no URI.</h2>`);
            return;
        }
        return this.assetReader.getText(uri)
            .then(content => this.parseArticle(content, uri))
            .then(content => outs.content.setValue(content))
            .catch(error => outs.content.setValue(`<h2>Article not found at ${uri}</h2>`));
    }
    parseArticle(content, articlePath) {
        // remove line breaks
        content = content.replace(/[\n\r]/g, "");
        // transform article-relative to absolute URLs
        const articleBasePath = this.assetManager.getAssetBasePath(articlePath);
        content = content.replace(/(src=\")(.*?)(\")/g, (match, pre, assetUrl, post) => {
            if (!assetUrl.startsWith("/") && !assetUrl.startsWith("http")) {
                assetUrl = this.assetManager.getAssetUrl(articleBasePath + assetUrl);
            }
            return pre + assetUrl + post;
        });
        return Promise.resolve(content);
    }
    onMetaComponent(event) {
        if (event.add) {
            event.object.articles.on("update", this.updateArticles, this);
        }
        if (event.remove) {
            event.object.articles.off("update", this.updateArticles, this);
        }
        this.updateArticles();
    }
    updateArticles() {
        const metas = this.getGraphComponents(CVMeta_1.default);
        const masterList = this._articles = {};
        metas.forEach(meta => {
            const articles = meta.articles;
            const node = meta.node;
            articles.items.forEach(article => {
                masterList[article.id] = { article, node };
            });
        });
        const firstMeta = metas[0];
        if (firstMeta && firstMeta.leadArticle) {
            this.ins.articleId.setValue(firstMeta.leadArticle.id);
        }
        else {
            this.ins.articleId.setValue("");
        }
    }
    fromData(data) {
        data = data || {};
        this.ins.setValues({
            enabled: !!data.enabled,
            position: setup_1.EReaderPosition[data.position] || setup_1.EReaderPosition.Overlay,
            articleId: data.articleId || "",
        });
    }
    toData() {
        const ins = this.ins;
        const data = {
            enabled: ins.enabled.value,
            position: setup_1.EReaderPosition[ins.position.value] || "Overlay",
        };
        if (ins.articleId.value) {
            data.articleId = ins.articleId.value;
        }
        return data;
    }
}
exports.default = CVReader;
CVReader.typeName = "CVReader";
CVReader.text = "Reader";
CVReader.icon = "";
CVReader.ins = {
    enabled: Component_1.types.Boolean("Reader.Enabled"),
    position: Component_1.types.Enum("Reader.Position", setup_1.EReaderPosition),
    articleId: Component_1.types.String("Article.ID"),
};
CVReader.outs = {
    article: Component_1.types.Object("Article.Active", Article_1.default),
    content: Component_1.types.String("Article.Content"),
    node: Component_1.types.Object("Article.Node", NVNode_1.default),
};


/***/ }),

/***/ "./components/CVRenderTool.ts":
/*!************************************!*\
  !*** ./components/CVRenderTool.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! ../ui/PropertyOptions */ "./ui/PropertyOptions.ts");
const CVTool_1 = __webpack_require__(/*! ./CVTool */ "./components/CVTool.ts");
////////////////////////////////////////////////////////////////////////////////
class CVRenderTool extends CVTool_1.default {
    createView() {
        return new RenderToolView(this);
    }
}
exports.default = CVRenderTool;
CVRenderTool.typeName = "CVRenderTool";
CVRenderTool.text = "Material";
CVRenderTool.icon = "palette";
////////////////////////////////////////////////////////////////////////////////
let RenderToolView = class RenderToolView extends CVTool_1.ToolView {
    constructor() {
        super(...arguments);
        this.viewer = null;
    }
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-group", "sv-render-tool-view");
    }
    render() {
        const tool = this.tool;
        const viewer = this.viewer;
        if (!viewer) {
            return CVTool_1.html ``;
        }
        const shader = viewer.ins.shader;
        return CVTool_1.html `<div class="sv-section"><ff-button class="sv-section-lead" transparent icon=${tool.icon}></ff-button>
            <div class="sv-tool-controls">
                <sv-property-options .property=${shader} name="Material"></sv-property-options>
            </div>
        </div>`;
    }
    onActiveDocument(previous, next) {
        if (this.viewer) {
            this.viewer.ins.shader.off("value", this.onUpdate, this);
            this.viewer = null;
        }
        if (next) {
            this.viewer = next.setup.viewer;
            this.viewer.ins.shader.on("value", this.onUpdate, this);
        }
    }
};
RenderToolView = __decorate([
    CVTool_1.customElement("sv-render-tool-view")
], RenderToolView);
exports.RenderToolView = RenderToolView;


/***/ }),

/***/ "./components/CVScene.ts":
/*!*******************************!*\
  !*** ./components/CVScene.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const common_1 = __webpack_require__(/*! client/schema/common */ "./schema/common.ts");
const CVNode_1 = __webpack_require__(/*! ./CVNode */ "./components/CVNode.ts");
const CVModel2_1 = __webpack_require__(/*! ./CVModel2 */ "./components/CVModel2.ts");
////////////////////////////////////////////////////////////////////////////////
const _vec3 = new THREE.Vector3();
/**
 * Manages the scene and the nodes in the scene tree.
 *
 *  * ### Events
 * - *"bounding-box*" - emitted after the scene's model bounding box changed.
 */
class CVScene extends CVNode_1.default {
    constructor() {
        super(...arguments);
        this.ins = this.addInputs(CVScene.ins);
        this.outs = this.addOutputs(CVScene.outs);
    }
    get settingProperties() {
        return null;
    }
    get snapshotProperties() {
        return null;
    }
    get models() {
        return this.getGraphComponents(CVModel2_1.default);
    }
    create() {
        super.create();
        this.outs.boundingBox.setValue(new THREE.Box3());
        this.graph.components.on(CVModel2_1.default, this.onModelComponent, this);
        this.models.forEach(model => {
            model.ins.globalUnits.linkFrom(this.ins.units);
            this.ins.modelUpdated.linkFrom(model.outs.updated);
        });
    }
    update(context) {
        const ins = this.ins;
        if (ins.units.changed) {
            this.updateModelBoundingBox();
        }
        if (ins.modelUpdated.changed) {
            this.updateModelBoundingBox();
        }
        return true;
    }
    dispose() {
        this.graph.components.off(CVModel2_1.default, this.onModelComponent, this);
        super.dispose();
    }
    fromDocument(document, scene) {
        this.ins.units.setValue(common_1.EUnitType[scene.units] || 0);
    }
    toDocument(document, scene) {
        scene.units = common_1.EUnitType[this.ins.units.getValidatedValue()];
    }
    onModelComponent(event) {
        const model = event.object;
        if (event.add) {
            model.ins.globalUnits.linkFrom(this.ins.units);
            this.ins.modelUpdated.linkFrom(model.outs.updated);
        }
        this.updateModelBoundingBox();
    }
    updateModelBoundingBox() {
        if (true) {
            console.log("CVScene.updateModelBoundingBox");
        }
        const box = this.outs.boundingBox.value;
        box.makeEmpty();
        this.models.forEach(model => box.expandByObject(model.object3D));
        box.getSize(_vec3);
        this.outs.boundingBox.set();
        this.outs.boundingRadius.setValue(_vec3.length() * 0.5);
    }
}
exports.default = CVScene;
CVScene.typeName = "CVScene";
CVScene.text = "Scene";
CVScene.icon = "hierarchy";
CVScene.ins = {
    units: Component_1.types.Enum("Scene.Units", common_1.EUnitType, common_1.EUnitType.cm),
    modelUpdated: Component_1.types.Event("Scene.ModelUpdated"),
};
CVScene.outs = {
    boundingBox: Component_1.types.Object("Models.BoundingBox", THREE.Box3),
    boundingRadius: Component_1.types.Number("Models.BoundingRadius"),
};


/***/ }),

/***/ "./components/CVSetup.ts":
/*!*******************************!*\
  !*** ./components/CVSetup.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CTransform_1 = __webpack_require__(/*! @ff/scene/components/CTransform */ "../../libs/ff-scene/source/components/CTransform.ts");
const CVInterface_1 = __webpack_require__(/*! ./CVInterface */ "./components/CVInterface.ts");
const CVViewer_1 = __webpack_require__(/*! ./CVViewer */ "./components/CVViewer.ts");
const CVReader_1 = __webpack_require__(/*! ./CVReader */ "./components/CVReader.ts");
const CVOrbitNavigation_1 = __webpack_require__(/*! ./CVOrbitNavigation */ "./components/CVOrbitNavigation.ts");
const CVBackground_1 = __webpack_require__(/*! ./CVBackground */ "./components/CVBackground.ts");
const CVFloor_1 = __webpack_require__(/*! ./CVFloor */ "./components/CVFloor.ts");
const CVGrid_1 = __webpack_require__(/*! ./CVGrid */ "./components/CVGrid.ts");
const CVTape_1 = __webpack_require__(/*! ./CVTape */ "./components/CVTape.ts");
const CVSlicer_1 = __webpack_require__(/*! ./CVSlicer */ "./components/CVSlicer.ts");
const CVTours_1 = __webpack_require__(/*! ./CVTours */ "./components/CVTours.ts");
const CVSnapshots_1 = __webpack_require__(/*! ./CVSnapshots */ "./components/CVSnapshots.ts");
////////////////////////////////////////////////////////////////////////////////
/**
 * At the root of a Voyager scene, this component manages scene features,
 * including tours.
 */
class CVSetup extends Component_1.default {
    get featureMap() {
        return this.constructor.featureMap;
    }
    get transform() {
        return this.getComponent(CTransform_1.default);
    }
    create() {
        super.create();
        const node = this.node;
        const features = CVSetup.featureMap;
        for (const name in features) {
            this[name] = node.createComponent(features[name]);
        }
        this.snapshots = node.createComponent(CVSnapshots_1.default);
    }
    fromDocument(document, sceneIndex, pathMap) {
        const scene = document.scenes[sceneIndex];
        if (!isFinite(scene.setup)) {
            throw new Error("setup property missing in node");
        }
        const setupData = document.setups[scene.setup];
        const features = CVSetup.featureMap;
        for (const name in features) {
            pathMap.set(`scenes/${sceneIndex}/setup/${name}`, this[name]);
            const featureData = setupData[name];
            if (featureData) {
                this[name].fromData(featureData);
            }
        }
        if (setupData.snapshots) {
            this.snapshots.fromData(setupData.snapshots, pathMap);
        }
    }
    toDocument(document, sceneIndex, pathMap) {
        let setupData = null;
        const features = CVSetup.featureMap;
        for (const name in features) {
            pathMap.set(this[name], `scenes/${sceneIndex}/setup/${name}`);
            const featureData = this[name].toData();
            if (featureData) {
                setupData = setupData || {};
                setupData[name] = featureData;
            }
        }
        const snapshotData = this.snapshots.toData(pathMap);
        if (snapshotData) {
            setupData = setupData || {};
            setupData.snapshots = snapshotData;
        }
        if (setupData) {
            document.setups = document.setups || [];
            const index = document.setups.length;
            document.setups.push(setupData);
            document.scenes[sceneIndex].setup = index;
        }
    }
}
exports.default = CVSetup;
CVSetup.typeName = "CVSetup";
CVSetup.featureMap = {
    "interface": CVInterface_1.default,
    "reader": CVReader_1.default,
    "viewer": CVViewer_1.default,
    "navigation": CVOrbitNavigation_1.default,
    "background": CVBackground_1.default,
    "floor": CVFloor_1.default,
    "grid": CVGrid_1.default,
    "tape": CVTape_1.default,
    "slicer": CVSlicer_1.default,
    "tours": CVTours_1.default,
};


/***/ }),

/***/ "./components/CVSliceTool.ts":
/*!***********************************!*\
  !*** ./components/CVSliceTool.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! ../ui/PropertyBoolean */ "./ui/PropertyBoolean.ts");
__webpack_require__(/*! ../ui/PropertyOptions */ "./ui/PropertyOptions.ts");
__webpack_require__(/*! ../ui/PropertySlider */ "./ui/PropertySlider.ts");
const CVTool_1 = __webpack_require__(/*! ./CVTool */ "./components/CVTool.ts");
////////////////////////////////////////////////////////////////////////////////
class CVSliceTool extends CVTool_1.default {
    createView() {
        return new SliceToolView(this);
    }
}
exports.default = CVSliceTool;
CVSliceTool.typeName = "CVSliceTool";
CVSliceTool.text = "Slice";
CVSliceTool.icon = "knife";
////////////////////////////////////////////////////////////////////////////////
let SliceToolView = class SliceToolView extends CVTool_1.ToolView {
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-group", "sv-slice-tool-view");
    }
    render() {
        const document = this.activeDocument;
        if (!document) {
            return CVTool_1.html ``;
        }
        const tool = this.tool;
        const slicer = document.setup.slicer;
        const enabled = slicer.ins.enabled;
        const axis = slicer.ins.axis;
        const position = slicer.ins.position;
        return CVTool_1.html `<div class="sv-section"><ff-button class="sv-section-lead" transparent icon=${tool.icon}></ff-button>
            <div class="sv-tool-controls">
                <sv-property-boolean .property=${enabled} name="Slice Tool"></sv-property-boolean>
                <sv-property-options .property=${axis}></sv-property-options>
                <sv-property-slider .property=${position}></sv-property-slider>
            </div>
        </div>`;
    }
    onActiveDocument(previous, next) {
        this.requestUpdate();
    }
};
SliceToolView = __decorate([
    CVTool_1.customElement("sv-slice-tool-view")
], SliceToolView);
exports.SliceToolView = SliceToolView;


/***/ }),

/***/ "./components/CVSlicer.ts":
/*!********************************!*\
  !*** ./components/CVSlicer.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const setup_1 = __webpack_require__(/*! client/schema/setup */ "./schema/setup.ts");
const CVScene_1 = __webpack_require__(/*! ./CVScene */ "./components/CVScene.ts");
const CVModel2_1 = __webpack_require__(/*! ./CVModel2 */ "./components/CVModel2.ts");
////////////////////////////////////////////////////////////////////////////////
/**
 * Slicing plane vectors (X+, Y+, Z+, X-, Y-, Z-).
 */
const _planes = [
    [-1, 0, 0, 0],
    [0, -1, 0, 0],
    [0, 0, -1, 0],
    [1, 0, 0, 0],
    [0, 1, 0, 0],
    [0, 0, 1, 0],
];
/**
 * Component controlling global slicing parameters for all [[CVModel2]] components in a scene.
 */
class CVSlicer extends Component_1.default {
    constructor() {
        super(...arguments);
        this.ins = this.addInputs(CVSlicer.ins);
        this.plane = null;
        this.axisIndex = -1;
    }
    get settingProperties() {
        return [
            this.ins.enabled,
        ];
    }
    get snapshotProperties() {
        return [
            this.ins.enabled,
            this.ins.axis,
            this.ins.position,
            this.ins.inverted,
        ];
    }
    create() {
        super.create();
        const scene = this.getGraphComponent(CVScene_1.default);
        this.ins.boundingBox.linkFrom(scene.outs.boundingBox);
    }
    update(context) {
        const ins = this.ins;
        if (ins.axis.changed) {
            const axisIndex = ins.axis.getValidatedValue();
            if (axisIndex === this.axisIndex) {
                // if same axis is selected again, invert its orientation
                ins.inverted.setValue(!ins.inverted.value);
            }
            else {
                ins.inverted.setValue(false);
                this.axisIndex = axisIndex;
            }
        }
        if (!ins.enabled.value && !ins.enabled.changed) {
            return false;
        }
        const axisIndex = ins.axis.getValidatedValue();
        const axisInverted = ins.inverted.value;
        const planeIndex = axisIndex + (axisInverted ? 3 : 0);
        const boundingBox = this.ins.boundingBox.value;
        if (!boundingBox) {
            return true;
        }
        // set components of slicing plane vector
        this.plane = _planes[planeIndex];
        const min = boundingBox.min.getComponent(axisIndex);
        const max = boundingBox.max.getComponent(axisIndex);
        const value = 1 - ins.position.value;
        this.plane[3] = axisInverted ? value * (max - min) - max : max - value * (max - min);
        const models = this.getGraphComponents(CVModel2_1.default);
        // set the slicing plane in the Uber materials of each scene model
        models.forEach(model => {
            const object = model.object3D;
            object.traverse((mesh) => {
                if (mesh.isMesh) {
                    const material = mesh.material;
                    if (material.isUberPBRMaterial) {
                        this.updateMaterial(material);
                    }
                }
            });
        });
        return true;
    }
    fromData(data) {
        data = data || {};
        this.ins.setValues({
            enabled: data.enabled || false,
            axis: setup_1.ESliceAxis[data.axis] || setup_1.ESliceAxis.X,
            position: data.position || 0,
            inverted: data.inverted || false
        });
    }
    toData() {
        const ins = this.ins;
        return {
            enabled: ins.enabled.value,
            axis: setup_1.ESliceAxis[ins.axis.getValidatedValue()],
            position: ins.position.value,
            inverted: ins.inverted.value,
        };
    }
    updateMaterial(material) {
        const ins = this.ins;
        if (ins.enabled.changed) {
            material.enableCutPlane(ins.enabled.value);
            material.needsUpdate = true;
        }
        material.cutPlaneDirection.fromArray(this.plane);
        material.cutPlaneColor.fromArray(ins.color.value);
    }
}
exports.default = CVSlicer;
CVSlicer.typeName = "CVSlicer";
CVSlicer.text = "Slicer";
CVSlicer.icon = "";
CVSlicer.ins = {
    enabled: Component_1.types.Boolean("Slice.Enabled"),
    axis: Component_1.types.Enum("Slice.Axis", setup_1.ESliceAxis),
    position: Component_1.types.Number("Slice.Position", { min: 0, max: 1, preset: 0.5 }),
    inverted: Component_1.types.Boolean("Slice.Inverted"),
    color: Component_1.types.ColorRGB("Slice.Color", [0, 0.61, 0.87]),
    boundingBox: Component_1.types.Object("Scene.BoundingBox", THREE.Box3),
};


/***/ }),

/***/ "./components/CVSnapshots.ts":
/*!***********************************!*\
  !*** ./components/CVSnapshots.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CTweenMachine_1 = __webpack_require__(/*! @ff/graph/components/CTweenMachine */ "../../libs/ff-graph/source/components/CTweenMachine.ts");
exports.EEasingCurve = CTweenMachine_1.EEasingCurve;
const CLight_1 = __webpack_require__(/*! @ff/scene/components/CLight */ "../../libs/ff-scene/source/components/CLight.ts");
const CVSetup_1 = __webpack_require__(/*! ./CVSetup */ "./components/CVSetup.ts");
const CVModel2_1 = __webpack_require__(/*! ./CVModel2 */ "./components/CVModel2.ts");
class CVSnapshots extends CTweenMachine_1.default {
    constructor() {
        super(...arguments);
        this.targetFeatures = {};
    }
    create() {
        super.create();
        const setup = this.getGraphComponent(CVSetup_1.default);
        Object.keys(setup.featureMap).forEach(name => {
            this.targetFeatures[name] = false;
        });
        this.targetFeatures["models"] = false;
        this.targetFeatures["lights"] = false;
        this.initializeTargetFeatures();
    }
    initializeTargetFeatures() {
        const features = this.targetFeatures;
        Object.keys(features).forEach(key => features[key] = false);
        features["navigation"] = true;
        features["reader"] = true;
        this.updateTargets();
    }
    updateTargets() {
        const features = this.targetFeatures;
        const setup = this.getGraphComponent(CVSetup_1.default);
        Object.keys(features).forEach(name => {
            const component = setup[name];
            const shouldInclude = features[name];
            if (component) {
                this.updateComponentTarget(component, shouldInclude);
            }
        });
        const models = this.getGraphComponents(CVModel2_1.default);
        models.forEach(model => this.updateComponentTarget(model.transform, !!features["models"]));
        const lights = this.getGraphComponents(CLight_1.default);
        lights.forEach(light => this.updateComponentTarget(light, !!features["lights"]));
        /*
        this.targets.forEach((target, index) => {
            const component = target.property.group.linkable as Component;
            console.log("CVSnapshot.updateTargets - target #%s, component: %s, property: %s",
                index, component.displayName, target.property.path);
        });
         */
    }
    updateComponentTarget(component, include) {
        const snapshotProperties = component["snapshotProperties"];
        if (!snapshotProperties) {
            return;
        }
        snapshotProperties.forEach(property => {
            const schema = property.schema;
            if (!schema.event && property.type !== "object") {
                const isIncluded = this.hasTargetProperty(property);
                if (include && !isIncluded) {
                    this.addTargetProperty(property);
                }
                else if (!include && isIncluded) {
                    this.removeTargetProperty(property);
                }
            }
        });
    }
    fromData(data, pathMap) {
        this.clear();
        const features = this.targetFeatures;
        const keys = Object.keys(features);
        if (data.features) {
            keys.forEach(key => features[key] = data.features.indexOf(key) >= 0);
        }
        else {
            this.initializeTargetFeatures();
        }
        const missingTargets = new Set();
        data.targets.forEach((target, index) => {
            const slashIndex = target.lastIndexOf("/");
            const componentPath = target.substr(0, slashIndex);
            const propertyKey = target.substr(slashIndex + 1);
            const component = pathMap.get(componentPath);
            const property = component ? component.ins[propertyKey] : null;
            if (!property) {
                console.warn(`missing snapshot target property for '${target}'`);
                missingTargets.add(index);
            }
            else {
                this.addTargetProperty(property);
            }
        });
        data.states.forEach(state => {
            this.setState({
                id: state.id,
                curve: state.curve !== undefined ? CTweenMachine_1.EEasingCurve[state.curve] : CTweenMachine_1.EEasingCurve.EaseQuad,
                duration: state.duration !== undefined ? state.duration : 2,
                threshold: state.threshold !== undefined ? state.threshold : 0.5,
                values: state.values.filter((value, index) => !missingTargets.has(index)),
            });
        });
    }
    toData(pathMap) {
        const features = this.targetFeatures;
        const data = {
            features: Object.keys(features).filter(key => features[key]),
            targets: this.targets.map(target => {
                const component = target.property.group.linkable;
                const key = target.property.key;
                const componentPath = pathMap.get(component);
                if (!componentPath) {
                    //Array.from(pathMap).forEach(entry => console.log(entry[1], entry[0].displayName));
                    throw new Error(`snapshot path not registered for component '${component.displayName}'`);
                }
                return componentPath + "/" + key;
            }),
            states: Object.keys(this.states).map(key => {
                const state = this.states[key];
                const data = { id: state.id, values: state.values };
                if (state.curve !== CTweenMachine_1.EEasingCurve.EaseQuad) {
                    data.curve = CTweenMachine_1.EEasingCurve[state.curve];
                }
                if (state.duration !== 2) {
                    data.duration = state.duration;
                }
                if (state.threshold !== 0.5) {
                    data.threshold = state.threshold;
                }
                return data;
            }),
        };
        if (data.targets.length > 0 && data.states.length > 0) {
            return data;
        }
        return null;
    }
}
exports.default = CVSnapshots;
CVSnapshots.typeName = "CVSnapshots";


/***/ }),

/***/ "./components/CVSpotLight.ts":
/*!***********************************!*\
  !*** ./components/CVSpotLight.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CSpotLight_1 = __webpack_require__(/*! @ff/scene/components/CSpotLight */ "../../libs/ff-scene/source/components/CSpotLight.ts");
const CLight_1 = __webpack_require__(/*! @ff/scene/components/CLight */ "../../libs/ff-scene/source/components/CLight.ts");
////////////////////////////////////////////////////////////////////////////////
class CVSpotLight extends CSpotLight_1.default {
    get settingProperties() {
        return [
            this.ins.color,
            this.ins.intensity,
            this.ins.distance,
            this.ins.decay,
            this.ins.angle,
            this.ins.penumbra,
            this.ins.shadowEnabled,
            this.ins.shadowResolution,
            this.ins.shadowBlur,
        ];
    }
    get snapshotProperties() {
        return [
            this.ins.color,
            this.ins.intensity
        ];
    }
    fromDocument(document, node) {
        if (!isFinite(node.light)) {
            throw new Error("light property missing in node");
        }
        const data = document.lights[node.light];
        const ins = this.ins;
        if (data.type !== "spot") {
            throw new Error("light type mismatch: not a spot light");
        }
        data.spot = data.spot || {};
        ins.copyValues({
            color: data.color !== undefined ? data.color : ins.color.schema.preset,
            intensity: data.intensity !== undefined ? data.intensity : ins.intensity.schema.preset,
            position: ins.position.schema.preset,
            target: ins.target.schema.preset,
            distance: data.spot.distance || ins.distance.schema.preset,
            decay: data.spot.decay !== undefined ? data.spot.decay : ins.decay.schema.preset,
            angle: data.spot.angle !== undefined ? data.spot.angle : ins.angle.schema.preset,
            penumbra: data.spot.penumbra || ins.penumbra.schema.preset,
            shadowEnabled: data.shadowEnabled || false,
            shadowResolution: data.shadowResolution !== undefined ? CLight_1.EShadowMapResolution[data.shadowResolution] || 1 : 1,
            shadowBlur: data.shadowBlur !== undefined ? data.shadowBlur : ins.shadowBlur.schema.preset,
        });
        return node.light;
    }
    toDocument(document, node) {
        const ins = this.ins;
        const data = {
            color: ins.color.cloneValue(),
            intensity: ins.intensity.value,
            spot: {
                distance: ins.distance.value,
                decay: ins.decay.value,
                angle: ins.angle.value,
                penumbra: ins.penumbra.value,
            },
        };
        data.type = "spot";
        if (ins.shadowEnabled.value) {
            data.shadowEnabled = true;
            if (!ins.shadowBlur.isDefault()) {
                data.shadowBlur = ins.shadowBlur.value;
            }
            if (!ins.shadowResolution.isDefault()) {
                data.shadowResolution = CLight_1.EShadowMapResolution[ins.shadowResolution.value];
            }
        }
        document.lights = document.lights || [];
        const lightIndex = document.lights.length;
        document.lights.push(data);
        return lightIndex;
    }
}
exports.default = CVSpotLight;
CVSpotLight.typeName = "CVSpotLight";
CVSpotLight.text = "Spot Light";
CVSpotLight.icon = "bulb";


/***/ }),

/***/ "./components/CVTape.ts":
/*!******************************!*\
  !*** ./components/CVTape.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const CObject3D_1 = __webpack_require__(/*! @ff/scene/components/CObject3D */ "../../libs/ff-scene/source/components/CObject3D.ts");
const Pin_1 = __webpack_require__(/*! ../utils/Pin */ "./utils/Pin.ts");
const CVModel2_1 = __webpack_require__(/*! ./CVModel2 */ "./components/CVModel2.ts");
const CVScene_1 = __webpack_require__(/*! client/components/CVScene */ "./components/CVScene.ts");
////////////////////////////////////////////////////////////////////////////////
const _mat3 = new THREE.Matrix3();
const _vec3a = new THREE.Vector3();
const _vec3b = new THREE.Vector3();
const _vec3up = new THREE.Vector3(0, 1, 0);
var ETapeState;
(function (ETapeState) {
    ETapeState[ETapeState["SetStart"] = 0] = "SetStart";
    ETapeState[ETapeState["SetEnd"] = 1] = "SetEnd";
})(ETapeState = exports.ETapeState || (exports.ETapeState = {}));
class CVTape extends CObject3D_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CVTape.tapeIns);
        this.outs = this.addOutputs(CVTape.tapeOuts);
        this.startPin = null;
        this.endPin = null;
        this.line = null;
        this.object3D = new THREE.Group();
        this.startPin = new Pin_1.default();
        this.startPin.matrixAutoUpdate = false;
        this.startPin.visible = false;
        this.endPin = new Pin_1.default();
        this.endPin.matrixAutoUpdate = false;
        this.endPin.visible = false;
        const lineGeometry = new THREE.Geometry();
        lineGeometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 0));
        const lineMaterial = new THREE.LineBasicMaterial();
        lineMaterial.depthTest = false;
        lineMaterial.transparent = true;
        this.line = new THREE.Line(lineGeometry, lineMaterial);
        this.line.visible = false;
        this.object3D.add(this.startPin, this.endPin, this.line);
    }
    get settingProperties() {
        return [
            this.ins.visible,
        ];
    }
    get snapshotProperties() {
        return [
            this.ins.visible,
            this.ins.startPosition,
            this.ins.startDirection,
            this.ins.endPosition,
            this.ins.endDirection,
        ];
    }
    create() {
        super.create();
        const scene = this.getGraphComponent(CVScene_1.default);
        this.ins.boundingBox.linkFrom(scene.outs.boundingBox);
    }
    update(context) {
        super.update(context);
        const ins = this.ins;
        const lineGeometry = this.line.geometry;
        // determine pin scale based on scene/model bounding box
        if (ins.boundingBox.changed && ins.boundingBox.value) {
            ins.boundingBox.value.getSize(_vec3a);
            const radius = _vec3a.length() * 0.5;
            this.startPin.scale.setScalar(radius * 0.003);
            this.startPin.updateMatrix();
            this.endPin.scale.setScalar(radius * 0.003);
            this.endPin.updateMatrix();
        }
        // if tape is visible, listen for pointer events to set tape start/end
        if (ins.visible.changed) {
            if (ins.visible.value) {
                this.system.on("pointer-up", this.onPointerUp, this);
            }
            else {
                this.system.off("pointer-up", this.onPointerUp, this);
            }
        }
        // update tape start point
        if (ins.startPosition.changed || ins.startDirection.changed) {
            const startPin = this.startPin;
            startPin.position.fromArray(ins.startPosition.value);
            _vec3a.fromArray(ins.startDirection.value);
            startPin.quaternion.setFromUnitVectors(_vec3up, _vec3a);
            startPin.updateMatrix();
            lineGeometry.vertices[0].copy(startPin.position);
            lineGeometry.verticesNeedUpdate = true;
        }
        // update tape end point
        if (ins.endPosition.changed || ins.endDirection.changed) {
            const endPin = this.endPin;
            endPin.position.fromArray(ins.endPosition.value);
            _vec3a.fromArray(ins.endDirection.value);
            endPin.quaternion.setFromUnitVectors(_vec3up, _vec3a);
            endPin.updateMatrix();
            lineGeometry.vertices[1].copy(endPin.position);
            lineGeometry.verticesNeedUpdate = true;
        }
        // update distance between measured points
        _vec3a.fromArray(ins.startPosition.value);
        _vec3b.fromArray(ins.endPosition.value);
        this.outs.distance.setValue(_vec3a.distanceTo(_vec3b));
        return true;
    }
    fromData(data) {
        this.ins.copyValues({
            visible: data.enabled,
            startPosition: data.startPosition,
            startDirection: data.startDirection,
            endPosition: data.endPosition,
            endDirection: data.endDirection
        });
    }
    toData() {
        const ins = this.ins;
        return {
            enabled: ins.visible.cloneValue(),
            startPosition: ins.startPosition.cloneValue(),
            startDirection: ins.startDirection.cloneValue(),
            endPosition: ins.endPosition.cloneValue(),
            endDirection: ins.endDirection.cloneValue()
        };
    }
    onPointerUp(event) {
        if (event.isDragging || !event.component || !event.component.is(CVModel2_1.default)) {
            return;
        }
        // get click position and normal
        const model = event.component;
        const worldMatrix = model.object3D.matrixWorld;
        _mat3.getNormalMatrix(worldMatrix);
        const position = event.view.pickPosition(event).applyMatrix4(worldMatrix);
        const normal = event.view.pickNormal(event).applyMatrix3(_mat3).normalize();
        // update pins and measurement line
        const { startPin, endPin, line, ins, outs } = this;
        if (outs.state.value === ETapeState.SetStart) {
            position.toArray(ins.startPosition.value);
            normal.toArray(ins.startDirection.value);
            ins.startPosition.set();
            ins.startDirection.set();
            startPin.visible = true;
            endPin.visible = false;
            line.visible = false;
            outs.state.setValue(ETapeState.SetEnd);
        }
        else {
            position.toArray(ins.endPosition.value);
            normal.toArray(ins.endDirection.value);
            ins.endPosition.set();
            ins.endDirection.set();
            // set end position of tape
            startPin.visible = true;
            endPin.visible = true;
            line.visible = true;
            outs.state.setValue(ETapeState.SetStart);
        }
    }
}
exports.default = CVTape;
CVTape.typeName = "CVTape";
CVTape.text = "Tape";
CVTape.icon = "";
CVTape.tapeIns = {
    startPosition: CObject3D_1.types.Vector3("Start.Position"),
    startDirection: CObject3D_1.types.Vector3("Start.Direction"),
    endPosition: CObject3D_1.types.Vector3("End.Position"),
    endDirection: CObject3D_1.types.Vector3("End.Direction"),
    boundingBox: CObject3D_1.types.Object("Scene.BoundingBox", THREE.Box3),
};
CVTape.tapeOuts = {
    state: CObject3D_1.types.Enum("Tape.State", ETapeState),
    distance: CObject3D_1.types.Number("Tape.Distance"),
};


/***/ }),

/***/ "./components/CVTapeTool.ts":
/*!**********************************!*\
  !*** ./components/CVTapeTool.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! ../ui/PropertyBoolean */ "./ui/PropertyBoolean.ts");
__webpack_require__(/*! ../ui/PropertyString */ "./ui/PropertyString.ts");
const CVTape_1 = __webpack_require__(/*! ./CVTape */ "./components/CVTape.ts");
const CVTool_1 = __webpack_require__(/*! ./CVTool */ "./components/CVTool.ts");
////////////////////////////////////////////////////////////////////////////////
class CVTapeTool extends CVTool_1.default {
    createView() {
        return new TapeToolView(this);
    }
}
exports.default = CVTapeTool;
CVTapeTool.typeName = "CVTapeTool";
CVTapeTool.text = "Measure";
CVTapeTool.icon = "tape";
////////////////////////////////////////////////////////////////////////////////
let TapeToolView = class TapeToolView extends CVTool_1.ToolView {
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-group", "sv-tape-tool-view");
    }
    render() {
        const document = this.activeDocument;
        if (!document) {
            return CVTool_1.html ``;
        }
        const tool = this.tool;
        const tape = document.setup.tape;
        const visible = tape.ins.visible;
        const state = tape.outs.state.value;
        const distance = tape.outs.distance.value;
        let text;
        if (!visible.value) {
            text = "Switch on to take measurements.";
        }
        else if (distance === 0) {
            text = "Tap on model to set start of tape.";
        }
        else if (state === CVTape_1.ETapeState.SetStart) {
            const units = document.root.scene.ins.units.getOptionText();
            text = `${distance.toFixed(2)} ${units}`;
        }
        else {
            text = "Tap on model to set end of tape.";
        }
        return CVTool_1.html `<div class="sv-section"><ff-button class="sv-section-lead" transparent icon=${tool.icon}></ff-button>
            <div class="sv-tool-controls">
                <sv-property-boolean .property=${visible} name="Tape Tool"></sv-property-boolean>
                <div class="sv-property-view"><label class="ff-label ff-off">Measured Distance</label>
                <div class="ff-string">${text}</div></div>
            </div></div>`;
    }
    onActiveDocument(previous, next) {
        if (previous) {
            previous.setup.tape.off("update", this.onUpdate, this);
        }
        if (next) {
            next.setup.tape.on("update", this.onUpdate, this);
        }
        this.requestUpdate();
    }
};
TapeToolView = __decorate([
    CVTool_1.customElement("sv-tape-tool-view")
], TapeToolView);
exports.TapeToolView = TapeToolView;


/***/ }),

/***/ "./components/CVTool.ts":
/*!******************************!*\
  !*** ./components/CVTool.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
exports.types = Component_1.types;
const CVNodeObserver_1 = __webpack_require__(/*! ./CVNodeObserver */ "./components/CVNodeObserver.ts");
const CVAnalytics_1 = __webpack_require__(/*! ./CVAnalytics */ "./components/CVAnalytics.ts");
const NodeView_1 = __webpack_require__(/*! ../ui/explorer/NodeView */ "./ui/explorer/NodeView.ts");
exports.customElement = NodeView_1.customElement;
exports.property = NodeView_1.property;
exports.html = NodeView_1.html;
class CVTool extends CVNodeObserver_1.default {
    constructor() {
        super(...arguments);
        this.ins = this.addInputs(CVTool.toolIns);
        this.outs = this.addOutputs(CVTool.toolOuts);
        this._isActiveTool = false;
    }
    get isActiveTool() {
        return this._isActiveTool;
    }
    dispose() {
        if (this._isActiveTool) {
            this.deactivateTool();
        }
        super.dispose();
    }
    createView() {
        throw new Error("must override");
    }
    /**
     * Called when the tool is activated.
     */
    activateTool() {
        this._isActiveTool = true;
        this.startObserving();
    }
    /**
     * Called when the tool is deactivated.
     */
    deactivateTool() {
        this.stopObserving();
        this._isActiveTool = false;
    }
}
exports.default = CVTool;
CVTool.typeName = "CVTool";
CVTool.toolIns = {};
CVTool.toolOuts = {};
////////////////////////////////////////////////////////////////////////////////
class ToolView extends NodeView_1.default {
    constructor(tool) {
        super(tool.system);
        this.tool = null;
        this.tool = tool;
    }
    get analytics() {
        return this.system.getMainComponent(CVAnalytics_1.default);
    }
    firstConnected() {
        this.classList.add("sv-group", "sv-tool-view");
    }
    connected() {
        super.connected();
        this.tool.on("update", this.onUpdate, this);
    }
    disconnected() {
        this.tool.off("update", this.onUpdate, this);
        super.disconnected();
    }
}
__decorate([
    NodeView_1.property({ attribute: false })
], ToolView.prototype, "tool", void 0);
exports.ToolView = ToolView;


/***/ }),

/***/ "./components/CVToolProvider.ts":
/*!**************************************!*\
  !*** ./components/CVToolProvider.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CComponentProvider_1 = __webpack_require__(/*! @ff/graph/components/CComponentProvider */ "../../libs/ff-graph/source/components/CComponentProvider.ts");
const CVTool_1 = __webpack_require__(/*! ./CVTool */ "./components/CVTool.ts");
const CVAnalytics_1 = __webpack_require__(/*! ./CVAnalytics */ "./components/CVAnalytics.ts");
class CVToolProvider extends CComponentProvider_1.default {
    constructor(node, id) {
        super(node, id);
        this.ins = this.addInputs(CVToolProvider.ins);
        this.scope = CComponentProvider_1.EComponentScope.Node;
    }
    get analytics() {
        return this.getMainComponent(CVAnalytics_1.default);
    }
    update(context) {
        const ins = this.ins;
        if (ins.visible.changed) {
            if (ins.visible.value && !this.activeComponent) {
                this.activeComponent = this.scopedComponents[0];
            }
        }
        return true;
    }
    activateComponent(tool) {
        tool.activateTool();
        this.analytics.sendProperty("Tools.ActiveTool", tool.text);
    }
    deactivateComponent(tool) {
        tool.deactivateTool();
    }
    onActiveComponent(previous, next) {
    }
}
exports.default = CVToolProvider;
CVToolProvider.typeName = "CVToolProvider";
CVToolProvider.isSystemSingleton = true;
CVToolProvider.componentType = CVTool_1.default;
CVToolProvider.ins = {
    visible: Component_1.types.Boolean("Tools.Visible")
};


/***/ }),

/***/ "./components/CVTours.ts":
/*!*******************************!*\
  !*** ./components/CVTours.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CVSnapshots_1 = __webpack_require__(/*! ./CVSnapshots */ "./components/CVSnapshots.ts");
const CVAnalytics_1 = __webpack_require__(/*! ./CVAnalytics */ "./components/CVAnalytics.ts");
////////////////////////////////////////////////////////////////////////////////
class CVTours extends Component_1.default {
    constructor() {
        super(...arguments);
        this.ins = this.addInputs(CVTours.ins);
        this.outs = this.addOutputs(CVTours.outs);
        this._tours = [];
    }
    get analytics() {
        return this.getMainComponent(CVAnalytics_1.default);
    }
    get snapshots() {
        return this.getComponent(CVSnapshots_1.default);
    }
    get tours() {
        return this._tours;
    }
    get activeSteps() {
        const tour = this.activeTour;
        return tour ? tour.steps : null;
    }
    get activeTour() {
        return this._tours[this.outs.tourIndex.value];
    }
    get activeStep() {
        const tour = this.activeTour;
        return tour ? tour.steps[this.outs.stepIndex.value] : null;
    }
    dispose() {
        super.dispose();
    }
    update(context) {
        const { ins, outs } = this;
        const tours = this._tours;
        const machine = this.snapshots;
        if (ins.enabled.changed) {
            if (ins.enabled.value) {
                // store pre-tour scene state
                const state = {
                    id: CVTours.sceneSnapshotId,
                    curve: CVSnapshots_1.EEasingCurve.EaseOutQuad,
                    duration: 1,
                    threshold: 0,
                    values: machine.getCurrentValues(),
                };
                machine.setState(state);
            }
            else {
                outs.tourIndex.set();
                // recall pre-tour scene state
                machine.tweenTo(CVTours.sceneSnapshotId, context.secondsElapsed);
                machine.deleteState(CVTours.sceneSnapshotId);
                return true;
            }
        }
        const tourIndex = Math.min(tours.length - 1, Math.max(-1, ins.tourIndex.value));
        const tour = tours[tourIndex];
        const stepCount = tour ? tour.steps.length : 0;
        outs.stepCount.setValue(stepCount);
        let nextStepIndex = -1;
        if (ins.tourIndex.changed || ins.enabled.changed) {
            if (tourIndex !== outs.tourIndex.value) {
                nextStepIndex = 0;
            }
            outs.tourIndex.setValue(tourIndex);
            outs.tourTitle.setValue(tour ? tour.title : "");
            outs.tourLead.setValue(tour ? tour.lead : "");
        }
        if (stepCount === 0) {
            outs.stepIndex.setValue(-1);
            outs.stepTitle.setValue("");
            return true;
        }
        let tween = true;
        if (ins.enabled.changed) {
            nextStepIndex = outs.stepIndex.value;
        }
        if (ins.stepIndex.changed) {
            nextStepIndex = Math.min(tour.steps.length - 1, Math.max(0, ins.stepIndex.value));
            tween = false;
        }
        if (ins.first.changed) {
            nextStepIndex = 0;
        }
        if (ins.next.changed) {
            nextStepIndex = outs.stepIndex.value + 1;
            // after last step, show tour menu
            if (nextStepIndex >= stepCount) {
                outs.tourIndex.setValue(-1);
                outs.tourTitle.setValue("");
                outs.tourLead.setValue("");
                nextStepIndex = -1;
            }
        }
        if (ins.previous.changed) {
            // previous step, wrap around when reaching first step
            nextStepIndex = (outs.stepIndex.value + stepCount - 1) % stepCount;
        }
        if (nextStepIndex >= 0) {
            // tween to the next step
            const step = tour.steps[nextStepIndex];
            outs.stepIndex.setValue(nextStepIndex);
            outs.stepTitle.setValue(step.title);
            machine.ins.id.setValue(step.id);
            tween ? machine.ins.tween.set() : machine.ins.recall.set();
        }
        return true;
    }
    fromData(data) {
        this._tours = data.map(tour => ({
            title: tour.title,
            steps: tour.steps,
            lead: tour.lead || "",
            tags: tour.tags || [],
        }));
        this.ins.tourIndex.setValue(-1);
        this.outs.count.setValue(this._tours.length);
    }
    toData() {
        if (this._tours.length === 0) {
            return null;
        }
        return this._tours.map(tour => {
            const data = {
                title: tour.title,
                steps: tour.steps,
            };
            if (tour.lead) {
                data.lead = tour.lead;
            }
            if (tour.tags.length > 0) {
                data.tags = tour.tags;
            }
            return data;
        });
    }
}
exports.default = CVTours;
CVTours.typeName = "CVTours";
CVTours.sceneSnapshotId = "scene-default";
CVTours.ins = {
    enabled: Component_1.types.Boolean("Tours.Enabled"),
    tourIndex: Component_1.types.Integer("Tours.Index", -1),
    stepIndex: Component_1.types.Integer("Step.Index"),
    next: Component_1.types.Event("Step.Next"),
    previous: Component_1.types.Event("Step.Previous"),
    first: Component_1.types.Event("Step.First"),
};
CVTours.outs = {
    count: Component_1.types.Integer("Tours.Count"),
    tourIndex: Component_1.types.Integer("Tour.Index", -1),
    tourTitle: Component_1.types.String("Tour.Title"),
    tourLead: Component_1.types.String("Tour.Lead"),
    stepCount: Component_1.types.Integer("Tour.Steps"),
    stepIndex: Component_1.types.Integer("Step.Index"),
    stepTitle: Component_1.types.String("Step.Title"),
};


/***/ }),

/***/ "./components/CVViewTool.ts":
/*!**********************************!*\
  !*** ./components/CVViewTool.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! @ff/ui/Button */ "../../libs/ff-ui/source/Button.ts");
__webpack_require__(/*! ../ui/PropertyOptions */ "./ui/PropertyOptions.ts");
__webpack_require__(/*! ../ui/PropertyEvent */ "./ui/PropertyEvent.ts");
const CVOrbitNavigation_1 = __webpack_require__(/*! ./CVOrbitNavigation */ "./components/CVOrbitNavigation.ts");
const CVTool_1 = __webpack_require__(/*! ./CVTool */ "./components/CVTool.ts");
////////////////////////////////////////////////////////////////////////////////
class CVViewTool extends CVTool_1.default {
    createView() {
        return new ViewToolView(this);
    }
}
exports.default = CVViewTool;
CVViewTool.typeName = "CVViewTool";
CVViewTool.text = "View";
CVViewTool.icon = "eye";
////////////////////////////////////////////////////////////////////////////////
let ViewToolView = class ViewToolView extends CVTool_1.ToolView {
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-view-tool-view");
    }
    render() {
        const document = this.activeDocument;
        if (!document) {
            return CVTool_1.html ``;
        }
        const tool = this.tool;
        const navigation = document.setup.navigation;
        const projection = navigation.ins.projection;
        const preset = navigation.ins.preset;
        const zoom = navigation.ins.zoomExtents;
        const presetMap = [CVOrbitNavigation_1.EViewPreset.Front, CVOrbitNavigation_1.EViewPreset.Back,
            CVOrbitNavigation_1.EViewPreset.Left, CVOrbitNavigation_1.EViewPreset.Right,
            CVOrbitNavigation_1.EViewPreset.Top, CVOrbitNavigation_1.EViewPreset.Bottom];
        return CVTool_1.html `<div class="sv-section"><ff-button class="sv-section-lead" transparent icon=${tool.icon}></ff-button>
            <div class="sv-tool-controls">
                <sv-property-options .property=${projection}></sv-property-options>
                <sv-property-options .property=${preset} name="View" .indexMap=${presetMap}></sv-property-options>
                <sv-property-event .property=${zoom} name="Center" icon="zoom"></sv-property-event>
            </div>
        </div>`;
    }
    onActiveDocument(previous, next) {
        this.requestUpdate();
    }
};
ViewToolView = __decorate([
    CVTool_1.customElement("sv-view-tool-view")
], ViewToolView);
exports.ViewToolView = ViewToolView;


/***/ }),

/***/ "./components/CVViewer.ts":
/*!********************************!*\
  !*** ./components/CVViewer.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = __webpack_require__(/*! @ff/graph/Component */ "../../libs/ff-graph/source/Component.ts");
const CRenderer_1 = __webpack_require__(/*! @ff/scene/components/CRenderer */ "../../libs/ff-scene/source/components/CRenderer.ts");
const setup_1 = __webpack_require__(/*! client/schema/setup */ "./schema/setup.ts");
const model_1 = __webpack_require__(/*! client/schema/model */ "./schema/model.ts");
const CVModel2_1 = __webpack_require__(/*! ./CVModel2 */ "./components/CVModel2.ts");
const CVAnnotationView_1 = __webpack_require__(/*! ./CVAnnotationView */ "./components/CVAnnotationView.ts");
const CVAnalytics_1 = __webpack_require__(/*! ./CVAnalytics */ "./components/CVAnalytics.ts");
////////////////////////////////////////////////////////////////////////////////
class CVViewer extends Component_1.default {
    constructor() {
        super(...arguments);
        this.ins = this.addInputs(CVViewer.ins);
        this.outs = this.addOutputs(CVViewer.outs);
    }
    get settingProperties() {
        return [
            this.ins.annotationsVisible,
            this.ins.activeTags,
            this.ins.sortedTags,
            this.ins.radioTags,
            this.ins.shader,
            this.ins.exposure,
            this.ins.gamma,
        ];
    }
    get snapshotProperties() {
        return [
            this.ins.annotationsVisible,
            this.ins.activeAnnotation,
            this.ins.activeTags,
            this.ins.shader,
            this.ins.exposure,
        ];
    }
    get analytics() {
        return this.getMainComponent(CVAnalytics_1.default);
    }
    get renderer() {
        return this.getMainComponent(CRenderer_1.default);
    }
    create() {
        super.create();
        this.graph.components.on(CVModel2_1.default, this.onModelComponent, this);
        this.graph.components.on(CVAnnotationView_1.default, this.onAnnotationsComponent, this);
    }
    dispose() {
        this.graph.components.off(CVModel2_1.default, this.onModelComponent, this);
        this.graph.components.off(CVAnnotationView_1.default, this.onAnnotationsComponent, this);
        super.dispose();
    }
    update(context) {
        const ins = this.ins;
        if (ins.shader.changed) {
            const shader = ins.shader.getValidatedValue();
            this.getGraphComponents(CVModel2_1.default).forEach(model => model.ins.shader.setValue(shader));
        }
        if (ins.exposure.changed) {
            this.renderer.ins.exposure.setValue(ins.exposure.value);
        }
        if (ins.gamma.changed) {
            this.renderer.ins.gamma.setValue(ins.gamma.value);
        }
        if (ins.quality.changed) {
            const quality = ins.quality.getValidatedValue();
            this.getGraphComponents(CVModel2_1.default).forEach(model => model.ins.quality.setValue(quality));
        }
        if (ins.activeAnnotation.changed) {
            const id = ins.activeAnnotation.value;
            this.getGraphComponents(CVAnnotationView_1.default).forEach(view => view.setActiveAnnotationById(id));
        }
        if (ins.annotationsVisible.changed) {
            const visible = ins.annotationsVisible.value;
            this.getGraphComponents(CVAnnotationView_1.default).forEach(view => view.ins.visible.setValue(visible));
        }
        if (ins.activeTags.changed) {
            const tags = ins.activeTags.value;
            this.getGraphComponents(CVAnnotationView_1.default).forEach(view => view.ins.activeTags.setValue(tags));
            this.getGraphComponents(CVModel2_1.default).forEach(model => model.ins.activeTags.setValue(tags));
        }
        if (ins.sortedTags.changed) {
            this.refreshTagCloud();
        }
        return true;
    }
    // preRender(context)
    // {
    //     const qualityName = this.ins.quality.getOptionText();
    //     context.viewport.overlay.setLabel(ELocation.BottomRight, "quality", `Quality: ${qualityName}`);
    // }
    fromData(data) {
        const ins = this.ins;
        ins.copyValues({
            shader: setup_1.EShaderMode[data.shader] || setup_1.EShaderMode.Default,
            exposure: data.exposure !== undefined ? data.exposure : ins.exposure.schema.preset,
            gamma: data.gamma !== undefined ? data.gamma : ins.gamma.schema.preset,
            annotationsVisible: !!data.annotationsVisible,
            activeTags: data.activeTags || "",
            sortedTags: data.sortedTags || "",
            radioTags: data.radioTags !== undefined ? !!data.radioTags : ins.radioTags.schema.preset,
        });
    }
    toData() {
        const ins = this.ins;
        const data = {
            shader: setup_1.EShaderMode[ins.shader.value],
            exposure: ins.exposure.value,
            gamma: ins.gamma.value,
        };
        if (ins.annotationsVisible.value) {
            data.annotationsVisible = true;
        }
        if (ins.activeTags.value) {
            data.activeTags = ins.activeTags.value;
        }
        if (ins.sortedTags.value) {
            data.sortedTags = ins.sortedTags.value;
        }
        if (ins.radioTags.value) {
            data.radioTags = ins.radioTags.value;
        }
        return data;
    }
    refreshTagCloud() {
        const tagCloud = new Set();
        const models = this.getGraphComponents(CVModel2_1.default);
        models.forEach(model => {
            const tags = model.ins.tags.value.split(",").map(tag => tag.trim()).filter(tag => tag);
            tags.forEach(tag => tagCloud.add(tag));
        });
        const views = this.getGraphComponents(CVAnnotationView_1.default);
        views.forEach(component => {
            const annotations = component.getAnnotations();
            annotations.forEach(annotation => {
                const tags = annotation.data.tags;
                tags.forEach(tag => tagCloud.add(tag));
            });
        });
        const tagArray = Array.from(tagCloud);
        const sortedTags = this.ins.sortedTags.value.split(",").map(tag => tag.trim()).filter(tag => tag);
        tagArray.sort((a, b) => {
            const aIndex = sortedTags.indexOf(a);
            const bIndex = sortedTags.indexOf(b);
            return aIndex < bIndex ? -1 : (aIndex > bIndex ? 1 : 0);
        });
        this.outs.tagCloud.setValue(tagArray.join(", "));
        if (true) {
            console.log("CVViewer.refreshTagCloud - %s", tagArray.join(", "));
        }
    }
    onAnnotationClick(event) {
        const id = event.annotation ? event.annotation.id : "";
        this.ins.activeAnnotation.setValue(id);
    }
    onModelComponent(event) {
        const component = event.object;
        if (event.add) {
            component.on("tag-update", this.refreshTagCloud, this);
        }
        else if (event.remove) {
            component.off("tag-update", this.refreshTagCloud, this);
        }
    }
    onAnnotationsComponent(event) {
        const component = event.object;
        if (event.add) {
            component.on("tag-update", this.refreshTagCloud, this);
            component.on("click", this.onAnnotationClick, this);
            component.ins.visible.setValue(this.ins.annotationsVisible.value);
        }
        else if (event.remove) {
            component.off("tag-update", this.refreshTagCloud, this);
            component.off("click", this.onAnnotationClick, this);
        }
    }
}
exports.default = CVViewer;
CVViewer.typeName = "CVViewer";
CVViewer.text = "Viewer";
CVViewer.icon = "";
CVViewer.ins = {
    annotationsVisible: Component_1.types.Boolean("Annotations.Visible"),
    activeAnnotation: Component_1.types.String("Annotations.ActiveId"),
    activeTags: Component_1.types.String("Tags.Active"),
    sortedTags: Component_1.types.String("Tags.Sorted"),
    radioTags: Component_1.types.Boolean("Tags.Radio"),
    shader: Component_1.types.Enum("Renderer.Shader", setup_1.EShaderMode),
    exposure: Component_1.types.Number("Renderer.Exposure", 1),
    gamma: Component_1.types.Number("Renderer.Gamma", 2),
    quality: Component_1.types.Enum("Models.Quality", model_1.EDerivativeQuality, model_1.EDerivativeQuality.High),
};
CVViewer.outs = {
    tagCloud: Component_1.types.String("Tags.Cloud"),
};


/***/ }),

/***/ "./io/DocumentValidator.ts":
/*!*********************************!*\
  !*** ./io/DocumentValidator.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Ajv = __webpack_require__(/*! ajv */ "../../node_modules/ajv/lib/ajv.js");
const documentSchema = __webpack_require__(/*! client/schema/json/document.schema.json */ "./schema/json/document.schema.json");
const commonSchema = __webpack_require__(/*! client/schema/json/common.schema.json */ "./schema/json/common.schema.json");
const metaSchema = __webpack_require__(/*! client/schema/json/meta.schema.json */ "./schema/json/meta.schema.json");
const modelSchema = __webpack_require__(/*! client/schema/json/model.schema.json */ "./schema/json/model.schema.json");
const setupSchema = __webpack_require__(/*! client/schema/json/setup.schema.json */ "./schema/json/setup.schema.json");
////////////////////////////////////////////////////////////////////////////////
class DocumentValidator {
    constructor() {
        this._schemaValidator = new Ajv({
            schemas: [
                documentSchema,
                commonSchema,
                metaSchema,
                modelSchema,
                setupSchema,
            ],
            allErrors: true
        });
        this._validateDocument = this._schemaValidator.getSchema("https://schemas.3d.si.edu/voyager/document.schema.json");
    }
    validate(document) {
        if (!this._validateDocument(document)) {
            console.warn(this._schemaValidator.errorsText(this._validateDocument.errors, { separator: ", ", dataVar: "document" }));
            return false;
        }
        if (true) {
            console.log("JSONValidator.validateDocument - OK");
        }
        return true;
    }
}
exports.default = DocumentValidator;


/***/ }),

/***/ "./io/FontReader.ts":
/*!**************************!*\
  !*** ./io/FontReader.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
class FontReader {
    constructor(loadingManager) {
        this._loadingManager = loadingManager;
        this._textureLoader = new THREE.TextureLoader(loadingManager);
        this._cache = {};
    }
    get(url) {
        return this._cache[url];
    }
    load(url) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._cache[url]) {
                return Promise.resolve(this._cache[url]);
            }
            this._loadingManager.itemStart(url);
            const descriptorUrl = url + ".json";
            const bitmapUrl = url + ".png";
            const loadDescriptor = fetch(descriptorUrl, {
                headers: {
                    "Accept": "application/json"
                }
            }).then(result => {
                if (!result.ok) {
                    this._loadingManager.itemError(url);
                    throw new Error(`failed to load bitmap font descriptor: '${descriptorUrl}', status: ${result.status} ${result.statusText}`);
                }
                return result.json();
            });
            const loadBitmap = new Promise((resolve, reject) => {
                this._textureLoader.load(bitmapUrl, texture => {
                    if (texture) {
                        return resolve(texture);
                    }
                    return reject(new Error(`failed to load font texture from '${bitmapUrl}'`));
                });
            });
            return Promise.all([loadDescriptor, loadBitmap])
                .then(result => {
                const font = {
                    descriptor: result[0],
                    texture: result[1],
                };
                this._cache[url] = font;
                this._loadingManager.itemEnd(url);
                return font;
            });
        });
    }
}
exports.default = FontReader;


/***/ }),

/***/ "./io/GeometryReader.ts":
/*!******************************!*\
  !*** ./io/GeometryReader.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
__webpack_require__(/*! three/examples/js/loaders/OBJLoader */ "../../node_modules/three/examples/js/loaders/OBJLoader.js");
const OBJLoader = THREE.OBJLoader;
__webpack_require__(/*! three/examples/js/loaders/PLYLoader */ "../../node_modules/three/examples/js/loaders/PLYLoader.js");
const PLYLoader = THREE.PLYLoader;
////////////////////////////////////////////////////////////////////////////////
class GeometryReader {
    constructor(loadingManager) {
        this.objLoader = new OBJLoader(loadingManager);
        this.plyLoader = new PLYLoader(loadingManager);
    }
    isValid(url) {
        const extension = url.split(".").pop().toLowerCase();
        return GeometryReader.extensions.indexOf(extension) >= 0;
    }
    get(url) {
        const extension = url.split(".").pop().toLowerCase();
        return new Promise((resolve, reject) => {
            if (extension === "obj") {
                this.objLoader.load(url, result => {
                    const geometry = result.children[0].geometry;
                    if (geometry && geometry.type === "Geometry" || geometry.type === "BufferGeometry") {
                        return resolve(geometry);
                    }
                    return reject(new Error(`Can't parse geometry from '${url}'`));
                });
            }
            else if (extension === "ply") {
                this.plyLoader.load(url, geometry => {
                    if (geometry && geometry.type === "Geometry" || geometry.type === "BufferGeometry") {
                        return resolve(geometry);
                    }
                    return reject(new Error(`Can't parse geometry from '${url}'`));
                });
            }
            else {
                throw new Error(`Can't load geometry, unknown extension: '${extension}' in '${url}'`);
            }
        });
    }
}
exports.default = GeometryReader;
GeometryReader.extensions = ["obj", "ply"];


/***/ }),

/***/ "./io/JSONReader.ts":
/*!**************************!*\
  !*** ./io/JSONReader.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
////////////////////////////////////////////////////////////////////////////////
class JSONReader {
    constructor(loadingManager) {
        this._loadingManager = loadingManager;
    }
    get(url) {
        return __awaiter(this, void 0, void 0, function* () {
            this._loadingManager.itemStart(url);
            return fetch(url, {
                headers: {
                    "Accept": "application/json"
                }
            }).then(result => {
                if (!result.ok) {
                    this._loadingManager.itemError(url);
                    throw new Error(`failed to fetch from '${url}', status: ${result.status} ${result.statusText}`);
                }
                this._loadingManager.itemEnd(url);
                return result.json();
            });
        });
    }
}
exports.default = JSONReader;


/***/ }),

/***/ "./io/ModelReader.ts":
/*!***************************!*\
  !*** ./io/ModelReader.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const resolve_pathname_1 = __webpack_require__(/*! resolve-pathname */ "../../node_modules/resolve-pathname/esm/resolve-pathname.js");
const THREE = __webpack_require__(/*! three */ "three");
__webpack_require__(/*! three/examples/js/loaders/GLTFLoader */ "../../node_modules/three/examples/js/loaders/GLTFLoader.js");
__webpack_require__(/*! three/examples/js/loaders/DRACOLoader */ "../../node_modules/three/examples/js/loaders/DRACOLoader.js");
const GLTFLoader = THREE.GLTFLoader;
const DRACOLoader = THREE.DRACOLoader;
const UberPBRMaterial_1 = __webpack_require__(/*! ../shaders/UberPBRMaterial */ "./shaders/UberPBRMaterial.ts");
////////////////////////////////////////////////////////////////////////////////
class ModelReader {
    constructor(loadingManager) {
        this.loadingManager = loadingManager;
        const dracoPath = resolve_pathname_1.default("js/draco/", window.location.origin + window.location.pathname);
        if (true) {
            console.log("ModelReader.constructor - DRACO path: %s", dracoPath);
        }
        const dracoLoader = new DRACOLoader();
        dracoLoader.setDecoderPath(dracoPath);
        this.gltfLoader = new GLTFLoader(loadingManager);
        this.gltfLoader.setDRACOLoader(dracoLoader);
    }
    isValid(url) {
        const extension = url.split(".").pop().toLowerCase();
        return ModelReader.extensions.indexOf(extension) >= 0;
    }
    isValidMimeType(mimeType) {
        return ModelReader.mimeTypes.indexOf(mimeType) >= 0;
    }
    get(url) {
        return new Promise((resolve, reject) => {
            this.gltfLoader.load(url, gltf => {
                resolve(this.createModelGroup(gltf));
            }, null, error => {
                console.error(`failed to load '${url}': ${error}`);
                reject(new Error(error));
            });
        });
    }
    createModelGroup(gltf) {
        const scene = gltf.scene;
        if (scene.type !== "Scene") {
            throw new Error("not a valid gltf scene");
        }
        const model = new THREE.Group();
        scene.children.forEach(child => model.add(child));
        model.traverse((object) => {
            if (object.type === "Mesh") {
                const mesh = object;
                mesh.castShadow = true;
                const material = mesh.material;
                if (material.map) {
                    material.map.encoding = THREE.sRGBEncoding;
                }
                mesh.geometry.computeBoundingBox();
                const uberMat = new UberPBRMaterial_1.default();
                // copy properties from previous material
                if (material.type === "MeshStandardMaterial") {
                    uberMat.copyStandardMaterial(material);
                }
                // check if the material's normal map uses object space (indicated in glTF extras)
                if (material.userData["objectSpaceNormals"]) {
                    uberMat.enableObjectSpaceNormalMap(true);
                    if (true) {
                        console.log("ModelReader.createModelGroup - objectSpaceNormals: ", true);
                    }
                }
                mesh.material = uberMat;
            }
        });
        return model;
    }
}
exports.default = ModelReader;
ModelReader.extensions = ["gltf", "glb"];
ModelReader.mimeTypes = ["model/gltf+json", "model/gltf-binary"];


/***/ }),

/***/ "./io/TextureReader.ts":
/*!*****************************!*\
  !*** ./io/TextureReader.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
////////////////////////////////////////////////////////////////////////////////
class TextureReader {
    constructor(loadingManager) {
        this.textureLoader = new THREE.TextureLoader(loadingManager);
    }
    isValid(url) {
        const extension = url.split(".").pop().toLowerCase();
        return TextureReader.extensions.indexOf(extension) >= 0;
    }
    isValidMimeType(mimeType) {
        return TextureReader.mimeTypes.indexOf(mimeType) >= 0;
    }
    get(url) {
        return new Promise((resolve, reject) => {
            this.textureLoader.load(url, texture => {
                resolve(texture);
            }, null, errorEvent => {
                console.error(errorEvent);
                reject(new Error(errorEvent.message));
            });
        });
    }
    getImmediate(url) {
        return this.textureLoader.load(url, null, null, errorEvent => {
            console.error(errorEvent);
        });
    }
}
exports.default = TextureReader;
TextureReader.extensions = ["jpg", "png"];
TextureReader.mimeTypes = ["image/jpeg", "image/png"];


/***/ }),

/***/ "./models/Annotation.ts":
/*!******************************!*\
  !*** ./models/Annotation.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Document_1 = __webpack_require__(/*! @ff/core/Document */ "../../libs/ff-core/source/Document.ts");
const AnnotationFactory_1 = __webpack_require__(/*! client/annotations/AnnotationFactory */ "./annotations/AnnotationFactory.ts");
class Annotation extends Document_1.default {
    static fromJSON(json) {
        return new Annotation(json);
    }
    init() {
        return {
            id: Document_1.default.generateId(),
            title: "New Annotation",
            lead: "",
            marker: "",
            tags: [],
            articleId: "",
            imageUri: "",
            style: AnnotationFactory_1.default.defaultTypeName,
            visible: true,
            expanded: false,
            position: null,
            direction: null,
            scale: 1,
            offset: 0,
            tilt: 0,
            azimuth: 0,
            color: [0, 0.61, 0.87],
            zoneIndex: -1,
        };
    }
    deflate(data, json) {
        json.id = data.id;
        if (data.title) {
            json.title = data.title;
        }
        if (data.lead) {
            json.lead = data.lead;
        }
        if (data.marker) {
            json.marker = data.marker;
        }
        if (data.tags.length > 0) {
            json.tags = data.tags;
        }
        if (data.articleId) {
            json.articleId = data.articleId;
        }
        if (data.imageUri) {
            json.imageUri = data.imageUri;
        }
        if (data.style !== AnnotationFactory_1.default.defaultTypeName) {
            json.style = data.style;
        }
        if (data.visible === false) {
            json.visible = data.visible;
        }
        if (data.position) {
            json.position = data.position.slice();
        }
        if (data.direction) {
            json.direction = data.direction.slice();
        }
        if (data.scale !== 1) {
            json.scale = data.scale;
        }
        if (data.offset !== 0) {
            json.offset = data.offset;
        }
        if (data.tilt !== 0) {
            json.tilt = data.tilt;
        }
        if (data.azimuth !== 0) {
            json.azimuth = data.azimuth;
        }
        const color = data.color;
        if (color && (color[0] !== 1 || color[1] !== 1 || color[2] !== 1)) {
            json.color = color.slice();
        }
        if (data.zoneIndex > -1) {
            json.zoneIndex = data.zoneIndex;
        }
        return data;
    }
    inflate(json, data) {
        data.id = json.id;
        data.title = json.title || "";
        data.lead = json.lead || "";
        data.marker = json.marker || "";
        data.tags = json.tags || [];
        data.articleId = json.articleId || "";
        data.imageUri = json.imageUri || "";
        data.style = json.style || AnnotationFactory_1.default.defaultTypeName;
        data.visible = json.visible !== undefined ? json.visible : true;
        data.expanded = false;
        data.position = json.position.slice();
        data.direction = json.direction.slice();
        data.scale = json.scale !== undefined ? json.scale : 1;
        data.offset = json.offset || 0;
        data.tilt = json.tilt || 0;
        data.azimuth = json.azimuth || 0;
        data.color = json.color || Annotation.defaultColor.slice();
        data.zoneIndex = json.zoneIndex !== undefined ? json.zoneIndex : -1;
    }
}
exports.default = Annotation;
Annotation.defaultColor = [0, 0.61, 0.87];


/***/ }),

/***/ "./models/Article.ts":
/*!***************************!*\
  !*** ./models/Article.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Document_1 = __webpack_require__(/*! @ff/core/Document */ "../../libs/ff-core/source/Document.ts");
class Article extends Document_1.default {
    static fromJSON(json) {
        return new Article(json);
    }
    toString() {
        return this.data.title;
    }
    init() {
        return {
            id: Document_1.default.generateId(),
            title: "New Article",
            lead: "",
            tags: [],
            uri: "",
            mimeType: "",
            thumbnailUri: "",
        };
    }
    deflate(data, json) {
        json.id = data.id;
        json.uri = data.uri;
        if (data.title) {
            json.title = data.title;
        }
        if (data.lead) {
            json.lead = data.lead;
        }
        if (data.tags.length > 0) {
            json.tags = data.tags.slice();
        }
        if (data.mimeType) {
            json.mimeType = data.mimeType;
        }
        if (data.thumbnailUri) {
            json.thumbnailUri = data.thumbnailUri;
        }
    }
    inflate(json, data) {
        data.id = json.id;
        data.uri = json.uri;
        data.title = json.title || "";
        data.lead = json.lead || "";
        data.tags = json.tags || [];
        data.mimeType = json.mimeType || "";
        data.thumbnailUri = json.thumbnailUri || "";
    }
}
exports.default = Article;


/***/ }),

/***/ "./models/Asset.ts":
/*!*************************!*\
  !*** ./models/Asset.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Document_1 = __webpack_require__(/*! @ff/core/Document */ "../../libs/ff-core/source/Document.ts");
const model_1 = __webpack_require__(/*! client/schema/model */ "./schema/model.ts");
exports.EAssetType = model_1.EAssetType;
exports.EMapType = model_1.EMapType;
class Asset extends Document_1.default {
    setModel(uri) {
        this.data.uri = uri;
        this.data.type = model_1.EAssetType.Model;
        this.data.mimeType = this.guessAssetMimeType();
    }
    setGeometry(uri) {
        this.data.uri = uri;
        this.data.type = model_1.EAssetType.Geometry;
        this.data.mimeType = this.guessAssetMimeType();
    }
    setTexture(uri, mapType) {
        this.data.uri = uri;
        this.data.type = model_1.EAssetType.Image;
        this.data.mimeType = this.guessAssetMimeType();
        this.data.mapType = mapType;
    }
    isValid() {
        return !!this.data.uri && this.data.type !== undefined;
    }
    toString() {
        const data = this.data;
        return `Asset - type: '${model_1.EAssetType[data.type]}', uri: '${data.uri}', mime type: '${data.mimeType || "(not set)"}'`;
    }
    init() {
        return {
            uri: "",
            mimeType: "",
            type: undefined,
            mapType: undefined,
            byteSize: 0,
            numFaces: 0,
            numVertices: 0,
            imageSize: 0,
        };
    }
    deflate(data, json) {
        json.uri = data.uri;
        json.type = model_1.EAssetType[data.type];
        if (data.mimeType) {
            json.mimeType = data.mimeType;
        }
        if (data.mapType !== undefined) {
            json.mapType = model_1.EMapType[data.mapType];
        }
        if (data.byteSize > 0) {
            json.byteSize = data.byteSize;
        }
        // for model and geometry assets, save number of faces
        if (data.type === model_1.EAssetType.Model || data.type === model_1.EAssetType.Geometry) {
            if (data.numFaces > 0) {
                json.numFaces = data.numFaces;
            }
        }
        // for model, image, and texture assets, save image/map size
        if (data.type === model_1.EAssetType.Model || data.type === model_1.EAssetType.Image || data.type === model_1.EAssetType.Texture) {
            if (data.imageSize > 0) {
                json.imageSize = data.imageSize;
            }
        }
    }
    inflate(json, data) {
        data.uri = json.uri;
        data.mimeType = json.mimeType || "";
        data.type = model_1.EAssetType[json.type];
        data.mapType = model_1.EMapType[json.mapType];
        data.byteSize = json.byteSize || 0;
        data.numFaces = json.numFaces || 0;
        data.imageSize = json.imageSize || 0;
        if (data.type === undefined) {
            data.type = this.guessAssetType();
            if (data.type === undefined) {
                console.warn(`failed to determine asset type from asset: ${data.uri}`);
            }
        }
    }
    guessAssetType() {
        const data = this.data;
        if (data.type !== undefined && model_1.EAssetType[data.type]) {
            return data.type;
        }
        if (data.mimeType) {
            if (data.mimeType === Asset.mimeType.gltfJson || data.mimeType === Asset.mimeType.gltfBinary) {
                return model_1.EAssetType.Model;
            }
            if (data.mimeType === Asset.mimeType.imageJpeg || data.mimeType === Asset.mimeType.imagePng) {
                return model_1.EAssetType.Image;
            }
        }
        const extension = data.uri.split(".").pop().toLowerCase();
        if (extension === "gltf" || extension === "glb") {
            return model_1.EAssetType.Model;
        }
        if (extension === "obj" || extension === "ply") {
            return model_1.EAssetType.Geometry;
        }
        if (extension === "jpg" || extension === "png") {
            return model_1.EAssetType.Image;
        }
        return undefined;
    }
    guessAssetMimeType() {
        const data = this.data;
        if (data.mimeType) {
            return data.mimeType;
        }
        const extension = data.uri.split(".").pop().toLowerCase();
        if (extension === "gltf") {
            return Asset.mimeType.gltfJson;
        }
        if (extension === "glb") {
            return Asset.mimeType.gltfBinary;
        }
        if (extension === "jpg") {
            return Asset.mimeType.imageJpeg;
        }
        if (extension === "png") {
            return Asset.mimeType.imagePng;
        }
        return "";
    }
}
exports.default = Asset;
Asset.mimeType = {
    gltfJson: "model/gltf+json",
    gltfBinary: "model/gltf-binary",
    imageJpeg: "image/jpeg",
    imagePng: "image/png"
};


/***/ }),

/***/ "./models/Derivative.ts":
/*!******************************!*\
  !*** ./models/Derivative.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const helpers_1 = __webpack_require__(/*! @ff/three/helpers */ "../../libs/ff-three/source/helpers.ts");
const Document_1 = __webpack_require__(/*! @ff/core/Document */ "../../libs/ff-core/source/Document.ts");
const model_1 = __webpack_require__(/*! client/schema/model */ "./schema/model.ts");
exports.EDerivativeQuality = model_1.EDerivativeQuality;
exports.EDerivativeUsage = model_1.EDerivativeUsage;
const UberPBRMaterial_1 = __webpack_require__(/*! ../shaders/UberPBRMaterial */ "./shaders/UberPBRMaterial.ts");
const Asset_1 = __webpack_require__(/*! ./Asset */ "./models/Asset.ts");
exports.Asset = Asset_1.default;
exports.EAssetType = Asset_1.EAssetType;
class Derivative extends Document_1.default {
    constructor() {
        super(...arguments);
        this.model = null;
    }
    static fromJSON(json) {
        return new Derivative(json);
    }
    dispose() {
        this.unload();
        super.dispose();
    }
    load(assetReader) {
        if (this.data.usage !== model_1.EDerivativeUsage.Web3D) {
            throw new Error("can't load, not a Web3D derivative");
        }
        const modelAsset = this.findAsset(Asset_1.EAssetType.Model);
        if (modelAsset) {
            return assetReader.getModel(modelAsset.data.uri)
                .then(object => {
                if (this.model) {
                    helpers_1.disposeObject(this.model);
                }
                this.model = object;
                return object;
            });
        }
        const geoAsset = this.findAsset(Asset_1.EAssetType.Geometry);
        const imageAssets = this.findAssets(Asset_1.EAssetType.Image);
        if (geoAsset) {
            return assetReader.getGeometry(geoAsset.data.uri)
                .then(geometry => {
                this.model = new THREE.Mesh(geometry, new UberPBRMaterial_1.default());
                return Promise.all(imageAssets.map(asset => assetReader.getTexture(asset.data.uri)))
                    .catch(error => {
                    console.warn("failed to load texture files");
                    return [];
                });
            })
                .then(textures => {
                const material = this.model.material;
                this.assignTextures(imageAssets, textures, material);
                if (!material.map) {
                    material.color.setScalar(0.5);
                    material.roughness = 0.8;
                    material.metalness = 0;
                }
                return this.model;
            });
        }
    }
    unload() {
        if (this.model) {
            helpers_1.disposeObject(this.model);
            this.model = null;
        }
    }
    createAsset(type, uri) {
        const asset = new Asset_1.default();
        asset.data.type = type;
        asset.data.uri = uri;
        this.addAsset(asset);
        return asset;
    }
    addAsset(asset) {
        if (!asset.data.uri) {
            throw new Error("uri must be specified");
        }
        this.data.assets.push(asset);
        this.update();
    }
    removeAsset(asset) {
        const index = this.data.assets.indexOf(asset);
        if (index >= 0) {
            this.data.assets.splice(index, 1);
        }
    }
    findAsset(type) {
        return this.data.assets.find(asset => asset.data.type === type);
    }
    findAssets(type) {
        return this.data.assets.filter(asset => asset.data.type === type);
    }
    toString(verbose = false) {
        const data = this.data;
        if (verbose) {
            return `Derivative - usage: '${model_1.EDerivativeUsage[data.usage]}', quality: '${model_1.EDerivativeQuality[data.quality]}'\n   `
                + data.assets.map(asset => asset.toString()).join("\n   ");
        }
        else {
            return `Derivative - usage: '${model_1.EDerivativeUsage[data.usage]}', quality: '${model_1.EDerivativeQuality[data.quality]}', #assets: ${data.assets.length})`;
        }
    }
    init() {
        return {
            usage: model_1.EDerivativeUsage.Web3D,
            quality: model_1.EDerivativeQuality.Medium,
            assets: [],
        };
    }
    deflate(data, json) {
        json.usage = model_1.EDerivativeUsage[data.usage];
        json.quality = model_1.EDerivativeQuality[data.quality];
        json.assets = data.assets.map(asset => asset.toJSON());
    }
    inflate(json, data) {
        data.usage = model_1.EDerivativeUsage[json.usage];
        if (data.usage === undefined) {
            throw new Error(`unknown derivative usage: ${json.usage}`);
        }
        data.quality = model_1.EDerivativeQuality[json.quality];
        if (data.quality === undefined) {
            throw new Error(`unknown derivative quality: ${json.quality}`);
        }
        data.assets = json.assets.map(assetJson => new Asset_1.default(assetJson));
    }
    assignTextures(assets, textures, material) {
        for (let i = 0; i < assets.length; ++i) {
            const asset = assets[i];
            const texture = textures[i];
            switch (asset.data.mapType) {
                case Asset_1.EMapType.Color:
                    material.map = texture;
                    break;
                case Asset_1.EMapType.Occlusion:
                    material.aoMap = texture;
                    break;
                case Asset_1.EMapType.Emissive:
                    material.emissiveMap = texture;
                    break;
                case Asset_1.EMapType.MetallicRoughness:
                    material.metalnessMap = texture;
                    material.roughnessMap = texture;
                    break;
                case Asset_1.EMapType.Normal:
                    material.normalMap = texture;
                    break;
            }
        }
    }
}
exports.default = Derivative;


/***/ }),

/***/ "./models/DerivativeList.ts":
/*!**********************************!*\
  !*** ./models/DerivativeList.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Derivative_1 = __webpack_require__(/*! ./Derivative */ "./models/Derivative.ts");
const Asset_1 = __webpack_require__(/*! ./Asset */ "./models/Asset.ts");
////////////////////////////////////////////////////////////////////////////////
const _EMPTY_ARRAY = [];
const _qualityLevels = [
    Derivative_1.EDerivativeQuality.Thumb,
    Derivative_1.EDerivativeQuality.Low,
    Derivative_1.EDerivativeQuality.Medium,
    Derivative_1.EDerivativeQuality.High,
    Derivative_1.EDerivativeQuality.Highest
];
class DerivativeList {
    constructor() {
        this.derivatives = {};
    }
    /**
     * From all derivatives with the given usage (e.g. web), select a derivative as close as possible to
     * the given quality. The selection strategy works as follows:
     * 1. Look for a derivative matching the quality exactly. If found, return it.
     * 2. Look for a derivative with higher quality. If found, return it.
     * 3. Look for a derivative with lower quality. If found return it, otherwise report an error.
     * @param quality
     * @param usage
     */
    select(usage, quality) {
        const usageKey = Derivative_1.EDerivativeUsage[usage];
        const qualityKey = Derivative_1.EDerivativeQuality[quality];
        const qualityIndex = _qualityLevels.indexOf(quality);
        if (qualityIndex < 0) {
            console.warn(`derivative quality not supported: '${qualityKey}'`);
            return null;
        }
        const derivative = this.get(usage, quality);
        if (derivative) {
            return derivative;
        }
        for (let i = qualityIndex + 1; i < _qualityLevels.length; ++i) {
            const derivative = this.get(usage, _qualityLevels[i]);
            if (derivative) {
                console.warn(`derivative quality '${qualityKey}' not available, using higher quality`);
                return derivative;
            }
        }
        for (let i = qualityIndex - 1; i >= 0; --i) {
            const derivative = this.get(usage, _qualityLevels[i]);
            if (derivative) {
                console.warn(`derivative quality '${qualityKey}' not available, using lower quality`);
                return derivative;
            }
        }
        console.warn(`no suitable derivative found for quality '${qualityKey}'`
            + ` and usage '${usageKey}'`);
        return null;
    }
    getByUsage(usage) {
        const key = Derivative_1.EDerivativeUsage[usage];
        const derivatives = this.derivatives[key] || _EMPTY_ARRAY;
        return derivatives.sort((a, b) => {
            if (a.data.quality < b.data.quality)
                return -1;
            if (a.data.quality > b.data.quality)
                return 1;
            return 0;
        });
    }
    getArray() {
        return Object.keys(this.derivatives)
            .reduce((arr, key) => arr.concat(this.derivatives[key]), []);
    }
    get(usage, quality) {
        const key = Derivative_1.EDerivativeUsage[usage];
        const bin = this.derivatives[key];
        if (bin) {
            for (let i = 0, n = bin.length; i < n; ++i) {
                if (bin[i].data.quality === quality) {
                    return bin[i];
                }
            }
        }
        return null;
    }
    getOrCreate(usage, quality) {
        const bin = this.getOrCreateBin(usage);
        for (let i = 0, n = bin.length; i < n; ++i) {
            if (bin[i].data.quality === quality) {
                return bin[i];
            }
        }
        const derivative = new Derivative_1.default();
        derivative.set("usage", usage);
        derivative.set("quality", quality);
        bin.push(derivative);
        return derivative;
    }
    createModelAsset(assetPath, quality) {
        quality = (typeof quality === "string" ? Derivative_1.EDerivativeQuality[quality] : quality);
        quality = isFinite(quality) ? quality : Derivative_1.EDerivativeQuality.Medium;
        const derivative = this.getOrCreate(Derivative_1.EDerivativeUsage.Web3D, quality);
        const asset = new Asset_1.default();
        asset.setModel(assetPath);
        derivative.addAsset(asset);
        return derivative;
    }
    createMeshAsset(geoPath, colorMapPath, occlusionMapPath, normalMapPath, quality) {
        quality = (typeof quality === "string" ? Derivative_1.EDerivativeQuality[quality] : quality);
        quality = isFinite(quality) ? quality : Derivative_1.EDerivativeQuality.Medium;
        const derivative = this.getOrCreate(Derivative_1.EDerivativeUsage.Web3D, quality);
        const geoAsset = new Asset_1.default();
        geoAsset.setGeometry(geoPath);
        derivative.addAsset(geoAsset);
        if (colorMapPath) {
            const colorMapAsset = new Asset_1.default();
            colorMapAsset.setTexture(colorMapPath, Asset_1.EMapType.Color);
            derivative.addAsset(colorMapAsset);
        }
        if (occlusionMapPath) {
            const occlusionMapAsset = new Asset_1.default();
            occlusionMapAsset.setTexture(occlusionMapPath, Asset_1.EMapType.Occlusion);
            derivative.addAsset(occlusionMapAsset);
        }
        if (normalMapPath) {
            const normalMapAsset = new Asset_1.default();
            normalMapAsset.setTexture(normalMapPath, Asset_1.EMapType.Normal);
            derivative.addAsset(normalMapAsset);
        }
        return derivative;
    }
    clear() {
        for (let key in this.derivatives) {
            this.derivatives[key].forEach(derivative => derivative.dispose());
        }
        this.derivatives = {};
    }
    toJSON() {
        const data = [];
        for (let key in this.derivatives) {
            this.derivatives[key].forEach(derivative => data.push(derivative.toJSON()));
        }
        return data;
    }
    fromJSON(data) {
        this.clear();
        data.forEach(derivativeData => {
            const bin = this.getOrCreateBin(Derivative_1.EDerivativeUsage[derivativeData.usage]);
            bin.push(new Derivative_1.default(derivativeData));
        });
    }
    toString(verbose = false) {
        const derivatives = this.derivatives;
        const keys = Object.keys(derivatives);
        if (verbose) {
            return `Derivatives (${keys.length}) \n ` + keys.map(key => derivatives[key].map(derivative => derivative.toString(true)).join("\n ")).join("\n ");
        }
        else {
            return `Derivatives (${keys.length}) ` + keys.map(key => `${key} (${derivatives[key].length})`).join(", ");
        }
    }
    getOrCreateBin(usage) {
        const key = Derivative_1.EDerivativeUsage[usage];
        return this.derivatives[key] || (this.derivatives[key] = []);
    }
}
exports.default = DerivativeList;


/***/ }),

/***/ "./nodes/NVDocuments.ts":
/*!******************************!*\
  !*** ./nodes/NVDocuments.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Node_1 = __webpack_require__(/*! @ff/graph/Node */ "../../libs/ff-graph/source/Node.ts");
const CScene_1 = __webpack_require__(/*! @ff/scene/components/CScene */ "../../libs/ff-scene/source/components/CScene.ts");
const CVDocumentProvider_1 = __webpack_require__(/*! ../components/CVDocumentProvider */ "./components/CVDocumentProvider.ts");
const CVNodeProvider_1 = __webpack_require__(/*! ../components/CVNodeProvider */ "./components/CVNodeProvider.ts");
////////////////////////////////////////////////////////////////////////////////
class NVDocuments extends Node_1.default {
    get scene() {
        return this.components.get(CScene_1.default);
    }
    get documentProvider() {
        return this.components.get(CVDocumentProvider_1.default);
    }
    get nodeProvider() {
        return this.components.get(CVNodeProvider_1.default);
    }
    createComponents() {
        this.createComponent(CScene_1.default, "Master Scene");
        this.createComponent(CVDocumentProvider_1.default);
        this.createComponent(CVNodeProvider_1.default);
    }
}
exports.default = NVDocuments;
NVDocuments.typeName = "NVDocuments";


/***/ }),

/***/ "./nodes/NVEngine.ts":
/*!***************************!*\
  !*** ./nodes/NVEngine.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Node_1 = __webpack_require__(/*! @ff/graph/Node */ "../../libs/ff-graph/source/Node.ts");
const CPulse_1 = __webpack_require__(/*! @ff/graph/components/CPulse */ "../../libs/ff-graph/source/components/CPulse.ts");
const CRenderer_1 = __webpack_require__(/*! @ff/scene/components/CRenderer */ "../../libs/ff-scene/source/components/CRenderer.ts");
const CPickSelection_1 = __webpack_require__(/*! @ff/scene/components/CPickSelection */ "../../libs/ff-scene/source/components/CPickSelection.ts");
const CFullscreen_1 = __webpack_require__(/*! @ff/scene/components/CFullscreen */ "../../libs/ff-scene/source/components/CFullscreen.ts");
const CVAssetManager_1 = __webpack_require__(/*! ../components/CVAssetManager */ "./components/CVAssetManager.ts");
const CVAssetReader_1 = __webpack_require__(/*! ../components/CVAssetReader */ "./components/CVAssetReader.ts");
const CVAnalytics_1 = __webpack_require__(/*! ../components/CVAnalytics */ "./components/CVAnalytics.ts");
////////////////////////////////////////////////////////////////////////////////
class NVEngine extends Node_1.default {
    get pulse() {
        return this.components.get(CPulse_1.default);
    }
    get renderer() {
        return this.components.get(CRenderer_1.default);
    }
    get fullscreen() {
        return this.components.get(CFullscreen_1.default);
    }
    get selection() {
        return this.components.get(CPickSelection_1.default);
    }
    get assetManager() {
        return this.components.get(CVAssetManager_1.default);
    }
    get assetReader() {
        return this.components.get(CVAssetReader_1.default);
    }
    get analytics() {
        return this.components.get(CVAnalytics_1.default);
    }
    createComponents() {
        this.createComponent(CPulse_1.default);
        this.createComponent(CRenderer_1.default);
        this.createComponent(CFullscreen_1.default);
        this.createComponent(CVAssetManager_1.default);
        this.createComponent(CVAssetReader_1.default);
        this.createComponent(CVAnalytics_1.default);
        const selection = this.createComponent(CPickSelection_1.default);
        // allow simultaneous selection of nodes and components
        //selection.exclusiveSelect = false;
        // don't allow selecting multiple nodes or components
        //selection.multiSelect = false;
        // do not display selection brackets
        selection.ins.viewportBrackets.setValue(false);
    }
}
exports.default = NVEngine;
NVEngine.typeName = "NVEngine";


/***/ }),

/***/ "./nodes/NVNode.ts":
/*!*************************!*\
  !*** ./nodes/NVNode.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Node_1 = __webpack_require__(/*! @ff/graph/Node */ "../../libs/ff-graph/source/Node.ts");
const CVNode_1 = __webpack_require__(/*! ../components/CVNode */ "./components/CVNode.ts");
const CVCamera_1 = __webpack_require__(/*! ../components/CVCamera */ "./components/CVCamera.ts");
const CVLight_1 = __webpack_require__(/*! ../components/CVLight */ "./components/CVLight.ts");
const CVDirectionalLight_1 = __webpack_require__(/*! ../components/CVDirectionalLight */ "./components/CVDirectionalLight.ts");
const CVPointLight_1 = __webpack_require__(/*! ../components/CVPointLight */ "./components/CVPointLight.ts");
const CVSpotLight_1 = __webpack_require__(/*! ../components/CVSpotLight */ "./components/CVSpotLight.ts");
const CVMeta_1 = __webpack_require__(/*! ../components/CVMeta */ "./components/CVMeta.ts");
const CVModel2_1 = __webpack_require__(/*! ../components/CVModel2 */ "./components/CVModel2.ts");
const CVScene_1 = __webpack_require__(/*! ../components/CVScene */ "./components/CVScene.ts");
class NVNode extends Node_1.default {
    get transform() {
        return this.components.get(CVNode_1.default);
    }
    get meta() {
        return this.components.get(CVMeta_1.default, true);
    }
    get model() {
        return this.components.get(CVModel2_1.default, true);
    }
    get camera() {
        return this.components.get(CVCamera_1.default, true);
    }
    get light() {
        return this.components.get(CVLight_1.CLight, true);
    }
    get scene() {
        return this.components.get(CVScene_1.default, true);
    }
    createComponents() {
        this.name = "Node";
        this.createComponent(CVNode_1.default);
    }
    createModel() {
        this.name = "Model";
        this.createComponent(CVMeta_1.default);
        this.createComponent(CVModel2_1.default);
    }
    fromDocument(document, nodeIndex, pathMap) {
        const node = document.nodes[nodeIndex];
        this.transform.fromData(node);
        pathMap.set(`node/${nodeIndex}`, this.transform);
        let name = "Node";
        if (isFinite(node.meta)) {
            this.createComponent(CVMeta_1.default).fromDocument(document, node);
            pathMap.set(`meta/${node.meta}`, this.meta);
            name = "Meta";
        }
        if (isFinite(node.model)) {
            this.createComponent(CVModel2_1.default).fromDocument(document, node);
            pathMap.set(`model/${node.model}`, this.model);
            name = "Model";
        }
        if (isFinite(node.camera)) {
            this.createComponent(CVCamera_1.default).fromDocument(document, node);
            pathMap.set(`camera/${node.camera}`, this.camera);
            name = "Camera";
        }
        if (isFinite(node.light)) {
            const type = document.lights[node.light].type;
            switch (type) {
                case "directional":
                    this.createComponent(CVDirectionalLight_1.default).fromDocument(document, node);
                    name = "Directional Light";
                    break;
                case "point":
                    this.createComponent(CVPointLight_1.default).fromDocument(document, node);
                    name = "Point Light";
                    break;
                case "spot":
                    this.createComponent(CVSpotLight_1.default).fromDocument(document, node);
                    name = "Spot Light";
                    break;
                default:
                    throw new Error(`unknown light type: '${type}'`);
            }
            pathMap.set(`light/${node.light}`, this.light);
        }
        this.name = node.name || name;
        const childIndices = node.children;
        if (childIndices) {
            childIndices.forEach(childIndex => {
                const childNode = this.graph.createCustomNode(NVNode);
                this.transform.addChild(childNode.transform);
                childNode.fromDocument(document, childIndex, pathMap);
            });
        }
    }
    toDocument(document, pathMap, components) {
        components = components || {
            meta: true,
            setup: true,
            model: true,
            camera: true,
            light: true,
        };
        document.nodes = document.nodes || [];
        const nodeIndex = document.nodes.length;
        const node = this.transform.toData();
        document.nodes.push(node);
        pathMap.set(this.transform, `node/${nodeIndex}`);
        if (this.name) {
            node.name = this.name;
        }
        if (this.model && components.model) {
            node.model = this.model.toDocument(document, node);
            pathMap.set(this.model, `model/${node.model}`);
        }
        if (this.camera && components.camera) {
            node.camera = this.camera.toDocument(document, node);
            pathMap.set(this.camera, `camera/${node.camera}`);
        }
        if (this.light && components.light) {
            node.light = this.light.toDocument(document, node);
            pathMap.set(this.light, `light/${node.light}`);
        }
        if (this.meta && components.meta) {
            node.meta = this.meta.toDocument(document, node);
            pathMap.set(this.meta, `info/${node.meta}`);
        }
        const children = this.transform.children
            .map(child => child.node).filter(node => node.is(NVNode));
        children.forEach(child => {
            if (child.hasNodeComponents(components)) {
                const index = child.toDocument(document, pathMap, components);
                node.children = node.children || [];
                node.children.push(index);
            }
        });
        return nodeIndex;
    }
    hasNodeComponents(components) {
        if (!components) {
            return true;
        }
        const tf = this.transform;
        const comps = this.components;
        if (components.model && (comps.has(CVModel2_1.default) || tf.hasChildComponents(CVModel2_1.default, true))) {
            return true;
        }
        if (components.camera && (comps.has(CVCamera_1.default) || tf.hasChildComponents(CVCamera_1.default, true))) {
            return true;
        }
        if (components.light && (comps.has(CVLight_1.CLight) || tf.hasChildComponents(CVLight_1.CLight, true))) {
            return true;
        }
        return false;
    }
}
exports.default = NVNode;
NVNode.typeName = "NVNode";


/***/ }),

/***/ "./nodes/NVScene.ts":
/*!**************************!*\
  !*** ./nodes/NVScene.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const NVNode_1 = __webpack_require__(/*! ./NVNode */ "./nodes/NVNode.ts");
const CVScene_1 = __webpack_require__(/*! ../components/CVScene */ "./components/CVScene.ts");
const CVSetup_1 = __webpack_require__(/*! ../components/CVSetup */ "./components/CVSetup.ts");
const CVMeta_1 = __webpack_require__(/*! ../components/CVMeta */ "./components/CVMeta.ts");
////////////////////////////////////////////////////////////////////////////////
class NVScene extends NVNode_1.default {
    get setup() {
        return this.components.get(CVSetup_1.default, true);
    }
    createComponents() {
        this.createComponent(CVScene_1.default);
        this.createComponent(CVSetup_1.default);
        this.createComponent(CVMeta_1.default);
    }
    fromDocument(document, sceneIndex, pathMap) {
        const scene = document.scenes[sceneIndex];
        if (scene.name) {
            this.name = scene.name;
        }
        this.scene.fromDocument(document, scene);
        // serialize node tree
        const nodeIndices = scene.nodes;
        if (nodeIndices) {
            nodeIndices.forEach(nodeIndex => {
                const childNode = this.graph.createCustomNode(NVNode_1.default);
                this.transform.addChild(childNode.transform);
                childNode.fromDocument(document, nodeIndex, pathMap);
            });
        }
        // serialize additional scene components
        if (isFinite(scene.meta)) {
            this.meta.fromDocument(document, scene);
            pathMap.set(`meta/${scene.meta}`, this.meta);
        }
        if (isFinite(scene.setup)) {
            this.setup.fromDocument(document, sceneIndex, pathMap);
        }
    }
    toDocument(document, pathMap, components) {
        document.scenes = document.scenes || [];
        const sceneIndex = document.scenes.length;
        const scene = { units: "cm" };
        document.scenes.push(scene);
        if (this.name) {
            scene.name = this.name;
        }
        this.scene.toDocument(document, scene);
        // serialize node tree
        const children = this.transform.children
            .map(child => child.node).filter(node => node.is(NVNode_1.default));
        children.forEach(child => {
            if (child.hasNodeComponents(components)) {
                const index = child.toDocument(document, pathMap, components);
                scene.nodes = scene.nodes || [];
                scene.nodes.push(index);
            }
        });
        // serialize additional scene components
        if (!components || components.setup) {
            if (this.meta) {
                scene.meta = this.meta.toDocument(document, scene);
                pathMap.set(this.meta, `meta/${scene.meta}`);
            }
            if (this.setup) {
                this.setup.toDocument(document, sceneIndex, pathMap);
            }
        }
        return sceneIndex;
    }
}
exports.default = NVScene;
NVScene.typeName = "NVScene";


/***/ }),

/***/ "./nodes/NVTools.ts":
/*!**************************!*\
  !*** ./nodes/NVTools.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Node_1 = __webpack_require__(/*! @ff/graph/Node */ "../../libs/ff-graph/source/Node.ts");
const CVToolProvider_1 = __webpack_require__(/*! ../components/CVToolProvider */ "./components/CVToolProvider.ts");
const CVViewTool_1 = __webpack_require__(/*! ../components/CVViewTool */ "./components/CVViewTool.ts");
const CVRenderTool_1 = __webpack_require__(/*! ../components/CVRenderTool */ "./components/CVRenderTool.ts");
const CVEnvironmentTool_1 = __webpack_require__(/*! ../components/CVEnvironmentTool */ "./components/CVEnvironmentTool.ts");
const CVLightTool_1 = __webpack_require__(/*! ../components/CVLightTool */ "./components/CVLightTool.ts");
const CVTapeTool_1 = __webpack_require__(/*! ../components/CVTapeTool */ "./components/CVTapeTool.ts");
const CVSliceTool_1 = __webpack_require__(/*! ../components/CVSliceTool */ "./components/CVSliceTool.ts");
////////////////////////////////////////////////////////////////////////////////
class NVTools extends Node_1.default {
    get toolProvider() {
        return this.getComponent(CVToolProvider_1.default);
    }
    createComponents() {
        this.createComponent(CVToolProvider_1.default);
        this.createComponent(CVViewTool_1.default);
        this.createComponent(CVRenderTool_1.default);
        this.createComponent(CVEnvironmentTool_1.default);
        this.createComponent(CVLightTool_1.default);
        this.createComponent(CVTapeTool_1.default);
        this.createComponent(CVSliceTool_1.default);
    }
}
exports.default = NVTools;
NVTools.typeName = "NVTools";


/***/ }),

/***/ "./schema/common.ts":
/*!**************************!*\
  !*** ./schema/common.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var EUnitType;
(function (EUnitType) {
    EUnitType[EUnitType["mm"] = 0] = "mm";
    EUnitType[EUnitType["cm"] = 1] = "cm";
    EUnitType[EUnitType["m"] = 2] = "m";
    EUnitType[EUnitType["km"] = 3] = "km";
    EUnitType[EUnitType["in"] = 4] = "in";
    EUnitType[EUnitType["ft"] = 5] = "ft";
    EUnitType[EUnitType["yd"] = 6] = "yd";
    EUnitType[EUnitType["mi"] = 7] = "mi";
})(EUnitType = exports.EUnitType || (exports.EUnitType = {}));


/***/ }),

/***/ "./schema/json/common.schema.json":
/*!****************************************!*\
  !*** ./schema/json/common.schema.json ***!
  \****************************************/
/*! exports provided: $id, $schema, title, description, definitions, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"$id\":\"https://schemas.3d.si.edu/voyager/common.schema.json\",\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Math\",\"description\":\"Definitions for mathematical compound objects such as vectors and matrices.\",\"definitions\":{\"units\":{\"$id\":\"#units\",\"type\":\"string\",\"enum\":[\"inherit\",\"mm\",\"cm\",\"m\",\"km\",\"in\",\"ft\",\"yd\",\"mi\"]},\"vector2\":{\"description\":\"2-component vector.\",\"$id\":\"#vector2\",\"type\":\"array\",\"items\":{\"type\":\"number\"},\"minItems\":2,\"maxItems\":2,\"default\":[0,0]},\"vector3\":{\"description\":\"3-component vector.\",\"$id\":\"#vector3\",\"type\":\"array\",\"items\":{\"type\":\"number\"},\"minItems\":3,\"maxItems\":3,\"default\":[0,0,0]},\"vector4\":{\"description\":\"4-component vector.\",\"$id\":\"#vector4\",\"type\":\"array\",\"items\":{\"type\":\"number\"},\"minItems\":4,\"maxItems\":4,\"default\":[0,0,0,0]},\"matrix3\":{\"description\":\"3 by 3, matrix, storage: column-major.\",\"$id\":\"#matrix3\",\"type\":\"array\",\"items\":{\"type\":\"number\"},\"minItems\":9,\"maxItems\":9,\"default\":[1,0,0,0,1,0,0,0,1]},\"matrix4\":{\"description\":\"4 by 4 matrix, storage: column-major.\",\"$id\":\"#matrix4\",\"type\":\"array\",\"items\":{\"type\":\"number\"},\"minItems\":16,\"maxItems\":16,\"default\":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]},\"boundingBox\":{\"description\":\"Axis-aligned 3D bounding box.\",\"$id\":\"#boundingBox\",\"type\":\"object\",\"properties\":{\"min\":{\"$ref\":\"#/definitions/vector3\"},\"max\":{\"$ref\":\"#/definitions/vector3\"}},\"required\":[\"min\",\"max\"]}}}");

/***/ }),

/***/ "./schema/json/document.schema.json":
/*!******************************************!*\
  !*** ./schema/json/document.schema.json ***!
  \******************************************/
/*! exports provided: $id, $schema, title, description, definitions, type, properties, required, additionalProperties, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"$id\":\"https://schemas.3d.si.edu/voyager/document.schema.json\",\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Smithsonian 3D Document\",\"description\":\"Describes a 3D document containing a scene with 3D models.\",\"definitions\":{\"scene\":{\"$id\":\"#scene\",\"type\":\"object\",\"properties\":{\"nodes\":{\"type\":\"array\",\"description\":\"The indices of the scene's root nodes.\",\"items\":{\"type\":\"integer\",\"minimum\":0},\"uniqueItems\":true,\"minItems\":1},\"setup\":{\"description\":\"The index of the scene's setup.\",\"type\":\"integer\",\"minimum\":0}}},\"node\":{\"$id\":\"#node\",\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"children\":{\"type\":\"array\",\"description\":\"The indices of this node's children.\",\"items\":{\"type\":\"integer\",\"minimum\":0},\"uniqueItems\":true,\"minItems\":1},\"matrix\":{\"description\":\"A floating-point 4x4 transformation matrix stored in column-major order.\",\"type\":\"array\",\"items\":{\"type\":\"number\"},\"minItems\":16,\"maxItems\":16,\"default\":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]},\"translation\":{\"description\":\"The node's translation along the x, y, and z axes.\",\"type\":\"array\",\"items\":{\"type\":\"number\"},\"minItems\":3,\"maxItems\":3,\"default\":[0,0,0]},\"rotation\":{\"description\":\"The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar.\",\"type\":\"array\",\"items\":{\"type\":\"number\",\"minimum\":-1,\"maximum\":1},\"minItems\":4,\"maxItems\":4,\"default\":[0,0,0,1]},\"scale\":{\"description\":\"The node's non-uniform scale, given as the scaling factors along the x, y, and z axes.\",\"type\":\"array\",\"items\":{\"type\":\"number\"},\"minItems\":3,\"maxItems\":3,\"default\":[1,1,1]},\"camera\":{\"description\":\"The index of the camera component of this node.\",\"type\":\"integer\",\"minimum\":0},\"light\":{\"description\":\"The index of the light component of this node.\",\"type\":\"integer\",\"minimum\":0},\"meta\":{\"description\":\"The index of the meta data component of this node.\",\"type\":\"integer\",\"minimum\":0},\"model\":{\"description\":\"The index of the model component of this node.\",\"type\":\"integer\",\"minimum\":0}},\"not\":{\"anyOf\":[{\"required\":[\"matrix\",\"translation\"]},{\"required\":[\"matrix\",\"rotation\"]},{\"required\":[\"matrix\",\"scale\"]}]}},\"camera\":{\"$id\":\"#camera\",\"type\":\"object\",\"properties\":{\"type\":{\"description\":\"Specifies if the camera uses a perspective or orthographic projection.\",\"type\":\"string\",\"enum\":[\"perspective\",\"orthographic\"]},\"perspective\":{\"description\":\"A perspective camera containing properties to create a perspective projection matrix.\",\"type\":\"object\",\"properties\":{\"yfov\":{\"type\":\"number\",\"description\":\"The floating-point vertical field of view in radians.\",\"exclusiveMinimum\":0},\"aspectRatio\":{\"type\":\"number\",\"description\":\"The floating-point aspect ratio of the field of view.\",\"exclusiveMinimum\":0},\"znear\":{\"type\":\"number\",\"description\":\"The floating-point distance to the near clipping plane.\",\"exclusiveMinimum\":0},\"zfar\":{\"type\":\"number\",\"description\":\"The floating-point distance to the far clipping plane.\",\"exclusiveMinimum\":0}},\"required\":[\"yfov\",\"znear\"]},\"orthographic\":{\"description\":\"An orthographic camera containing properties to create an orthographic projection matrix.\",\"type\":\"object\",\"properties\":{\"xmag\":{\"type\":\"number\",\"description\":\"The floating-point horizontal magnification of the view. Must not be zero.\"},\"ymag\":{\"type\":\"number\",\"description\":\"The floating-point vertical magnification of the view. Must not be zero.\"},\"znear\":{\"type\":\"number\",\"description\":\"The floating-point distance to the near clipping plane.\",\"exclusiveMinimum\":0},\"zfar\":{\"type\":\"number\",\"description\":\"The floating-point distance to the far clipping plane. `zfar` must be greater than `znear`.\",\"exclusiveMinimum\":0}},\"required\":[\"xmag\",\"ymag\",\"znear\",\"zfar\"]}},\"required\":[\"type\"],\"not\":{\"required\":[\"perspective\",\"orthographic\"]}},\"light\":{\"$id\":\"#light\",\"type\":\"object\",\"properties\":{\"type\":{\"description\":\"Specifies the type of the light source.\",\"type\":\"string\",\"enum\":[\"ambient\",\"directional\",\"point\",\"spot\",\"hemisphere\"]},\"color\":{\"$ref\":\"#/definitions/colorRGB\"},\"intensity\":{\"type\":\"number\",\"minimum\":0,\"default\":1},\"castShadow\":{\"type\":\"boolean\",\"default\":false},\"point\":{\"type\":\"object\",\"properties\":{\"distance\":{\"type\":\"number\",\"minimum\":0},\"decay\":{\"type\":\"number\",\"minimum\":0}}},\"spot\":{\"type\":\"object\",\"properties\":{\"distance\":{\"type\":\"number\",\"minimum\":0},\"decay\":{\"type\":\"number\",\"minimum\":0},\"angle\":{\"type\":\"number\",\"minimum\":0},\"penumbra\":{\"type\":\"number\",\"minimum\":0}}},\"hemisphere\":{\"type\":\"object\",\"properties\":{\"groundColor\":{\"$ref\":\"#/definitions/colorRGB\"}}}},\"required\":[\"type\"],\"not\":{\"required\":[\"point\",\"spot\",\"hemisphere\"]}},\"colorRGB\":{\"$id\":\"#colorRGB\",\"type\":\"array\",\"items\":{\"type\":\"number\",\"minimum\":0,\"maximum\":1},\"minItems\":3,\"maxItems\":3,\"default\":[1,1,1]}},\"type\":\"object\",\"properties\":{\"asset\":{\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"const\":\"application/si-dpo-3d.document+json\"},\"version\":{\"description\":\"Version of this presentation description.\",\"type\":\"string\",\"minLength\":1},\"copyright\":{\"description\":\"A copyright message to credit the content creator.\",\"type\":\"string\",\"minLength\":1},\"generator\":{\"description\":\"Tool that generated this presentation description.\",\"type\":\"string\",\"minLength\":1}},\"required\":[\"type\",\"version\"]},\"scene\":{\"description\":\"Index of the root scene of the document.\",\"type\":\"integer\",\"minimum\":0},\"scenes\":{\"description\":\"An array of scenes.\",\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/scene\"}},\"nodes\":{\"description\":\"An array of nodes.\",\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/node\"},\"minItems\":1},\"metas\":{\"description\":\"An array of meta data components.\",\"type\":\"array\",\"items\":{\"$ref\":\"./meta.schema.json\"}},\"setups\":{\"description\":\"An array of setup components.\",\"type\":\"array\",\"items\":{\"$ref\":\"./setup.schema.json\"},\"minItems\":1},\"cameras\":{\"description\":\"An array of camera components.\",\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/camera\"},\"minItems\":1},\"lights\":{\"description\":\"An array of light components.\",\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/light\"},\"minItems\":1},\"models\":{\"description\":\"An array of model components.\",\"type\":\"array\",\"items\":{\"$ref\":\"./model.schema.json\"},\"minItems\":1}},\"required\":[\"asset\",\"scene\",\"scenes\"],\"additionalProperties\":false}");

/***/ }),

/***/ "./schema/json/meta.schema.json":
/*!**************************************!*\
  !*** ./schema/json/meta.schema.json ***!
  \**************************************/
/*! exports provided: $id, $schema, title, description, definitions, type, properties, additionalProperties, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"$id\":\"https://schemas.3d.si.edu/voyager/meta.schema.json\",\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Meta\",\"description\":\"Meta data for a scene or model item.\",\"definitions\":{\"image\":{\"$id\":\"image\",\"description\":\"Reference to a preview image\",\"type\":\"object\",\"properties\":{\"uri\":{\"description\":\"Location of the image resource, absolute URL or path relative to this document\",\"type\":\"string\",\"minLength\":1},\"quality\":{\"type\":\"string\",\"enum\":[\"Thumb\",\"Low\",\"Medium\",\"High\"]},\"byteSize\":{\"type\":\"integer\",\"minimum\":1},\"width\":{\"type\":\"integer\",\"minimum\":1},\"height\":{\"type\":\"integer\",\"minimum\":1}},\"required\":[\"uri\",\"quality\"]},\"article\":{\"$id\":\"#article\",\"description\":\"Reference to an external document (HTML)\",\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"minLength\":1},\"title\":{\"description\":\"Short title.\",\"type\":\"string\"},\"lead\":{\"description\":\"Short lead text.\",\"type\":\"string\"},\"tags\":{\"description\":\"Array of tags, categorizing the article.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"uri\":{\"description\":\"Location of the article resource, absolute URL or path relative to this document\",\"type\":\"string\",\"minLength\":1},\"mimeType\":{\"description\":\"MIME type of the resource.\",\"type\":\"string\"},\"thumbnailUri\":{\"description\":\"Location of a thumbnail/preview image of the resource.\",\"type\":\"string\"}},\"required\":[\"id\",\"uri\"],\"additionalProperties\":false}},\"type\":\"object\",\"properties\":{\"collection\":{\"description\":\"Information retrieved from the collection record for the item.\",\"type\":\"object\"},\"process\":{\"description\":\"Information about how the item was processed.\",\"type\":\"object\"},\"images\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/image\"},\"minLength\":1},\"articles\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/article\"},\"minLength\":1},\"leadArticle\":{\"description\":\"Index of the main article. This is the default article displayed with the item.\",\"type\":\"integer\",\"minimum\":0}},\"additionalProperties\":false}");

/***/ }),

/***/ "./schema/json/model.schema.json":
/*!***************************************!*\
  !*** ./schema/json/model.schema.json ***!
  \***************************************/
/*! exports provided: $id, $schema, title, description, definitions, type, properties, required, additionalProperties, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"$id\":\"https://schemas.3d.si.edu/voyager/model.schema.json\",\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Model\",\"description\":\"Describes the visual representations (models, derivatives) of a 3D item.\",\"definitions\":{\"annotation\":{\"description\":\"Spatial annotation (hot spot, hot zone) on a model. Annotations can reference articles.\",\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"minLength\":1},\"title\":{\"type\":\"string\"},\"lead\":{\"type\":\"string\"},\"marker\":{\"type\":\"string\"},\"tags\":{\"description\":\"Array of tags, categorizing the annotation.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"articleId\":{\"description\":\"Id of an article related to this annotation.\",\"type\":\"string\",\"minLength\":1},\"imageUri\":{\"description\":\"URI of an image resource for this annotation.\",\"type\":\"string\",\"minLength\":1},\"style\":{\"type\":\"string\"},\"visible\":{\"description\":\"Flag indicating whether the annotation is visible.\",\"type\":\"boolean\",\"default\":true},\"expanded\":{\"description\":\"Flag indicating whether the annotation is displayed in expanded state.\",\"type\":\"boolean\",\"default\":false},\"scale\":{\"description\":\"Scales the annotation relative to its default size.\",\"type\":\"number\",\"default\":1},\"offset\":{\"description\":\"Offsets the annotation along its direction.\",\"type\":\"number\",\"default\":0},\"tilt\":{\"description\":\"Tilt angle of the annotation relative to the direction vector in degrees.\",\"type\":\"number\",\"default\":0},\"azimuth\":{\"description\":\"Azimuth angle of a tilted annotation.\",\"type\":\"number\",\"default\":0},\"color\":{\"description\":\"Color of the annotation\",\"type\":\"array\",\"minLength\":3,\"maxLength\":3,\"items\":{\"type\":\"number\"}},\"position\":{\"description\":\"Position where the annotation is anchored, in local item coordinates.\",\"$ref\":\"./common.schema.json#/definitions/vector3\"},\"direction\":{\"description\":\"Direction of the stem of this annotation, usually corresponds to the surface normal.\",\"$ref\":\"./common.schema.json#/definitions/vector3\"},\"zoneIndex\":{\"description\":\"Index of the zone on the zone texture.\",\"type\":\"integer\",\"minimum\":0}},\"required\":[\"id\"],\"additionalProperties\":false},\"derivative\":{\"description\":\"Visual representation derived from the master model.\",\"type\":\"object\",\"properties\":{\"usage\":{\"description\":\"usage categories for a derivative.\",\"type\":\"string\",\"enum\":[\"Image2D\",\"Web3D\",\"Print3D\",\"Editorial3D\"]},\"quality\":{\"type\":\"string\",\"enum\":[\"Thumb\",\"Low\",\"Medium\",\"High\",\"Highest\",\"LOD\",\"Stream\"]},\"assets\":{\"description\":\"List of individual resources this derivative is composed of.\",\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/asset\"}}}},\"asset\":{\"description\":\"an individual resource for a 3D model.\",\"type\":\"object\",\"properties\":{\"uri\":{\"type\":\"string\",\"minLength\":1},\"type\":{\"type\":\"string\",\"enum\":[\"Model\",\"Geometry\",\"Image\",\"Texture\",\"Points\",\"Volume\"]},\"part\":{\"type\":\"string\",\"minLength\":1},\"mimeType\":{\"type\":\"string\",\"minLength\":1},\"byteSize\":{\"type\":\"integer\",\"minimum\":1},\"numFaces\":{\"type\":\"integer\",\"minimum\":1},\"imageSize\":{\"type\":\"integer\",\"minimum\":1},\"mapType\":{\"type\":\"string\",\"enum\":[\"Color\",\"Normal\",\"Occlusion\",\"Emissive\",\"MetallicRoughness\",\"Zone\"]}},\"required\":[\"uri\",\"type\"]},\"material\":{\"description\":\"Surface properties for this model, shared by all derivatives.\",\"type\":\"object\",\"properties\":{}}},\"type\":\"object\",\"properties\":{\"units\":{\"$ref\":\"./common.schema.json#/definitions/units\"},\"tags\":{\"type\":\"string\"},\"visible\":{\"type\":\"boolean\"},\"renderOrder\":{\"type\":\"number\"},\"derivatives\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/derivative\"}},\"translation\":{\"description\":\"Translation vector. Must be applied to bring model into its 'neutral' pose.\",\"$ref\":\"./common.schema.json#/definitions/vector3\"},\"rotation\":{\"description\":\"Rotation quaternion. Must be applied to bring model into its 'neutral' pose.\",\"$ref\":\"./common.schema.json#/definitions/vector4\"},\"boundingBox\":{\"description\":\"Bounding box for this model, shared by all derivatives.\",\"$ref\":\"./common.schema.json#/definitions/boundingBox\"},\"material\":{\"$ref\":\"#/definitions/material\"},\"annotations\":{\"description\":\"List of annotations to be displayed with the model\",\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/annotation\"}}},\"required\":[\"units\",\"derivatives\"],\"additionalProperties\":false}");

/***/ }),

/***/ "./schema/json/setup.schema.json":
/*!***************************************!*\
  !*** ./schema/json/setup.schema.json ***!
  \***************************************/
/*! exports provided: $id, $schema, title, description, definitions, type, properties, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"$id\":\"https://schemas.3d.si.edu/voyager/setup.schema.json\",\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Setup\",\"description\":\"Tours and settings for explorer documents (background, interface, etc.)\",\"definitions\":{\"viewer\":{\"type\":\"object\",\"properties\":{\"shader\":{\"type\":\"string\"},\"exposure\":{\"type\":\"number\"},\"gamma\":{\"type\":\"number\"},\"annotationsVisible\":{\"type\":\"boolean\"},\"activeTags\":{\"type\":\"string\"},\"sortedTags\":{\"type\":\"string\"},\"radioTags\":{\"type\":\"boolean\"}},\"required\":[\"shader\",\"exposure\",\"gamma\"]},\"reader\":{\"type\":\"object\",\"properties\":{\"enabled\":{\"type\":\"boolean\"},\"position\":{\"type\":\"string\"},\"articleId\":{\"description\":\"Id of the article currently displayed in the reader.\",\"type\":\"string\",\"minLength\":1}}},\"interface\":{\"type\":\"object\",\"properties\":{\"visible\":{\"type\":\"boolean\"},\"logo\":{\"type\":\"boolean\"},\"menu\":{\"type\":\"boolean\"},\"tools\":{\"type\":\"boolean\"}}},\"navigation\":{\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"enum\":[\"Orbit\",\"Walk\"]},\"enabled\":{\"type\":\"boolean\"},\"autoZoom\":{\"type\":\"boolean\"},\"orbit\":{\"$comment\":\"TODO: Implement\",\"type\":\"object\",\"properties\":{}},\"walk\":{\"$comment\":\"TODO: Implement\",\"type\":\"object\",\"properties\":{}}}},\"background\":{\"type\":\"object\",\"properties\":{\"style\":{\"type\":\"string\",\"enum\":[\"Solid\",\"LinearGradient\",\"RadialGradient\"]},\"color0\":{\"$ref\":\"./common.schema.json#/definitions/vector3\"},\"color1\":{\"$ref\":\"./common.schema.json#/definitions/vector3\"}}},\"floor\":{\"type\":\"object\",\"properties\":{\"visible\":{\"type\":\"boolean\"},\"position\":{\"$ref\":\"./common.schema.json#/definitions/vector3\"},\"size\":{\"type\":\"number\"},\"color\":{\"$ref\":\"./common.schema.json#/definitions/vector3\"},\"opacity\":{\"type\":\"number\"},\"receiveShadow\":{\"type\":\"boolean\"}}},\"grid\":{\"type\":\"object\",\"properties\":{\"visible\":{\"type\":\"boolean\"},\"color\":{\"$ref\":\"./common.schema.json#/definitions/vector3\"}}},\"tape\":{\"type\":\"object\",\"properties\":{\"enabled\":{\"type\":\"boolean\"},\"startPosition\":{\"$ref\":\"./common.schema.json#/definitions/vector3\"},\"startDirection\":{\"$ref\":\"./common.schema.json#/definitions/vector3\"},\"endPosition\":{\"$ref\":\"./common.schema.json#/definitions/vector3\"},\"endDirection\":{\"$ref\":\"./common.schema.json#/definitions/vector3\"}}},\"slicer\":{\"type\":\"object\",\"properties\":{\"enabled\":{\"type\":\"boolean\"},\"axis\":{\"type\":\"string\",\"enum\":[\"X\",\"Y\",\"Z\"]},\"inverted\":{\"type\":\"boolean\"},\"position\":{\"type\":\"number\"}}},\"tours\":{\"description\":\"Animated tours.\",\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\"},\"lead\":{\"type\":\"string\"},\"tags\":{\"description\":\"Array of tags, categorizing the tour.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"steps\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\"},\"id\":{\"type\":\"string\"}}}}}}},\"snapshots\":{\"description\":\"Snapshots are animatable scene states.\",\"type\":\"object\",\"properties\":{\"features\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"targets\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"states\":{\"type\":\"array\",\"items\":{\"type\":\"object\"}}}}},\"type\":\"object\",\"properties\":{\"units\":{\"$ref\":\"./common.schema.json#/definitions/units\"},\"interface\":{\"$ref\":\"#/definitions/interface\"},\"viewer\":{\"$ref\":\"#/definitions/viewer\"},\"reader\":{\"$ref\":\"#/definitions/reader\"},\"navigation\":{\"$ref\":\"#/definitions/navigation\"},\"background\":{\"$ref\":\"#/definitions/background\"},\"floor\":{\"$ref\":\"#/definitions/floor\"},\"grid\":{\"$ref\":\"#/definitions/grid\"},\"tape\":{\"$ref\":\"#/definitions/tape\"},\"slicer\":{\"$ref\":\"#/definitions/slicer\"},\"tours\":{\"$ref\":\"#/definitions/tours\"}}}");

/***/ }),

/***/ "./schema/model.ts":
/*!*************************!*\
  !*** ./schema/model.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = __webpack_require__(/*! ./common */ "./schema/common.ts");
exports.EUnitType = common_1.EUnitType;
var EDerivativeUsage;
(function (EDerivativeUsage) {
    EDerivativeUsage[EDerivativeUsage["Image2D"] = 0] = "Image2D";
    EDerivativeUsage[EDerivativeUsage["Web3D"] = 1] = "Web3D";
    EDerivativeUsage[EDerivativeUsage["Print3D"] = 2] = "Print3D";
    EDerivativeUsage[EDerivativeUsage["Editorial3D"] = 3] = "Editorial3D";
})(EDerivativeUsage = exports.EDerivativeUsage || (exports.EDerivativeUsage = {}));
var EDerivativeQuality;
(function (EDerivativeQuality) {
    EDerivativeQuality[EDerivativeQuality["Thumb"] = 0] = "Thumb";
    EDerivativeQuality[EDerivativeQuality["Low"] = 1] = "Low";
    EDerivativeQuality[EDerivativeQuality["Medium"] = 2] = "Medium";
    EDerivativeQuality[EDerivativeQuality["High"] = 3] = "High";
    EDerivativeQuality[EDerivativeQuality["Highest"] = 4] = "Highest";
    EDerivativeQuality[EDerivativeQuality["LOD"] = 5] = "LOD";
    EDerivativeQuality[EDerivativeQuality["Stream"] = 6] = "Stream";
})(EDerivativeQuality = exports.EDerivativeQuality || (exports.EDerivativeQuality = {}));
var EAssetType;
(function (EAssetType) {
    EAssetType[EAssetType["Model"] = 0] = "Model";
    EAssetType[EAssetType["Geometry"] = 1] = "Geometry";
    EAssetType[EAssetType["Image"] = 2] = "Image";
    EAssetType[EAssetType["Texture"] = 3] = "Texture";
    EAssetType[EAssetType["Points"] = 4] = "Points";
    EAssetType[EAssetType["Volume"] = 5] = "Volume";
})(EAssetType = exports.EAssetType || (exports.EAssetType = {}));
var EMapType;
(function (EMapType) {
    EMapType[EMapType["Color"] = 0] = "Color";
    EMapType[EMapType["Emissive"] = 1] = "Emissive";
    EMapType[EMapType["Occlusion"] = 2] = "Occlusion";
    EMapType[EMapType["Normal"] = 3] = "Normal";
    EMapType[EMapType["MetallicRoughness"] = 4] = "MetallicRoughness";
    EMapType[EMapType["Zone"] = 5] = "Zone";
})(EMapType = exports.EMapType || (exports.EMapType = {}));


/***/ }),

/***/ "./schema/setup.ts":
/*!*************************!*\
  !*** ./schema/setup.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var EShaderMode;
(function (EShaderMode) {
    EShaderMode[EShaderMode["Default"] = 0] = "Default";
    EShaderMode[EShaderMode["Clay"] = 1] = "Clay";
    EShaderMode[EShaderMode["XRay"] = 2] = "XRay";
    EShaderMode[EShaderMode["Normals"] = 3] = "Normals";
    EShaderMode[EShaderMode["Wireframe"] = 4] = "Wireframe";
})(EShaderMode = exports.EShaderMode || (exports.EShaderMode = {}));
var EBackgroundStyle;
(function (EBackgroundStyle) {
    EBackgroundStyle[EBackgroundStyle["Solid"] = 0] = "Solid";
    EBackgroundStyle[EBackgroundStyle["LinearGradient"] = 1] = "LinearGradient";
    EBackgroundStyle[EBackgroundStyle["RadialGradient"] = 2] = "RadialGradient";
})(EBackgroundStyle = exports.EBackgroundStyle || (exports.EBackgroundStyle = {}));
var ENavigationType;
(function (ENavigationType) {
    ENavigationType[ENavigationType["Orbit"] = 0] = "Orbit";
    ENavigationType[ENavigationType["Walk"] = 1] = "Walk";
})(ENavigationType = exports.ENavigationType || (exports.ENavigationType = {}));
var EReaderPosition;
(function (EReaderPosition) {
    EReaderPosition[EReaderPosition["Overlay"] = 0] = "Overlay";
    EReaderPosition[EReaderPosition["Left"] = 1] = "Left";
    EReaderPosition[EReaderPosition["Right"] = 2] = "Right";
})(EReaderPosition = exports.EReaderPosition || (exports.EReaderPosition = {}));
var ESliceAxis;
(function (ESliceAxis) {
    ESliceAxis[ESliceAxis["X"] = 0] = "X";
    ESliceAxis[ESliceAxis["Y"] = 1] = "Y";
    ESliceAxis[ESliceAxis["Z"] = 2] = "Z";
})(ESliceAxis = exports.ESliceAxis || (exports.ESliceAxis = {}));


/***/ }),

/***/ "./shaders/UberPBRMaterial.ts":
/*!************************************!*\
  !*** ./shaders/UberPBRMaterial.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
const fragmentShader = __webpack_require__(/*! ./uberPBRShader.frag */ "./shaders/uberPBRShader.frag").default;
const vertexShader = __webpack_require__(/*! ./uberPBRShader.vert */ "./shaders/uberPBRShader.vert").default;
const setup_1 = __webpack_require__(/*! client/schema/setup */ "./schema/setup.ts");
exports.EShaderMode = setup_1.EShaderMode;
class UberPBRMaterial extends THREE.MeshStandardMaterial {
    constructor(params) {
        super();
        this._clayColor = new THREE.Color("#a67a6c");
        this._wireColor = new THREE.Color("#004966");
        this._wireEmissiveColor = new THREE.Color("#004966");
        this._objectSpaceNormalMap = false;
        this._paramCopy = {};
        this._sideCopy = THREE.FrontSide;
        this.type = "UberPBRMaterial";
        this.isUberPBRMaterial = true;
        this.isMeshStandardMaterial = true;
        this.isMeshPhysicalMaterial = false;
        this.defines = {
            "STANDARD": true,
            "PHYSICAL": false,
            "OBJECTSPACE_NORMALMAP": false,
            "MODE_NORMALS": false,
            "MODE_XRAY": false,
            "CUT_PLANE": false,
        };
        this.uniforms = THREE.UniformsUtils.merge([
            THREE.ShaderLib.standard.uniforms,
            {
                aoMapMix: { value: new THREE.Vector3(0.25, 0.25, 0.25) },
                cutPlaneDirection: { value: new THREE.Vector4(0, 0, -1, 0) },
                cutPlaneColor: { value: new THREE.Vector3(1, 0, 0) },
            }
        ]);
        this._aoMapMix = this.uniforms.aoMapMix.value;
        this._cutPlaneDirection = this.uniforms.cutPlaneDirection.value;
        this._cutPlaneColor = this.uniforms.cutPlaneColor.value;
        //this.vertexShader = ShaderLib.standard.vertexShader;
        this.vertexShader = vertexShader;
        //this.fragmentShader = ShaderLib.standard.fragmentShader;
        this.fragmentShader = fragmentShader;
        this.color = new THREE.Color(0xffffff); // diffuse
        this.roughness = 0.7;
        this.metalness = 0.0;
        if (params) {
            this.setValues(params);
        }
    }
    set cutPlaneDirection(direction) {
        this._cutPlaneDirection.copy(direction);
    }
    get cutPlaneDirection() {
        return this._cutPlaneDirection;
    }
    set cutPlaneColor(color) {
        this._cutPlaneColor.copy(color);
    }
    get cutPlaneColor() {
        return this._cutPlaneColor;
    }
    set aoMapMix(mix) {
        this._aoMapMix.copy(mix);
    }
    get aoMapMix() {
        return this._aoMapMix;
    }
    setShaderMode(mode) {
        Object.assign(this, this._paramCopy);
        this.defines["MODE_NORMALS"] = false;
        this.defines["MODE_XRAY"] = false;
        this.defines["OBJECTSPACE_NORMALMAP"] = !!(this.normalMap && this._objectSpaceNormalMap);
        this.needsUpdate = true;
        switch (mode) {
            case setup_1.EShaderMode.Clay:
                this._paramCopy = {
                    color: this.color,
                    map: this.map,
                    roughness: this.roughness,
                    metalness: this.metalness,
                    aoMapIntensity: this.aoMapIntensity,
                    blending: this.blending,
                    transparent: this.transparent,
                    depthWrite: this.depthWrite,
                };
                this.color = this._clayColor;
                this.map = null;
                this.roughness = 1;
                this.metalness = 0;
                this.aoMapIntensity *= 1;
                this.blending = THREE.NoBlending;
                this.transparent = false;
                this.depthWrite = true;
                break;
            case setup_1.EShaderMode.Normals:
                this._paramCopy = {
                    blending: this.blending,
                    transparent: this.transparent,
                    depthWrite: this.depthWrite,
                };
                this.defines["MODE_NORMALS"] = true;
                this.blending = THREE.NoBlending;
                this.transparent = false;
                this.depthWrite = true;
                break;
            case setup_1.EShaderMode.XRay:
                this._paramCopy = {
                    side: this.side,
                    blending: this.blending,
                    transparent: this.transparent,
                    depthWrite: this.depthWrite,
                };
                this.defines["MODE_XRAY"] = true;
                this.side = THREE.DoubleSide;
                this.blending = THREE.AdditiveBlending;
                this.transparent = true;
                this.depthWrite = false;
                break;
            case setup_1.EShaderMode.Wireframe:
                this._paramCopy = {
                    color: this.color,
                    emissive: this.emissive,
                    roughness: this.roughness,
                    metalness: this.metalness,
                    wireframe: this.wireframe,
                    map: this.map,
                    aoMap: this.aoMap,
                    emissiveMap: this.emissiveMap,
                    normalMap: this.normalMap,
                };
                this.color = this._wireColor;
                this.emissive = this._wireEmissiveColor;
                this.roughness = 0.8;
                this.metalness = 0.1;
                this.wireframe = true;
                this.map = null;
                this.aoMap = null;
                this.emissiveMap = null;
                this.normalMap = null;
                this.defines["OBJECTSPACE_NORMALMAP"] = false;
                break;
        }
    }
    enableCutPlane(enabled) {
        this.defines["CUT_PLANE"] = enabled;
        if (enabled) {
            this._sideCopy = this.side;
            this.side = THREE.DoubleSide;
        }
        else {
            this.side = this._sideCopy;
        }
    }
    enableObjectSpaceNormalMap(useObjectSpace) {
        if (useObjectSpace !== this._objectSpaceNormalMap) {
            this._objectSpaceNormalMap = useObjectSpace;
        }
        if (this.normalMap) {
            this.defines["OBJECTSPACE_NORMALMAP"] = useObjectSpace;
            this.needsUpdate = true;
        }
    }
    copyStandardMaterial(material) {
        this.color = material.color;
        this.opacity = material.opacity;
        this.transparent = material.opacity < 1 || !!material.alphaMap;
        this.roughness = material.roughness;
        this.roughnessMap = material.roughnessMap;
        this.metalness = material.metalness;
        this.metalnessMap = material.metalnessMap;
        this.map = material.map;
        this.aoMap = material.aoMap;
        this.aoMapIntensity = material.aoMapIntensity;
        this.normalMap = material.normalMap;
        return this;
    }
}
exports.default = UberPBRMaterial;


/***/ }),

/***/ "./shaders/uberPBRShader.frag":
/*!************************************!*\
  !*** ./shaders/uberPBRShader.frag ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("//#define PHYSICAL\n//#define STANDARD\n\n#ifdef PHYSICAL\n    #define REFLECTIVITY\n    #define CLEARCOAT\n    #define TRANSPARENCY\n#endif\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n\n#ifdef TRANSPARENCY\n    uniform float transparency;\n#endif\n\n#ifdef REFLECTIVITY\n    uniform float reflectivity;\n#endif\n\n#ifdef CLEARCOAT\n    uniform float clearcoat;\n    uniform float clearcoatRoughness;\n#endif\n\n#ifdef USE_SHEEN\n    uniform vec3 sheen;\n#endif\n\n//#ifndef STANDARD\n//\tuniform float clearCoat;\n//\tuniform float clearCoatRoughness;\n//#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\n    #ifdef USE_TANGENT\n        varying vec3 vTangent;\n        varying vec3 vBitangent;\n    #endif\n#endif\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n\n//#include <uv_pars_fragment>\n//#include <uv2_pars_fragment>\n// REPLACED WITH\n#if defined(USE_MAP) || defined(USE_BUMPMAP) || defined(USE_NORMALMAP) || defined(USE_SPECULARMAP) || defined(USE_ALPHAMAP) || defined(USE_EMISSIVEMAP) || defined(USE_ROUGHNESSMAP) || defined(USE_METALNESSMAP) || defined(USE_LIGHTMAP) || defined(USE_AOMAP)\n\tvarying vec2 vUv;\n#endif\n\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n#ifdef USE_AOMAP\n    uniform vec3 aoMapMix;\n#endif\n\n#ifdef MODE_XRAY\n    varying float vIntensity;\n#endif\n\n#ifdef CUT_PLANE\n    varying vec3 vWorldPosition;\n    uniform vec4 cutPlaneDirection;\n    uniform vec3 cutPlaneColor;\n#endif\n\nvoid main() {\n    #ifdef CUT_PLANE\n        if (dot(vWorldPosition, cutPlaneDirection.xyz) < -cutPlaneDirection.w) {\n            discard;\n        }\n    #endif\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n\n\t#ifdef CUT_PLANE\n\t    // on the cut surface (back facing fragments revealed), replace normal with cut plane direction\n        if (!gl_FrontFacing) {\n            normal = -cutPlaneDirection.xyz;\n            diffuseColor.rgb = cutPlaneColor.rgb;\n        }\n\t#endif\n\n    #include <clearcoat_normal_fragment_begin>\n    #include <clearcoat_normal_fragment_maps>\n    #include <emissivemap_fragment>\n\n\t// accumulation\n    #if defined(USE_LIGHTMAP) || defined(USE_AOMAP)\n        vec2 vUv2 = vUv;\n    #endif\n\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t//#include <aomap_fragment>\n\t// REPLACED WITH\n\t#ifdef USE_AOMAP\n\t    // if cut plane is enabled, disable ambient occlusion on back facing fragments\n\t    #ifdef CUT_PLANE\n            if (gl_FrontFacing) {\n\t    #endif\n\n    \t// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n    \tvec3 aoSample = texture2D(aoMap, vUv).rgb;\n    \tvec3 aoFactors = mix(vec3(1.0), aoSample, clamp(aoMapMix * aoMapIntensity, 0.0, 1.0));\n    \tfloat ambientOcclusion = aoFactors.x * aoFactors.y * aoFactors.z;\n    \tfloat ambientOcclusion2 = ambientOcclusion * ambientOcclusion;\n    \treflectedLight.directDiffuse *= ambientOcclusion2;\n    \treflectedLight.directSpecular *= ambientOcclusion;\n    \t//reflectedLight.indirectDiffuse *= ambientOcclusion;\n\n    \t#if defined(USE_ENVMAP) && defined(PHYSICAL)\n    \t\tfloat dotNV = saturate(dot(geometry.normal, geometry.viewDir));\n    \t\treflectedLight.indirectSpecular *= computeSpecularOcclusion(dotNV, ambientOcclusion, material.specularRoughness);\n    \t#endif\n\n    \t#ifdef CUT_PLANE\n    \t    }\n    \t#endif\n    #endif\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n    // this is a stub for the transparency model\n    #ifdef TRANSPARENCY\n        diffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n    #endif\n\n\tgl_FragColor = vec4(outgoingLight, diffuseColor.a);\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n    #ifdef MODE_NORMALS\n        gl_FragColor = vec4(vec3(normal * 0.5 + 0.5), 1.0);\n    #endif\n\n    #ifdef MODE_XRAY\n        gl_FragColor = vec4(vec3(0.4, 0.7, 1.0) * vIntensity, 1.0);\n    #endif\n}\n");

/***/ }),

/***/ "./shaders/uberPBRShader.vert":
/*!************************************!*\
  !*** ./shaders/uberPBRShader.vert ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("//#define PHYSICAL\n//#define STANDARD\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n\n#include <common>\n\n//#include <uv_pars_vertex>\n//#include <uv2_pars_vertex>\n// REPLACED WITH\n#if defined(USE_MAP) || defined(USE_BUMPMAP) || defined(USE_NORMALMAP) || defined(USE_SPECULARMAP) || defined(USE_ALPHAMAP) || defined(USE_EMISSIVEMAP) || defined(USE_ROUGHNESSMAP) || defined(USE_METALNESSMAP) || defined(USE_LIGHTMAP) || defined(USE_AOMAP)\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n#ifdef MODE_XRAY\n    varying float vIntensity;\n#endif\n\n#ifdef CUT_PLANE\n    varying vec3 vWorldPosition;\n#endif\n\nvoid main() {\n\n//\t#include <uv_vertex>\n//\t#include <uv2_vertex>\n//  REPLACED WITH\n#if defined(USE_MAP) || defined(USE_BUMPMAP) || defined(USE_NORMALMAP) || defined(USE_SPECULARMAP) || defined(USE_ALPHAMAP) || defined(USE_EMISSIVEMAP) || defined(USE_ROUGHNESSMAP) || defined(USE_METALNESSMAP) || defined(USE_LIGHTMAP) || defined(USE_AOMAP)\n\tvUv = (uvTransform * vec3(uv, 1)).xy;\n#endif\n\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\tvNormal = normalize(transformedNormal);\n\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\n#ifdef MODE_XRAY\n    vIntensity = pow(abs(1.0 - abs(dot(vNormal, vec3(0.0, 0.0, 1.0)))), 3.0);\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = -mvPosition.xyz;\n\n\t// #include <worldpos_vertex>\n\t// REPLACED WITH\n\t#if defined(USE_ENVMAP) || defined(DISTANCE) || defined(USE_SHADOWMAP) || defined(CUT_PLANE)\n    \tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n    #endif\n\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n#ifdef CUT_PLANE\n    vWorldPosition = worldPosition.xyz / worldPosition.w;\n#endif\n\n#ifdef MODE_NORMALS\n    vNormal = normal;\n#endif\n}\n");

/***/ }),

/***/ "./templates/default.svx.json":
/*!************************************!*\
  !*** ./templates/default.svx.json ***!
  \************************************/
/*! exports provided: asset, scene, scenes, nodes, setups, cameras, lights, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"asset\":{\"type\":\"application/si-dpo-3d.document+json\",\"version\":\"1.0\",\"copyright\":\"(c) Smithsonian Institution, all rights reserved\",\"generator\":\"Voyager\"},\"scene\":0,\"scenes\":[{\"nodes\":[0,1],\"setup\":0}],\"nodes\":[{\"translation\":[0,0,15],\"camera\":0},{\"name\":\"Lights\",\"children\":[2,3,4,5]},{\"translation\":[0,0,2],\"rotation\":[0.4829741,-0.1070728,0.1880998,0.8484633],\"scale\":[1,1,1],\"name\":\"Key\",\"light\":0},{\"rotation\":[0.3546969,0.163893,-0.3861077,0.8356136],\"scale\":[1,1,1],\"name\":\"Fill #1\",\"light\":1},{\"translation\":[0,0,1],\"rotation\":[0.9374013,-0.3018693,0.0532277,0.1652891],\"name\":\"Fill #2\",\"light\":2},{\"translation\":[1,0,-1],\"rotation\":[0.373256,0.6426073,-0.5786063,0.3360813],\"scale\":[1,1,1],\"name\":\"Rim\",\"light\":3}],\"setups\":[{\"units\":\"cm\",\"interface\":{\"visible\":true,\"logo\":true,\"menu\":true,\"tools\":true},\"viewer\":{\"shader\":\"Default\",\"exposure\":1,\"gamma\":2,\"annotationsVisible\":false},\"reader\":{\"enabled\":false,\"position\":\"Overlay\"},\"navigation\":{\"type\":\"Orbit\",\"enabled\":true,\"autoZoom\":true,\"lightsFollowCamera\":true,\"autoRotation\":false,\"orbit\":{\"orbit\":[-24,-26,0],\"offset\":[0,0,150],\"minOrbit\":[-90,null,null],\"maxOrbit\":[90,null,null],\"minOffset\":[null,null,0.1],\"maxOffset\":[null,null,10000]}},\"background\":{\"style\":\"RadialGradient\",\"color0\":[0.2,0.25,0.3],\"color1\":[0.01,0.03,0.05]},\"floor\":{\"visible\":false,\"position\":[0,-25,0],\"size\":50,\"color\":[0.6,0.75,0.8],\"opacity\":0.5,\"receiveShadow\":false},\"grid\":{\"visible\":false,\"color\":[0.5,0.7,0.8]},\"tape\":{\"enabled\":false,\"startPosition\":[0,0,0],\"startDirection\":[0,0,0],\"endPosition\":[0,0,0],\"endDirection\":[0,0,0]},\"slicer\":{\"enabled\":false,\"axis\":\"X\",\"inverted\":false,\"position\":0.5}}],\"cameras\":[{\"type\":\"perspective\",\"perspective\":{\"yfov\":52,\"znear\":0.1,\"zfar\":100000}}],\"lights\":[{\"color\":[1,0.95,0.9],\"intensity\":1,\"type\":\"directional\",\"shadowEnabled\":true},{\"color\":[0.9,0.95,1],\"intensity\":0.7,\"type\":\"directional\",\"shadowEnabled\":true},{\"color\":[0.8,0.85,1],\"intensity\":0.5,\"type\":\"directional\"},{\"color\":[0.85,0.9078313,1],\"intensity\":0.6,\"type\":\"directional\"}]}");

/***/ }),

/***/ "./ui/Logo.ts":
/*!********************!*\
  !*** ./ui/Logo.ts ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Logo_1;
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
////////////////////////////////////////////////////////////////////////////////
let Logo = Logo_1 = class Logo extends CustomElement_1.default {
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-logo");
    }
    render() {
        return CustomElement_1.html `<div class="sv-short">${Logo_1.sunburst}</div><div class="sv-full">${Logo_1.sunburst}${Logo_1.smithsonian}</div>`;
    }
};
Logo.sunburst = CustomElement_1.html `<div class="sv-sunburst"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 158 158"><defs><style>.si-blue{fill:#009cde;}.si-yellow{fill:#ffcd00;}</style></defs><title>si-sunburst</title><circle class="si-blue" cx="79.02" cy="79" r="79.02"/><path class="si-yellow" d="M126.69,95c-5.12-8.8-13.2-8.9-14.2-8.87v0L146.59,79l-34.1-7.1h0a27.63,27.63,0,0,1,16.93-6.32c7.5-.11,14-9.29,9.85-16.35,0,0-1.23,11.09-15.23,7.39-9.84-2.6-15.63,3-16.32,3.77h0l19.09-29.14L97.67,50.32h0a27.47,27.47,0,0,1,7.49-16.44c5.23-5.39,3.33-16.47-4.59-18.53,0,0,7,8.71-5.54,16-8.8,5.13-8.9,13.21-8.88,14.21h0L79,11.43l-7.1,34.11h0a27.53,27.53,0,0,1-6.33-16.93c-.11-7.5-9.29-14-16.35-9.86,0,0,11.09,1.24,7.39,15.23C54,43.85,59.7,49.64,60.4,50.31h0L31.24,31.22h0L46.8,55l3.54,5.39h0a27.55,27.55,0,0,1-16.45-7.5c-5.39-5.22-16.47-3.32-18.53,4.59,0,0,8.71-7,16,5.55,5.14,8.82,13.26,8.89,14.22,8.87h0L11.45,79l34.1,7.11h0a27.56,27.56,0,0,1-16.93,6.32c-7.51.12-14,9.3-9.86,16.35,0,0,1.24-11.08,15.24-7.39,9.88,2.61,15.67-3.1,16.32-3.78l0,0L31.25,126.79,60.38,107.7a27.51,27.51,0,0,1-7.5,16.44c-5.22,5.39-3.32,16.47,4.59,18.53,0,0-7-8.71,5.55-16,8.82-5.14,8.89-13.25,8.87-14.21h0L79,146.57l7.11-34.09h0a27.67,27.67,0,0,1,6.33,16.94c.11,7.5,9.29,14,16.34,9.85,0,0-11.08-1.23-7.39-15.23,2.61-9.86-3.07-15.65-3.77-16.32l0,0,29.13,19.09L116.73,111.4l-9-13.76h0a27.64,27.64,0,0,1,16.45,7.5c5.38,5.23,16.47,3.33,18.53-4.59C142.69,100.55,134,107.52,126.69,95Z"/></svg></div>`;
Logo.smithsonian = CustomElement_1.html `<div class="sv-smithsonian"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 990 158"><defs><style>.si-white{fill:#fff;}</style></defs><title>si-text-neg</title><path class="si-white" d="M67,44.45C63.37,31.73,58.2,18,40.91,18c-15.3,0-22.06,11.13-22.06,21.86,0,14.51,9.54,21.27,25.24,29.42,15.5,8,34.39,17.29,34.39,39.55,0,20.87-17.69,37.57-44.13,37.57a69.28,69.28,0,0,1-19.48-3,67.3,67.3,0,0,1-9.74-4.18C3.54,135.09,1,118-.23,108.46l5.76-1.4c3.18,12.13,12.12,32.2,32.6,32.2C53,139.26,62,129.92,62,115.41,62,100.7,51.05,93.75,36.14,85.8,23.42,79,3.34,69.1,3.34,46.64c0-19.08,15.31-35.38,41-35.38,9.14,0,17.49,2.18,25,4.57.8,7.16,1.79,14.91,3.38,27.43Z"/><path class="si-white" d="M200.32,143.44v-5.17c11.73-1.19,13.91-2,13.91-16.1V89c0-14.12-5-23.06-17.49-23.06-7.15,0-14.71,4-22.26,10.33a46.33,46.33,0,0,1,.6,8.35v38.76c0,12.52,1.79,13.72,12.72,14.91v5.17H145.26v-5.17c12.33-1.19,14.12-2.19,14.12-15.31V88.78c0-14.71-5.17-22.86-17.3-22.86-8,0-15.7,5.37-21.66,10.33V123c0,12.92,1.59,14.12,11.33,15.31v5.17H89.81v-5.17c13.12-1.19,14.9-2.39,14.9-15.31V81.82c0-12.72-.59-13.71-12.12-15.5V61.74c8.75-1.59,18.88-4.17,27.63-8.14V69.7c4.17-2.79,8.55-6.37,14.51-10.14,5.17-3.18,9.94-5.37,16.3-5.37,9.54,0,18.08,6,22.06,16.3a185.42,185.42,0,0,1,16.5-11.13c4.17-2.78,9.34-5.17,14.9-5.17,15.51,0,25.25,10.93,25.25,30.41V123c0,13.32,1.59,14.12,12.92,15.31v5.17Z"/><path class="si-white" d="M253.59,143.44v-5.17c12.52-1.19,13.91-2.39,13.91-15.9V81.42c0-12.32-.6-13.12-12.52-15.1V61.55a125.21,125.21,0,0,0,28.22-7.76v68.58c0,13.51,1.39,14.71,14.12,15.9v5.17ZM264.12,26.76a10.22,10.22,0,0,1,10.14-10.33c5.56,0,9.94,4.37,9.94,10.33A10.18,10.18,0,0,1,274.06,36.9,10.42,10.42,0,0,1,264.12,26.76Z"/><path class="si-white" d="M343.82,143.24a20.14,20.14,0,0,1-8.34,2.58c-12.53,0-19.48-7.95-19.48-23.65V64.33H302.28l-.79-2,5.36-5.76H316V42.07L328.92,29l2.78.4V56.58h22.46c1.79,2,1.19,6.36-1.19,7.75H331.7v51.08c0,16.1,6.56,19.08,11.53,19.08s9.54-2,12.32-3.38l1.79,5.17Z"/><path class="si-white" d="M420,143.44v-5.17c11.53-1.19,13.12-2.39,13.12-15.31V90c0-16.3-6.17-24.45-19.48-24.45-7.56,0-15.11,3.78-20.67,10.14V123c0,12.73,1,14.12,12.72,15.31v5.17H363.5v-5.17c11.92-1,13.71-2.19,13.71-15.31V28.15c0-12.52-.39-13.51-13.51-14.71V8.87a218.64,218.64,0,0,0,29.22-6.95V68.7c6.95-7.15,17.69-14.51,28.42-14.51,16.1,0,27.43,10.14,27.43,34V123c0,13.12,1.39,14.32,13.12,15.31v5.17Z"/><path class="si-white" d="M522.91,80c-3.78-11.73-10.74-19.68-20.48-19.68-7.55,0-12.92,6-12.92,13.72,0,8.94,8,13.51,16.9,17.29,14.91,6.16,25,13.32,25,27,0,18.09-16.89,27.43-32.79,27.43-10.14,0-19.28-3.77-22.86-6.76-1.39-2.78-3.18-16.29-3.18-23.45l5.17-1c3.57,13.11,12.52,24.64,24.45,24.64a13.86,13.86,0,0,0,14.11-13.91c0-8.75-5.77-13.52-15.7-18.09-11.93-5.56-24.85-12.12-24.85-27.43,0-13.91,11.93-25.64,30.21-25.64a46.23,46.23,0,0,1,17.69,3.38c1.59,4.57,3.78,16.3,4.38,21.27Z"/><path class="si-white" d="M633,98.52c0,32-23.45,47.3-43.13,47.3-27.23,0-43.53-21.86-43.53-43.92,0-32.8,25.44-47.71,43.53-47.71C614.54,54.19,633,73.87,633,98.52Zm-68.18-3c0,25,10.94,43.72,27.24,43.72,12.32,0,22.46-9.14,22.46-36.37,0-23.26-9.35-42.14-26.64-42.14C575.58,60.75,564.84,73.07,564.84,95.54Z"/><path class="si-white" d="M700.6,143.44v-5.17c11.73-1.19,13.12-2.78,13.12-16.5V88.58c0-13.72-4.77-22.66-18.09-22.66-8,0-15.7,5-21.66,10.14v46.71c0,13.51,1.19,14.31,12.92,15.5v5.17H643.75v-5.17c13.52-1.39,14.52-2.39,14.52-15.5V81.62c0-12.72-1.2-13.32-11.93-15.3V61.74C655.88,60,665.22,57.57,674,53.6V69.5c4-3,8.34-6,13.31-9.35,5.57-3.57,10.74-6,16.5-6,15.7,0,25.64,10.93,25.64,30.21v38.37c0,13.51,1,14.31,12.52,15.5v5.17Z"/><path class="si-white" d="M753.08,143.44v-5.17c12.52-1.19,13.91-2.39,13.91-15.9V81.42c0-12.32-.6-13.12-12.52-15.1V61.55a125.35,125.35,0,0,0,28.22-7.76v68.58c0,13.51,1.39,14.71,14.11,15.9v5.17ZM763.61,26.76a10.22,10.22,0,0,1,10.14-10.33c5.56,0,9.93,4.37,9.93,10.33A10.18,10.18,0,0,1,773.55,36.9,10.42,10.42,0,0,1,763.61,26.76Z"/><path class="si-white" d="M869.74,145.82a16.26,16.26,0,0,1-9.34-3.77,20.82,20.82,0,0,1-4.77-9c-8,5.37-17.49,12.72-23.45,12.72-14.12,0-23.85-11.72-23.85-24.25,0-9.74,5.16-15.9,16.1-19.67,11.92-4,26.43-9.35,30.8-12.92V85.4c0-14.31-6.75-22.46-16.69-22.46a11.23,11.23,0,0,0-8.95,4c-2.58,2.59-4.37,7-6,13.12a5.53,5.53,0,0,1-5.76,4.57c-3.58,0-8.75-4-8.75-8.54,0-3,2.59-5.17,6.36-8,5.57-4,18.49-11.73,29.82-13.92a25.93,25.93,0,0,1,16.3,5.37c6.95,5.76,8.94,13.91,8.94,24.25v37c0,8.94,3.58,11.92,7,11.92a15.11,15.11,0,0,0,7.15-2.18l2,5.17ZM855.23,95.73c-4.17,2.19-13.71,6.36-17.88,8.35-7.76,3.58-12.13,7.36-12.13,14.51,0,10.34,7.95,15.31,14.11,15.31,5.17-.2,12.13-3.58,15.9-7.16Z"/><path class="si-white" d="M948.66,143.44v-5.17c11.72-1.19,13.12-2.78,13.12-16.5V88.58c0-13.72-4.77-22.66-18.09-22.66-8,0-15.71,5-21.67,10.14v46.71c0,13.51,1.2,14.31,12.92,15.5v5.17H891.81v-5.17c13.52-1.39,14.51-2.39,14.51-15.5V81.62c0-12.72-1.19-13.32-11.92-15.3V61.74C903.93,60,913.28,57.57,922,53.6V69.5c4-3,8.35-6,13.32-9.35,5.56-3.57,10.73-6,16.5-6,15.7,0,25.64,10.93,25.64,30.21v38.37c0,13.51,1,14.31,12.52,15.5v5.17Z"/></svg></div>`;
Logo = Logo_1 = __decorate([
    CustomElement_1.customElement("sv-logo")
], Logo);
exports.default = Logo;


/***/ }),

/***/ "./ui/PropertyBoolean.ts":
/*!*******************************!*\
  !*** ./ui/PropertyBoolean.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
__webpack_require__(/*! @ff/ui/Button */ "../../libs/ff-ui/source/Button.ts");
////////////////////////////////////////////////////////////////////////////////
let PropertyBoolean = class PropertyBoolean extends CustomElement_1.default {
    constructor() {
        super(...arguments);
        this.property = null;
        this.name = "";
        this.text = null;
    }
    firstConnected() {
        this.classList.add("sv-property-view", "sv-property-boolean");
    }
    update(changedProperties) {
        if (!this.property) {
            throw new Error("missing property attribute");
        }
        if (this.property.type !== "boolean") {
            throw new Error("not a boolean property");
        }
        if (changedProperties.has("property")) {
            const property = changedProperties.get("property");
            if (property) {
                property.off("value", this.onUpdate, this);
            }
            if (this.property) {
                this.property.on("value", this.onUpdate, this);
            }
        }
        super.update(changedProperties);
    }
    render() {
        const property = this.property;
        const name = this.name || property.name;
        const text = this.text;
        let label = property.value ?
            Array.isArray(text) ? text[1] : (text || "On") :
            Array.isArray(text) ? text[0] : (text || "Off");
        return CustomElement_1.html `<label class="ff-label ff-off">${name}</label>
            <ff-button .text=${label} ?selected=${property.value} @click=${this.onButtonClick}></ff-button>`;
    }
    onButtonClick(event) {
        this.property.setValue(!this.property.value);
    }
};
__decorate([
    CustomElement_1.property({ attribute: false })
], PropertyBoolean.prototype, "property", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], PropertyBoolean.prototype, "name", void 0);
__decorate([
    CustomElement_1.property({ attribute: false })
], PropertyBoolean.prototype, "text", void 0);
PropertyBoolean = __decorate([
    CustomElement_1.customElement("sv-property-boolean")
], PropertyBoolean);
exports.default = PropertyBoolean;


/***/ }),

/***/ "./ui/PropertyColor.ts":
/*!*****************************!*\
  !*** ./ui/PropertyColor.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Color_1 = __webpack_require__(/*! @ff/core/Color */ "../../libs/ff-core/source/Color.ts");
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
__webpack_require__(/*! @ff/ui/Button */ "../../libs/ff-ui/source/Button.ts");
__webpack_require__(/*! @ff/ui/ColorEdit */ "../../libs/ff-ui/source/ColorEdit.ts");
////////////////////////////////////////////////////////////////////////////////
let PropertyColor = class PropertyColor extends CustomElement_1.default {
    constructor() {
        super();
        this.property = null;
        this.name = "";
        this.color = new Color_1.default();
        this.pickerActive = false;
        this.onPointerDown = this.onPointerDown.bind(this);
    }
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-property-view", "sv-property-color");
    }
    connected() {
        document.addEventListener("pointerdown", this.onPointerDown, { capture: true, passive: true });
    }
    disconnected() {
        document.removeEventListener("pointerdown", this.onPointerDown);
    }
    update(changedProperties) {
        if (!this.property) {
            throw new Error("missing property attribute");
        }
        if (this.property.type !== "number" || this.property.elementCount !== 3) {
            throw new Error(`not an color property: '${this.property.path}'`);
        }
        if (changedProperties.has("property")) {
            const property = changedProperties.get("property");
            if (property) {
                property.off("value", this.onPropertyChange, this);
            }
            if (this.property) {
                this.property.on("value", this.onPropertyChange, this);
                this.color.fromArray(this.property.value);
            }
        }
        super.update(changedProperties);
    }
    render() {
        const property = this.property;
        const name = this.name || property.name;
        const color = this.color.toString();
        return CustomElement_1.html `<label class="ff-label ff-off">${name}</label>
            <ff-button style="background-color: ${color}" @click=${this.onButtonClick}></ff-button>
            ${this.pickerActive ? CustomElement_1.html `<ff-color-edit .color=${this.color} @change=${this.onColorEditChange}></ff-color-edit>` : null}`;
    }
    onButtonClick(event) {
        this.pickerActive = !this.pickerActive;
        this.requestUpdate();
    }
    onColorEditChange(event) {
        this.property.setValue(event.detail.color.toRGBArray());
    }
    onPropertyChange(value) {
        this.color.fromArray(value);
        this.requestUpdate();
    }
    // if color picker is active and user clicks outside, close picker
    onPointerDown(event) {
        if (!this.pickerActive) {
            return;
        }
        if (event.target instanceof Node && this.contains(event.target)) {
            return;
        }
        this.pickerActive = false;
        this.requestUpdate();
    }
};
__decorate([
    CustomElement_1.property({ attribute: false })
], PropertyColor.prototype, "property", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], PropertyColor.prototype, "name", void 0);
PropertyColor = __decorate([
    CustomElement_1.customElement("sv-property-color")
], PropertyColor);
exports.default = PropertyColor;


/***/ }),

/***/ "./ui/PropertyEvent.ts":
/*!*****************************!*\
  !*** ./ui/PropertyEvent.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
__webpack_require__(/*! @ff/ui/Button */ "../../libs/ff-ui/source/Button.ts");
////////////////////////////////////////////////////////////////////////////////
let PropertyEvent = class PropertyEvent extends CustomElement_1.default {
    constructor() {
        super(...arguments);
        this.property = null;
        this.name = "";
        this.text = "";
        this.icon = "";
    }
    firstConnected() {
        this.classList.add("sv-property-view", "sv-property-event");
    }
    update(changedProperties) {
        if (!this.property) {
            throw new Error("missing property attribute");
        }
        if (!this.property.schema.event) {
            throw new Error(`not an event property: '${this.property.path}'`);
        }
        if (changedProperties.has("property")) {
            const property = changedProperties.get("property");
            if (property) {
                property.off("value", this.onUpdate, this);
            }
            if (this.property) {
                this.property.on("value", this.onUpdate, this);
            }
        }
        super.update(changedProperties);
    }
    render() {
        const property = this.property;
        const name = this.name || property.name;
        const text = this.text;
        const icon = this.icon;
        return CustomElement_1.html `<label class="ff-label ff-off">${name}</label>
            <div class="sv-options">
                <ff-button .text=${text} .icon=${icon} @click=${this.onButtonClick}></ff-button>
            </div>`;
    }
    onButtonClick(event) {
        this.property.set();
    }
};
__decorate([
    CustomElement_1.property({ attribute: false })
], PropertyEvent.prototype, "property", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], PropertyEvent.prototype, "name", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], PropertyEvent.prototype, "text", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], PropertyEvent.prototype, "icon", void 0);
PropertyEvent = __decorate([
    CustomElement_1.customElement("sv-property-event")
], PropertyEvent);
exports.default = PropertyEvent;


/***/ }),

/***/ "./ui/PropertyOptions.ts":
/*!*******************************!*\
  !*** ./ui/PropertyOptions.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
__webpack_require__(/*! @ff/ui/Button */ "../../libs/ff-ui/source/Button.ts");
////////////////////////////////////////////////////////////////////////////////
let PropertyOptions = class PropertyOptions extends CustomElement_1.default {
    constructor() {
        super(...arguments);
        this.property = null;
        this.name = "";
        this.options = null;
        this.indexMap = null;
    }
    firstConnected() {
        this.classList.add("sv-property-view", "sv-property-options");
    }
    update(changedProperties) {
        if (!this.property) {
            throw new Error("missing property attribute");
        }
        if (this.property.type !== "number" || !this.property.schema.options) {
            throw new Error("not an options property");
        }
        if (changedProperties.has("property")) {
            const property = changedProperties.get("property");
            if (property) {
                property.off("value", this.onUpdate, this);
            }
            if (this.property) {
                this.property.on("value", this.onUpdate, this);
            }
        }
        super.update(changedProperties);
    }
    render() {
        const property = this.property;
        const indexMap = this.indexMap;
        const name = this.name || property.name;
        const options = this.options || property.schema.options;
        const value = property.value;
        let buttons;
        if (indexMap) {
            buttons = indexMap.map(index => CustomElement_1.html `<ff-button .text=${options[index]} .index=${index} .selectedIndex=${value} @click=${this.onButtonClick}>
                    </ff-button>`);
        }
        else {
            buttons = options.map((option, index) => CustomElement_1.html `<ff-button .text=${option} .index=${index} .selectedIndex=${value} @click=${this.onButtonClick}>
                    </ff-button>`);
        }
        return CustomElement_1.html `<label class="ff-label ff-off">${name}</label><div class="sv-options">${buttons}</div>`;
    }
    onButtonClick(event) {
        const value = event.target.index;
        this.property.setValue(value);
    }
};
__decorate([
    CustomElement_1.property({ attribute: false })
], PropertyOptions.prototype, "property", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], PropertyOptions.prototype, "name", void 0);
__decorate([
    CustomElement_1.property({ attribute: false })
], PropertyOptions.prototype, "options", void 0);
__decorate([
    CustomElement_1.property({ attribute: false })
], PropertyOptions.prototype, "indexMap", void 0);
PropertyOptions = __decorate([
    CustomElement_1.customElement("sv-property-options")
], PropertyOptions);
exports.default = PropertyOptions;


/***/ }),

/***/ "./ui/PropertySlider.ts":
/*!******************************!*\
  !*** ./ui/PropertySlider.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
__webpack_require__(/*! @ff/ui/LinearSlider */ "../../libs/ff-ui/source/LinearSlider.ts");
////////////////////////////////////////////////////////////////////////////////
let PropertySlider = class PropertySlider extends CustomElement_1.default {
    constructor() {
        super(...arguments);
        this.property = null;
        this.name = "";
        this.min = undefined;
        this.max = undefined;
    }
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-property-view", "sv-property-slider");
    }
    update(changedProperties) {
        if (!this.property) {
            throw new Error("missing property attribute");
        }
        if (this.property.type !== "number") {
            throw new Error(`not a number property: '${this.property.path}'`);
        }
        if (changedProperties.has("property")) {
            const property = changedProperties.get("property");
            if (property) {
                property.off("value", this.onUpdate, this);
            }
            if (this.property) {
                this.property.on("value", this.onUpdate, this);
            }
        }
        super.update(changedProperties);
    }
    render() {
        const property = this.property;
        const name = this.name || property.name;
        const value = property.getValidatedValue();
        const min = isFinite(this.min) ? this.min : property.schema.min;
        const max = isFinite(this.max) ? this.max : property.schema.max;
        const v = (value - min) / (max - min);
        return CustomElement_1.html `<label class="ff-label ff-off">${name}</label>
            <ff-linear-slider .value=${v} @change=${this.onSliderChange}></ff-linear-slider>`;
    }
    onSliderChange(event) {
        const property = this.property;
        const min = isFinite(this.min) ? this.min : property.schema.min;
        const max = isFinite(this.max) ? this.max : property.schema.max;
        const value = min + event.detail.value * (max - min);
        property.setValue(value);
    }
};
__decorate([
    CustomElement_1.property({ attribute: false })
], PropertySlider.prototype, "property", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], PropertySlider.prototype, "name", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], PropertySlider.prototype, "min", void 0);
__decorate([
    CustomElement_1.property({ type: Number })
], PropertySlider.prototype, "max", void 0);
PropertySlider = __decorate([
    CustomElement_1.customElement("sv-property-slider")
], PropertySlider);
exports.default = PropertySlider;


/***/ }),

/***/ "./ui/PropertyString.ts":
/*!******************************!*\
  !*** ./ui/PropertyString.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
__webpack_require__(/*! @ff/ui/Button */ "../../libs/ff-ui/source/Button.ts");
////////////////////////////////////////////////////////////////////////////////
let PropertyString = class PropertyString extends CustomElement_1.default {
    constructor() {
        super(...arguments);
        this.property = null;
        this.name = "";
    }
    firstConnected() {
        this.classList.add("sv-property-view", "sv-property-string");
    }
    update(changedProperties) {
        if (!this.property) {
            throw new Error("missing property attribute");
        }
        if (this.property.type !== "string") {
            throw new Error(`not a string property: '${this.property.path}'`);
        }
        if (changedProperties.has("property")) {
            const property = changedProperties.get("property");
            if (property) {
                property.off("value", this.onUpdate, this);
            }
            if (this.property) {
                this.property.on("value", this.onUpdate, this);
            }
        }
        super.update(changedProperties);
    }
    render() {
        const property = this.property;
        const name = this.name || property.name;
        const text = property.value;
        return CustomElement_1.html `<label class="ff-label ff-off">${name}</label>
            <div class="ff-string">${text}</div>`;
    }
};
__decorate([
    CustomElement_1.property({ attribute: false })
], PropertyString.prototype, "property", void 0);
__decorate([
    CustomElement_1.property({ type: String })
], PropertyString.prototype, "name", void 0);
PropertyString = __decorate([
    CustomElement_1.customElement("sv-property-string")
], PropertyString);
exports.default = PropertyString;


/***/ }),

/***/ "./ui/SceneView.ts":
/*!*************************!*\
  !*** ./ui/SceneView.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ManipTarget_1 = __webpack_require__(/*! @ff/browser/ManipTarget */ "../../libs/ff-browser/source/ManipTarget.ts");
const RenderQuadView_1 = __webpack_require__(/*! @ff/scene/RenderQuadView */ "../../libs/ff-scene/source/RenderQuadView.ts");
const SystemView_1 = __webpack_require__(/*! @ff/scene/ui/SystemView */ "../../libs/ff-scene/source/ui/SystemView.ts");
const QuadSplitter_1 = __webpack_require__(/*! @ff/ui/QuadSplitter */ "../../libs/ff-ui/source/QuadSplitter.ts");
////////////////////////////////////////////////////////////////////////////////
/**
 * Displays up to four viewports rendering 3D content from a node/component system.
 * The built-in quad split functionality provides four different layouts: single view, horizontal split,
 * vertical split, and quad split. The split proportions can be adjusted by moving the split handles
 * between viewports.
 */
let SceneView = class SceneView extends SystemView_1.default {
    constructor(system) {
        super(system);
        this.view = null;
        this.canvas = null;
        this.overlay = null;
        this.splitter = null;
        this.onResize = this.onResize.bind(this);
        this.manipTarget = new ManipTarget_1.default();
        this.addEventListener("pointerdown", this.manipTarget.onPointerDown);
        this.addEventListener("pointermove", this.manipTarget.onPointerMove);
        this.addEventListener("pointerup", this.manipTarget.onPointerUpOrCancel);
        this.addEventListener("pointercancel", this.manipTarget.onPointerUpOrCancel);
        this.addEventListener("wheel", this.manipTarget.onWheel);
        this.addEventListener("contextmenu", this.manipTarget.onContextMenu);
    }
    firstConnected() {
        this.classList.add("sv-scene-view");
        // disable default touch action on mobile devices
        this.style.touchAction = "none";
        this.setAttribute("touch-action", "none");
        this.canvas = this.appendElement("canvas", {
            display: "block",
            width: "100%",
            height: "100%"
        });
        this.overlay = this.appendElement("div", {
            position: "absolute",
            top: "0", bottom: "0", left: "0", right: "0",
            overflow: "hidden"
        });
        this.overlay.classList.add("sv-content-overlay");
        this.splitter = this.appendElement(QuadSplitter_1.default, {
            position: "absolute",
            top: "0", bottom: "0", left: "0", right: "0",
            overflow: "hidden"
        });
        this.splitter.onChange = (message) => {
            this.view.horizontalSplit = message.horizontalSplit;
            this.view.verticalSplit = message.verticalSplit;
        };
        this.view = new RenderQuadView_1.default(this.system, this.canvas, this.overlay);
        this.view.on("layout", event => this.splitter.layout = event.layout);
        this.view.layout = QuadSplitter_1.EQuadViewLayout.Single;
        this.splitter.layout = QuadSplitter_1.EQuadViewLayout.Single;
        this.manipTarget.next = this.view;
    }
    connected() {
        this.view.attach();
        window.addEventListener("resize", this.onResize);
        window.dispatchEvent(new CustomEvent("resize"));
    }
    disconnected() {
        this.view.detach();
        window.removeEventListener("resize", this.onResize);
    }
    onResize() {
        this.view.resize();
    }
};
SceneView = __decorate([
    SystemView_1.customElement("sv-scene-view")
], SceneView);
exports.default = SceneView;


/***/ }),

/***/ "./ui/Spinner.ts":
/*!***********************!*\
  !*** ./ui/Spinner.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Spinner_1;
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
////////////////////////////////////////////////////////////////////////////////
let Spinner = Spinner_1 = class Spinner extends CustomElement_1.default {
    constructor() {
        super(...arguments);
        this.visible = false;
    }
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-spinner");
    }
    render() {
        this.style.visibility = this.visible ? "visible" : "hidden";
        return Spinner_1.template;
    }
};
Spinner.template = CustomElement_1.html `<div class="sv-spinner-wheel"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve"><style type="text/css">.st0{fill:none;stroke:#009ADE;stroke-width:5;stroke-miterlimit:10;}.st1{fill:none;stroke:#FFCD00;stroke-width:5;stroke-miterlimit:10;}</style><circle class="st0" cx="256.6" cy="256" r="252"/><path class="st1" d="M408.6,307c-16.3-28-42.1-28.4-45.3-28.3c0,0,0-0.1,0-0.1L472,256l-108.7-22.6l0,0c1.1-1,22.3-19.7,54-20.2 c23.9-0.4,44.6-29.6,31.4-52.1c0,0-3.9,35.4-48.6,23.6c-31.4-8.3-49.9,9.7-52,12l0,0l60.9-93L316,164.5c0,0,0,0,0,0 c0.1-1.4,1.8-29.6,23.9-52.4c16.7-17.2,10.6-52.5-14.6-59.1c0,0,22.2,27.8-17.7,51c-28.1,16.3-28.4,42.1-28.3,45.3l-0.1,0 L256.6,40.5l-22.7,108.7c0,0,0,0,0,0c-0.9-1-19.7-22.2-20.2-54c-0.4-23.9-29.6-44.6-52.1-31.4c0,0,35.3,3.9,23.6,48.6 c-8.3,31.5,9.8,49.9,12,52.1l0,0l-93-60.9l0,0l0,0l49.6,75.7l11.3,17.2c0,0,0,0,0,0c-0.9,0-29.4-1.6-52.5-23.9 c-17.2-16.7-52.5-10.6-59.1,14.6c0,0,27.8-22.2,51,17.7c16.4,28.1,42.3,28.4,45.3,28.3c0,0,0,0,0,0L41.1,256l108.8,22.7v0 c-0.7,0.7-22,19.7-54,20.2c-23.9,0.4-44.6,29.6-31.4,52.1c0,0,3.9-35.4,48.6-23.6c31.5,8.3,50-9.9,52.1-12c0,0,0,0.1,0.1,0.1 l-60.9,92.9l92.9-60.9c0,1-1.6,29.5-23.9,52.5c-16.7,17.2-10.6,52.5,14.6,59.1c0,0-22.2-27.8,17.7-51c28.1-16.4,28.4-42.2,28.3-45.3 c0,0,0.1,0,0.1,0l22.7,108.7l22.7-108.7l0,0c0.8,0.9,19.7,22.1,20.2,54c0.4,23.9,29.6,44.6,52.1,31.4c0,0-35.3-3.9-23.6-48.5 c8.3-31.5-9.8-49.9-12-52.1c0,0,0.1,0,0.1-0.1l92.9,60.9l-32.1-49.1L348,315.4l0,0c1.3,0.1,29.6,1.7,52.4,23.9 c17.2,16.7,52.5,10.6,59.1-14.6C459.6,324.7,431.8,346.9,408.6,307z"/></svg></div>`;
__decorate([
    CustomElement_1.property({ type: Boolean })
], Spinner.prototype, "visible", void 0);
Spinner = Spinner_1 = __decorate([
    CustomElement_1.customElement("sv-spinner")
], Spinner);
exports.default = Spinner;


/***/ }),

/***/ "./ui/explorer/ChromeView.ts":
/*!***********************************!*\
  !*** ./ui/explorer/ChromeView.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Subscriber_1 = __webpack_require__(/*! @ff/core/Subscriber */ "../../libs/ff-core/source/Subscriber.ts");
__webpack_require__(/*! @ff/ui/ButtonGroup */ "../../libs/ff-ui/source/ButtonGroup.ts");
const CVToolProvider_1 = __webpack_require__(/*! ../../components/CVToolProvider */ "./components/CVToolProvider.ts");
__webpack_require__(/*! ../Logo */ "./ui/Logo.ts");
__webpack_require__(/*! ./MainMenu */ "./ui/explorer/MainMenu.ts");
__webpack_require__(/*! ./ToolBar */ "./ui/explorer/ToolBar.ts");
__webpack_require__(/*! ./TourNavigator */ "./ui/explorer/TourNavigator.ts");
__webpack_require__(/*! ./TourMenu */ "./ui/explorer/TourMenu.ts");
__webpack_require__(/*! ./TagCloud */ "./ui/explorer/TagCloud.ts");
const DocumentView_1 = __webpack_require__(/*! ./DocumentView */ "./ui/explorer/DocumentView.ts");
////////////////////////////////////////////////////////////////////////////////
let ChromeView = class ChromeView extends DocumentView_1.default {
    constructor() {
        super(...arguments);
        this.documentProps = new Subscriber_1.default("value", this.onUpdate, this);
    }
    get toolProvider() {
        return this.system.getMainComponent(CVToolProvider_1.default);
    }
    firstConnected() {
        this.style.pointerEvents = "none";
        this.setAttribute("pointer-events", "none");
        this.classList.add("sv-chrome-view");
    }
    connected() {
        super.connected();
        this.toolProvider.ins.visible.on("value", this.onUpdate, this);
    }
    disconnected() {
        this.toolProvider.ins.visible.off("value", this.onUpdate, this);
        super.disconnected();
    }
    render() {
        const document = this.activeDocument;
        if (!document) {
            return DocumentView_1.html ``;
        }
        const setup = document.setup;
        const interfaceVisible = setup.interface.ins.visible.value;
        const logoVisible = setup.interface.ins.logo.value;
        const menuVisible = setup.interface.ins.menu.value;
        const readerVisible = setup.reader.ins.enabled.value;
        const tours = setup.tours.tours;
        const toursEnabled = setup.tours.ins.enabled.value;
        const tourActive = setup.tours.outs.tourIndex.value >= 0;
        const isEditing = !!this.system.getComponent("CVStoryApplication", true);
        const toolBarAllowed = isEditing || !toursEnabled;
        // tag cloud is visible if annotations are enabled and there is at least one tag in the cloud
        const tagCloudVisible = setup.viewer.ins.annotationsVisible.value && setup.viewer.outs.tagCloud.value;
        const toolsVisible = !readerVisible && this.toolProvider.ins.visible.value;
        if (!interfaceVisible) {
            return DocumentView_1.html ``;
        }
        let title;
        if (toursEnabled) {
            if (!tourActive) {
                title = "Interactive Tours";
            }
            else {
                title = "Tour: " + setup.tours.outs.tourTitle.value;
            }
        }
        else {
            title = document.outs.title.value || document.name || "Untitled Document";
        }
        return DocumentView_1.html `
            <div class="sv-chrome-header">
                ${menuVisible ? DocumentView_1.html `<sv-main-menu .system=${this.system}></sv-main-menu>` : null}
                <div class="sv-top-bar">
                    <div class="ff-ellipsis sv-main-title">${title}<span class="ff-ellipsis"> </span></div>
                    ${logoVisible ? DocumentView_1.html `<sv-logo></sv-logo>` : null}
                </div>
            </div>
            <div class="ff-flex-spacer"></div>
            ${toursEnabled && tourActive ? DocumentView_1.html `<sv-tour-navigator .system=${this.system}></sv-tour-navigator>` : null}
            ${toursEnabled && !tourActive ? DocumentView_1.html `<sv-tour-menu .tours=${tours} @select=${this.onSelectTour}></sv-tour-menu>` : null}
            ${tagCloudVisible && toolBarAllowed ? DocumentView_1.html `<sv-tag-cloud .system=${this.system}></sv-tag-cloud>` : null}
            ${toolsVisible && toolBarAllowed ? DocumentView_1.html `<div class="sv-tool-bar-container"><sv-tool-bar .system=${this.system} @close=${this.closeTools}></sv-tool-bar></div>` : null}`;
    }
    onSelectTour(event) {
        const tours = this.activeDocument.setup.tours;
        tours.ins.tourIndex.setValue(event.detail.index);
    }
    closeTools() {
        this.toolProvider.ins.visible.setValue(false);
    }
    onActiveDocument(previous, next) {
        if (previous) {
            this.documentProps.off();
        }
        if (next) {
            const setup = next.setup;
            this.documentProps.on(next.outs.title, next.outs.assetPath, setup.interface.ins.visible, setup.interface.ins.logo, setup.interface.ins.menu, setup.viewer.ins.annotationsVisible, setup.reader.ins.enabled, setup.tours.ins.enabled, setup.tours.outs.tourIndex);
        }
        this.requestUpdate();
    }
};
ChromeView = __decorate([
    DocumentView_1.customElement("sv-chrome-view")
], ChromeView);
exports.default = ChromeView;


/***/ }),

/***/ "./ui/explorer/ContentView.ts":
/*!************************************!*\
  !*** ./ui/explorer/ContentView.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Subscriber_1 = __webpack_require__(/*! @ff/core/Subscriber */ "../../libs/ff-core/source/Subscriber.ts");
const setup_1 = __webpack_require__(/*! client/schema/setup */ "./schema/setup.ts");
const CVAnalytics_1 = __webpack_require__(/*! ../../components/CVAnalytics */ "./components/CVAnalytics.ts");
const CVAssetManager_1 = __webpack_require__(/*! ../../components/CVAssetManager */ "./components/CVAssetManager.ts");
const SceneView_1 = __webpack_require__(/*! ../SceneView */ "./ui/SceneView.ts");
__webpack_require__(/*! ../Spinner */ "./ui/Spinner.ts");
__webpack_require__(/*! ./ReaderView */ "./ui/explorer/ReaderView.ts");
const DocumentView_1 = __webpack_require__(/*! ./DocumentView */ "./ui/explorer/DocumentView.ts");
////////////////////////////////////////////////////////////////////////////////
let ContentView = class ContentView extends DocumentView_1.default {
    constructor() {
        super(...arguments);
        this.sceneView = null;
        this.documentProps = new Subscriber_1.default("value", this.onUpdate, this);
    }
    get analytics() {
        return this.system.getMainComponent(CVAnalytics_1.default);
    }
    get assetManager() {
        return this.system.getMainComponent(CVAssetManager_1.default);
    }
    get reader() {
        return this.activeDocument ? this.activeDocument.setup.reader : null;
    }
    get tours() {
        return this.activeDocument ? this.activeDocument.setup.tours : null;
    }
    firstConnected() {
        this.classList.add("sv-content-view");
        this.sceneView = new SceneView_1.default(this.system);
    }
    connected() {
        super.connected();
        this.assetManager.outs.busy.on("value", this.performUpdate, this);
    }
    disconnected() {
        this.assetManager.outs.busy.off("value", this.performUpdate, this);
        super.disconnected();
    }
    render() {
        const system = this.system;
        const isLoading = this.assetManager.outs.busy.value;
        const isInitialLoad = this.assetManager.initialLoad;
        let readerVisible = false;
        let readerPosition = setup_1.EReaderPosition.Overlay;
        let tourMenuVisible = false;
        const reader = this.reader;
        const tours = this.tours;
        if (tours) {
            tourMenuVisible = tours.ins.enabled.value && tours.outs.tourIndex.value === -1;
        }
        if (reader) {
            readerVisible = !tourMenuVisible && reader.ins.enabled.value;
            readerPosition = reader.ins.position.value;
            // do not use right reader position on mobile
            if (this.mobileCheck() === true) {
                readerPosition = setup_1.EReaderPosition.Overlay;
            }
            /*if(document.documentElement.clientWidth < 1200) {
                readerPosition = EReaderPosition.Overlay;
            }
            else {
                readerPosition = EReaderPosition.Right;
            }*/
        }
        const sceneView = this.sceneView;
        const blurContent = (readerVisible && readerPosition === setup_1.EReaderPosition.Overlay) || tourMenuVisible;
        if (!blurContent) {
            sceneView.classList.remove("sv-blur");
        }
        else {
            setTimeout(() => sceneView.classList.add("sv-blur"), 1);
        }
        if (!isLoading && isInitialLoad) {
            // send load timer event
            this.analytics.sendProperty("Loading.Time", this.analytics.getTimerTime() / 1000);
            this.analytics.resetTimer();
            this.assetManager.initialLoad = false;
        }
        if (readerVisible) {
            if (readerPosition === setup_1.EReaderPosition.Right) {
                return DocumentView_1.html `<div class="ff-fullsize sv-content-split">
                    <div class="ff-splitter-section" style="flex-basis: 60%">
                        ${sceneView}
                    </div>
                    <ff-splitter direction="horizontal"></ff-splitter>
                        <div class="ff-splitter-section" style="flex-basis: 40%; max-width: 500px;">
                            <div class="sv-reader-container">
                                <sv-reader-view .system=${system} @close=${this.onReaderClose} ></sv-reader-view>
                            </div>
                        </div>
                    </div>
                    <sv-spinner ?visible=${isLoading}></sv-spinner>`;
            }
            if (readerPosition === setup_1.EReaderPosition.Overlay) {
                return DocumentView_1.html `<div class="ff-fullsize sv-content-stack">${sceneView}
                    <div class="sv-reader-container">
                        <sv-reader-view .system=${system} @close=${this.onReaderClose}></sv-reader-view>
                    </div>
                    <sv-spinner ?visible=${isLoading}></sv-spinner></div>`;
            }
        }
        return DocumentView_1.html `<div class="ff-fullsize sv-content-only">${sceneView}</div>
            <sv-spinner ?visible=${isLoading}></sv-spinner>`;
    }
    onReaderClose() {
        this.reader.ins.enabled.setValue(false);
    }
    onActiveDocument(previous, next) {
        if (previous) {
            this.documentProps.off();
        }
        if (next) {
            this.documentProps.on(next.setup.reader.ins.position, next.setup.reader.ins.enabled, next.setup.tours.outs.tourIndex);
        }
        this.requestUpdate();
    }
    // from detectmobilebrowsers.com
    mobileCheck() {
        var check = false;
        (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
            check = true; })(navigator.userAgent || navigator.vendor);
        return check;
    }
    ;
};
ContentView = __decorate([
    DocumentView_1.customElement("sv-content-view")
], ContentView);
exports.default = ContentView;


/***/ }),

/***/ "./ui/explorer/DocumentView.ts":
/*!*************************************!*\
  !*** ./ui/explorer/DocumentView.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
exports.customElement = CustomElement_1.customElement;
exports.property = CustomElement_1.property;
exports.html = CustomElement_1.html;
exports.TemplateResult = CustomElement_1.TemplateResult;
const SystemView_1 = __webpack_require__(/*! @ff/scene/ui/SystemView */ "../../libs/ff-scene/source/ui/SystemView.ts");
const CVDocumentProvider_1 = __webpack_require__(/*! ../../components/CVDocumentProvider */ "./components/CVDocumentProvider.ts");
class DocumentView extends SystemView_1.default {
    constructor() {
        super(...arguments);
        this.activeDocument = null;
    }
    get documentProvider() {
        return this.system.getMainComponent(CVDocumentProvider_1.default);
    }
    connected() {
        const provider = this.documentProvider;
        provider.on("active-component", this.onActiveDocumentEvent, this);
        const document = provider.activeComponent;
        if (document) {
            this.activeDocument = document;
            this.onActiveDocument(null, document);
        }
    }
    disconnected() {
        const provider = this.documentProvider;
        provider.off("active-component", this.onActiveDocumentEvent, this);
        const document = this.activeDocument;
        if (document) {
            this.activeDocument = null;
            this.onActiveDocument(document, null);
        }
    }
    onActiveDocument(previous, next) {
    }
    onActiveDocumentEvent(event) {
        this.activeDocument = event.next;
        this.onActiveDocument(event.previous, event.next);
    }
}
exports.default = DocumentView;


/***/ }),

/***/ "./ui/explorer/MainMenu.ts":
/*!*********************************!*\
  !*** ./ui/explorer/MainMenu.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Subscriber_1 = __webpack_require__(/*! @ff/core/Subscriber */ "../../libs/ff-core/source/Subscriber.ts");
const CFullscreen_1 = __webpack_require__(/*! @ff/scene/components/CFullscreen */ "../../libs/ff-scene/source/components/CFullscreen.ts");
const CVAnalytics_1 = __webpack_require__(/*! ../../components/CVAnalytics */ "./components/CVAnalytics.ts");
const CVToolProvider_1 = __webpack_require__(/*! ../../components/CVToolProvider */ "./components/CVToolProvider.ts");
const DocumentView_1 = __webpack_require__(/*! ./DocumentView */ "./ui/explorer/DocumentView.ts");
const ShareMenu_1 = __webpack_require__(/*! ./ShareMenu */ "./ui/explorer/ShareMenu.ts");
////////////////////////////////////////////////////////////////////////////////
let MainMenu = class MainMenu extends DocumentView_1.default {
    constructor() {
        super(...arguments);
        this.documentProps = new Subscriber_1.default("value", this.onUpdate, this);
        this.shareButtonSelected = false;
    }
    get fullscreen() {
        return this.system.getMainComponent(CFullscreen_1.default);
    }
    get toolProvider() {
        return this.system.getMainComponent(CVToolProvider_1.default);
    }
    get analytics() {
        return this.system.getMainComponent(CVAnalytics_1.default);
    }
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-main-menu");
    }
    connected() {
        super.connected();
        this.fullscreen.outs.fullscreenActive.on("value", this.onUpdate, this);
        this.toolProvider.ins.visible.on("value", this.onUpdate, this);
    }
    disconnected() {
        this.toolProvider.ins.visible.off("value", this.onUpdate, this);
        this.fullscreen.outs.fullscreenActive.off("value", this.onUpdate, this);
        super.disconnected();
    }
    render() {
        const document = this.activeDocument;
        if (!document) {
            return DocumentView_1.html ``;
        }
        const isEditing = !!this.system.getComponent("CVStoryApplication", true);
        const setup = document.setup;
        const tourButtonVisible = setup.tours.outs.count.value > 0;
        const toursActive = setup.tours.ins.enabled.value;
        const modeButtonsDisabled = toursActive && !isEditing;
        const readerButtonVisible = true; //setup.reader.articles.length > 0 && !isEditing;
        const readerActive = setup.reader.ins.enabled.value;
        const annotationsButtonVisible = true;
        const annotationsActive = setup.viewer.ins.annotationsVisible.value;
        const fullscreen = this.fullscreen;
        const fullscreenButtonVisible = fullscreen.outs.fullscreenAvailable.value;
        const fullscreenActive = fullscreen.outs.fullscreenActive.value;
        const toolButtonVisible = setup.interface.ins.tools.value;
        const toolsActive = this.toolProvider.ins.visible.value;
        return DocumentView_1.html `${tourButtonVisible ? DocumentView_1.html `<ff-button icon="globe" title="Interactive Tours"
            ?selected=${toursActive} @click=${this.onToggleTours}></ff-button>` : null}
        ${readerButtonVisible ? DocumentView_1.html `<ff-button icon="article" title="Read more..."
            ?selected=${readerActive} ?disabled=${modeButtonsDisabled} @click=${this.onToggleReader}></ff-button>` : null}
        ${annotationsButtonVisible ? DocumentView_1.html `<ff-button icon="comment" title="Show/Hide Annotations"
            ?selected=${annotationsActive} ?disabled=${modeButtonsDisabled} @click=${this.onToggleAnnotations}></ff-button>` : null}
        <ff-button icon="share" title="Share Experience"
            ?selected=${this.shareButtonSelected} @click=${this.onToggleShare}></ff-button>    
        ${fullscreenButtonVisible ? DocumentView_1.html `<ff-button icon="expand" title="Fullscreen"
            ?selected=${fullscreenActive} @click=${this.onToggleFullscreen}></ff-button>` : null}
        ${toolButtonVisible ? DocumentView_1.html `<ff-button icon="tools" title="Tools and Settings"
            ?selected=${toolsActive} ?disabled=${modeButtonsDisabled} @click=${this.onToggleTools}></ff-button>` : null}`;
    }
    onToggleReader() {
        const readerIns = this.activeDocument.setup.reader.ins;
        readerIns.enabled.setValue(!readerIns.enabled.value);
        this.analytics.sendProperty("Reader.Enabled", readerIns.enabled.value);
    }
    onToggleTours() {
        const tourIns = this.activeDocument.setup.tours.ins;
        const readerIns = this.activeDocument.setup.reader.ins;
        if (tourIns.enabled.value) {
            tourIns.enabled.setValue(false);
        }
        else {
            if (readerIns.enabled.value) {
                readerIns.enabled.setValue(false); // disable reader
            }
            tourIns.enabled.setValue(true); // enable tours
            tourIns.tourIndex.setValue(-1); // show tour menu
        }
        this.analytics.sendProperty("Tours.Enabled", tourIns.enabled.value);
    }
    onToggleAnnotations() {
        const toolIns = this.toolProvider.ins;
        const viewerIns = this.activeDocument.setup.viewer.ins;
        if (toolIns.visible.value) {
            toolIns.visible.setValue(false);
        }
        viewerIns.annotationsVisible.setValue(!viewerIns.annotationsVisible.value);
        this.analytics.sendProperty("Annotations.Visible", viewerIns.annotationsVisible.value);
    }
    onToggleShare() {
        if (!this.shareButtonSelected) {
            this.shareButtonSelected = true;
            this.requestUpdate();
            ShareMenu_1.default.show(this).then(() => {
                this.shareButtonSelected = false;
                this.requestUpdate();
            });
            this.analytics.sendProperty("Menu.Share");
        }
    }
    onToggleFullscreen() {
        this.fullscreen.toggle();
        this.analytics.sendProperty("Menu.Fullscreen");
    }
    onToggleTools() {
        const toolIns = this.toolProvider.ins;
        const viewerIns = this.activeDocument.setup.viewer.ins;
        if (viewerIns.annotationsVisible.value) {
            viewerIns.annotationsVisible.setValue(false);
        }
        toolIns.visible.setValue(!toolIns.visible.value);
        this.analytics.sendProperty("Tools.Visible", toolIns.visible.value);
    }
    onActiveDocument(previous, next) {
        if (previous) {
            this.documentProps.off();
        }
        if (next) {
            const setup = next.setup;
            this.documentProps.on(setup.interface.ins.tools, setup.reader.ins.enabled, setup.tours.ins.enabled, setup.tours.outs.count, setup.viewer.ins.annotationsVisible, this.toolProvider.ins.visible);
        }
        this.requestUpdate();
    }
};
MainMenu = __decorate([
    DocumentView_1.customElement("sv-main-menu")
], MainMenu);
exports.default = MainMenu;


/***/ }),

/***/ "./ui/explorer/MainView.ts":
/*!*********************************!*\
  !*** ./ui/explorer/MainView.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CFullscreen_1 = __webpack_require__(/*! @ff/scene/components/CFullscreen */ "../../libs/ff-scene/source/components/CFullscreen.ts");
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
const Icon_1 = __webpack_require__(/*! @ff/ui/Icon */ "../../libs/ff-ui/source/Icon.ts");
const Notification_1 = __webpack_require__(/*! @ff/ui/Notification */ "../../libs/ff-ui/source/Notification.ts");
const ExplorerApplication_1 = __webpack_require__(/*! ../../applications/ExplorerApplication */ "./applications/ExplorerApplication.ts");
const ContentView_1 = __webpack_require__(/*! ./ContentView */ "./ui/explorer/ContentView.ts");
const ChromeView_1 = __webpack_require__(/*! ./ChromeView */ "./ui/explorer/ChromeView.ts");
__webpack_require__(/*! ./styles.scss */ "./ui/explorer/styles.scss");
////////////////////////////////////////////////////////////////////////////////
// EXPLORER ICONS
Icon_1.default.add("globe", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512"><path d="M336.5 160C322 70.7 287.8 8 248 8s-74 62.7-88.5 152h177zM152 256c0 22.2 1.2 43.5 3.3 64h185.3c2.1-20.5 3.3-41.8 3.3-64s-1.2-43.5-3.3-64H155.3c-2.1 20.5-3.3 41.8-3.3 64zm324.7-96c-28.6-67.9-86.5-120.4-158-141.6 24.4 33.8 41.2 84.7 50 141.6h108zM177.2 18.4C105.8 39.6 47.8 92.1 19.3 160h108c8.7-56.9 25.5-107.8 49.9-141.6zM487.4 192H372.7c2.1 21 3.3 42.5 3.3 64s-1.2 43-3.3 64h114.6c5.5-20.5 8.6-41.8 8.6-64s-3.1-43.5-8.5-64zM120 256c0-21.5 1.2-43 3.3-64H8.6C3.2 212.5 0 233.8 0 256s3.2 43.5 8.6 64h114.6c-2-21-3.2-42.5-3.2-64zm39.5 96c14.5 89.3 48.7 152 88.5 152s74-62.7 88.5-152h-177zm159.3 141.6c71.4-21.2 129.4-73.7 158-141.6h-108c-8.8 56.9-25.6 107.8-50 141.6zM19.3 352c28.6 67.9 86.5 120.4 158 141.6-24.4-33.8-41.2-84.7-50-141.6h-108z"/></svg>`);
Icon_1.default.add("cog", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M444.788 291.1l42.616 24.599c4.867 2.809 7.126 8.618 5.459 13.985-11.07 35.642-29.97 67.842-54.689 94.586a12.016 12.016 0 0 1-14.832 2.254l-42.584-24.595a191.577 191.577 0 0 1-60.759 35.13v49.182a12.01 12.01 0 0 1-9.377 11.718c-34.956 7.85-72.499 8.256-109.219.007-5.49-1.233-9.403-6.096-9.403-11.723v-49.184a191.555 191.555 0 0 1-60.759-35.13l-42.584 24.595a12.016 12.016 0 0 1-14.832-2.254c-24.718-26.744-43.619-58.944-54.689-94.586-1.667-5.366.592-11.175 5.459-13.985L67.212 291.1a193.48 193.48 0 0 1 0-70.199l-42.616-24.599c-4.867-2.809-7.126-8.618-5.459-13.985 11.07-35.642 29.97-67.842 54.689-94.586a12.016 12.016 0 0 1 14.832-2.254l42.584 24.595a191.577 191.577 0 0 1 60.759-35.13V25.759a12.01 12.01 0 0 1 9.377-11.718c34.956-7.85 72.499-8.256 109.219-.007 5.49 1.233 9.403 6.096 9.403 11.723v49.184a191.555 191.555 0 0 1 60.759 35.13l42.584-24.595a12.016 12.016 0 0 1 14.832 2.254c24.718 26.744 43.619 58.944 54.689 94.586 1.667 5.366-.592 11.175-5.459 13.985L444.788 220.9a193.485 193.485 0 0 1 0 70.2zM336 256c0-44.112-35.888-80-80-80s-80 35.888-80 80 35.888 80 80 80 80-35.888 80-80z"/></svg>`);
Icon_1.default.add("video", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M543.9 96c-6.2 0-12.5 1.8-18.2 5.7L416 170.1v-58.3c0-26.4-23.2-47.8-51.8-47.8H51.8C23.2 64 0 85.4 0 111.8v288.4C0 426.6 23.2 448 51.8 448h312.4c28.6 0 51.8-21.4 51.8-47.8v-58.3l109.7 68.3c5.7 4 12.1 5.7 18.2 5.7 16.6 0 32.1-13 32.1-31.5V127.5C576 109 560.5 96 543.9 96zM368 200v198.9c-.6.4-1.8 1.1-3.8 1.1H51.8c-2 0-3.2-.6-3.8-1.1V113.1c.6-.4 1.8-1.1 3.8-1.1h312.4c2 0 3.2.6 3.8 1.1V200zm160 155.2l-112-69.8v-58.7l112-69.8v198.3z"/></svg>`);
Icon_1.default.add("eye", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M569.354 231.631C512.969 135.949 407.81 72 288 72 168.14 72 63.004 135.994 6.646 231.631a47.999 47.999 0 0 0 0 48.739C63.031 376.051 168.19 440 288 440c119.86 0 224.996-63.994 281.354-159.631a47.997 47.997 0 0 0 0-48.738zM288 392c-75.162 0-136-60.827-136-136 0-75.162 60.826-136 136-136 75.162 0 136 60.826 136 136 0 75.162-60.826 136-136 136zm104-136c0 57.438-46.562 104-104 104s-104-46.562-104-104c0-17.708 4.431-34.379 12.236-48.973l-.001.032c0 23.651 19.173 42.823 42.824 42.823s42.824-19.173 42.824-42.823c0-23.651-19.173-42.824-42.824-42.824l-.032.001C253.621 156.431 270.292 152 288 152c57.438 0 104 46.562 104 104z"/></svg>`);
Icon_1.default.add("palette", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M128 224c-17.7 0-32 14.3-32 32s14.3 32 32 32 32-14.3 32-32-14.4-32-32-32zM418.6 58.1C359.2 9.3 281.3-10 204.6 5 104.9 24.4 24.7 104.2 5.1 203.7c-16.7 84.2 8.1 168.3 67.8 230.6 47.3 49.4 109.7 77.8 167.9 77.8 8.8 0 17.5-.6 26.1-2 24.2-3.7 44.6-18.7 56.1-41.1 12.3-24 12.3-52.7.2-76.6-6.1-12-5.5-26.2 1.8-38 7-11.8 18.7-18.4 32-18.4h72.2c46.4 0 82.8-35.7 82.8-81.3-.2-76.4-34.3-148.1-93.4-196.6zM429.2 288H357c-29.9 0-57.2 15.4-73 41.3-16 26.1-17.3 57.8-3.6 84.9 5.1 10.1 5.1 22.7-.2 32.9-2.6 5-8.7 13.7-20.6 15.6-49.3 7.7-108.9-16.6-152-61.6-48.8-50.9-69-119.4-55.4-188 15.9-80.6 80.8-145.3 161.6-161 62.6-12.3 126.1 3.5 174.3 43.1 48.1 39.5 75.7 97.6 75.9 159.6 0 18.6-15.3 33.2-34.8 33.2zM160 128c-17.7 0-32 14.3-32 32s14.3 32 32 32 32-14.3 32-32-14.4-32-32-32zm96-32.1c-17.7 0-32 14.3-32 32s14.3 32 32 32 32-14.3 32-32c0-17.6-14.3-32-32-32zm96 32.1c-17.7 0-32 14.3-32 32s14.3 32 32 32 32-14.3 32-32-14.3-32-32-32z"/></svg>`);
Icon_1.default.add("comment", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M256 32C114.6 32 0 125.1 0 240c0 49.6 21.4 95 57 130.7C44.5 421.1 2.7 466 2.2 466.5c-2.2 2.3-2.8 5.7-1.5 8.7S4.8 480 8 480c66.3 0 116-31.8 140.6-51.4 32.7 12.3 69 19.4 107.4 19.4 141.4 0 256-93.1 256-208S397.4 32 256 32z"/></svg>`);
Icon_1.default.add("information", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256"><path d="M84.06,204.23h24.07V138.77H93.06A9.06,9.06,0,0,1,84,129.71V108.06A9.06,9.06,0,0,1,93.06,99h56.75a9.07,9.07,0,0,1,9.07,9.06v96.17h24.06a9.06,9.06,0,0,1,9.06,9.06v21.65a9.06,9.06,0,0,1-9.06,9.06H84.06A9.06,9.06,0,0,1,75,234.94V213.29A9.06,9.06,0,0,1,84.06,204.23ZM133.5,12a32.63,32.63,0,1,0,32.63,32.63A32.62,32.62,0,0,0,133.5,12Z"/></svg>`);
Icon_1.default.add("article", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm64 236c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12v8zm0-64c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12v8zm0-72v8c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12zm96-114.1v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"/></svg>`);
Icon_1.default.add("document", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M288 248v28c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-28c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12zm-12 72H108c-6.6 0-12 5.4-12 12v28c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-28c0-6.6-5.4-12-12-12zm108-188.1V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V48C0 21.5 21.5 0 48 0h204.1C264.8 0 277 5.1 286 14.1L369.9 98c9 8.9 14.1 21.2 14.1 33.9zm-128-80V128h76.1L256 51.9zM336 464V176H232c-13.3 0-24-10.7-24-24V48H48v416h288z"/></svg>`);
Icon_1.default.add("share", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M352 320c-22.608 0-43.387 7.819-59.79 20.895l-102.486-64.054a96.551 96.551 0 0 0 0-41.683l102.486-64.054C308.613 184.181 329.392 192 352 192c53.019 0 96-42.981 96-96S405.019 0 352 0s-96 42.981-96 96c0 7.158.79 14.13 2.276 20.841L155.79 180.895C139.387 167.819 118.608 160 96 160c-53.019 0-96 42.981-96 96s42.981 96 96 96c22.608 0 43.387-7.819 59.79-20.895l102.486 64.054A96.301 96.301 0 0 0 256 416c0 53.019 42.981 96 96 96s96-42.981 96-96-42.981-96-96-96z"/></svg>`);
Icon_1.default.add("expand", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256"><path d="M241,29V141.53a14,14,0,0,1-14,14h-18.7a14,14,0,0,1-14-14V61.74H114.45a14,14,0,0,1-14-14L100.3,29a14,14,0,0,1,14-14H226.89A14,14,0,0,1,241,29Z"/><path class="cls-1" d="M15,226.67V114.11a14,14,0,0,1,14-14h18.7a14,14,0,0,1,14,14V193.9h79.79a14,14,0,0,1,14,14l.12,18.74a14,14,0,0,1-14,14H29.07A14,14,0,0,1,15,226.67Z"/></svg>`);
Icon_1.default.add("zoom", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z"/></svg>`);
Icon_1.default.add("tools", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M501.1 395.7L384 278.6c-23.1-23.1-57.6-27.6-85.4-13.9L192 158.1V96L64 0 0 64l96 128h62.1l106.6 106.6c-13.6 27.8-9.2 62.3 13.9 85.4l117.1 117.1c14.6 14.6 38.2 14.6 52.7 0l52.7-52.7c14.5-14.6 14.5-38.2 0-52.7zM331.7 225c28.3 0 54.9 11 74.9 31l19.4 19.4c15.8-6.9 30.8-16.5 43.8-29.5 37.1-37.1 49.7-89.3 37.9-136.7-2.2-9-13.5-12.1-20.1-5.5l-74.4 74.4-67.9-11.3L334 98.9l74.4-74.4c6.6-6.6 3.4-17.9-5.7-20.2-47.4-11.7-99.6.9-136.6 37.9-28.5 28.5-41.9 66.1-41.2 103.6l82.1 82.1c8.1-1.9 16.5-2.9 24.7-2.9zm-103.9 82l-56.7-56.7L18.7 402.8c-25 25-25 65.5 0 90.5s65.5 25 90.5 0l123.6-123.6c-7.6-19.9-9.9-41.6-5-62.7zM64 472c-13.2 0-24-10.8-24-24 0-13.3 10.7-24 24-24s24 10.7 24 24c0 13.2-10.7 24-24 24z"/></svg>`);
Icon_1.default.add("environment", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256"><path d="M219.81,14.75H36.19A21.19,21.19,0,0,0,15,35.94V220.06a21.19,21.19,0,0,0,21.19,21.19H219.81A21.19,21.19,0,0,0,241,220.06V35.94A21.19,21.19,0,0,0,219.81,14.75Zm-2.65,205.31H38.84a2.64,2.64,0,0,1-2.65-2.65V38.59a2.64,2.64,0,0,1,2.65-2.65H217.16a2.64,2.64,0,0,1,2.65,2.65V217.41A2.64,2.64,0,0,1,217.16,220.06ZM72.16,71.59A18.32,18.32,0,1,0,90.47,89.91,18.32,18.32,0,0,0,72.16,71.59ZM57.51,198.15H204V141.53l-40.06-40.06a5.49,5.49,0,0,0-7.77,0l-54.72,54.71L83.36,138.09a5.47,5.47,0,0,0-7.76,0L57.51,156.18Z"/></svg>`);
Icon_1.default.add("bulb", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><path d="M44.73 323.21c-7.65 4.42-10.28 14.2-5.86 21.86l8 13.86c4.42 7.65 14.21 10.28 21.86 5.86l93.26-53.84a207.865 207.865 0 0 1-26.83-39.93l-90.43 52.19zM112.46 168H16c-8.84 0-16 7.16-16 16v16c0 8.84 7.16 16 16 16h100.21a210.423 210.423 0 0 1-3.75-48zm127.6 291.17c0 3.15.93 6.22 2.68 8.84l24.51 36.84c2.97 4.46 7.97 7.14 13.32 7.14h78.85c5.36 0 10.36-2.68 13.32-7.14l24.51-36.84c1.74-2.62 2.67-5.7 2.68-8.84l.05-43.18H240.02l.04 43.18zM44.73 60.78l78.98 45.6c5.37-15.29 12.97-29.48 21.64-42.93L68.73 19.21c-7.65-4.42-17.44-1.8-21.86 5.86l-8 13.86c-4.42 7.65-1.79 17.44 5.86 21.85zm550.54 0c7.65-4.42 10.28-14.2 5.86-21.86l-8-13.86c-4.42-7.65-14.21-10.28-21.86-5.86l-76.61 44.23c8.68 13.41 15.76 27.9 21.2 43.19l79.41-45.84zm0 262.43l-90.97-52.52c-7.33 14.23-15.8 27.88-26.36 40.21l93.33 53.88c7.65 4.42 17.44 1.8 21.86-5.86l8-13.86c4.42-7.64 1.79-17.43-5.86-21.85zM624 168h-96.41c.1 2.68.41 5.3.41 8 0 13.54-1.55 26.89-4.12 40H624c8.84 0 16-7.16 16-16v-16c0-8.84-7.16-16-16-16zM320 80c-52.94 0-96 43.06-96 96 0 8.84 7.16 16 16 16s16-7.16 16-16c0-35.3 28.72-64 64-64 8.84 0 16-7.16 16-16s-7.16-16-16-16zm0-80C217.72 0 144 82.97 144 176c0 44.37 16.45 84.85 43.56 115.78 16.64 18.99 42.74 58.8 52.42 92.16v.06h48v-.12c-.01-4.77-.72-9.51-2.15-14.07-5.59-17.81-22.82-64.77-62.17-109.67-20.53-23.43-31.52-53.14-31.61-84.14-.2-73.64 59.67-128 127.95-128 70.58 0 128 57.42 128 128 0 30.97-11.24 60.85-31.65 84.14-39.11 44.61-56.42 91.47-62.1 109.46a47.507 47.507 0 0 0-2.22 14.3v.1h48v-.05c9.68-33.37 35.78-73.18 52.42-92.16C479.55 260.85 496 220.37 496 176 496 78.8 417.2 0 320 0z"/></svg>`);
Icon_1.default.add("tape", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><path d="M624 432H362.3c52.1-41 85.7-104.5 85.7-176 0-123.7-100.3-224-224-224S0 132.3 0 256s100.3 224 224 224h400c8.8 0 16-7.2 16-16v-16c0-8.8-7.2-16-16-16zm-400 0c-97 0-176-79-176-176S127 80 224 80s176 79 176 176-79 176-176 176zm0-272c-53 0-96 43-96 96s43 96 96 96 96-43 96-96-43-96-96-96zm0 144c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48z"/></svg>`);
Icon_1.default.add("knife", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M566.28 88.57c12.96-12.5 12.96-32.76 0-45.25L531.07 9.37c-12.96-12.5-33.98-12.5-46.94 0L319.99 160 4.76 464.14c-8.25 7.96-5.38 22.16 5.53 25.69C53.72 503.86 102.37 512 150.51 512c75.83 0 150.42-20.19 201.49-69.35l104.4-100.04c12.95-12.41 13.17-33.05.49-45.73L448 288v-80L566.28 88.57zM496 64c8.84 0 16 7.16 16 16s-7.16 16-16 16-16-7.16-16-16 7.16-16 16-16zM318.71 408.07C281.24 444.14 221.5 464 150.51 464c-23.16 0-46.79-2.1-70.07-6.17L319.4 227.28l91.99 91.99-92.68 88.8zM432 160c-8.84 0-16-7.16-16-16s7.16-16 16-16 16 7.16 16 16-7.17 16-16 16z"/></svg>`);
Icon_1.default.add("upload", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M369.83 97.98L285.94 14.1c-9-9-21.2-14.1-33.89-14.1H47.99C21.5.1 0 21.6 0 48.09v415.92C0 490.5 21.5 512 47.99 512h287.94c26.5 0 48.07-21.5 48.07-47.99V131.97c0-12.69-5.17-24.99-14.17-33.99zM255.95 51.99l76.09 76.08h-76.09V51.99zM336 464.01H47.99V48.09h159.97v103.98c0 13.3 10.7 23.99 24 23.99H336v287.95zM182.98 227.79l-72.31 71.77c-7.6 7.54-2.26 20.52 8.45 20.52H168v84c0 6.63 5.37 12 12 12h24c6.63 0 12-5.37 12-12v-84h48.88c10.71 0 16.05-12.97 8.45-20.52l-72.31-71.77c-4.99-4.95-13.05-4.95-18.04 0z"/></svg>`);
Icon_1.default.add("download", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M216 236.07c0-6.63-5.37-12-12-12h-24c-6.63 0-12 5.37-12 12v84.01h-48.88c-10.71 0-16.05 12.97-8.45 20.52l72.31 71.77c4.99 4.95 13.04 4.95 18.03 0l72.31-71.77c7.6-7.54 2.26-20.52-8.45-20.52H216v-84.01zM369.83 97.98L285.94 14.1c-9-9-21.2-14.1-33.89-14.1H47.99C21.5.1 0 21.6 0 48.09v415.92C0 490.5 21.5 512 47.99 512h287.94c26.5 0 48.07-21.5 48.07-47.99V131.97c0-12.69-5.17-24.99-14.17-33.99zM255.95 51.99l76.09 76.08h-76.09V51.99zM336 464.01H47.99V48.09h159.97v103.98c0 13.3 10.7 23.99 24 23.99H336v287.95z"/></svg>`);
Icon_1.default.add("trash", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M192 188v216c0 6.627-5.373 12-12 12h-24c-6.627 0-12-5.373-12-12V188c0-6.627 5.373-12 12-12h24c6.627 0 12 5.373 12 12zm100-12h-24c-6.627 0-12 5.373-12 12v216c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12V188c0-6.627-5.373-12-12-12zm132-96c13.255 0 24 10.745 24 24v12c0 6.627-5.373 12-12 12h-20v336c0 26.51-21.49 48-48 48H80c-26.51 0-48-21.49-48-48V128H12c-6.627 0-12-5.373-12-12v-12c0-13.255 10.745-24 24-24h74.411l34.018-56.696A48 48 0 0 1 173.589 0h100.823a48 48 0 0 1 41.16 23.304L349.589 80H424zm-269.611 0h139.223L276.16 50.913A6 6 0 0 0 271.015 48h-94.028a6 6 0 0 0-5.145 2.913L154.389 80zM368 128H80v330a6 6 0 0 0 6 6h276a6 6 0 0 0 6-6V128z"/></svg>`);
Icon_1.default.add("bars", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg>`);
Icon_1.default.add("triangle-left", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256"><path d="M191.33,31.38V224.62a15,15,0,0,1-25.64,10.62L69.07,138.62a15,15,0,0,1,0-21.24l96.62-96.62A15,15,0,0,1,191.33,31.38Z"/></svg>`);
Icon_1.default.add("triangle-right", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256"><path d="M64.67,224.62V31.38A15,15,0,0,1,90.31,20.76l96.62,96.62a15,15,0,0,1,0,21.24L90.31,235.24A15,15,0,0,1,64.67,224.62Z"/></svg>`);
Icon_1.default.add("twitter", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z"/></svg>`);
Icon_1.default.add("facebook", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 264 512"><path d="M76.7 512V283H0v-91h76.7v-71.7C76.7 42.4 124.3 0 193.8 0c33.3 0 61.9 2.5 70.2 3.6V85h-48.2c-37.8 0-45.1 18-45.1 44.3V192H256l-11.7 91h-73.6v229"/></svg>`);
Icon_1.default.add("instagram", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z"/></svg>`);
Icon_1.default.add("linkedin", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448.1 512"><path d="M100.3 448H7.4V148.9h92.9V448zM53.8 108.1C24.1 108.1 0 83.5 0 53.8S24.1 0 53.8 0s53.8 24.1 53.8 53.8-24.1 54.3-53.8 54.3zM448 448h-92.7V302.4c0-34.7-.7-79.2-48.3-79.2-48.3 0-55.7 37.7-55.7 76.7V448h-92.8V148.9h89.1v40.8h1.3c12.4-23.5 42.7-48.3 87.9-48.3 94 0 111.3 61.9 111.3 142.3V448h-.1z"/></svg>`);
Icon_1.default.add("email", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M464 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm0 48v40.805c-22.422 18.259-58.168 46.651-134.587 106.49-16.841 13.247-50.201 45.072-73.413 44.701-23.208.375-56.579-31.459-73.413-44.701C106.18 199.465 70.425 171.067 48 152.805V112h416zM48 400V214.398c22.914 18.251 55.409 43.862 104.938 82.646 21.857 17.205 60.134 55.186 103.062 54.955 42.717.231 80.509-37.199 103.053-54.947 49.528-38.783 82.032-64.401 104.947-82.653V400H48z"/></svg>`);
Icon_1.default.add("copy", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg>`);
Icon_1.default.add("cube", CustomElement_1.html `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M239.1 7.5l-208 78c-18.7 7-31.1 25-31.1 45v225.1c0 18.2 10.3 34.8 26.5 42.9l208 104c13.5 6.8 29.4 6.8 42.9 0l208-104c16.3-8.1 26.5-24.8 26.5-42.9V130.5c0-20-12.4-37.9-31.1-44.9l-208-78C262 3.4 250 3.4 239.1 7.5zm16.9 45l208 78v.3l-208 84.5-208-84.5v-.3l208-78zM48 182.6l184 74.8v190.2l-184-92v-173zm232 264.9V257.4l184-74.8v172.9l-184 92z"/></svg>`);
//Icon.add("name", html``);
////////////////////////////////////////////////////////////////////////////////
/**
 * Main UI view for the Voyager Explorer application.
 */
let MainView = class MainView extends CustomElement_1.default {
    constructor(application) {
        super();
        this.application = null;
        if (application) {
            this.application = application;
        }
    }
    get fullscreen() {
        return this.application.system.getMainComponent(CFullscreen_1.default);
    }
    firstConnected() {
        super.firstConnected();
        if (!this.application) {
            const props = {
                root: this.getAttribute("root"),
                document: this.getAttribute("document"),
                model: this.getAttribute("model"),
                geometry: this.getAttribute("geometry"),
                texture: this.getAttribute("texture"),
                quality: this.getAttribute("quality"),
            };
            this.application = new ExplorerApplication_1.default(null, props);
        }
        const system = this.application.system;
        new ContentView_1.default(system).appendTo(this);
        new ChromeView_1.default(system).appendTo(this);
        const notifications = document.createElement("div");
        notifications.setAttribute("id", Notification_1.default.stackId);
        this.appendChild(notifications);
    }
    connected() {
        this.fullscreen.fullscreenElement = this;
    }
    disconnected() {
        this.fullscreen.fullscreenElement = null;
    }
};
MainView = __decorate([
    CustomElement_1.customElement("voyager-explorer")
], MainView);
exports.default = MainView;


/***/ }),

/***/ "./ui/explorer/NodeView.ts":
/*!*********************************!*\
  !*** ./ui/explorer/NodeView.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
exports.customElement = CustomElement_1.customElement;
exports.property = CustomElement_1.property;
exports.html = CustomElement_1.html;
exports.TemplateResult = CustomElement_1.TemplateResult;
const CVNodeProvider_1 = __webpack_require__(/*! ../../components/CVNodeProvider */ "./components/CVNodeProvider.ts");
const DocumentView_1 = __webpack_require__(/*! ./DocumentView */ "./ui/explorer/DocumentView.ts");
class NodeView extends DocumentView_1.default {
    constructor() {
        super(...arguments);
        this.activeNode = null;
    }
    get nodeProvider() {
        return this.system.getMainComponent(CVNodeProvider_1.default);
    }
    connected() {
        super.connected();
        const provider = this.nodeProvider;
        provider.on("active-node", this.onActiveNodeEvent, this);
        if (provider.activeNode) {
            this.activeNode = provider.activeNode;
            this.onActiveNode(null, provider.activeNode);
        }
    }
    disconnected() {
        const provider = this.nodeProvider;
        provider.off("active-node", this.onActiveNodeEvent, this);
        if (provider.activeNode) {
            this.activeNode = null;
            this.onActiveNode(provider.activeNode, null);
        }
        super.disconnected();
    }
    onActiveNode(previous, next) {
        this.requestUpdate();
    }
    onActiveNodeEvent(event) {
        this.activeNode = event.next;
        this.onActiveNode(event.previous, event.next);
    }
}
exports.default = NodeView;


/***/ }),

/***/ "./ui/explorer/ReaderView.ts":
/*!***********************************!*\
  !*** ./ui/explorer/ReaderView.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! @ff/ui/Button */ "../../libs/ff-ui/source/Button.ts");
const DocumentView_1 = __webpack_require__(/*! ./DocumentView */ "./ui/explorer/DocumentView.ts");
////////////////////////////////////////////////////////////////////////////////
let ReaderView = class ReaderView extends DocumentView_1.default {
    constructor() {
        super(...arguments);
        this.reader = null;
    }
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-reader-view");
    }
    renderMenuEntry(entry) {
        const article = entry.article;
        return DocumentView_1.html `<div class="sv-entry" @click=${e => this.onClickArticle(e, article.id)}>
            <h1>${article.data.title}</h1>
            <p>${article.data.lead}</p>
        </div>`;
    }
    render() {
        const reader = this.reader;
        if (!reader) {
            return DocumentView_1.html `<div class="ff-placeholder">Please select a document to display its articles.</div>`;
        }
        if (!reader.activeArticle) {
            const articles = reader.articles;
            return DocumentView_1.html `<div class="sv-left"></div><div class="sv-article">
                <ff-button class="sv-nav-button" inline title="Close Article Reader" icon="close" @click=${this.onClickClose}></ff-button>
                ${articles.map(entry => this.renderMenuEntry(entry))}
            </div><div class="sv-right"></div>`;
        }
        return DocumentView_1.html `<div class="sv-left"></div><div class="sv-article">
                <ff-button class="sv-nav-button" inline title="Close Article Reader" icon="close" @click=${this.onClickClose}></ff-button>
                <ff-button class="sv-nav-button" inline title="Article Menu" icon="bars" @click=${this.onClickMenu}></ff-button>
                <div class="sv-container"></div>
            </div><div class="sv-right"></div>`;
    }
    onClickMenu(event) {
        event.stopPropagation();
        this.reader.ins.articleId.setValue("");
    }
    onClickClose(event) {
        event.stopPropagation();
        this.dispatchEvent(new CustomEvent("close"));
    }
    onClickArticle(e, articleId) {
        this.reader.ins.articleId.setValue(articleId);
    }
    updated(changedProperties) {
        super.updated(changedProperties);
        const reader = this.reader;
        if (reader && reader.activeArticle) {
            const container = this.getElementsByClassName("sv-container").item(0);
            container.innerHTML = reader.outs.content.value;
        }
    }
    onActiveDocument(previous, next) {
        if (previous) {
            this.reader.outs.content.off("value", this.onUpdate, this);
            this.reader.outs.article.off("value", this.onUpdate, this);
            this.reader = null;
        }
        if (next) {
            this.reader = next.setup.reader;
            this.reader.outs.content.on("value", this.onUpdate, this);
            this.reader.outs.article.on("value", this.onUpdate, this);
        }
    }
};
ReaderView = __decorate([
    DocumentView_1.customElement("sv-reader-view")
], ReaderView);
exports.default = ReaderView;


/***/ }),

/***/ "./ui/explorer/ShareMenu.ts":
/*!**********************************!*\
  !*** ./ui/explorer/ShareMenu.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ShareMenu_1;
Object.defineProperty(exports, "__esModule", { value: true });
const Popup_1 = __webpack_require__(/*! @ff/ui/Popup */ "../../libs/ff-ui/source/Popup.ts");
__webpack_require__(/*! @ff/ui/Button */ "../../libs/ff-ui/source/Button.ts");
__webpack_require__(/*! @ff/ui/TextEdit */ "../../libs/ff-ui/source/TextEdit.ts");
////////////////////////////////////////////////////////////////////////////////
let ShareMenu = ShareMenu_1 = class ShareMenu extends Popup_1.default {
    constructor() {
        super();
        this.position = "center";
        this.modal = true;
        this.url = window.location.href;
    }
    static show(parent) {
        const menu = new ShareMenu_1();
        parent.appendChild(menu);
        return new Promise((resolve, reject) => {
            menu.on("close", () => resolve());
        });
    }
    close() {
        this.dispatchEvent(new CustomEvent("close"));
        this.remove();
    }
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-share-menu");
    }
    render() {
        const url = encodeURIComponent(this.url);
        const title = encodeURI("Smithsonian Voyager");
        const twitterShareUrl = `http://twitter.com/share?text=${title}&url=${url}`;
        const facebookShareUrl = `https://www.facebook.com/sharer/sharer.php?u=${url}`;
        const linkedInShareUrl = `https://www.linkedin.com/shareArticle?url=${url}&mini=true&title=${title}`;
        const iFrameEmbedCode = `<iframe name="Smithsonian Voyager" src="${url}" width="800" height="450" allowfullscreen="true"></iframe>`;
        const emailUrl = `mailto:?subject=${title}&body=${url}`;
        return Popup_1.html `
        <div class="ff-flex-row">
            <div class="ff-flex-spacer ff-title">Share Experience</div>
            <ff-button icon="close" transparent class="ff-close-button" title="Close" @click=${this.close}></ff-button>
        </div>
        <div class="ff-flex-row sv-share-buttons">
            <a href=${twitterShareUrl} target="_blank" rel="noopener noreferrer"><ff-button class="sv-share-button-twitter" icon="twitter" title="Twitter"></ff-button></a>
            <a href=${facebookShareUrl} target="_blank" rel="noopener noreferrer"><ff-button class="sv-share-button-facebook" icon="facebook" title="Facebook"></ff-button></a>
            <a href=${linkedInShareUrl} target="_blank" rel="noopener noreferrer"><ff-button class="sv-share-button-linkedin" icon="linkedin" title="LinkedIn"></ff-button></a>
            <a href=${emailUrl} target="_blank"><ff-button class="sv-share-button-email" icon="email" title="Email"></ff-button></a>
        </div>
        <div class="ff-title">Embed Link</div>
        <div class="ff-flex-row sv-embed-link">
            <ff-text-edit text=${iFrameEmbedCode}></ff-text-edit>
            <ff-button icon="copy" title="Copy to Clipboard" @click=${this.onClickCopy}></ff-button>
        </div>
        `;
    }
    onClickCopy() {
        const textArea = this.getElementsByTagName("ff-text-edit").item(0);
        textArea.select();
        document.execCommand("copy");
    }
};
ShareMenu = ShareMenu_1 = __decorate([
    Popup_1.customElement("sv-share-menu")
], ShareMenu);
exports.default = ShareMenu;


/***/ }),

/***/ "./ui/explorer/TagCloud.ts":
/*!*********************************!*\
  !*** ./ui/explorer/TagCloud.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! @ff/ui/Button */ "../../libs/ff-ui/source/Button.ts");
const DocumentView_1 = __webpack_require__(/*! ./DocumentView */ "./ui/explorer/DocumentView.ts");
////////////////////////////////////////////////////////////////////////////////
let TagCloud = class TagCloud extends DocumentView_1.default {
    get activeTags() {
        return this.viewer ? this.viewer.ins.activeTags.value.split(",")
            .map(tag => tag.trim()).filter(tag => !!tag) : [];
    }
    get tagCloud() {
        return this.viewer ? this.viewer.outs.tagCloud.value.split(",")
            .map(tag => tag.trim()).filter(tag => !!tag) : [];
    }
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-bottom-bar-container", "sv-tag-cloud", "sv-transition");
        setTimeout(() => this.classList.remove("sv-transition"), 1);
    }
    render() {
        const activeTags = this.activeTags;
        const tagCloud = this.tagCloud;
        const tagButtons = tagCloud.map(tag => DocumentView_1.html `<ff-button class="sv-tag-button" transparent text=${tag}
                ?selected=${activeTags.indexOf(tag) >= 0}
                @click=${e => this.onSelectTag(tag)}></ff-button>`);
        return DocumentView_1.html `<div class="sv-blue-bar"><div class="sv-section">
                <ff-button class="sv-section-lead" transparent icon="close" title="Close Tag Menu" @click=${this.onClickClose}></ff-button>
                <div class="sv-tag-buttons">${tagButtons}</div>
        </div></div>`;
    }
    onClickClose() {
        this.viewer.ins.annotationsVisible.setValue(false);
    }
    onSelectTag(tag) {
        let activeTags = this.activeTags;
        const radioTags = this.viewer.ins.radioTags.value;
        const index = activeTags.indexOf(tag);
        if (index >= 0 && !radioTags) {
            activeTags.splice(index, 1);
        }
        else if (index < 0) {
            if (radioTags) {
                activeTags = [tag];
            }
            else {
                activeTags.push(tag);
            }
        }
        this.viewer.ins.activeTags.setValue(activeTags.join(", "));
    }
    onActiveDocument(previous, next) {
        if (previous) {
            this.viewer.ins.activeTags.off("value", this.onUpdate, this);
            this.viewer.outs.tagCloud.off("value", this.onUpdate, this);
        }
        if (next) {
            this.viewer = next.setup.viewer;
            this.viewer.ins.activeTags.on("value", this.onUpdate, this);
            this.viewer.outs.tagCloud.on("value", this.onUpdate, this);
        }
    }
};
TagCloud = __decorate([
    DocumentView_1.customElement("sv-tag-cloud")
], TagCloud);
exports.default = TagCloud;


/***/ }),

/***/ "./ui/explorer/ToolBar.ts":
/*!********************************!*\
  !*** ./ui/explorer/ToolBar.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const SystemView_1 = __webpack_require__(/*! @ff/scene/ui/SystemView */ "../../libs/ff-scene/source/ui/SystemView.ts");
const CVToolProvider_1 = __webpack_require__(/*! ../../components/CVToolProvider */ "./components/CVToolProvider.ts");
let ToolBar = class ToolBar extends SystemView_1.default {
    get toolProvider() {
        return this.system.getMainComponent(CVToolProvider_1.default);
    }
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-bottom-bar-container", "sv-transition", "sv-tool-bar");
        setTimeout(() => this.classList.remove("sv-transition"), 1);
    }
    connected() {
        super.connected();
        this.toolProvider.on("active-component", this.onUpdate, this);
    }
    disconnected() {
        this.toolProvider.off("active-component", this.onUpdate, this);
        super.disconnected();
    }
    render() {
        const tools = this.toolProvider.scopedComponents;
        const activeTool = this.toolProvider.activeComponent;
        const toolButtons = tools.map(tool => SystemView_1.html `<ff-button class="sv-tool-button" transparent text=${tool.text} icon=${tool.icon}
                ?selected=${tool === activeTool} @click=${e => this.onSelectTool(tool)}></ff-button>`);
        return SystemView_1.html `<div class="sv-blue-bar">${activeTool ? activeTool.createView() : null}
            <div class="sv-section">
                <ff-button class="sv-section-lead" transparent icon="close" title="Close Tools" @click=${this.onClose}></ff-button>
                <div class="sv-tool-buttons">${toolButtons}</div>
                <sv-tool-menu-view .system=${this.system}></sv-tool-menu-view>
            </div></div>`;
    }
    onSelectTool(tool) {
        this.toolProvider.activeComponent = tool;
    }
    onClose(event) {
        this.dispatchEvent(new CustomEvent("close"));
        event.stopPropagation();
    }
};
ToolBar = __decorate([
    SystemView_1.customElement("sv-tool-bar")
], ToolBar);
exports.default = ToolBar;


/***/ }),

/***/ "./ui/explorer/TourMenu.ts":
/*!*********************************!*\
  !*** ./ui/explorer/TourMenu.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CustomElement_1 = __webpack_require__(/*! @ff/ui/CustomElement */ "../../libs/ff-ui/source/CustomElement.ts");
__webpack_require__(/*! @ff/ui/Button */ "../../libs/ff-ui/source/Button.ts");
let TourMenu = class TourMenu extends CustomElement_1.default {
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-document-overlay", "sv-article", "sv-tour-menu");
    }
    renderEntry(tour, index) {
        return CustomElement_1.html `<div class="sv-entry" @click=${e => this.onClickTour(e, index)}>
            <h1>${tour.title}</h1>
            <p>${tour.lead}</p>
        </div>`;
    }
    render() {
        const tours = this.tours;
        if (tours.length === 0) {
            return CustomElement_1.html `<div class="sv-entry">
                <h1>No tours available.</h1>
            </div>`;
        }
        return CustomElement_1.html `<div class="ff-scroll-y">
            ${tours.map((tour, index) => this.renderEntry(tour, index))}
        </div>`;
    }
    onClickTour(e, index) {
        e.stopPropagation();
        this.dispatchEvent(new CustomEvent("select", {
            detail: { index }
        }));
    }
};
__decorate([
    CustomElement_1.property({ attribute: false })
], TourMenu.prototype, "tours", void 0);
TourMenu = __decorate([
    CustomElement_1.customElement("sv-tour-menu")
], TourMenu);
exports.default = TourMenu;


/***/ }),

/***/ "./ui/explorer/TourNavigator.ts":
/*!**************************************!*\
  !*** ./ui/explorer/TourNavigator.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! @ff/ui/Button */ "../../libs/ff-ui/source/Button.ts");
const DocumentView_1 = __webpack_require__(/*! ./DocumentView */ "./ui/explorer/DocumentView.ts");
////////////////////////////////////////////////////////////////////////////////
let TourNavigator = class TourNavigator extends DocumentView_1.default {
    firstConnected() {
        super.firstConnected();
        this.classList.add("sv-bottom-bar-container", "sv-tour-navigator", "sv-transition");
        setTimeout(() => this.classList.remove("sv-transition"), 1);
    }
    render() {
        const tours = this.tours;
        const activeTour = tours.activeTour;
        let title, info;
        if (tours && activeTour) {
            const stepNumber = tours.outs.stepIndex.value + 1;
            const stepCount = tours.outs.stepCount.value;
            title = stepCount > 0 ? tours.outs.stepTitle.value : tours.outs.tourTitle.value;
            info = stepCount > 0 ? `Step ${stepNumber} of ${stepCount}` : "No tour steps defined";
        }
        else {
            title = "No tour selected";
            info = "---";
        }
        return DocumentView_1.html `<div class="sv-blue-bar"><div class="sv-section">
            <ff-button class="sv-section-lead" transparent icon="close" title="Exit Tour" ?disabled=${!activeTour} @click=${this.onClickExit}></ff-button>
            <div class="ff-ellipsis sv-content">
                <div class="ff-ellipsis sv-title">${title}</div>
                <div class="ff-ellipsis sv-text">${info}</div>
            </div>
            <ff-button class="sv-section-trail" transparent icon="bars" title="Show Tour Menu" @click=${this.onClickMenu}></ff-button>
            <ff-button class="sv-section-trail" transparent icon="triangle-left" title="Go Backward" ?disabled=${!activeTour} @click=${this.onClickPrevious}></ff-button>
            <ff-button class="sv-section-trail" transparent icon="triangle-right" title="Go Forward" ?disabled=${!activeTour} @click=${this.onClickNext}></ff-button>
        </div></div>`;
    }
    onClickExit() {
        // disable tours
        this.tours.ins.enabled.setValue(false);
    }
    onClickMenu() {
        // enter tour menu
        this.tours.ins.tourIndex.setValue(-1);
    }
    onClickPrevious() {
        // go to previous tour step
        this.tours.ins.previous.set();
    }
    onClickNext() {
        // go to next tour step
        this.tours.ins.next.set();
    }
    onActiveDocument(previous, next) {
        if (previous) {
            this.tours.outs.tourIndex.off("value", this.onUpdate, this);
            this.tours.outs.stepIndex.off("value", this.onUpdate, this);
        }
        if (next) {
            this.tours = next.setup.tours;
            this.tours.outs.tourIndex.on("value", this.onUpdate, this);
            this.tours.outs.stepIndex.on("value", this.onUpdate, this);
        }
        this.requestUpdate();
    }
};
TourNavigator = __decorate([
    DocumentView_1.customElement("sv-tour-navigator")
], TourNavigator);
exports.default = TourNavigator;


/***/ }),

/***/ "./ui/explorer/styles.scss":
/*!*********************************!*\
  !*** ./ui/explorer/styles.scss ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./utils/Pin.ts":
/*!**********************!*\
  !*** ./utils/Pin.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __webpack_require__(/*! three */ "three");
////////////////////////////////////////////////////////////////////////////////
class Pin extends THREE.Group {
    constructor() {
        super();
        const needlePoints = [
            0, 0,
            0.25, 0.4,
            0.4, 10,
        ];
        const handlePoints = [
            0, 10,
            3.4, 10,
            3.5, 10.1,
            3.5, 11,
            3.45, 11.1,
            2.05, 12.5,
            2, 12.6,
            2, 17.4,
            2.05, 17.5,
            3.45, 18.9,
            3.5, 19,
            3.5, 19.9,
            3.4, 20,
            0, 20,
        ];
        const needleMaterial = new THREE.MeshStandardMaterial({ color: "white", metalness: 1 });
        needleMaterial.transparent = true;
        const needle = new THREE.Mesh(this.createLatheGeometry(needlePoints), needleMaterial);
        const handleMaterial = new THREE.MeshStandardMaterial(({ color: "#ffcd00", roughness: 0.8, metalness: 0.1 }));
        handleMaterial.transparent = true;
        const handle = new THREE.Mesh(this.createLatheGeometry(handlePoints), handleMaterial);
        needle.matrixAutoUpdate = false;
        this.add(needle);
        handle.matrixAutoUpdate = false;
        this.add(handle);
    }
    dispose() {
    }
    createLatheGeometry(points) {
        const vectors = [];
        for (let i = 0, n = points.length; i < n; i += 2) {
            vectors.push(new THREE.Vector2(points[i], points[i + 1]));
        }
        return new THREE.LatheBufferGeometry(vectors, 16);
    }
}
exports.default = Pin;


/***/ }),

/***/ "./utils/unitScaleFactor.ts":
/*!**********************************!*\
  !*** ./utils/unitScaleFactor.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 3D Foundation Project
 * Copyright 2019 Smithsonian Institution
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const common_1 = __webpack_require__(/*! client/schema/common */ "./schema/common.ts");
////////////////////////////////////////////////////////////////////////////////
const _unitScaleFactor = {
    "mm": { "mm": 1, "cm": 0.1, "m": 0.001, "km": 1, "in": 0.0393701, "ft": 0.00328084, "yd": 0.00109361, "mi": 1 },
    "cm": { "mm": 10, "cm": 1, "m": 0.01, "km": 1, "in": 0.393701, "ft": 0.0328084, "yd": 0.0109361, "mi": 1 },
    "m": { "mm": 1000, "cm": 100, "m": 1, "km": 1, "in": 39.3701, "ft": 3.28084, "yd": 1.09361, "mi": 1 },
    "km": { "mm": 1000000, "cm": 100000, "m": 1000, "km": 1, "in": 39370.1, "ft": 3280.84, "yd": 1093.61, "mi": 1 },
    "in": { "mm": 25.4, "cm": 2.54, "m": 0.0254, "km": 1, "in": 1, "ft": 0.0833333, "yd": 0.0277778, "mi": 1 },
    "ft": { "mm": 304.8, "cm": 30.48, "m": 0.3048, "km": 1, "in": 12, "ft": 1, "yd": 0.333334, "mi": 1 },
    "yd": { "mm": 914.4, "cm": 91.44, "m": 0.9144, "km": 1, "in": 36, "ft": 3, "yd": 1, "mi": 1 },
    "mi": { "mm": 1.609e+6, "cm": 1.609e+5, "m": 1.609e+3, "km": 1, "in": 63346456.693, "ft": 5278871.391, "yd": 1759623.797, "mi": 1 },
};
function default_1(from, to) {
    const fromType = common_1.EUnitType[from];
    const toType = common_1.EUnitType[to];
    return _unitScaleFactor[fromType][toType] || 1;
}
exports.default = default_1;


/***/ }),

/***/ "three":
/*!************************!*\
  !*** external "THREE" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = THREE;

/***/ })

/******/ });
//# sourceMappingURL=voyager-explorer.dev.js.map